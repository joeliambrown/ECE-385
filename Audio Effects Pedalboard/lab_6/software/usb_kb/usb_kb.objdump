
usb_kb.elf:     file format elf32-littlenios2
usb_kb.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000230

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x00017d90 memsz 0x00017d90 flags r-x
    LOAD off    0x00018db0 vaddr 0x08017db0 paddr 0x08019d38 align 2**12
         filesz 0x00001f88 memsz 0x00001f88 flags rw-
    LOAD off    0x0001bcc0 vaddr 0x0801bcc0 paddr 0x0801bcc0 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001757c  08000230  08000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000604  080177ac  080177ac  000187ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001f88  08017db0  08019d38  00018db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  0801bcc0  0801bcc0  0001bcc0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  0001ad38  2**0
                  CONTENTS
  7 .sdram        00000000  0801be20  0801be20  0001ad38  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001ad38  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001158  00000000  00000000  0001ad60  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002ad19  00000000  00000000  0001beb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000ae5d  00000000  00000000  00046bd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000e475  00000000  00000000  00051a2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002cc8  00000000  00000000  0005fea4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004905  00000000  00000000  00062b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001e308  00000000  00000000  00067471  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  0008577c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001df8  00000000  00000000  000857c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0008b4ba  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0008b4bd  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0008b4c9  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0008b4ca  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0008b4cb  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0008b4cf  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0008b4d3  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0008b4d7  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0008b4e2  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0008b4ed  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000009  00000000  00000000  0008b4f8  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000002d  00000000  00000000  0008b501  2**0
                  CONTENTS, READONLY
 30 .jdi          00005017  00000000  00000000  0008b52e  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000aa065  00000000  00000000  00090545  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
08000230 l    d  .text	00000000 .text
080177ac l    d  .rodata	00000000 .rodata
08017db0 l    d  .rwdata	00000000 .rwdata
0801bcc0 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
0801be20 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../usb_kb_bsp//obj/HAL/src/crt0.o
08000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 palette_test.c
08019ce4 l     O .rwdata	00000004 vga_ctrl
08017db0 l     O .rwdata	00000170 colors
00000000 l    df *ABS*	00000000 sgtl5000.c
00000000 l    df *ABS*	00000000 sgtl5000_test.c
08019ce8 l     O .rwdata	00000004 vga_ctrl
08017f20 l     O .rwdata	00000170 colors
00000000 l    df *ABS*	00000000 text_mode_vga_color.c
08019cec l     O .rwdata	00000004 vga_ctrl
08018090 l     O .rwdata	00000170 colors
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
08017b8a l     O .rodata	00000010 zeroes.4389
08017b9a l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 vfprintf.c
08017baa l     O .rodata	00000010 zeroes.4404
08006fe0 l     F .text	000000bc __sbprintf
08017bba l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
080071f0 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
08008d48 l     F .text	00000008 __fp_unlock
08008d5c l     F .text	0000019c __sinit.part.1
08008ef8 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
08018200 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
08018644 l     O .rwdata	00000020 lc_ctype_charset
08018624 l     O .rwdata	00000020 lc_message_charset
08018664 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
08017bec l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
08017d10 l     O .rodata	00000010 zeroes.4333
08017d20 l     O .rodata	00000010 blanks.4332
00000000 l    df *ABS*	00000000 vfprintf.c
0800d93c l     F .text	000000fc __sprint_r.part.0
08017d30 l     O .rodata	00000010 zeroes.4349
0800ef78 l     F .text	000000bc __sbprintf
08017d40 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
08012e8c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
08012fa0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
08012fcc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
080130c0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
080131a8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
08013294 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
08013470 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08019d20 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
08013714 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
08013850 l     F .text	00000034 alt_dev_reg
08018c4c l     O .rwdata	00000038 i2c_0
08018c84 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
0801392c l     F .text	00000110 optional_irq_callback
08013a8c l     F .text	0000009c alt_avalon_i2c_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
08015768 l     F .text	0000020c altera_avalon_jtag_uart_irq
08015974 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
08015fac l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08016344 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
08016834 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
08016994 l     F .text	0000003c alt_get_errno
080169d0 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0801bcf4 g     O .bss	00000004 alt_instruction_exception_handler
0800ba10 g     F .text	00000074 _mprec_log10
0800bafc g     F .text	0000008c __any_on
0800f52c g     F .text	00000054 _isatty_r
08017bf8 g     O .rodata	00000028 __mprec_tinytens
080133ac g     F .text	0000007c alt_main
08002780 g     F .text	000000c0 _puts_r
0801bd20 g     O .bss	00000100 alt_irq
0800f580 g     F .text	00000060 _lseek_r
08019d38 g       *ABS*	00000000 __flash_rwdata_start
080118c8 g     F .text	00000088 .hidden __eqdf2
0801be20 g       *ABS*	00000000 __alt_heap_start
08002744 g     F .text	0000003c printf
0800f798 g     F .text	0000009c _wcrtomb_r
0800c28c g     F .text	0000005c __sseek
080090a8 g     F .text	00000010 __sinit
0800f640 g     F .text	00000140 __swbuf_r
08009b7c g     F .text	0000007c _setlocale_r
08008f00 g     F .text	00000078 __sfmoreglue
08014184 g     F .text	000000a8 alt_avalon_i2c_rx_read
0801344c g     F .text	00000024 __malloc_unlock
08000dd4 g     F .text	00000b70 textVGAColorScreenSaver
0801539c g     F .text	00000044 alt_avalon_i2c_enabled_ints_get
08013f08 g     F .text	00000094 alt_avalon_i2c_master_config_speed_get
0800a84c g     F .text	0000015c memmove
08009090 g     F .text	00000018 _cleanup
08014bec g     F .text	0000020c alt_avalon_i2c_master_transmit_using_interrupts
0800aad0 g     F .text	000000a8 _Balloc
08002550 g     F .text	00000070 .hidden __fixsfsi
08011950 g     F .text	000000dc .hidden __gtdf2
08017024 g     F .text	00000024 altera_nios2_gen2_irq_init
08000000 g     F .entry	0000000c __reset
08000020 g       *ABS*	00000000 __flash_exceptions_start
0800f4d0 g     F .text	0000005c _fstat_r
0801bcd8 g     O .bss	00000004 errno
0800c208 g     F .text	00000008 __seofread
0800c59c g     F .text	000013a0 ___svfiprintf_internal_r
0801bce0 g     O .bss	00000004 alt_argv
08021ce4 g       *ABS*	00000000 _gp
080136e4 g     F .text	00000030 usleep
080153e0 g     F .text	0000004c alt_avalon_i2c_rx_fifo_threshold_get
0800206c g     F .text	000004e4 .hidden __subsf3
08000b54 g     F .text	00000050 textVGAColorClr
08014098 g     F .text	00000044 alt_avalon_i2c_is_busy
08018acc g     O .rwdata	00000180 alt_fd_list
08013e3c g     F .text	000000cc alt_avalon_i2c_master_config_set
080164e4 g     F .text	00000090 alt_find_dev
0800a704 g     F .text	00000148 memcpy
08008d50 g     F .text	0000000c _cleanup_r
08012d08 g     F .text	000000dc .hidden __floatsidf
08016918 g     F .text	0000007c alt_io_redirect
08011a2c g     F .text	000000f4 .hidden __ltdf2
080177ac g       *ABS*	00000000 __DTOR_END__
08014a2c g     F .text	000001c0 alt_avalon_i2c_master_transmit
08002840 g     F .text	00000014 puts
08017214 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0800c0ec g     F .text	00000074 __fpclassifyd
0800b96c g     F .text	000000a4 __ratio
0800ef5c g     F .text	0000001c __vfiprintf_internal
08015b6c g     F .text	0000021c altera_avalon_jtag_uart_read
08002714 g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
08001a9c g     F .text	00000064 .hidden __udivsi3
080130fc g     F .text	000000ac isatty
08017c48 g     O .rodata	000000c8 __mprec_tens
08009bf8 g     F .text	0000000c __locale_charset
08013ca8 g     F .text	00000098 alt_avalon_i2c_enable
0801bcd4 g     O .bss	00000004 __malloc_top_pad
080152d0 g     F .text	00000068 alt_avalon_i2c_int_disable
08019cf8 g     O .rwdata	00000004 __mb_cur_max
08009c28 g     F .text	0000000c _localeconv_r
0800af04 g     F .text	0000003c __i2b
0800952c g     F .text	000004c8 __sfvwrite_r
0800c160 g     F .text	00000054 _sbrk_r
0800f5e0 g     F .text	00000060 _read_r
08000420 g     F .text	000000b4 SGTL5000_Reg_Rd
08019d18 g     O .rwdata	00000004 alt_max_fd
0800f1c4 g     F .text	000000f0 _fclose_r
08008d18 g     F .text	00000030 fflush
0801bcd0 g     O .bss	00000004 __malloc_max_sbrked_mem
08014df8 g     F .text	00000210 alt_avalon_i2c_master_receive
0801064c g     F .text	000008ac .hidden __adddf3
0800b714 g     F .text	0000010c __b2d
08010088 g     F .text	000005c4 .hidden __umoddi3
080132d0 g     F .text	000000dc lseek
08015338 g     F .text	00000064 alt_avalon_i2c_int_enable
08019cf0 g     O .rwdata	00000004 _global_impure_ptr
0800bb88 g     F .text	00000564 _realloc_r
0801be20 g       *ABS*	00000000 __bss_end
08016744 g     F .text	000000f0 alt_iic_isr_register
08016f1c g     F .text	00000108 alt_tick
0800fa8c g     F .text	000005fc .hidden __udivdi3
080151f8 g     F .text	00000058 alt_avalon_i2c_int_status_get
0800f42c g     F .text	00000024 _fputwc_r
08017c20 g     O .rodata	00000028 __mprec_bigtens
0800ace8 g     F .text	00000104 __s2b
08012de4 g     F .text	000000a8 .hidden __floatunsidf
0800b454 g     F .text	00000060 __mcmp
080090c8 g     F .text	00000018 __fp_lock_all
080166f8 g     F .text	0000004c alt_ic_irq_enabled
08016e80 g     F .text	0000009c alt_alarm_stop
08013b28 g     F .text	00000054 alt_avalon_i2c_register_callback
0801bce8 g     O .bss	00000004 alt_irq_active
08013b7c g     F .text	000000ec alt_avalon_i2c_init
080000fc g     F .exceptions	000000d4 alt_irq_handler
08018aa4 g     O .rwdata	00000028 alt_dev_null
08016324 g     F .text	00000020 alt_dcache_flush_all
0800adec g     F .text	00000068 __hi0bits
08012c88 g     F .text	00000080 .hidden __fixdfsi
08019d38 g       *ABS*	00000000 __ram_rwdata_end
08019d10 g     O .rwdata	00000008 alt_dev_list
08013750 g     F .text	00000100 write
08017378 g     F .text	000000a0 _putc_r
080144b8 g     F .text	0000004c alt_avalon_i2c_check_arblost
08001b80 g     F .text	000000bc .hidden __gtsf2
08015294 g     F .text	0000003c alt_avalon_i2c_int_clear
08017db0 g       *ABS*	00000000 __ram_rodata_end
08013008 g     F .text	000000b8 fstat
08011a2c g     F .text	000000f4 .hidden __ledf2
08019d24 g     O .rwdata	00000008 alt_avalon_i2c_list
0800b1cc g     F .text	00000140 __pow5mult
0800da50 g     F .text	0000150c ___vfiprintf_internal_r
0801bcc8 g     O .bss	00000004 __nlocale_changed
08001b00 g     F .text	00000058 .hidden __umodsi3
0801be20 g       *ABS*	00000000 end
080156a8 g     F .text	000000c0 altera_avalon_jtag_uart_init
080001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
08013c68 g     F .text	00000040 alt_avalon_i2c_open
080177ac g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
08014640 g     F .text	000000e8 alt_avalon_i2c_master_tx
08016024 g     F .text	0000007c alt_avalon_timer_sc_init
080026b0 g     F .text	00000064 .hidden __clzsi2
08015d88 g     F .text	00000224 altera_avalon_jtag_uart_write
080090b8 g     F .text	00000004 __sfp_lock_acquire
0800a620 g     F .text	000000e4 memchr
08004ce8 g     F .text	000022dc ___vfprintf_internal_r
080028d0 g     F .text	00000058 _sprintf_r
0800921c g     F .text	00000310 _free_r
08016c18 g     F .text	0000022c alt_printf
08009c04 g     F .text	00000010 __locale_mb_cur_max
080175f8 g     F .text	00000180 __call_exitprocs
0801bcc4 g     O .bss	00000004 __mlocale_changed
08013a3c g     F .text	00000050 alt_avalon_i2c_register_optional_irq_handler
08019cfc g     O .rwdata	00000004 __malloc_sbrk_base
08000230 g     F .text	0000003c _start
0801bcec g     O .bss	00000004 _alt_tick_rate
08015008 g     F .text	000001f0 alt_avalon_i2c_master_receive_using_interrupts
0800286c g     F .text	00000064 rand
0801542c g     F .text	00000064 alt_avalon_i2c_rx_fifo_threshold_set
0800b30c g     F .text	00000148 __lshift
0801bcf0 g     O .bss	00000004 _alt_nticks
080134ac g     F .text	00000104 read
080138bc g     F .text	00000070 alt_sys_init
0800c3cc g     F .text	000001d0 __ssprint_r
080174e0 g     F .text	00000118 __register_exitproc
08014864 g     F .text	000001c8 alt_avalon_i2c_master_tx_rx
0800af40 g     F .text	0000028c __multiply
08015a14 g     F .text	00000068 altera_avalon_jtag_uart_close
08001b58 g     F .text	00000028 .hidden __mulsi3
08017db0 g       *ABS*	00000000 __ram_rwdata_start
080177ac g       *ABS*	00000000 __ram_rodata_start
0801bcf8 g     O .bss	00000028 __malloc_current_mallinfo
0800b820 g     F .text	0000014c __d2b
080005b8 g     F .text	00000048 clearLED
08015544 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
08017150 g     F .text	000000c4 alt_get_fd
080161cc g     F .text	00000158 alt_busy_sleep
0800f094 g     F .text	00000054 _close_r
080172fc g     F .text	0000007c memcmp
080140dc g     F .text	000000a8 alt_avalon_i2c_rx_read_available
08015604 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0801be20 g       *ABS*	00000000 __alt_stack_base
08015654 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0800709c g     F .text	00000154 __swsetup_r
08010ef8 g     F .text	000009d0 .hidden __divdf3
08008f78 g     F .text	00000118 __sfp
0800ba84 g     F .text	00000078 __copybits
0801869c g     O .rwdata	00000408 __malloc_av_
080090c4 g     F .text	00000004 __sinit_lock_release
08011b20 g     F .text	0000086c .hidden __muldf3
0800c1b4 g     F .text	00000054 __sread
08017048 g     F .text	00000108 alt_find_file
08016380 g     F .text	000000a4 alt_dev_llist_insert
08013428 g     F .text	00000024 __malloc_lock
08013634 g     F .text	000000b0 sbrk
08002a2c g     F .text	000022bc ___svfprintf_internal_r
08014504 g     F .text	0000013c alt_avalon_i2c_interrupt_transaction_status
0801446c g     F .text	0000004c alt_avalon_i2c_check_nack
08008cbc g     F .text	0000005c _fflush_r
0800f0e8 g     F .text	000000dc _calloc_r
0801bcc0 g       *ABS*	00000000 __bss_start
0800a9a8 g     F .text	00000128 memset
08000850 g     F .text	00000304 main
08014438 g     F .text	00000034 alt_avalon_i2c_master_target_set
0801bce4 g     O .bss	00000004 alt_envp
0801bccc g     O .bss	00000004 __malloc_max_total_mem
080155a4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0800f780 g     F .text	00000018 __swbuf
08002854 g     F .text	00000018 srand
08015250 g     F .text	00000044 alt_avalon_i2c_int_raw_status_get
0800c2e8 g     F .text	00000008 __sclose
0c000000 g       *ABS*	00000000 __alt_heap_limit
0800f2b4 g     F .text	00000014 fclose
08007418 g     F .text	00001688 _dtoa_r
08009e14 g     F .text	0000080c _malloc_r
0800f8f4 g     F .text	00000030 __ascii_wctomb
08019d1c g     O .rwdata	00000004 alt_errno
080099f4 g     F .text	000000c4 _fwalk
08017418 g     F .text	000000c8 putc
080019a4 g     F .text	00000084 .hidden __divsi3
08000cb4 g     F .text	00000120 setColorPalette
08000718 g     F .text	00000138 printSignedHex1
080090f8 g     F .text	00000124 _malloc_trim_r
080177ac g       *ABS*	00000000 __CTOR_END__
08001c3c g     F .text	00000430 .hidden __mulsf3
0800c2f0 g     F .text	000000dc strcmp
080177ac g       *ABS*	00000000 __flash_rodata_start
080177ac g       *ABS*	00000000 __DTOR_LIST__
080004d4 g     F .text	000000a0 SGTL5000_Reg_Wr
080118c8 g     F .text	00000088 .hidden __nedf2
08013884 g     F .text	00000038 alt_irq_init
080135b0 g     F .text	00000084 alt_release_fd
08002928 g     F .text	0000006c sprintf
08017a41 g     O .rodata	00000100 .hidden __clz_tab
0801bcc0 g     O .bss	00000004 _PathLocale
080172b0 g     F .text	00000014 atexit
08001b80 g     F .text	000000bc .hidden __gesf2
0800f034 g     F .text	00000060 _write_r
08009c34 g     F .text	00000018 setlocale
08019cf4 g     O .rwdata	00000004 _impure_ptr
0801bcdc g     O .bss	00000004 alt_argc
08008aa0 g     F .text	0000021c __sflush_r
08016484 g     F .text	00000060 _do_dtors
08009c20 g     F .text	00000008 __locale_cjk_lang
08014400 g     F .text	00000038 alt_avalon_i2c_master_target_get
08014310 g     F .text	000000f0 alt_avalon_i2c_send_address
08000020 g       .exceptions	00000000 alt_irq_entry
0800b6b0 g     F .text	00000064 __ulp
080090e0 g     F .text	00000018 __fp_unlock_all
08019d08 g     O .rwdata	00000008 alt_fs_list
08000020 g       *ABS*	00000000 __ram_exceptions_start
08009c4c g     F .text	0000000c localeconv
08000574 g     F .text	00000044 setLED
080154dc g     F .text	00000068 alt_avalon_i2c_tfr_cmd_fifo_threshold_set
08016594 g     F .text	00000050 alt_ic_isr_register
08013d40 g     F .text	0000004c alt_avalon_i2c_disable
08019d38 g       *ABS*	00000000 _edata
0801be20 g       *ABS*	00000000 _end
0800f2c8 g     F .text	00000164 __fputwc
08000230 g       *ABS*	00000000 __ram_exceptions_end
08015a7c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
08000ba4 g     F .text	00000110 textVGADrawColorText
08013d8c g     F .text	000000b0 alt_avalon_i2c_master_config_get
0801666c g     F .text	0000008c alt_ic_irq_disable
0800c210 g     F .text	0000007c __swrite
08019d00 g     O .rwdata	00000004 __malloc_trim_threshold
08009c14 g     F .text	0000000c __locale_msgcharset
080172c4 g     F .text	00000038 exit
08009ab8 g     F .text	000000c4 _fwalk_reent
080025c0 g     F .text	000000f0 .hidden __floatunsisf
0800b4b4 g     F .text	000001fc __mdiff
08001a28 g     F .text	00000074 .hidden __modsi3
0c000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
080090bc g     F .text	00000004 __sfp_lock_release
08000000 g       *ABS*	00000000 __alt_mem_sdram
08013f9c g     F .text	000000fc alt_avalon_i2c_master_config_speed_set
0801422c g     F .text	000000e4 alt_avalon_i2c_cmd_write
08001944 g     F .text	00000060 .hidden __fixunssfsi
08017778 g     F .text	00000034 _exit
080160a0 g     F .text	0000012c alt_alarm_start
08000600 g     F .text	00000118 printSignedHex0
0800f980 g     F .text	0000010c .hidden __muldi3
08009c58 g     F .text	000001bc __smakebuf_r
08002994 g     F .text	00000098 strlen
08016abc g     F .text	0000015c open
08011950 g     F .text	000000dc .hidden __gedf2
08016e44 g     F .text	0000003c alt_putchar
08019d04 g     O .rwdata	00000004 __wctomb
0800da38 g     F .text	00000018 __sprint_r
08016574 g     F .text	00000020 alt_icache_flush_all
08019d2c g     O .rwdata	00000004 alt_priority_mask
080165e4 g     F .text	00000088 alt_ic_irq_enable
08006fc4 g     F .text	0000001c __vfprintf_internal
0800f924 g     F .text	0000005c _wctomb_r
0801238c g     F .text	000008fc .hidden __subdf3
0800ae54 g     F .text	000000b0 __lo0bits
08019d30 g     O .rwdata	00000008 alt_alarm_list
08016424 g     F .text	00000060 _do_ctors
0800f834 g     F .text	000000c0 wcrtomb
08012ec8 g     F .text	000000d8 close
08015490 g     F .text	0000004c alt_avalon_i2c_tfr_cmd_fifo_threshold_get
0800026c g     F .text	000001b4 paletteTest
08013210 g     F .text	00000084 alt_load
08014728 g     F .text	0000013c alt_avalon_i2c_master_rx
0800f450 g     F .text	00000080 fputwc
080090c0 g     F .text	00000004 __sinit_lock_acquire
0800aba0 g     F .text	00000148 __multadd
0800ab78 g     F .text	00000028 _Bfree



Disassembly of section .entry:

08000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000000:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000004:	08408c14 	ori	at,at,560
    jmp r1
 8000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000fc0 	call	80000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000706 	br	80000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 800008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8000098:	80001d00 	call	80001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 800009c:	1000021e 	bne	r2,zero,80000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000f8:	ef80083a 	eret

080000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000fc:	defff904 	addi	sp,sp,-28
 8000100:	dfc00615 	stw	ra,24(sp)
 8000104:	df000515 	stw	fp,20(sp)
 8000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 800010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000110:	0005313a 	rdctl	r2,ipending
 8000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000124:	00800044 	movi	r2,1
 8000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800012c:	e0fffb17 	ldw	r3,-20(fp)
 8000130:	e0bffc17 	ldw	r2,-16(fp)
 8000134:	1884703a 	and	r2,r3,r2
 8000138:	10001426 	beq	r2,zero,800018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800013c:	008200b4 	movhi	r2,2050
 8000140:	10af4804 	addi	r2,r2,-17120
 8000144:	e0fffd17 	ldw	r3,-12(fp)
 8000148:	180690fa 	slli	r3,r3,3
 800014c:	10c5883a 	add	r2,r2,r3
 8000150:	10c00017 	ldw	r3,0(r2)
 8000154:	008200b4 	movhi	r2,2050
 8000158:	10af4804 	addi	r2,r2,-17120
 800015c:	e13ffd17 	ldw	r4,-12(fp)
 8000160:	200890fa 	slli	r4,r4,3
 8000164:	1105883a 	add	r2,r2,r4
 8000168:	10800104 	addi	r2,r2,4
 800016c:	10800017 	ldw	r2,0(r2)
 8000170:	1009883a 	mov	r4,r2
 8000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800017c:	0005313a 	rdctl	r2,ipending
 8000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000184:	e0bfff17 	ldw	r2,-4(fp)
 8000188:	00000706 	br	80001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800018c:	e0bffc17 	ldw	r2,-16(fp)
 8000190:	1085883a 	add	r2,r2,r2
 8000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000198:	e0bffd17 	ldw	r2,-12(fp)
 800019c:	10800044 	addi	r2,r2,1
 80001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80001a4:	003fe106 	br	800012c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 80001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 80001ac:	e0bffb17 	ldw	r2,-20(fp)
 80001b0:	103fdb1e 	bne	r2,zero,8000120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001b4:	0001883a 	nop
}
 80001b8:	0001883a 	nop
 80001bc:	e037883a 	mov	sp,fp
 80001c0:	dfc00117 	ldw	ra,4(sp)
 80001c4:	df000017 	ldw	fp,0(sp)
 80001c8:	dec00204 	addi	sp,sp,8
 80001cc:	f800283a 	ret

080001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80001d0:	defffb04 	addi	sp,sp,-20
 80001d4:	dfc00415 	stw	ra,16(sp)
 80001d8:	df000315 	stw	fp,12(sp)
 80001dc:	df000304 	addi	fp,sp,12
 80001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 80001e4:	00bfffc4 	movi	r2,-1
 80001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 80001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 80001f0:	d0a80417 	ldw	r2,-24560(gp)
 80001f4:	10000726 	beq	r2,zero,8000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 80001f8:	d0a80417 	ldw	r2,-24560(gp)
 80001fc:	e0fffd17 	ldw	r3,-12(fp)
 8000200:	e1bffe17 	ldw	r6,-8(fp)
 8000204:	e17fff17 	ldw	r5,-4(fp)
 8000208:	1809883a 	mov	r4,r3
 800020c:	103ee83a 	callr	r2
 8000210:	00000206 	br	800021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 8000218:	0005883a 	mov	r2,zero
}
 800021c:	e037883a 	mov	sp,fp
 8000220:	dfc00117 	ldw	ra,4(sp)
 8000224:	df000017 	ldw	fp,0(sp)
 8000228:	dec00204 	addi	sp,sp,8
 800022c:	f800283a 	ret

Disassembly of section .text:

08000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000230:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 8000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 8000238:	068200b4 	movhi	gp,2050
    ori gp, gp, %lo(_gp)
 800023c:	d6873914 	ori	gp,gp,7396
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000240:	00820074 	movhi	r2,2049
    ori r2, r2, %lo(__bss_start)
 8000244:	10af3014 	ori	r2,r2,48320

    movhi r3, %hi(__bss_end)
 8000248:	00c20074 	movhi	r3,2049
    ori r3, r3, %lo(__bss_end)
 800024c:	18ef8814 	ori	r3,r3,48672

    beq r2, r3, 1f
 8000250:	10c00326 	beq	r2,r3,8000260 <_start+0x30>

0:
    stw zero, (r2)
 8000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 800025c:	10fffd36 	bltu	r2,r3,8000254 <__alt_data_end+0xfc000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000260:	80132100 	call	8013210 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000264:	80133ac0 	call	80133ac <alt_main>

08000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8000268:	003fff06 	br	8000268 <__alt_data_end+0xfc000268>

0800026c <paletteTest>:

#include "text_mode_vga_color.h"


void paletteTest()
{
 800026c:	defffa04 	addi	sp,sp,-24
 8000270:	dfc00515 	stw	ra,20(sp)
 8000274:	df000415 	stw	fp,16(sp)
 8000278:	dc400315 	stw	r17,12(sp)
 800027c:	dc000215 	stw	r16,8(sp)
 8000280:	df000404 	addi	fp,sp,16
	textVGAColorClr();
 8000284:	8000b540 	call	8000b54 <textVGAColorClr>
	textVGADrawColorText ("This text should cycle through random colors", 0, 0, 0, 1);
 8000288:	00800044 	movi	r2,1
 800028c:	d8800015 	stw	r2,0(sp)
 8000290:	000f883a 	mov	r7,zero
 8000294:	000d883a 	mov	r6,zero
 8000298:	000b883a 	mov	r5,zero
 800029c:	01020074 	movhi	r4,2049
 80002a0:	211deb04 	addi	r4,r4,30636
 80002a4:	8000ba40 	call	8000ba4 <textVGADrawColorText>

	for (int i = 0; i < 100; i ++)
 80002a8:	e03ffd15 	stw	zero,-12(fp)
 80002ac:	00005106 	br	80003f4 <paletteTest+0x188>
	{
		usleep (20000);
 80002b0:	01138804 	movi	r4,20000
 80002b4:	80136e40 	call	80136e4 <usleep>
		setColorPalette(0, 	rand() % 16, rand() % 16,rand() % 16); //set color 0 to random color;
 80002b8:	800286c0 	call	800286c <rand>
 80002bc:	1007883a 	mov	r3,r2
 80002c0:	00a00034 	movhi	r2,32768
 80002c4:	108003c4 	addi	r2,r2,15
 80002c8:	1884703a 	and	r2,r3,r2
 80002cc:	1000040e 	bge	r2,zero,80002e0 <paletteTest+0x74>
 80002d0:	10bfffc4 	addi	r2,r2,-1
 80002d4:	00fffc04 	movi	r3,-16
 80002d8:	10c4b03a 	or	r2,r2,r3
 80002dc:	10800044 	addi	r2,r2,1
 80002e0:	14003fcc 	andi	r16,r2,255
 80002e4:	800286c0 	call	800286c <rand>
 80002e8:	1007883a 	mov	r3,r2
 80002ec:	00a00034 	movhi	r2,32768
 80002f0:	108003c4 	addi	r2,r2,15
 80002f4:	1884703a 	and	r2,r3,r2
 80002f8:	1000040e 	bge	r2,zero,800030c <paletteTest+0xa0>
 80002fc:	10bfffc4 	addi	r2,r2,-1
 8000300:	00fffc04 	movi	r3,-16
 8000304:	10c4b03a 	or	r2,r2,r3
 8000308:	10800044 	addi	r2,r2,1
 800030c:	14403fcc 	andi	r17,r2,255
 8000310:	800286c0 	call	800286c <rand>
 8000314:	1007883a 	mov	r3,r2
 8000318:	00a00034 	movhi	r2,32768
 800031c:	108003c4 	addi	r2,r2,15
 8000320:	1884703a 	and	r2,r3,r2
 8000324:	1000040e 	bge	r2,zero,8000338 <paletteTest+0xcc>
 8000328:	10bfffc4 	addi	r2,r2,-1
 800032c:	00fffc04 	movi	r3,-16
 8000330:	10c4b03a 	or	r2,r2,r3
 8000334:	10800044 	addi	r2,r2,1
 8000338:	10803fcc 	andi	r2,r2,255
 800033c:	100f883a 	mov	r7,r2
 8000340:	880d883a 	mov	r6,r17
 8000344:	800b883a 	mov	r5,r16
 8000348:	0009883a 	mov	r4,zero
 800034c:	8000cb40 	call	8000cb4 <setColorPalette>
		setColorPalette(1, 	rand() % 16, rand() % 16,rand() % 16); //set color 1 to random color;
 8000350:	800286c0 	call	800286c <rand>
 8000354:	1007883a 	mov	r3,r2
 8000358:	00a00034 	movhi	r2,32768
 800035c:	108003c4 	addi	r2,r2,15
 8000360:	1884703a 	and	r2,r3,r2
 8000364:	1000040e 	bge	r2,zero,8000378 <paletteTest+0x10c>
 8000368:	10bfffc4 	addi	r2,r2,-1
 800036c:	00fffc04 	movi	r3,-16
 8000370:	10c4b03a 	or	r2,r2,r3
 8000374:	10800044 	addi	r2,r2,1
 8000378:	14003fcc 	andi	r16,r2,255
 800037c:	800286c0 	call	800286c <rand>
 8000380:	1007883a 	mov	r3,r2
 8000384:	00a00034 	movhi	r2,32768
 8000388:	108003c4 	addi	r2,r2,15
 800038c:	1884703a 	and	r2,r3,r2
 8000390:	1000040e 	bge	r2,zero,80003a4 <paletteTest+0x138>
 8000394:	10bfffc4 	addi	r2,r2,-1
 8000398:	00fffc04 	movi	r3,-16
 800039c:	10c4b03a 	or	r2,r2,r3
 80003a0:	10800044 	addi	r2,r2,1
 80003a4:	14403fcc 	andi	r17,r2,255
 80003a8:	800286c0 	call	800286c <rand>
 80003ac:	1007883a 	mov	r3,r2
 80003b0:	00a00034 	movhi	r2,32768
 80003b4:	108003c4 	addi	r2,r2,15
 80003b8:	1884703a 	and	r2,r3,r2
 80003bc:	1000040e 	bge	r2,zero,80003d0 <paletteTest+0x164>
 80003c0:	10bfffc4 	addi	r2,r2,-1
 80003c4:	00fffc04 	movi	r3,-16
 80003c8:	10c4b03a 	or	r2,r2,r3
 80003cc:	10800044 	addi	r2,r2,1
 80003d0:	10803fcc 	andi	r2,r2,255
 80003d4:	100f883a 	mov	r7,r2
 80003d8:	880d883a 	mov	r6,r17
 80003dc:	800b883a 	mov	r5,r16
 80003e0:	01000044 	movi	r4,1
 80003e4:	8000cb40 	call	8000cb4 <setColorPalette>
void paletteTest()
{
	textVGAColorClr();
	textVGADrawColorText ("This text should cycle through random colors", 0, 0, 0, 1);

	for (int i = 0; i < 100; i ++)
 80003e8:	e0bffd17 	ldw	r2,-12(fp)
 80003ec:	10800044 	addi	r2,r2,1
 80003f0:	e0bffd15 	stw	r2,-12(fp)
 80003f4:	e0bffd17 	ldw	r2,-12(fp)
 80003f8:	10801910 	cmplti	r2,r2,100
 80003fc:	103fac1e 	bne	r2,zero,80002b0 <__alt_data_end+0xfc0002b0>
		usleep (20000);
		setColorPalette(0, 	rand() % 16, rand() % 16,rand() % 16); //set color 0 to random color;
		setColorPalette(1, 	rand() % 16, rand() % 16,rand() % 16); //set color 1 to random color;
	}

}
 8000400:	0001883a 	nop
 8000404:	e6fffe04 	addi	sp,fp,-8
 8000408:	dfc00317 	ldw	ra,12(sp)
 800040c:	df000217 	ldw	fp,8(sp)
 8000410:	dc400117 	ldw	r17,4(sp)
 8000414:	dc000017 	ldw	r16,0(sp)
 8000418:	dec00404 	addi	sp,sp,16
 800041c:	f800283a 	ret

08000420 <SGTL5000_Reg_Rd>:
#include "sgtl5000.h"
#include "altera_avalon_i2c.h"
#include "altera_avalon_i2c_regs.h"

WORD SGTL5000_Reg_Rd (ALT_AVALON_I2C_DEV_t* dev, WORD ADDR)
{
 8000420:	defff804 	addi	sp,sp,-32
 8000424:	dfc00715 	stw	ra,28(sp)
 8000428:	df000615 	stw	fp,24(sp)
 800042c:	df000604 	addi	fp,sp,24
 8000430:	e13ffe15 	stw	r4,-8(fp)
 8000434:	2805883a 	mov	r2,r5
 8000438:	e0bfff0d 	sth	r2,-4(fp)
	BYTE buffer[2];
	WORD value;
	buffer[0] = (ADDR & 0xFF00) >> 8;
 800043c:	e0bfff0b 	ldhu	r2,-4(fp)
 8000440:	1004d23a 	srli	r2,r2,8
 8000444:	e0bffd85 	stb	r2,-10(fp)
	buffer[1] = (ADDR & 0x00FF);
 8000448:	e0bfff0b 	ldhu	r2,-4(fp)
 800044c:	e0bffdc5 	stb	r2,-9(fp)

	ALT_AVALON_I2C_STATUS_CODE status=alt_avalon_i2c_master_tx_rx(dev,buffer,2,buffer,2,0);
 8000450:	e13ffd84 	addi	r4,fp,-10
 8000454:	e0fffd84 	addi	r3,fp,-10
 8000458:	d8000115 	stw	zero,4(sp)
 800045c:	00800084 	movi	r2,2
 8000460:	d8800015 	stw	r2,0(sp)
 8000464:	200f883a 	mov	r7,r4
 8000468:	01800084 	movi	r6,2
 800046c:	180b883a 	mov	r5,r3
 8000470:	e13ffe17 	ldw	r4,-8(fp)
 8000474:	80148640 	call	8014864 <alt_avalon_i2c_master_tx_rx>
 8000478:	e0bffc15 	stw	r2,-16(fp)

	if (status != ALT_AVALON_I2C_SUCCESS){
 800047c:	e0bffc17 	ldw	r2,-16(fp)
 8000480:	10000626 	beq	r2,zero,800049c <SGTL5000_Reg_Rd+0x7c>
		printf ("SGTL5000 I2C error, address: %x", ADDR);
 8000484:	e0bfff0b 	ldhu	r2,-4(fp)
 8000488:	100b883a 	mov	r5,r2
 800048c:	01020074 	movhi	r4,2049
 8000490:	211df704 	addi	r4,r4,30684
 8000494:	80027440 	call	8002744 <printf>
		while (1)
		{
			//hang here
		}
 8000498:	003fff06 	br	8000498 <__alt_data_end+0xfc000498>
	}
	value = (buffer[0] << 8) | buffer[1];
 800049c:	e0bffd83 	ldbu	r2,-10(fp)
 80004a0:	10803fcc 	andi	r2,r2,255
 80004a4:	1004923a 	slli	r2,r2,8
 80004a8:	1007883a 	mov	r3,r2
 80004ac:	e0bffdc3 	ldbu	r2,-9(fp)
 80004b0:	10803fcc 	andi	r2,r2,255
 80004b4:	1884b03a 	or	r2,r3,r2
 80004b8:	e0bffd0d 	sth	r2,-12(fp)
	return value;
 80004bc:	e0bffd0b 	ldhu	r2,-12(fp)
}
 80004c0:	e037883a 	mov	sp,fp
 80004c4:	dfc00117 	ldw	ra,4(sp)
 80004c8:	df000017 	ldw	fp,0(sp)
 80004cc:	dec00204 	addi	sp,sp,8
 80004d0:	f800283a 	ret

080004d4 <SGTL5000_Reg_Wr>:

WORD SGTL5000_Reg_Wr (ALT_AVALON_I2C_DEV_t* dev, WORD ADDR, WORD DATA)
{
 80004d4:	defff904 	addi	sp,sp,-28
 80004d8:	dfc00615 	stw	ra,24(sp)
 80004dc:	df000515 	stw	fp,20(sp)
 80004e0:	df000504 	addi	fp,sp,20
 80004e4:	e13ffd15 	stw	r4,-12(fp)
 80004e8:	2807883a 	mov	r3,r5
 80004ec:	3005883a 	mov	r2,r6
 80004f0:	e0fffe0d 	sth	r3,-8(fp)
 80004f4:	e0bfff0d 	sth	r2,-4(fp)
	BYTE buffer[4];
	buffer[0] = (ADDR & 0xFF00) >> 8;
 80004f8:	e0bffe0b 	ldhu	r2,-8(fp)
 80004fc:	1004d23a 	srli	r2,r2,8
 8000500:	e0bffc05 	stb	r2,-16(fp)
	buffer[1] = (ADDR & 0x00FF);
 8000504:	e0bffe0b 	ldhu	r2,-8(fp)
 8000508:	e0bffc45 	stb	r2,-15(fp)
	buffer[2] = (DATA & 0xFF00) >> 8;
 800050c:	e0bfff0b 	ldhu	r2,-4(fp)
 8000510:	1004d23a 	srli	r2,r2,8
 8000514:	e0bffc85 	stb	r2,-14(fp)
	buffer[3] = (DATA & 0x00FF);
 8000518:	e0bfff0b 	ldhu	r2,-4(fp)
 800051c:	e0bffcc5 	stb	r2,-13(fp)


	ALT_AVALON_I2C_STATUS_CODE status=alt_avalon_i2c_master_tx(dev,buffer,4,0);
 8000520:	e0bffc04 	addi	r2,fp,-16
 8000524:	000f883a 	mov	r7,zero
 8000528:	01800104 	movi	r6,4
 800052c:	100b883a 	mov	r5,r2
 8000530:	e13ffd17 	ldw	r4,-12(fp)
 8000534:	80146400 	call	8014640 <alt_avalon_i2c_master_tx>
 8000538:	e0bffb15 	stw	r2,-20(fp)

	if (status != ALT_AVALON_I2C_SUCCESS){
 800053c:	e0bffb17 	ldw	r2,-20(fp)
 8000540:	10000626 	beq	r2,zero,800055c <SGTL5000_Reg_Wr+0x88>
		printf ("SGTL5000 I2C error, address: %x", ADDR);
 8000544:	e0bffe0b 	ldhu	r2,-8(fp)
 8000548:	100b883a 	mov	r5,r2
 800054c:	01020074 	movhi	r4,2049
 8000550:	211df704 	addi	r4,r4,30684
 8000554:	80027440 	call	8002744 <printf>
		while (1)
		{
			//hang here
		}
 8000558:	003fff06 	br	8000558 <__alt_data_end+0xfc000558>
	}
	return DATA;
 800055c:	e0bfff0b 	ldhu	r2,-4(fp)
}
 8000560:	e037883a 	mov	sp,fp
 8000564:	dfc00117 	ldw	ra,4(sp)
 8000568:	df000017 	ldw	fp,0(sp)
 800056c:	dec00204 	addi	sp,sp,8
 8000570:	f800283a 	ret

08000574 <setLED>:
#include "sgtl5000/sgtl5000.h"
#include "text_mode_vga_color.h"
#include "palette_test.h"

void setLED(int LED)
{
 8000574:	defffe04 	addi	sp,sp,-8
 8000578:	df000115 	stw	fp,4(sp)
 800057c:	df000104 	addi	fp,sp,4
 8000580:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE, (IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) | (0x001 << LED)));
 8000584:	00809804 	movi	r2,608
 8000588:	10c00037 	ldwio	r3,0(r2)
 800058c:	01000044 	movi	r4,1
 8000590:	e0bfff17 	ldw	r2,-4(fp)
 8000594:	2084983a 	sll	r2,r4,r2
 8000598:	1886b03a 	or	r3,r3,r2
 800059c:	00809804 	movi	r2,608
 80005a0:	10c00035 	stwio	r3,0(r2)
}
 80005a4:	0001883a 	nop
 80005a8:	e037883a 	mov	sp,fp
 80005ac:	df000017 	ldw	fp,0(sp)
 80005b0:	dec00104 	addi	sp,sp,4
 80005b4:	f800283a 	ret

080005b8 <clearLED>:

void clearLED(int LED)
{
 80005b8:	defffe04 	addi	sp,sp,-8
 80005bc:	df000115 	stw	fp,4(sp)
 80005c0:	df000104 	addi	fp,sp,4
 80005c4:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE, (IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) & ~(0x001 << LED)));
 80005c8:	00809804 	movi	r2,608
 80005cc:	10c00037 	ldwio	r3,0(r2)
 80005d0:	01000044 	movi	r4,1
 80005d4:	e0bfff17 	ldw	r2,-4(fp)
 80005d8:	2084983a 	sll	r2,r4,r2
 80005dc:	0084303a 	nor	r2,zero,r2
 80005e0:	1886703a 	and	r3,r3,r2
 80005e4:	00809804 	movi	r2,608
 80005e8:	10c00035 	stwio	r3,0(r2)

}
 80005ec:	0001883a 	nop
 80005f0:	e037883a 	mov	sp,fp
 80005f4:	df000017 	ldw	fp,0(sp)
 80005f8:	dec00104 	addi	sp,sp,4
 80005fc:	f800283a 	ret

08000600 <printSignedHex0>:

void printSignedHex0(signed char value)
{
 8000600:	defffc04 	addi	sp,sp,-16
 8000604:	dfc00315 	stw	ra,12(sp)
 8000608:	df000215 	stw	fp,8(sp)
 800060c:	df000204 	addi	fp,sp,8
 8000610:	2005883a 	mov	r2,r4
 8000614:	e0bfff05 	stb	r2,-4(fp)
	BYTE tens = 0;
 8000618:	e03ffe05 	stb	zero,-8(fp)
	BYTE ones = 0;
 800061c:	e03ffe45 	stb	zero,-7(fp)
	WORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
 8000620:	00809c04 	movi	r2,624
 8000624:	10800037 	ldwio	r2,0(r2)
 8000628:	e0bffe8d 	sth	r2,-6(fp)
	if (value < 0)
 800062c:	e0bfff07 	ldb	r2,-4(fp)
 8000630:	1000060e 	bge	r2,zero,800064c <printSignedHex0+0x4c>
	{
		setLED(11);
 8000634:	010002c4 	movi	r4,11
 8000638:	80005740 	call	8000574 <setLED>
		value = -value;
 800063c:	e0bfff03 	ldbu	r2,-4(fp)
 8000640:	0085c83a 	sub	r2,zero,r2
 8000644:	e0bfff05 	stb	r2,-4(fp)
 8000648:	00000206 	br	8000654 <printSignedHex0+0x54>
	}
	else
	{
		clearLED(11);
 800064c:	010002c4 	movi	r4,11
 8000650:	80005b80 	call	80005b8 <clearLED>
	}
	//handled hundreds
	if (value / 100)
 8000654:	e0bfff03 	ldbu	r2,-4(fp)
 8000658:	108018c4 	addi	r2,r2,99
 800065c:	10803fcc 	andi	r2,r2,255
 8000660:	108031f0 	cmpltui	r2,r2,199
 8000664:	1000031e 	bne	r2,zero,8000674 <printSignedHex0+0x74>
		setLED(13);
 8000668:	01000344 	movi	r4,13
 800066c:	80005740 	call	8000574 <setLED>
 8000670:	00000206 	br	800067c <printSignedHex0+0x7c>
	else
		clearLED(13);
 8000674:	01000344 	movi	r4,13
 8000678:	80005b80 	call	80005b8 <clearLED>

	value = value % 100;
 800067c:	e0bfff07 	ldb	r2,-4(fp)
 8000680:	01401904 	movi	r5,100
 8000684:	1009883a 	mov	r4,r2
 8000688:	8001a280 	call	8001a28 <__modsi3>
 800068c:	e0bfff05 	stb	r2,-4(fp)
	tens = value / 10;
 8000690:	e0bfff07 	ldb	r2,-4(fp)
 8000694:	01400284 	movi	r5,10
 8000698:	1009883a 	mov	r4,r2
 800069c:	80019a40 	call	80019a4 <__divsi3>
 80006a0:	e0bffe05 	stb	r2,-8(fp)
	ones = value % 10;
 80006a4:	e0bfff07 	ldb	r2,-4(fp)
 80006a8:	01400284 	movi	r5,10
 80006ac:	1009883a 	mov	r4,r2
 80006b0:	8001a280 	call	8001a28 <__modsi3>
 80006b4:	e0bffe45 	stb	r2,-7(fp)

	pio_val &= 0x00FF;
 80006b8:	e0bffe8b 	ldhu	r2,-6(fp)
 80006bc:	10803fcc 	andi	r2,r2,255
 80006c0:	e0bffe8d 	sth	r2,-6(fp)
	pio_val |= (tens << 12);
 80006c4:	e0bffe03 	ldbu	r2,-8(fp)
 80006c8:	1004933a 	slli	r2,r2,12
 80006cc:	1007883a 	mov	r3,r2
 80006d0:	e0bffe8b 	ldhu	r2,-6(fp)
 80006d4:	1884b03a 	or	r2,r3,r2
 80006d8:	e0bffe8d 	sth	r2,-6(fp)
	pio_val |= (ones << 8);
 80006dc:	e0bffe43 	ldbu	r2,-7(fp)
 80006e0:	1004923a 	slli	r2,r2,8
 80006e4:	1007883a 	mov	r3,r2
 80006e8:	e0bffe8b 	ldhu	r2,-6(fp)
 80006ec:	1884b03a 	or	r2,r3,r2
 80006f0:	e0bffe8d 	sth	r2,-6(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
 80006f4:	e0fffe8b 	ldhu	r3,-6(fp)
 80006f8:	00809c04 	movi	r2,624
 80006fc:	10c00035 	stwio	r3,0(r2)
}
 8000700:	0001883a 	nop
 8000704:	e037883a 	mov	sp,fp
 8000708:	dfc00117 	ldw	ra,4(sp)
 800070c:	df000017 	ldw	fp,0(sp)
 8000710:	dec00204 	addi	sp,sp,8
 8000714:	f800283a 	ret

08000718 <printSignedHex1>:

void printSignedHex1(signed char value)
{
 8000718:	defffb04 	addi	sp,sp,-20
 800071c:	dfc00415 	stw	ra,16(sp)
 8000720:	df000315 	stw	fp,12(sp)
 8000724:	df000304 	addi	fp,sp,12
 8000728:	2005883a 	mov	r2,r4
 800072c:	e0bfff05 	stb	r2,-4(fp)
	BYTE tens = 0;
 8000730:	e03ffd05 	stb	zero,-12(fp)
	BYTE ones = 0;
 8000734:	e03ffd45 	stb	zero,-11(fp)
	DWORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
 8000738:	00809c04 	movi	r2,624
 800073c:	10800037 	ldwio	r2,0(r2)
 8000740:	e0bffe15 	stw	r2,-8(fp)
	if (value < 0)
 8000744:	e0bfff07 	ldb	r2,-4(fp)
 8000748:	1000060e 	bge	r2,zero,8000764 <printSignedHex1+0x4c>
	{
		setLED(10);
 800074c:	01000284 	movi	r4,10
 8000750:	80005740 	call	8000574 <setLED>
		value = -value;
 8000754:	e0bfff03 	ldbu	r2,-4(fp)
 8000758:	0085c83a 	sub	r2,zero,r2
 800075c:	e0bfff05 	stb	r2,-4(fp)
 8000760:	00000206 	br	800076c <printSignedHex1+0x54>
	}
	else
	{
		clearLED(10);
 8000764:	01000284 	movi	r4,10
 8000768:	80005b80 	call	80005b8 <clearLED>
	}
	//handled hundreds
	if (value / 100)
 800076c:	e0bfff03 	ldbu	r2,-4(fp)
 8000770:	108018c4 	addi	r2,r2,99
 8000774:	10803fcc 	andi	r2,r2,255
 8000778:	108031f0 	cmpltui	r2,r2,199
 800077c:	1000031e 	bne	r2,zero,800078c <printSignedHex1+0x74>
		setLED(12);
 8000780:	01000304 	movi	r4,12
 8000784:	80005740 	call	8000574 <setLED>
 8000788:	00000206 	br	8000794 <printSignedHex1+0x7c>
	else
		clearLED(12);
 800078c:	01000304 	movi	r4,12
 8000790:	80005b80 	call	80005b8 <clearLED>

	value = value % 100;
 8000794:	e0bfff07 	ldb	r2,-4(fp)
 8000798:	01401904 	movi	r5,100
 800079c:	1009883a 	mov	r4,r2
 80007a0:	8001a280 	call	8001a28 <__modsi3>
 80007a4:	e0bfff05 	stb	r2,-4(fp)
	tens = value / 10;
 80007a8:	e0bfff07 	ldb	r2,-4(fp)
 80007ac:	01400284 	movi	r5,10
 80007b0:	1009883a 	mov	r4,r2
 80007b4:	80019a40 	call	80019a4 <__divsi3>
 80007b8:	e0bffd05 	stb	r2,-12(fp)
	ones = value % 10;
 80007bc:	e0bfff07 	ldb	r2,-4(fp)
 80007c0:	01400284 	movi	r5,10
 80007c4:	1009883a 	mov	r4,r2
 80007c8:	8001a280 	call	8001a28 <__modsi3>
 80007cc:	e0bffd45 	stb	r2,-11(fp)
	tens = value / 10;
 80007d0:	e0bfff07 	ldb	r2,-4(fp)
 80007d4:	01400284 	movi	r5,10
 80007d8:	1009883a 	mov	r4,r2
 80007dc:	80019a40 	call	80019a4 <__divsi3>
 80007e0:	e0bffd05 	stb	r2,-12(fp)
	ones = value % 10;
 80007e4:	e0bfff07 	ldb	r2,-4(fp)
 80007e8:	01400284 	movi	r5,10
 80007ec:	1009883a 	mov	r4,r2
 80007f0:	8001a280 	call	8001a28 <__modsi3>
 80007f4:	e0bffd45 	stb	r2,-11(fp)

	pio_val &= 0xFF00;
 80007f8:	e0bffe17 	ldw	r2,-8(fp)
 80007fc:	10bfc00c 	andi	r2,r2,65280
 8000800:	e0bffe15 	stw	r2,-8(fp)
	pio_val |= (tens << 4);
 8000804:	e0bffd03 	ldbu	r2,-12(fp)
 8000808:	1004913a 	slli	r2,r2,4
 800080c:	1007883a 	mov	r3,r2
 8000810:	e0bffe17 	ldw	r2,-8(fp)
 8000814:	10c4b03a 	or	r2,r2,r3
 8000818:	e0bffe15 	stw	r2,-8(fp)
	pio_val |= (ones << 0);
 800081c:	e0bffd43 	ldbu	r2,-11(fp)
 8000820:	e0fffe17 	ldw	r3,-8(fp)
 8000824:	1884b03a 	or	r2,r3,r2
 8000828:	e0bffe15 	stw	r2,-8(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
 800082c:	e0fffe17 	ldw	r3,-8(fp)
 8000830:	00809c04 	movi	r2,624
 8000834:	10c00035 	stwio	r3,0(r2)
}
 8000838:	0001883a 	nop
 800083c:	e037883a 	mov	sp,fp
 8000840:	dfc00117 	ldw	ra,4(sp)
 8000844:	df000017 	ldw	fp,0(sp)
 8000848:	dec00204 	addi	sp,sp,8
 800084c:	f800283a 	ret

08000850 <main>:


int main()
{
 8000850:	defffc04 	addi	sp,sp,-16
 8000854:	dfc00315 	stw	ra,12(sp)
 8000858:	df000215 	stw	fp,8(sp)
 800085c:	df000204 	addi	fp,sp,8

	ALT_AVALON_I2C_DEV_t *i2c_dev; //pointer to instance structure
	//get a pointer to the Avalon i2c instance
	i2c_dev = alt_avalon_i2c_open("/dev/i2c_0"); //this has to reflect Platform Designer name
 8000860:	01020074 	movhi	r4,2049
 8000864:	211dff04 	addi	r4,r4,30716
 8000868:	8013c680 	call	8013c68 <alt_avalon_i2c_open>
 800086c:	e0bffe15 	stw	r2,-8(fp)
	if (NULL==i2c_dev)						     //check the BSP if unsure
 8000870:	e0bffe17 	ldw	r2,-8(fp)
 8000874:	1000051e 	bne	r2,zero,800088c <main+0x3c>
	{
		printf("Error: Cannot find /dev/i2c_0\n");
 8000878:	01020074 	movhi	r4,2049
 800087c:	211e0204 	addi	r4,r4,30728
 8000880:	80028400 	call	8002840 <puts>
		return 1;
 8000884:	00800044 	movi	r2,1
 8000888:	0000ad06 	br	8000b40 <main+0x2f0>
	}
	printf ("I2C Test Program\n");
 800088c:	01020074 	movhi	r4,2049
 8000890:	211e0a04 	addi	r4,r4,30760
 8000894:	80028400 	call	8002840 <puts>

	alt_avalon_i2c_master_target_set(i2c_dev,0xA); //CODEC at address 0b0001010
 8000898:	01400284 	movi	r5,10
 800089c:	e13ffe17 	ldw	r4,-8(fp)
 80008a0:	80144380 	call	8014438 <alt_avalon_i2c_master_target_set>
	//print device ID (verify I2C is working)
	printf( "Device ID register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ID));
 80008a4:	000b883a 	mov	r5,zero
 80008a8:	e13ffe17 	ldw	r4,-8(fp)
 80008ac:	80004200 	call	8000420 <SGTL5000_Reg_Rd>
 80008b0:	10bfffcc 	andi	r2,r2,65535
 80008b4:	100b883a 	mov	r5,r2
 80008b8:	01020074 	movhi	r4,2049
 80008bc:	211e0f04 	addi	r4,r4,30780
 80008c0:	80027440 	call	8002744 <printf>

	//configure PLL, input frequency is 12.5 MHz, output frequency is 180.6336 MHz if 44.1kHz is desired
	//or 196.608 MHz else
	BYTE int_divisor = 180633600/12500000;
 80008c4:	00800384 	movi	r2,14
 80008c8:	e0bfff05 	stb	r2,-4(fp)
	WORD frac_divisor = (WORD)(((180633600.0f/12500000.0f) - (float)int_divisor) * 2048.0f);
 80008cc:	e0bfff03 	ldbu	r2,-4(fp)
 80008d0:	1009883a 	mov	r4,r2
 80008d4:	80025c00 	call	80025c0 <__floatunsisf>
 80008d8:	1007883a 	mov	r3,r2
 80008dc:	180b883a 	mov	r5,r3
 80008e0:	011059f4 	movhi	r4,16743
 80008e4:	210d8144 	addi	r4,r4,13829
 80008e8:	800206c0 	call	800206c <__subsf3>
 80008ec:	1007883a 	mov	r3,r2
 80008f0:	1805883a 	mov	r2,r3
 80008f4:	01514034 	movhi	r5,17664
 80008f8:	1009883a 	mov	r4,r2
 80008fc:	8001c3c0 	call	8001c3c <__mulsf3>
 8000900:	1007883a 	mov	r3,r2
 8000904:	1805883a 	mov	r2,r3
 8000908:	1009883a 	mov	r4,r2
 800090c:	80019440 	call	8001944 <__fixunssfsi>
 8000910:	e0bfff8d 	sth	r2,-2(fp)
	printf( "Programming PLL with integer divisor: %d, fractional divisor %d\n", int_divisor, frac_divisor);
 8000914:	e0bfff03 	ldbu	r2,-4(fp)
 8000918:	e0ffff8b 	ldhu	r3,-2(fp)
 800091c:	180d883a 	mov	r6,r3
 8000920:	100b883a 	mov	r5,r2
 8000924:	01020074 	movhi	r4,2049
 8000928:	211e1504 	addi	r4,r4,30804
 800092c:	80027440 	call	8002744 <printf>
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_PLL_CTRL, \
				int_divisor << SGTL5000_PLL_INT_DIV_SHIFT|
 8000930:	e0bfff03 	ldbu	r2,-4(fp)
 8000934:	100492fa 	slli	r2,r2,11
	//configure PLL, input frequency is 12.5 MHz, output frequency is 180.6336 MHz if 44.1kHz is desired
	//or 196.608 MHz else
	BYTE int_divisor = 180633600/12500000;
	WORD frac_divisor = (WORD)(((180633600.0f/12500000.0f) - (float)int_divisor) * 2048.0f);
	printf( "Programming PLL with integer divisor: %d, fractional divisor %d\n", int_divisor, frac_divisor);
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_PLL_CTRL, \
 8000938:	1007883a 	mov	r3,r2
 800093c:	e0bfff8b 	ldhu	r2,-2(fp)
 8000940:	1884b03a 	or	r2,r3,r2
 8000944:	10bfffcc 	andi	r2,r2,65535
 8000948:	100d883a 	mov	r6,r2
 800094c:	01400c84 	movi	r5,50
 8000950:	e13ffe17 	ldw	r4,-8(fp)
 8000954:	80004d40 	call	80004d4 <SGTL5000_Reg_Wr>
				int_divisor << SGTL5000_PLL_INT_DIV_SHIFT|
				frac_divisor << SGTL5000_PLL_FRAC_DIV_SHIFT);
	printf( "CHIP_PLL_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_PLL_CTRL));
 8000958:	01400c84 	movi	r5,50
 800095c:	e13ffe17 	ldw	r4,-8(fp)
 8000960:	80004200 	call	8000420 <SGTL5000_Reg_Rd>
 8000964:	10bfffcc 	andi	r2,r2,65535
 8000968:	100b883a 	mov	r5,r2
 800096c:	01020074 	movhi	r4,2049
 8000970:	211e2604 	addi	r4,r4,30872
 8000974:	80027440 	call	8002744 <printf>

	//configure power control, disable internal VDDD, VDDIO=3.3V, VDDA=VDDD=1.8V (ext)
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ANA_POWER, \
 8000978:	01917f84 	movi	r6,17918
 800097c:	01400c04 	movi	r5,48
 8000980:	e13ffe17 	ldw	r4,-8(fp)
 8000984:	80004d40 	call	80004d4 <SGTL5000_Reg_Wr>
			SGTL5000_REFTOP_POWERUP|
			SGTL5000_HP_POWERUP|
			SGTL5000_DAC_POWERUP|
			SGTL5000_CAPLESS_HP_POWERUP|
			SGTL5000_ADC_POWERUP);
	printf( "CHIP_ANA_POWER register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ANA_POWER));
 8000988:	01400c04 	movi	r5,48
 800098c:	e13ffe17 	ldw	r4,-8(fp)
 8000990:	80004200 	call	8000420 <SGTL5000_Reg_Rd>
 8000994:	10bfffcc 	andi	r2,r2,65535
 8000998:	100b883a 	mov	r5,r2
 800099c:	01020074 	movhi	r4,2049
 80009a0:	211e2d04 	addi	r4,r4,30900
 80009a4:	80027440 	call	8002744 <printf>

	//select internal ground bias to .9V (1.8V/2)
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_REF_CTRL, 0x004E);
 80009a8:	01801384 	movi	r6,78
 80009ac:	01400a04 	movi	r5,40
 80009b0:	e13ffe17 	ldw	r4,-8(fp)
 80009b4:	80004d40 	call	80004d4 <SGTL5000_Reg_Wr>
	printf( "CHIP_REF_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_REF_CTRL));
 80009b8:	01400a04 	movi	r5,40
 80009bc:	e13ffe17 	ldw	r4,-8(fp)
 80009c0:	80004200 	call	8000420 <SGTL5000_Reg_Rd>
 80009c4:	10bfffcc 	andi	r2,r2,65535
 80009c8:	100b883a 	mov	r5,r2
 80009cc:	01020074 	movhi	r4,2049
 80009d0:	211e3504 	addi	r4,r4,30932
 80009d4:	80027440 	call	8002744 <printf>

	//enable core modules
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_DIG_POWER,\
 80009d8:	018018c4 	movi	r6,99
 80009dc:	01400084 	movi	r5,2
 80009e0:	e13ffe17 	ldw	r4,-8(fp)
 80009e4:	80004d40 	call	80004d4 <SGTL5000_Reg_Wr>
			SGTL5000_ADC_EN|
			SGTL5000_DAC_EN|
			//SGTL5000_DAP_POWERUP| //disable digital audio processor in CODEC
			SGTL5000_I2S_OUT_POWERUP|
			SGTL5000_I2S_IN_POWERUP);
	printf( "CHIP_DIG_POWER register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_DIG_POWER));
 80009e8:	01400084 	movi	r5,2
 80009ec:	e13ffe17 	ldw	r4,-8(fp)
 80009f0:	80004200 	call	8000420 <SGTL5000_Reg_Rd>
 80009f4:	10bfffcc 	andi	r2,r2,65535
 80009f8:	100b883a 	mov	r5,r2
 80009fc:	01020074 	movhi	r4,2049
 8000a00:	211e3c04 	addi	r4,r4,30960
 8000a04:	80027440 	call	8002744 <printf>


	//MCLK is 12.5 MHz, configure clocks to use PLL
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_CLK_CTRL, \
 8000a08:	018001c4 	movi	r6,7
 8000a0c:	01400104 	movi	r5,4
 8000a10:	e13ffe17 	ldw	r4,-8(fp)
 8000a14:	80004d40 	call	80004d4 <SGTL5000_Reg_Wr>
			SGTL5000_SYS_FS_44_1k << SGTL5000_SYS_FS_SHIFT |
			SGTL5000_MCLK_FREQ_PLL << SGTL5000_MCLK_FREQ_SHIFT);
	printf( "CHIP_CLK_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_CLK_CTRL));
 8000a18:	01400104 	movi	r5,4
 8000a1c:	e13ffe17 	ldw	r4,-8(fp)
 8000a20:	80004200 	call	8000420 <SGTL5000_Reg_Rd>
 8000a24:	10bfffcc 	andi	r2,r2,65535
 8000a28:	100b883a 	mov	r5,r2
 8000a2c:	01020074 	movhi	r4,2049
 8000a30:	211e4404 	addi	r4,r4,30992
 8000a34:	80027440 	call	8002744 <printf>

	//Set as I2S master
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_I2S_CTRL, SGTL5000_I2S_MASTER);
 8000a38:	01802004 	movi	r6,128
 8000a3c:	01400184 	movi	r5,6
 8000a40:	e13ffe17 	ldw	r4,-8(fp)
 8000a44:	80004d40 	call	80004d4 <SGTL5000_Reg_Wr>
	printf( "CHIP_I2S_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_I2S_CTRL));
 8000a48:	01400184 	movi	r5,6
 8000a4c:	e13ffe17 	ldw	r4,-8(fp)
 8000a50:	80004200 	call	8000420 <SGTL5000_Reg_Rd>
 8000a54:	10bfffcc 	andi	r2,r2,65535
 8000a58:	100b883a 	mov	r5,r2
 8000a5c:	01020074 	movhi	r4,2049
 8000a60:	211e4b04 	addi	r4,r4,31020
 8000a64:	80027440 	call	8002744 <printf>

	//ADC input from Line
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ANA_CTRL, \
 8000a68:	01800104 	movi	r6,4
 8000a6c:	01400904 	movi	r5,36
 8000a70:	e13ffe17 	ldw	r4,-8(fp)
 8000a74:	80004d40 	call	80004d4 <SGTL5000_Reg_Wr>
			SGTL5000_ADC_SEL_LINE_IN << SGTL5000_ADC_SEL_SHIFT);
	printf( "CHIP_ANA_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ANA_CTRL));
 8000a78:	01400904 	movi	r5,36
 8000a7c:	e13ffe17 	ldw	r4,-8(fp)
 8000a80:	80004200 	call	8000420 <SGTL5000_Reg_Rd>
 8000a84:	10bfffcc 	andi	r2,r2,65535
 8000a88:	100b883a 	mov	r5,r2
 8000a8c:	01020074 	movhi	r4,2049
 8000a90:	211e5204 	addi	r4,r4,31048
 8000a94:	80027440 	call	8002744 <printf>

	//ADC -> I2S out, I2S in -> DAC
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_SSS_CTRL, \
 8000a98:	01800404 	movi	r6,16
 8000a9c:	01400284 	movi	r5,10
 8000aa0:	e13ffe17 	ldw	r4,-8(fp)
 8000aa4:	80004d40 	call	80004d4 <SGTL5000_Reg_Wr>
			SGTL5000_DAC_SEL_I2S_IN << SGTL5000_DAC_SEL_SHIFT |
			SGTL5000_I2S_OUT_SEL_ADC << SGTL5000_I2S_OUT_SEL_SHIFT);
	printf( "CHIP_SSS_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_SSS_CTRL));
 8000aa8:	01400284 	movi	r5,10
 8000aac:	e13ffe17 	ldw	r4,-8(fp)
 8000ab0:	80004200 	call	8000420 <SGTL5000_Reg_Rd>
 8000ab4:	10bfffcc 	andi	r2,r2,65535
 8000ab8:	100b883a 	mov	r5,r2
 8000abc:	01020074 	movhi	r4,2049
 8000ac0:	211e5904 	addi	r4,r4,31076
 8000ac4:	80027440 	call	8002744 <printf>

	printf( "CHIP_ANA_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ANA_CTRL));
 8000ac8:	01400904 	movi	r5,36
 8000acc:	e13ffe17 	ldw	r4,-8(fp)
 8000ad0:	80004200 	call	8000420 <SGTL5000_Reg_Rd>
 8000ad4:	10bfffcc 	andi	r2,r2,65535
 8000ad8:	100b883a 	mov	r5,r2
 8000adc:	01020074 	movhi	r4,2049
 8000ae0:	211e5204 	addi	r4,r4,31048
 8000ae4:	80027440 	call	8002744 <printf>

	//ADC -> I2S out, I2S in -> DAC
	SGTL5000_Reg_Wr(i2c_dev, SGTL5000_CHIP_ADCDAC_CTRL, 0x0000);
 8000ae8:	000d883a 	mov	r6,zero
 8000aec:	01400384 	movi	r5,14
 8000af0:	e13ffe17 	ldw	r4,-8(fp)
 8000af4:	80004d40 	call	80004d4 <SGTL5000_Reg_Wr>
	printf( "CHIP_ADCDAC_CTRL register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_ADCDAC_CTRL));
 8000af8:	01400384 	movi	r5,14
 8000afc:	e13ffe17 	ldw	r4,-8(fp)
 8000b00:	80004200 	call	8000420 <SGTL5000_Reg_Rd>
 8000b04:	10bfffcc 	andi	r2,r2,65535
 8000b08:	100b883a 	mov	r5,r2
 8000b0c:	01020074 	movhi	r4,2049
 8000b10:	211e6004 	addi	r4,r4,31104
 8000b14:	80027440 	call	8002744 <printf>
	printf( "CHIP_PAD_STRENGTH register: %x\n", SGTL5000_Reg_Rd (i2c_dev, SGTL5000_CHIP_PAD_STRENGTH));
 8000b18:	01400504 	movi	r5,20
 8000b1c:	e13ffe17 	ldw	r4,-8(fp)
 8000b20:	80004200 	call	8000420 <SGTL5000_Reg_Rd>
 8000b24:	10bfffcc 	andi	r2,r2,65535
 8000b28:	100b883a 	mov	r5,r2
 8000b2c:	01020074 	movhi	r4,2049
 8000b30:	211e6804 	addi	r4,r4,31136
 8000b34:	80027440 	call	8002744 <printf>
	textVGAColorScreenSaver();
 8000b38:	8000dd40 	call	8000dd4 <textVGAColorScreenSaver>


	return 0;
 8000b3c:	0005883a 	mov	r2,zero
}
 8000b40:	e037883a 	mov	sp,fp
 8000b44:	dfc00117 	ldw	ra,4(sp)
 8000b48:	df000017 	ldw	fp,0(sp)
 8000b4c:	dec00204 	addi	sp,sp,8
 8000b50:	f800283a 	ret

08000b54 <textVGAColorClr>:
#include <string.h>
#include <alt_types.h>
#include "text_mode_vga_color.h"

void textVGAColorClr()
{
 8000b54:	defffe04 	addi	sp,sp,-8
 8000b58:	df000115 	stw	fp,4(sp)
 8000b5c:	df000104 	addi	fp,sp,4
	for (int i = 0; i<(ROWS*COLUMNS) * 2; i++)
 8000b60:	e03fff15 	stw	zero,-4(fp)
 8000b64:	00000706 	br	8000b84 <textVGAColorClr+0x30>
	{
		vga_ctrl->VRAM[i] = 0x00;
 8000b68:	d0e00217 	ldw	r3,-32760(gp)
 8000b6c:	e0bfff17 	ldw	r2,-4(fp)
 8000b70:	1885883a 	add	r2,r3,r2
 8000b74:	10000005 	stb	zero,0(r2)
#include <alt_types.h>
#include "text_mode_vga_color.h"

void textVGAColorClr()
{
	for (int i = 0; i<(ROWS*COLUMNS) * 2; i++)
 8000b78:	e0bfff17 	ldw	r2,-4(fp)
 8000b7c:	10800044 	addi	r2,r2,1
 8000b80:	e0bfff15 	stw	r2,-4(fp)
 8000b84:	e0bfff17 	ldw	r2,-4(fp)
 8000b88:	1084b010 	cmplti	r2,r2,4800
 8000b8c:	103ff61e 	bne	r2,zero,8000b68 <__alt_data_end+0xfc000b68>
	{
		vga_ctrl->VRAM[i] = 0x00;
	}
}
 8000b90:	0001883a 	nop
 8000b94:	e037883a 	mov	sp,fp
 8000b98:	df000017 	ldw	fp,0(sp)
 8000b9c:	dec00104 	addi	sp,sp,4
 8000ba0:	f800283a 	ret

08000ba4 <textVGADrawColorText>:

void textVGADrawColorText(char* str, int x, int y, alt_u8 background, alt_u8 foreground)
{
 8000ba4:	defff704 	addi	sp,sp,-36
 8000ba8:	dfc00815 	stw	ra,32(sp)
 8000bac:	df000715 	stw	fp,28(sp)
 8000bb0:	dc000615 	stw	r16,24(sp)
 8000bb4:	df000704 	addi	fp,sp,28
 8000bb8:	e13ffa15 	stw	r4,-24(fp)
 8000bbc:	e17ffb15 	stw	r5,-20(fp)
 8000bc0:	e1bffc15 	stw	r6,-16(fp)
 8000bc4:	3807883a 	mov	r3,r7
 8000bc8:	e0800217 	ldw	r2,8(fp)
 8000bcc:	e0fffd05 	stb	r3,-12(fp)
 8000bd0:	e0bffe05 	stb	r2,-8(fp)
	int i = 0;
 8000bd4:	e03ff915 	stw	zero,-28(fp)
	while (str[i]!=0)
 8000bd8:	00002706 	br	8000c78 <textVGADrawColorText+0xd4>
	{
		vga_ctrl->VRAM[(y*COLUMNS + x + i) * 2] = foreground << 4 | background;
 8000bdc:	d4200217 	ldw	r16,-32760(gp)
 8000be0:	01401404 	movi	r5,80
 8000be4:	e13ffc17 	ldw	r4,-16(fp)
 8000be8:	8001b580 	call	8001b58 <__mulsi3>
 8000bec:	1007883a 	mov	r3,r2
 8000bf0:	e0bffb17 	ldw	r2,-20(fp)
 8000bf4:	1887883a 	add	r3,r3,r2
 8000bf8:	e0bff917 	ldw	r2,-28(fp)
 8000bfc:	1885883a 	add	r2,r3,r2
 8000c00:	1085883a 	add	r2,r2,r2
 8000c04:	1009883a 	mov	r4,r2
 8000c08:	e0bffe03 	ldbu	r2,-8(fp)
 8000c0c:	1004913a 	slli	r2,r2,4
 8000c10:	1007883a 	mov	r3,r2
 8000c14:	e0bffd03 	ldbu	r2,-12(fp)
 8000c18:	1884b03a 	or	r2,r3,r2
 8000c1c:	1007883a 	mov	r3,r2
 8000c20:	8105883a 	add	r2,r16,r4
 8000c24:	10c00005 	stb	r3,0(r2)
		vga_ctrl->VRAM[(y*COLUMNS + x + i) * 2 + 1] = str[i];
 8000c28:	d4200217 	ldw	r16,-32760(gp)
 8000c2c:	01401404 	movi	r5,80
 8000c30:	e13ffc17 	ldw	r4,-16(fp)
 8000c34:	8001b580 	call	8001b58 <__mulsi3>
 8000c38:	1007883a 	mov	r3,r2
 8000c3c:	e0bffb17 	ldw	r2,-20(fp)
 8000c40:	1887883a 	add	r3,r3,r2
 8000c44:	e0bff917 	ldw	r2,-28(fp)
 8000c48:	1885883a 	add	r2,r3,r2
 8000c4c:	1085883a 	add	r2,r2,r2
 8000c50:	10800044 	addi	r2,r2,1
 8000c54:	e0fff917 	ldw	r3,-28(fp)
 8000c58:	e13ffa17 	ldw	r4,-24(fp)
 8000c5c:	20c7883a 	add	r3,r4,r3
 8000c60:	18c00003 	ldbu	r3,0(r3)
 8000c64:	8085883a 	add	r2,r16,r2
 8000c68:	10c00005 	stb	r3,0(r2)
		i++;
 8000c6c:	e0bff917 	ldw	r2,-28(fp)
 8000c70:	10800044 	addi	r2,r2,1
 8000c74:	e0bff915 	stw	r2,-28(fp)
}

void textVGADrawColorText(char* str, int x, int y, alt_u8 background, alt_u8 foreground)
{
	int i = 0;
	while (str[i]!=0)
 8000c78:	e0bff917 	ldw	r2,-28(fp)
 8000c7c:	e0fffa17 	ldw	r3,-24(fp)
 8000c80:	1885883a 	add	r2,r3,r2
 8000c84:	10800003 	ldbu	r2,0(r2)
 8000c88:	10803fcc 	andi	r2,r2,255
 8000c8c:	1080201c 	xori	r2,r2,128
 8000c90:	10bfe004 	addi	r2,r2,-128
 8000c94:	103fd11e 	bne	r2,zero,8000bdc <__alt_data_end+0xfc000bdc>
	{
		vga_ctrl->VRAM[(y*COLUMNS + x + i) * 2] = foreground << 4 | background;
		vga_ctrl->VRAM[(y*COLUMNS + x + i) * 2 + 1] = str[i];
		i++;
	}
}
 8000c98:	0001883a 	nop
 8000c9c:	e6ffff04 	addi	sp,fp,-4
 8000ca0:	dfc00217 	ldw	ra,8(sp)
 8000ca4:	df000117 	ldw	fp,4(sp)
 8000ca8:	dc000017 	ldw	r16,0(sp)
 8000cac:	dec00304 	addi	sp,sp,12
 8000cb0:	f800283a 	ret

08000cb4 <setColorPalette>:

void setColorPalette (alt_u8 color, alt_u8 red, alt_u8 green, alt_u8 blue)
{
 8000cb4:	defffa04 	addi	sp,sp,-24
 8000cb8:	df000515 	stw	fp,20(sp)
 8000cbc:	df000504 	addi	fp,sp,20
 8000cc0:	2011883a 	mov	r8,r4
 8000cc4:	2809883a 	mov	r4,r5
 8000cc8:	3007883a 	mov	r3,r6
 8000ccc:	3805883a 	mov	r2,r7
 8000cd0:	e23ffc05 	stb	r8,-16(fp)
 8000cd4:	e13ffd05 	stb	r4,-12(fp)
 8000cd8:	e0fffe05 	stb	r3,-8(fp)
 8000cdc:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 current = vga_ctrl->PALETTE[color/2];
 8000ce0:	d0e00217 	ldw	r3,-32760(gp)
 8000ce4:	e0bffc03 	ldbu	r2,-16(fp)
 8000ce8:	1004d07a 	srli	r2,r2,1
 8000cec:	10803fcc 	andi	r2,r2,255
 8000cf0:	10820004 	addi	r2,r2,2048
 8000cf4:	1085883a 	add	r2,r2,r2
 8000cf8:	1085883a 	add	r2,r2,r2
 8000cfc:	1885883a 	add	r2,r3,r2
 8000d00:	10800017 	ldw	r2,0(r2)
 8000d04:	e0bffb15 	stw	r2,-20(fp)
	if(color%2 == 0){
 8000d08:	e0bffc03 	ldbu	r2,-16(fp)
 8000d0c:	1080004c 	andi	r2,r2,1
 8000d10:	10803fcc 	andi	r2,r2,255
 8000d14:	1000111e 	bne	r2,zero,8000d5c <setColorPalette+0xa8>
		current &=0xffffe000;
 8000d18:	e0fffb17 	ldw	r3,-20(fp)
 8000d1c:	00b80004 	movi	r2,-8192
 8000d20:	1884703a 	and	r2,r3,r2
 8000d24:	e0bffb15 	stw	r2,-20(fp)
		current += ( (red<<9) + (green<<5) + (blue<<1));
 8000d28:	e0bffd03 	ldbu	r2,-12(fp)
 8000d2c:	1006927a 	slli	r3,r2,9
 8000d30:	e0bffe03 	ldbu	r2,-8(fp)
 8000d34:	1004917a 	slli	r2,r2,5
 8000d38:	1887883a 	add	r3,r3,r2
 8000d3c:	e0bfff03 	ldbu	r2,-4(fp)
 8000d40:	1085883a 	add	r2,r2,r2
 8000d44:	1885883a 	add	r2,r3,r2
 8000d48:	1007883a 	mov	r3,r2
 8000d4c:	e0bffb17 	ldw	r2,-20(fp)
 8000d50:	10c5883a 	add	r2,r2,r3
 8000d54:	e0bffb15 	stw	r2,-20(fp)
 8000d58:	00000f06 	br	8000d98 <setColorPalette+0xe4>
	}
	else{
		current &= 0x00001fff;
 8000d5c:	e0bffb17 	ldw	r2,-20(fp)
 8000d60:	1087ffcc 	andi	r2,r2,8191
 8000d64:	e0bffb15 	stw	r2,-20(fp)
		current += ((red<<21) + (green<<17) + (blue<<13));
 8000d68:	e0bffd03 	ldbu	r2,-12(fp)
 8000d6c:	1006957a 	slli	r3,r2,21
 8000d70:	e0bffe03 	ldbu	r2,-8(fp)
 8000d74:	1004947a 	slli	r2,r2,17
 8000d78:	1887883a 	add	r3,r3,r2
 8000d7c:	e0bfff03 	ldbu	r2,-4(fp)
 8000d80:	1004937a 	slli	r2,r2,13
 8000d84:	1885883a 	add	r2,r3,r2
 8000d88:	1007883a 	mov	r3,r2
 8000d8c:	e0bffb17 	ldw	r2,-20(fp)
 8000d90:	10c5883a 	add	r2,r2,r3
 8000d94:	e0bffb15 	stw	r2,-20(fp)
	}
	vga_ctrl->PALETTE[color/2] = current;
 8000d98:	d0e00217 	ldw	r3,-32760(gp)
 8000d9c:	e0bffc03 	ldbu	r2,-16(fp)
 8000da0:	1004d07a 	srli	r2,r2,1
 8000da4:	10803fcc 	andi	r2,r2,255
 8000da8:	10820004 	addi	r2,r2,2048
 8000dac:	1085883a 	add	r2,r2,r2
 8000db0:	1085883a 	add	r2,r2,r2
 8000db4:	1885883a 	add	r2,r3,r2
 8000db8:	e0fffb17 	ldw	r3,-20(fp)
 8000dbc:	10c00015 	stw	r3,0(r2)
}
 8000dc0:	0001883a 	nop
 8000dc4:	e037883a 	mov	sp,fp
 8000dc8:	df000017 	ldw	fp,0(sp)
 8000dcc:	dec00104 	addi	sp,sp,4
 8000dd0:	f800283a 	ret

08000dd4 <textVGAColorScreenSaver>:


void textVGAColorScreenSaver()
{	//This is the function you call for your week 2 demo
 8000dd4:	deffc204 	addi	sp,sp,-248
 8000dd8:	dfc03d15 	stw	ra,244(sp)
 8000ddc:	df003c15 	stw	fp,240(sp)
 8000de0:	dcc03b15 	stw	r19,236(sp)
 8000de4:	dc803a15 	stw	r18,232(sp)
 8000de8:	dc403915 	stw	r17,228(sp)
 8000dec:	dc003815 	stw	r16,224(sp)
 8000df0:	df003c04 	addi	fp,sp,240
		unsigned int volatile direction;
		unsigned int volatile intterupt_mask;
		unsigned int volatile dontcare;
	}NIOS_PIO_t;

	NIOS_PIO_t *SW_PIO = (NIOS_PIO_t*)0x230;
 8000df4:	00808c04 	movi	r2,560
 8000df8:	e0bfd015 	stw	r2,-192(fp)
	NIOS_PIO_t *KEY0_PIO = (NIOS_PIO_t*)0x220;
 8000dfc:	00808804 	movi	r2,544
 8000e00:	e0bfd115 	stw	r2,-188(fp)
	NIOS_PIO_t *KEY1_PIO = (NIOS_PIO_t*)0x210;
 8000e04:	00808404 	movi	r2,528
 8000e08:	e0bfd215 	stw	r2,-184(fp)
	int key0_pressed = 0;
 8000e0c:	e03fc515 	stw	zero,-236(fp)
	int key1_pressed = 0;
 8000e10:	e03fc615 	stw	zero,-232(fp)

	int gain_level = 0;
 8000e14:	e03fc715 	stw	zero,-228(fp)
	int bitcrush_level = 0;
 8000e18:	e03fc815 	stw	zero,-224(fp)
	int overdr_level = 0;
 8000e1c:	e03fc915 	stw	zero,-220(fp)
	int tremolo_level = 0;
 8000e20:	e03fca15 	stw	zero,-216(fp)
	int delay_level = 0;
 8000e24:	e03fcb15 	stw	zero,-212(fp)
	int lowpass_level = 0;
 8000e28:	e03fcc15 	stw	zero,-208(fp)
	int mask[10];

	char color_string[80];
	int fg, bg, x_1, x_2, gain_y, bitcrush_y, overdr_y, tremolo_y, delay_y, lowpass_y;
	textVGAColorClr();
 8000e2c:	8000b540 	call	8000b54 <textVGAColorClr>
	fg = 1;
 8000e30:	00800044 	movi	r2,1
 8000e34:	e0bfd315 	stw	r2,-180(fp)
	bg = 6;
 8000e38:	00800184 	movi	r2,6
 8000e3c:	e0bfd415 	stw	r2,-176(fp)
	x_1 = 10;
 8000e40:	00800284 	movi	r2,10
 8000e44:	e0bfd515 	stw	r2,-172(fp)
	x_2 = 50;
 8000e48:	00800c84 	movi	r2,50
 8000e4c:	e0bfd615 	stw	r2,-168(fp)
	gain_y = 6;
 8000e50:	00800184 	movi	r2,6
 8000e54:	e0bfd715 	stw	r2,-164(fp)
	bitcrush_y = 14;
 8000e58:	00800384 	movi	r2,14
 8000e5c:	e0bfd815 	stw	r2,-160(fp)
	overdr_y = 22;
 8000e60:	00800584 	movi	r2,22
 8000e64:	e0bfd915 	stw	r2,-156(fp)
	delay_y = 6;
 8000e68:	00800184 	movi	r2,6
 8000e6c:	e0bfda15 	stw	r2,-152(fp)
	tremolo_y = 14;
 8000e70:	00800384 	movi	r2,14
 8000e74:	e0bfdb15 	stw	r2,-148(fp)
	lowpass_y = 22;
 8000e78:	00800584 	movi	r2,22
 8000e7c:	e0bfdc15 	stw	r2,-144(fp)

	for (int i = 0; i < 16; i++)
 8000e80:	e03fcd15 	stw	zero,-204(fp)
 8000e84:	00002806 	br	8000f28 <textVGAColorScreenSaver+0x154>
		{
			setColorPalette (i, colors[i].red, colors[i].green, colors[i].blue);
 8000e88:	e0bfcd17 	ldw	r2,-204(fp)
 8000e8c:	14403fcc 	andi	r17,r2,255
 8000e90:	040200b4 	movhi	r16,2050
 8000e94:	84202404 	addi	r16,r16,-32624
 8000e98:	e0bfcd17 	ldw	r2,-204(fp)
 8000e9c:	014005c4 	movi	r5,23
 8000ea0:	1009883a 	mov	r4,r2
 8000ea4:	8001b580 	call	8001b58 <__mulsi3>
 8000ea8:	8085883a 	add	r2,r16,r2
 8000eac:	10800504 	addi	r2,r2,20
 8000eb0:	10800003 	ldbu	r2,0(r2)
 8000eb4:	14803fcc 	andi	r18,r2,255
 8000eb8:	040200b4 	movhi	r16,2050
 8000ebc:	84202404 	addi	r16,r16,-32624
 8000ec0:	e0bfcd17 	ldw	r2,-204(fp)
 8000ec4:	014005c4 	movi	r5,23
 8000ec8:	1009883a 	mov	r4,r2
 8000ecc:	8001b580 	call	8001b58 <__mulsi3>
 8000ed0:	8085883a 	add	r2,r16,r2
 8000ed4:	10800544 	addi	r2,r2,21
 8000ed8:	10800003 	ldbu	r2,0(r2)
 8000edc:	14c03fcc 	andi	r19,r2,255
 8000ee0:	040200b4 	movhi	r16,2050
 8000ee4:	84202404 	addi	r16,r16,-32624
 8000ee8:	e0bfcd17 	ldw	r2,-204(fp)
 8000eec:	014005c4 	movi	r5,23
 8000ef0:	1009883a 	mov	r4,r2
 8000ef4:	8001b580 	call	8001b58 <__mulsi3>
 8000ef8:	8085883a 	add	r2,r16,r2
 8000efc:	10800584 	addi	r2,r2,22
 8000f00:	10800003 	ldbu	r2,0(r2)
 8000f04:	10803fcc 	andi	r2,r2,255
 8000f08:	100f883a 	mov	r7,r2
 8000f0c:	980d883a 	mov	r6,r19
 8000f10:	900b883a 	mov	r5,r18
 8000f14:	8809883a 	mov	r4,r17
 8000f18:	8000cb40 	call	8000cb4 <setColorPalette>
	overdr_y = 22;
	delay_y = 6;
	tremolo_y = 14;
	lowpass_y = 22;

	for (int i = 0; i < 16; i++)
 8000f1c:	e0bfcd17 	ldw	r2,-204(fp)
 8000f20:	10800044 	addi	r2,r2,1
 8000f24:	e0bfcd15 	stw	r2,-204(fp)
 8000f28:	e0bfcd17 	ldw	r2,-204(fp)
 8000f2c:	10800410 	cmplti	r2,r2,16
 8000f30:	103fd51e 	bne	r2,zero,8000e88 <__alt_data_end+0xfc000e88>
		}
	//initialize palette
	while(1){
		//create a bitmask for the switches
		int i;
		int temp = SW_PIO->data;
 8000f34:	e0bfd017 	ldw	r2,-192(fp)
 8000f38:	10800017 	ldw	r2,0(r2)
 8000f3c:	e0bfcf15 	stw	r2,-196(fp)
		for(i=0; i<10; i++){
 8000f40:	e03fce15 	stw	zero,-200(fp)
 8000f44:	00001906 	br	8000fac <textVGAColorScreenSaver+0x1d8>
			mask[i] = temp%2;
 8000f48:	e0ffcf17 	ldw	r3,-196(fp)
 8000f4c:	00a00034 	movhi	r2,32768
 8000f50:	10800044 	addi	r2,r2,1
 8000f54:	1884703a 	and	r2,r3,r2
 8000f58:	1000040e 	bge	r2,zero,8000f6c <textVGAColorScreenSaver+0x198>
 8000f5c:	10bfffc4 	addi	r2,r2,-1
 8000f60:	00ffff84 	movi	r3,-2
 8000f64:	10c4b03a 	or	r2,r2,r3
 8000f68:	10800044 	addi	r2,r2,1
 8000f6c:	1007883a 	mov	r3,r2
 8000f70:	e0bfce17 	ldw	r2,-200(fp)
 8000f74:	1085883a 	add	r2,r2,r2
 8000f78:	1085883a 	add	r2,r2,r2
 8000f7c:	e13fc504 	addi	r4,fp,-236
 8000f80:	2085883a 	add	r2,r4,r2
 8000f84:	10801904 	addi	r2,r2,100
 8000f88:	10c00015 	stw	r3,0(r2)
			temp = temp/2;
 8000f8c:	e0bfcf17 	ldw	r2,-196(fp)
 8000f90:	1006d7fa 	srli	r3,r2,31
 8000f94:	1885883a 	add	r2,r3,r2
 8000f98:	1005d07a 	srai	r2,r2,1
 8000f9c:	e0bfcf15 	stw	r2,-196(fp)
	//initialize palette
	while(1){
		//create a bitmask for the switches
		int i;
		int temp = SW_PIO->data;
		for(i=0; i<10; i++){
 8000fa0:	e0bfce17 	ldw	r2,-200(fp)
 8000fa4:	10800044 	addi	r2,r2,1
 8000fa8:	e0bfce15 	stw	r2,-200(fp)
 8000fac:	e0bfce17 	ldw	r2,-200(fp)
 8000fb0:	10800290 	cmplti	r2,r2,10
 8000fb4:	103fe41e 	bne	r2,zero,8000f48 <__alt_data_end+0xfc000f48>
			mask[i] = temp%2;
			temp = temp/2;
		}
		int select = (mask[9]*4)+(mask[8]*2)+mask[7];
 8000fb8:	e0bfe717 	ldw	r2,-100(fp)
 8000fbc:	1085883a 	add	r2,r2,r2
 8000fc0:	1007883a 	mov	r3,r2
 8000fc4:	e0bfe617 	ldw	r2,-104(fp)
 8000fc8:	1885883a 	add	r2,r3,r2
 8000fcc:	1085883a 	add	r2,r2,r2
 8000fd0:	1007883a 	mov	r3,r2
 8000fd4:	e0bfe517 	ldw	r2,-108(fp)
 8000fd8:	1885883a 	add	r2,r3,r2
 8000fdc:	e0bfdd15 	stw	r2,-140(fp)
		//check if up button has been pressed and update values accordingly
		if(KEY0_PIO->data == 1 && key0_pressed == 0){
 8000fe0:	e0bfd117 	ldw	r2,-188(fp)
 8000fe4:	10800017 	ldw	r2,0(r2)
 8000fe8:	10800058 	cmpnei	r2,r2,1
 8000fec:	1000391e 	bne	r2,zero,80010d4 <textVGAColorScreenSaver+0x300>
 8000ff0:	e0bfc517 	ldw	r2,-236(fp)
 8000ff4:	1000371e 	bne	r2,zero,80010d4 <textVGAColorScreenSaver+0x300>
			key0_pressed = 1;
 8000ff8:	00800044 	movi	r2,1
 8000ffc:	e0bfc515 	stw	r2,-236(fp)
			if(select==0 && gain_level<3){
 8001000:	e0bfdd17 	ldw	r2,-140(fp)
 8001004:	1000061e 	bne	r2,zero,8001020 <textVGAColorScreenSaver+0x24c>
 8001008:	e0bfc717 	ldw	r2,-228(fp)
 800100c:	108000c8 	cmpgei	r2,r2,3
 8001010:	1000031e 	bne	r2,zero,8001020 <textVGAColorScreenSaver+0x24c>
				gain_level = gain_level+1;
 8001014:	e0bfc717 	ldw	r2,-228(fp)
 8001018:	10800044 	addi	r2,r2,1
 800101c:	e0bfc715 	stw	r2,-228(fp)
			}
			if(select==1 && bitcrush_level<7){
 8001020:	e0bfdd17 	ldw	r2,-140(fp)
 8001024:	10800058 	cmpnei	r2,r2,1
 8001028:	1000061e 	bne	r2,zero,8001044 <textVGAColorScreenSaver+0x270>
 800102c:	e0bfc817 	ldw	r2,-224(fp)
 8001030:	108001c8 	cmpgei	r2,r2,7
 8001034:	1000031e 	bne	r2,zero,8001044 <textVGAColorScreenSaver+0x270>
				bitcrush_level = bitcrush_level+1;
 8001038:	e0bfc817 	ldw	r2,-224(fp)
 800103c:	10800044 	addi	r2,r2,1
 8001040:	e0bfc815 	stw	r2,-224(fp)
			}
			if(select==2 && overdr_level<7){
 8001044:	e0bfdd17 	ldw	r2,-140(fp)
 8001048:	10800098 	cmpnei	r2,r2,2
 800104c:	1000061e 	bne	r2,zero,8001068 <textVGAColorScreenSaver+0x294>
 8001050:	e0bfc917 	ldw	r2,-220(fp)
 8001054:	108001c8 	cmpgei	r2,r2,7
 8001058:	1000031e 	bne	r2,zero,8001068 <textVGAColorScreenSaver+0x294>
				overdr_level = overdr_level+1;
 800105c:	e0bfc917 	ldw	r2,-220(fp)
 8001060:	10800044 	addi	r2,r2,1
 8001064:	e0bfc915 	stw	r2,-220(fp)
			}
			if(select==3 && delay_level<7){
 8001068:	e0bfdd17 	ldw	r2,-140(fp)
 800106c:	108000d8 	cmpnei	r2,r2,3
 8001070:	1000061e 	bne	r2,zero,800108c <textVGAColorScreenSaver+0x2b8>
 8001074:	e0bfcb17 	ldw	r2,-212(fp)
 8001078:	108001c8 	cmpgei	r2,r2,7
 800107c:	1000031e 	bne	r2,zero,800108c <textVGAColorScreenSaver+0x2b8>
				delay_level = delay_level+1;
 8001080:	e0bfcb17 	ldw	r2,-212(fp)
 8001084:	10800044 	addi	r2,r2,1
 8001088:	e0bfcb15 	stw	r2,-212(fp)
			}
			if(select==4 && tremolo_level<3){
 800108c:	e0bfdd17 	ldw	r2,-140(fp)
 8001090:	10800118 	cmpnei	r2,r2,4
 8001094:	1000061e 	bne	r2,zero,80010b0 <textVGAColorScreenSaver+0x2dc>
 8001098:	e0bfca17 	ldw	r2,-216(fp)
 800109c:	108000c8 	cmpgei	r2,r2,3
 80010a0:	1000031e 	bne	r2,zero,80010b0 <textVGAColorScreenSaver+0x2dc>
				tremolo_level = tremolo_level+1;
 80010a4:	e0bfca17 	ldw	r2,-216(fp)
 80010a8:	10800044 	addi	r2,r2,1
 80010ac:	e0bfca15 	stw	r2,-216(fp)
			}
			if(select==5 && lowpass_level<3){
 80010b0:	e0bfdd17 	ldw	r2,-140(fp)
 80010b4:	10800158 	cmpnei	r2,r2,5
 80010b8:	1000061e 	bne	r2,zero,80010d4 <textVGAColorScreenSaver+0x300>
 80010bc:	e0bfcc17 	ldw	r2,-208(fp)
 80010c0:	108000c8 	cmpgei	r2,r2,3
 80010c4:	1000031e 	bne	r2,zero,80010d4 <textVGAColorScreenSaver+0x300>
				lowpass_level = lowpass_level+1;
 80010c8:	e0bfcc17 	ldw	r2,-208(fp)
 80010cc:	10800044 	addi	r2,r2,1
 80010d0:	e0bfcc15 	stw	r2,-208(fp)
			}
		}
		//check if down button has been pressed and update values accordingly
		if(KEY1_PIO->data == 1 && key1_pressed == 0){
 80010d4:	e0bfd217 	ldw	r2,-184(fp)
 80010d8:	10800017 	ldw	r2,0(r2)
 80010dc:	10800058 	cmpnei	r2,r2,1
 80010e0:	1000331e 	bne	r2,zero,80011b0 <textVGAColorScreenSaver+0x3dc>
 80010e4:	e0bfc617 	ldw	r2,-232(fp)
 80010e8:	1000311e 	bne	r2,zero,80011b0 <textVGAColorScreenSaver+0x3dc>
			key1_pressed = 1;
 80010ec:	00800044 	movi	r2,1
 80010f0:	e0bfc615 	stw	r2,-232(fp)
			if(select==0 && gain_level>0){
 80010f4:	e0bfdd17 	ldw	r2,-140(fp)
 80010f8:	1000051e 	bne	r2,zero,8001110 <textVGAColorScreenSaver+0x33c>
 80010fc:	e0bfc717 	ldw	r2,-228(fp)
 8001100:	0080030e 	bge	zero,r2,8001110 <textVGAColorScreenSaver+0x33c>
				gain_level = gain_level-1;
 8001104:	e0bfc717 	ldw	r2,-228(fp)
 8001108:	10bfffc4 	addi	r2,r2,-1
 800110c:	e0bfc715 	stw	r2,-228(fp)
			}
			if(select==1 && bitcrush_level>0){
 8001110:	e0bfdd17 	ldw	r2,-140(fp)
 8001114:	10800058 	cmpnei	r2,r2,1
 8001118:	1000051e 	bne	r2,zero,8001130 <textVGAColorScreenSaver+0x35c>
 800111c:	e0bfc817 	ldw	r2,-224(fp)
 8001120:	0080030e 	bge	zero,r2,8001130 <textVGAColorScreenSaver+0x35c>
				bitcrush_level = bitcrush_level-1;
 8001124:	e0bfc817 	ldw	r2,-224(fp)
 8001128:	10bfffc4 	addi	r2,r2,-1
 800112c:	e0bfc815 	stw	r2,-224(fp)
			}
			if(select==2 && overdr_level>0){
 8001130:	e0bfdd17 	ldw	r2,-140(fp)
 8001134:	10800098 	cmpnei	r2,r2,2
 8001138:	1000051e 	bne	r2,zero,8001150 <textVGAColorScreenSaver+0x37c>
 800113c:	e0bfc917 	ldw	r2,-220(fp)
 8001140:	0080030e 	bge	zero,r2,8001150 <textVGAColorScreenSaver+0x37c>
				overdr_level = overdr_level-1;
 8001144:	e0bfc917 	ldw	r2,-220(fp)
 8001148:	10bfffc4 	addi	r2,r2,-1
 800114c:	e0bfc915 	stw	r2,-220(fp)
			}
			if(select==3 && delay_level>0){
 8001150:	e0bfdd17 	ldw	r2,-140(fp)
 8001154:	108000d8 	cmpnei	r2,r2,3
 8001158:	1000051e 	bne	r2,zero,8001170 <textVGAColorScreenSaver+0x39c>
 800115c:	e0bfcb17 	ldw	r2,-212(fp)
 8001160:	0080030e 	bge	zero,r2,8001170 <textVGAColorScreenSaver+0x39c>
				delay_level = delay_level-1;
 8001164:	e0bfcb17 	ldw	r2,-212(fp)
 8001168:	10bfffc4 	addi	r2,r2,-1
 800116c:	e0bfcb15 	stw	r2,-212(fp)
			}
			if(select==4 && tremolo_level>0){
 8001170:	e0bfdd17 	ldw	r2,-140(fp)
 8001174:	10800118 	cmpnei	r2,r2,4
 8001178:	1000051e 	bne	r2,zero,8001190 <textVGAColorScreenSaver+0x3bc>
 800117c:	e0bfca17 	ldw	r2,-216(fp)
 8001180:	0080030e 	bge	zero,r2,8001190 <textVGAColorScreenSaver+0x3bc>
				tremolo_level = tremolo_level-1;
 8001184:	e0bfca17 	ldw	r2,-216(fp)
 8001188:	10bfffc4 	addi	r2,r2,-1
 800118c:	e0bfca15 	stw	r2,-216(fp)
			}
			if(select==5 && lowpass_level>0){
 8001190:	e0bfdd17 	ldw	r2,-140(fp)
 8001194:	10800158 	cmpnei	r2,r2,5
 8001198:	1000051e 	bne	r2,zero,80011b0 <textVGAColorScreenSaver+0x3dc>
 800119c:	e0bfcc17 	ldw	r2,-208(fp)
 80011a0:	0080030e 	bge	zero,r2,80011b0 <textVGAColorScreenSaver+0x3dc>
				lowpass_level = lowpass_level-1;
 80011a4:	e0bfcc17 	ldw	r2,-208(fp)
 80011a8:	10bfffc4 	addi	r2,r2,-1
 80011ac:	e0bfcc15 	stw	r2,-208(fp)
			}
		}

		//gain display
		if(mask[0]==0){
 80011b0:	e0bfde17 	ldw	r2,-136(fp)
 80011b4:	1000191e 	bne	r2,zero,800121c <textVGAColorScreenSaver+0x448>
			sprintf(color_string, "Gain Level: OFF");
 80011b8:	e0bfe804 	addi	r2,fp,-96
 80011bc:	00db9a74 	movhi	r3,28265
 80011c0:	18d851c4 	addi	r3,r3,24903
 80011c4:	10c00015 	stw	r3,0(r2)
 80011c8:	00dd9974 	movhi	r3,30309
 80011cc:	18d30804 	addi	r3,r3,19488
 80011d0:	10c00115 	stw	r3,4(r2)
 80011d4:	00c80eb4 	movhi	r3,8250
 80011d8:	18db1944 	addi	r3,r3,27749
 80011dc:	10c00215 	stw	r3,8(r2)
 80011e0:	00c011b4 	movhi	r3,70
 80011e4:	18d193c4 	addi	r3,r3,17999
 80011e8:	10c00315 	stw	r3,12(r2)
			textVGADrawColorText (color_string, x_1, gain_y, bg, fg);
 80011ec:	e0bfd417 	ldw	r2,-176(fp)
 80011f0:	11003fcc 	andi	r4,r2,255
 80011f4:	e0bfd317 	ldw	r2,-180(fp)
 80011f8:	10803fcc 	andi	r2,r2,255
 80011fc:	e0ffe804 	addi	r3,fp,-96
 8001200:	d8800015 	stw	r2,0(sp)
 8001204:	200f883a 	mov	r7,r4
 8001208:	e1bfd717 	ldw	r6,-164(fp)
 800120c:	e17fd517 	ldw	r5,-172(fp)
 8001210:	1809883a 	mov	r4,r3
 8001214:	8000ba40 	call	8000ba4 <textVGADrawColorText>
 8001218:	00002d06 	br	80012d0 <textVGAColorScreenSaver+0x4fc>
		}
		else if(gain_level==3){
 800121c:	e0bfc717 	ldw	r2,-228(fp)
 8001220:	108000d8 	cmpnei	r2,r2,3
 8001224:	1000191e 	bne	r2,zero,800128c <textVGAColorScreenSaver+0x4b8>
			sprintf(color_string, "Gain Level: MAX");
 8001228:	e0bfe804 	addi	r2,fp,-96
 800122c:	00db9a74 	movhi	r3,28265
 8001230:	18d851c4 	addi	r3,r3,24903
 8001234:	10c00015 	stw	r3,0(r2)
 8001238:	00dd9974 	movhi	r3,30309
 800123c:	18d30804 	addi	r3,r3,19488
 8001240:	10c00115 	stw	r3,4(r2)
 8001244:	00c80eb4 	movhi	r3,8250
 8001248:	18db1944 	addi	r3,r3,27749
 800124c:	10c00215 	stw	r3,8(r2)
 8001250:	00c01634 	movhi	r3,88
 8001254:	18d05344 	addi	r3,r3,16717
 8001258:	10c00315 	stw	r3,12(r2)
			textVGADrawColorText (color_string, x_1, gain_y, bg, fg);
 800125c:	e0bfd417 	ldw	r2,-176(fp)
 8001260:	11003fcc 	andi	r4,r2,255
 8001264:	e0bfd317 	ldw	r2,-180(fp)
 8001268:	10803fcc 	andi	r2,r2,255
 800126c:	e0ffe804 	addi	r3,fp,-96
 8001270:	d8800015 	stw	r2,0(sp)
 8001274:	200f883a 	mov	r7,r4
 8001278:	e1bfd717 	ldw	r6,-164(fp)
 800127c:	e17fd517 	ldw	r5,-172(fp)
 8001280:	1809883a 	mov	r4,r3
 8001284:	8000ba40 	call	8000ba4 <textVGADrawColorText>
 8001288:	00001106 	br	80012d0 <textVGAColorScreenSaver+0x4fc>

		}
		else{
			sprintf(color_string, "Gain Level: %d  ", gain_level);
 800128c:	e0bfe804 	addi	r2,fp,-96
 8001290:	e1bfc717 	ldw	r6,-228(fp)
 8001294:	01420074 	movhi	r5,2049
 8001298:	295e7004 	addi	r5,r5,31168
 800129c:	1009883a 	mov	r4,r2
 80012a0:	80029280 	call	8002928 <sprintf>
			textVGADrawColorText (color_string, x_1, gain_y, bg, fg);
 80012a4:	e0bfd417 	ldw	r2,-176(fp)
 80012a8:	11003fcc 	andi	r4,r2,255
 80012ac:	e0bfd317 	ldw	r2,-180(fp)
 80012b0:	10803fcc 	andi	r2,r2,255
 80012b4:	e0ffe804 	addi	r3,fp,-96
 80012b8:	d8800015 	stw	r2,0(sp)
 80012bc:	200f883a 	mov	r7,r4
 80012c0:	e1bfd717 	ldw	r6,-164(fp)
 80012c4:	e17fd517 	ldw	r5,-172(fp)
 80012c8:	1809883a 	mov	r4,r3
 80012cc:	8000ba40 	call	8000ba4 <textVGADrawColorText>
		}

		//bitcrusher display
		if(mask[1]==0){
 80012d0:	e0bfdf17 	ldw	r2,-132(fp)
 80012d4:	10001c1e 	bne	r2,zero,8001348 <textVGAColorScreenSaver+0x574>
			sprintf(color_string, "Bitcrush Level: OFF");
 80012d8:	e0bfe804 	addi	r2,fp,-96
 80012dc:	00d8dd34 	movhi	r3,25460
 80012e0:	18da5084 	addi	r3,r3,26946
 80012e4:	10c00015 	stw	r3,0(r2)
 80012e8:	00da1cf4 	movhi	r3,26739
 80012ec:	18dd5c84 	addi	r3,r3,30066
 80012f0:	10c00115 	stw	r3,4(r2)
 80012f4:	00dd9974 	movhi	r3,30309
 80012f8:	18d30804 	addi	r3,r3,19488
 80012fc:	10c00215 	stw	r3,8(r2)
 8001300:	00c80eb4 	movhi	r3,8250
 8001304:	18db1944 	addi	r3,r3,27749
 8001308:	10c00315 	stw	r3,12(r2)
 800130c:	00c011b4 	movhi	r3,70
 8001310:	18d193c4 	addi	r3,r3,17999
 8001314:	10c00415 	stw	r3,16(r2)
			textVGADrawColorText (color_string, x_1, bitcrush_y, bg, fg);
 8001318:	e0bfd417 	ldw	r2,-176(fp)
 800131c:	11003fcc 	andi	r4,r2,255
 8001320:	e0bfd317 	ldw	r2,-180(fp)
 8001324:	10803fcc 	andi	r2,r2,255
 8001328:	e0ffe804 	addi	r3,fp,-96
 800132c:	d8800015 	stw	r2,0(sp)
 8001330:	200f883a 	mov	r7,r4
 8001334:	e1bfd817 	ldw	r6,-160(fp)
 8001338:	e17fd517 	ldw	r5,-172(fp)
 800133c:	1809883a 	mov	r4,r3
 8001340:	8000ba40 	call	8000ba4 <textVGADrawColorText>
 8001344:	00003206 	br	8001410 <textVGAColorScreenSaver+0x63c>
		}
		else if(bitcrush_level==7){
 8001348:	e0bfc817 	ldw	r2,-224(fp)
 800134c:	108001d8 	cmpnei	r2,r2,7
 8001350:	10001c1e 	bne	r2,zero,80013c4 <textVGAColorScreenSaver+0x5f0>
			sprintf(color_string, "Bitcrush Level: MAX");
 8001354:	e0bfe804 	addi	r2,fp,-96
 8001358:	00d8dd34 	movhi	r3,25460
 800135c:	18da5084 	addi	r3,r3,26946
 8001360:	10c00015 	stw	r3,0(r2)
 8001364:	00da1cf4 	movhi	r3,26739
 8001368:	18dd5c84 	addi	r3,r3,30066
 800136c:	10c00115 	stw	r3,4(r2)
 8001370:	00dd9974 	movhi	r3,30309
 8001374:	18d30804 	addi	r3,r3,19488
 8001378:	10c00215 	stw	r3,8(r2)
 800137c:	00c80eb4 	movhi	r3,8250
 8001380:	18db1944 	addi	r3,r3,27749
 8001384:	10c00315 	stw	r3,12(r2)
 8001388:	00c01634 	movhi	r3,88
 800138c:	18d05344 	addi	r3,r3,16717
 8001390:	10c00415 	stw	r3,16(r2)
			textVGADrawColorText (color_string, x_1, bitcrush_y, bg, fg);
 8001394:	e0bfd417 	ldw	r2,-176(fp)
 8001398:	11003fcc 	andi	r4,r2,255
 800139c:	e0bfd317 	ldw	r2,-180(fp)
 80013a0:	10803fcc 	andi	r2,r2,255
 80013a4:	e0ffe804 	addi	r3,fp,-96
 80013a8:	d8800015 	stw	r2,0(sp)
 80013ac:	200f883a 	mov	r7,r4
 80013b0:	e1bfd817 	ldw	r6,-160(fp)
 80013b4:	e17fd517 	ldw	r5,-172(fp)
 80013b8:	1809883a 	mov	r4,r3
 80013bc:	8000ba40 	call	8000ba4 <textVGADrawColorText>
 80013c0:	00001306 	br	8001410 <textVGAColorScreenSaver+0x63c>

		}
		else{
			sprintf(color_string, "Bitcrush Level: %d  ", bitcrush_level+1);
 80013c4:	e0bfc817 	ldw	r2,-224(fp)
 80013c8:	10c00044 	addi	r3,r2,1
 80013cc:	e0bfe804 	addi	r2,fp,-96
 80013d0:	180d883a 	mov	r6,r3
 80013d4:	01420074 	movhi	r5,2049
 80013d8:	295e7504 	addi	r5,r5,31188
 80013dc:	1009883a 	mov	r4,r2
 80013e0:	80029280 	call	8002928 <sprintf>
			textVGADrawColorText (color_string, x_1, bitcrush_y, bg, fg);
 80013e4:	e0bfd417 	ldw	r2,-176(fp)
 80013e8:	11003fcc 	andi	r4,r2,255
 80013ec:	e0bfd317 	ldw	r2,-180(fp)
 80013f0:	10803fcc 	andi	r2,r2,255
 80013f4:	e0ffe804 	addi	r3,fp,-96
 80013f8:	d8800015 	stw	r2,0(sp)
 80013fc:	200f883a 	mov	r7,r4
 8001400:	e1bfd817 	ldw	r6,-160(fp)
 8001404:	e17fd517 	ldw	r5,-172(fp)
 8001408:	1809883a 	mov	r4,r3
 800140c:	8000ba40 	call	8000ba4 <textVGADrawColorText>
		}
		//overdrive display
		if(mask[2]==0){
 8001410:	e0bfe017 	ldw	r2,-128(fp)
 8001414:	10001d1e 	bne	r2,zero,800148c <textVGAColorScreenSaver+0x6b8>
			sprintf(color_string, "Overdrive Level: OFF");
 8001418:	e0bfe804 	addi	r2,fp,-96
 800141c:	00dc9974 	movhi	r3,29285
 8001420:	18dd93c4 	addi	r3,r3,30287
 8001424:	10c00015 	stw	r3,0(r2)
 8001428:	00dd9a74 	movhi	r3,30313
 800142c:	18dc9904 	addi	r3,r3,29284
 8001430:	10c00115 	stw	r3,4(r2)
 8001434:	00d95334 	movhi	r3,25932
 8001438:	18c81944 	addi	r3,r3,8293
 800143c:	10c00215 	stw	r3,8(r2)
 8001440:	00ce9b34 	movhi	r3,14956
 8001444:	18d95d84 	addi	r3,r3,25974
 8001448:	10c00315 	stw	r3,12(r2)
 800144c:	00d191b4 	movhi	r3,17990
 8001450:	18d3c804 	addi	r3,r3,20256
 8001454:	10c00415 	stw	r3,16(r2)
 8001458:	10000505 	stb	zero,20(r2)
			textVGADrawColorText (color_string, x_1, overdr_y, bg, fg);
 800145c:	e0bfd417 	ldw	r2,-176(fp)
 8001460:	11003fcc 	andi	r4,r2,255
 8001464:	e0bfd317 	ldw	r2,-180(fp)
 8001468:	10803fcc 	andi	r2,r2,255
 800146c:	e0ffe804 	addi	r3,fp,-96
 8001470:	d8800015 	stw	r2,0(sp)
 8001474:	200f883a 	mov	r7,r4
 8001478:	e1bfd917 	ldw	r6,-156(fp)
 800147c:	e17fd517 	ldw	r5,-172(fp)
 8001480:	1809883a 	mov	r4,r3
 8001484:	8000ba40 	call	8000ba4 <textVGADrawColorText>
 8001488:	00003306 	br	8001558 <textVGAColorScreenSaver+0x784>
		}
		else if(overdr_level==7){
 800148c:	e0bfc917 	ldw	r2,-220(fp)
 8001490:	108001d8 	cmpnei	r2,r2,7
 8001494:	10001d1e 	bne	r2,zero,800150c <textVGAColorScreenSaver+0x738>
			sprintf(color_string, "Overdrive Level: MAX");
 8001498:	e0bfe804 	addi	r2,fp,-96
 800149c:	00dc9974 	movhi	r3,29285
 80014a0:	18dd93c4 	addi	r3,r3,30287
 80014a4:	10c00015 	stw	r3,0(r2)
 80014a8:	00dd9a74 	movhi	r3,30313
 80014ac:	18dc9904 	addi	r3,r3,29284
 80014b0:	10c00115 	stw	r3,4(r2)
 80014b4:	00d95334 	movhi	r3,25932
 80014b8:	18c81944 	addi	r3,r3,8293
 80014bc:	10c00215 	stw	r3,8(r2)
 80014c0:	00ce9b34 	movhi	r3,14956
 80014c4:	18d95d84 	addi	r3,r3,25974
 80014c8:	10c00315 	stw	r3,12(r2)
 80014cc:	00d61074 	movhi	r3,22593
 80014d0:	18d34804 	addi	r3,r3,19744
 80014d4:	10c00415 	stw	r3,16(r2)
 80014d8:	10000505 	stb	zero,20(r2)
			textVGADrawColorText (color_string, x_1, overdr_y, bg, fg);
 80014dc:	e0bfd417 	ldw	r2,-176(fp)
 80014e0:	11003fcc 	andi	r4,r2,255
 80014e4:	e0bfd317 	ldw	r2,-180(fp)
 80014e8:	10803fcc 	andi	r2,r2,255
 80014ec:	e0ffe804 	addi	r3,fp,-96
 80014f0:	d8800015 	stw	r2,0(sp)
 80014f4:	200f883a 	mov	r7,r4
 80014f8:	e1bfd917 	ldw	r6,-156(fp)
 80014fc:	e17fd517 	ldw	r5,-172(fp)
 8001500:	1809883a 	mov	r4,r3
 8001504:	8000ba40 	call	8000ba4 <textVGADrawColorText>
 8001508:	00001306 	br	8001558 <textVGAColorScreenSaver+0x784>

		}
		else{
			sprintf(color_string, "Overdrive Level: %d  ", overdr_level+1);
 800150c:	e0bfc917 	ldw	r2,-220(fp)
 8001510:	10c00044 	addi	r3,r2,1
 8001514:	e0bfe804 	addi	r2,fp,-96
 8001518:	180d883a 	mov	r6,r3
 800151c:	01420074 	movhi	r5,2049
 8001520:	295e7b04 	addi	r5,r5,31212
 8001524:	1009883a 	mov	r4,r2
 8001528:	80029280 	call	8002928 <sprintf>
			textVGADrawColorText (color_string, x_1, overdr_y, bg, fg);
 800152c:	e0bfd417 	ldw	r2,-176(fp)
 8001530:	11003fcc 	andi	r4,r2,255
 8001534:	e0bfd317 	ldw	r2,-180(fp)
 8001538:	10803fcc 	andi	r2,r2,255
 800153c:	e0ffe804 	addi	r3,fp,-96
 8001540:	d8800015 	stw	r2,0(sp)
 8001544:	200f883a 	mov	r7,r4
 8001548:	e1bfd917 	ldw	r6,-156(fp)
 800154c:	e17fd517 	ldw	r5,-172(fp)
 8001550:	1809883a 	mov	r4,r3
 8001554:	8000ba40 	call	8000ba4 <textVGADrawColorText>
		}
		//delay display
		if(mask[3]==0){
 8001558:	e0bfe117 	ldw	r2,-124(fp)
 800155c:	10001a1e 	bne	r2,zero,80015c8 <textVGAColorScreenSaver+0x7f4>
			sprintf(color_string, "Delay Level: OFF");
 8001560:	e0bfe804 	addi	r2,fp,-96
 8001564:	00d85b34 	movhi	r3,24940
 8001568:	18d95104 	addi	r3,r3,25924
 800156c:	10c00015 	stw	r3,0(r2)
 8001570:	00d95334 	movhi	r3,25932
 8001574:	18c81e44 	addi	r3,r3,8313
 8001578:	10c00115 	stw	r3,4(r2)
 800157c:	00ce9b34 	movhi	r3,14956
 8001580:	18d95d84 	addi	r3,r3,25974
 8001584:	10c00215 	stw	r3,8(r2)
 8001588:	00d191b4 	movhi	r3,17990
 800158c:	18d3c804 	addi	r3,r3,20256
 8001590:	10c00315 	stw	r3,12(r2)
 8001594:	10000405 	stb	zero,16(r2)
			textVGADrawColorText (color_string, x_2, delay_y, bg, fg);
 8001598:	e0bfd417 	ldw	r2,-176(fp)
 800159c:	11003fcc 	andi	r4,r2,255
 80015a0:	e0bfd317 	ldw	r2,-180(fp)
 80015a4:	10803fcc 	andi	r2,r2,255
 80015a8:	e0ffe804 	addi	r3,fp,-96
 80015ac:	d8800015 	stw	r2,0(sp)
 80015b0:	200f883a 	mov	r7,r4
 80015b4:	e1bfda17 	ldw	r6,-152(fp)
 80015b8:	e17fd617 	ldw	r5,-168(fp)
 80015bc:	1809883a 	mov	r4,r3
 80015c0:	8000ba40 	call	8000ba4 <textVGADrawColorText>
 80015c4:	00003006 	br	8001688 <textVGAColorScreenSaver+0x8b4>
		}
		else if(delay_level==7){
 80015c8:	e0bfcb17 	ldw	r2,-212(fp)
 80015cc:	108001d8 	cmpnei	r2,r2,7
 80015d0:	10001a1e 	bne	r2,zero,800163c <textVGAColorScreenSaver+0x868>
			sprintf(color_string, "Delay Level: MAX");
 80015d4:	e0bfe804 	addi	r2,fp,-96
 80015d8:	00d85b34 	movhi	r3,24940
 80015dc:	18d95104 	addi	r3,r3,25924
 80015e0:	10c00015 	stw	r3,0(r2)
 80015e4:	00d95334 	movhi	r3,25932
 80015e8:	18c81e44 	addi	r3,r3,8313
 80015ec:	10c00115 	stw	r3,4(r2)
 80015f0:	00ce9b34 	movhi	r3,14956
 80015f4:	18d95d84 	addi	r3,r3,25974
 80015f8:	10c00215 	stw	r3,8(r2)
 80015fc:	00d61074 	movhi	r3,22593
 8001600:	18d34804 	addi	r3,r3,19744
 8001604:	10c00315 	stw	r3,12(r2)
 8001608:	10000405 	stb	zero,16(r2)
			textVGADrawColorText (color_string, x_2, delay_y, bg, fg);
 800160c:	e0bfd417 	ldw	r2,-176(fp)
 8001610:	11003fcc 	andi	r4,r2,255
 8001614:	e0bfd317 	ldw	r2,-180(fp)
 8001618:	10803fcc 	andi	r2,r2,255
 800161c:	e0ffe804 	addi	r3,fp,-96
 8001620:	d8800015 	stw	r2,0(sp)
 8001624:	200f883a 	mov	r7,r4
 8001628:	e1bfda17 	ldw	r6,-152(fp)
 800162c:	e17fd617 	ldw	r5,-168(fp)
 8001630:	1809883a 	mov	r4,r3
 8001634:	8000ba40 	call	8000ba4 <textVGADrawColorText>
 8001638:	00001306 	br	8001688 <textVGAColorScreenSaver+0x8b4>

		}
		else{
			sprintf(color_string, "Delay Level: %d  ", delay_level+1);
 800163c:	e0bfcb17 	ldw	r2,-212(fp)
 8001640:	10c00044 	addi	r3,r2,1
 8001644:	e0bfe804 	addi	r2,fp,-96
 8001648:	180d883a 	mov	r6,r3
 800164c:	01420074 	movhi	r5,2049
 8001650:	295e8104 	addi	r5,r5,31236
 8001654:	1009883a 	mov	r4,r2
 8001658:	80029280 	call	8002928 <sprintf>
			textVGADrawColorText (color_string, x_2, delay_y, bg, fg);
 800165c:	e0bfd417 	ldw	r2,-176(fp)
 8001660:	11003fcc 	andi	r4,r2,255
 8001664:	e0bfd317 	ldw	r2,-180(fp)
 8001668:	10803fcc 	andi	r2,r2,255
 800166c:	e0ffe804 	addi	r3,fp,-96
 8001670:	d8800015 	stw	r2,0(sp)
 8001674:	200f883a 	mov	r7,r4
 8001678:	e1bfda17 	ldw	r6,-152(fp)
 800167c:	e17fd617 	ldw	r5,-168(fp)
 8001680:	1809883a 	mov	r4,r3
 8001684:	8000ba40 	call	8000ba4 <textVGADrawColorText>
		}
		//tremolo display
		if(mask[4]==0){
 8001688:	e0bfe217 	ldw	r2,-120(fp)
 800168c:	10001c1e 	bne	r2,zero,8001700 <textVGAColorScreenSaver+0x92c>
			sprintf(color_string, "Tremolo Level: OFF");
 8001690:	e0bfe804 	addi	r2,fp,-96
 8001694:	00db5974 	movhi	r3,28005
 8001698:	18dc9504 	addi	r3,r3,29268
 800169c:	10c00015 	stw	r3,0(r2)
 80016a0:	00c81bf4 	movhi	r3,8303
 80016a4:	18db1bc4 	addi	r3,r3,27759
 80016a8:	10c00115 	stw	r3,4(r2)
 80016ac:	00d95db4 	movhi	r3,25974
 80016b0:	18d95304 	addi	r3,r3,25932
 80016b4:	10c00215 	stw	r3,8(r2)
 80016b8:	00d3c834 	movhi	r3,20256
 80016bc:	18ce9b04 	addi	r3,r3,14956
 80016c0:	10c00315 	stw	r3,12(r2)
 80016c4:	00d19184 	movi	r3,17990
 80016c8:	10c0040d 	sth	r3,16(r2)
 80016cc:	10000485 	stb	zero,18(r2)
			textVGADrawColorText (color_string, x_2, tremolo_y, bg, fg);
 80016d0:	e0bfd417 	ldw	r2,-176(fp)
 80016d4:	11003fcc 	andi	r4,r2,255
 80016d8:	e0bfd317 	ldw	r2,-180(fp)
 80016dc:	10803fcc 	andi	r2,r2,255
 80016e0:	e0ffe804 	addi	r3,fp,-96
 80016e4:	d8800015 	stw	r2,0(sp)
 80016e8:	200f883a 	mov	r7,r4
 80016ec:	e1bfdb17 	ldw	r6,-148(fp)
 80016f0:	e17fd617 	ldw	r5,-168(fp)
 80016f4:	1809883a 	mov	r4,r3
 80016f8:	8000ba40 	call	8000ba4 <textVGADrawColorText>
 80016fc:	00003206 	br	80017c8 <textVGAColorScreenSaver+0x9f4>
		}
		else if(tremolo_level==3){
 8001700:	e0bfca17 	ldw	r2,-216(fp)
 8001704:	108000d8 	cmpnei	r2,r2,3
 8001708:	10001c1e 	bne	r2,zero,800177c <textVGAColorScreenSaver+0x9a8>
			sprintf(color_string, "Tremolo Level: MAX");
 800170c:	e0bfe804 	addi	r2,fp,-96
 8001710:	00db5974 	movhi	r3,28005
 8001714:	18dc9504 	addi	r3,r3,29268
 8001718:	10c00015 	stw	r3,0(r2)
 800171c:	00c81bf4 	movhi	r3,8303
 8001720:	18db1bc4 	addi	r3,r3,27759
 8001724:	10c00115 	stw	r3,4(r2)
 8001728:	00d95db4 	movhi	r3,25974
 800172c:	18d95304 	addi	r3,r3,25932
 8001730:	10c00215 	stw	r3,8(r2)
 8001734:	00d34834 	movhi	r3,19744
 8001738:	18ce9b04 	addi	r3,r3,14956
 800173c:	10c00315 	stw	r3,12(r2)
 8001740:	00d61044 	movi	r3,22593
 8001744:	10c0040d 	sth	r3,16(r2)
 8001748:	10000485 	stb	zero,18(r2)
			textVGADrawColorText (color_string, x_2, tremolo_y, bg, fg);
 800174c:	e0bfd417 	ldw	r2,-176(fp)
 8001750:	11003fcc 	andi	r4,r2,255
 8001754:	e0bfd317 	ldw	r2,-180(fp)
 8001758:	10803fcc 	andi	r2,r2,255
 800175c:	e0ffe804 	addi	r3,fp,-96
 8001760:	d8800015 	stw	r2,0(sp)
 8001764:	200f883a 	mov	r7,r4
 8001768:	e1bfdb17 	ldw	r6,-148(fp)
 800176c:	e17fd617 	ldw	r5,-168(fp)
 8001770:	1809883a 	mov	r4,r3
 8001774:	8000ba40 	call	8000ba4 <textVGADrawColorText>
 8001778:	00001306 	br	80017c8 <textVGAColorScreenSaver+0x9f4>

		}
		else{
			sprintf(color_string, "Tremolo Level: %d  ", tremolo_level+1);
 800177c:	e0bfca17 	ldw	r2,-216(fp)
 8001780:	10c00044 	addi	r3,r2,1
 8001784:	e0bfe804 	addi	r2,fp,-96
 8001788:	180d883a 	mov	r6,r3
 800178c:	01420074 	movhi	r5,2049
 8001790:	295e8604 	addi	r5,r5,31256
 8001794:	1009883a 	mov	r4,r2
 8001798:	80029280 	call	8002928 <sprintf>
			textVGADrawColorText (color_string, x_2, tremolo_y, bg, fg);
 800179c:	e0bfd417 	ldw	r2,-176(fp)
 80017a0:	11003fcc 	andi	r4,r2,255
 80017a4:	e0bfd317 	ldw	r2,-180(fp)
 80017a8:	10803fcc 	andi	r2,r2,255
 80017ac:	e0ffe804 	addi	r3,fp,-96
 80017b0:	d8800015 	stw	r2,0(sp)
 80017b4:	200f883a 	mov	r7,r4
 80017b8:	e1bfdb17 	ldw	r6,-148(fp)
 80017bc:	e17fd617 	ldw	r5,-168(fp)
 80017c0:	1809883a 	mov	r4,r3
 80017c4:	8000ba40 	call	8000ba4 <textVGADrawColorText>
		}

		//lowpass display
		if(mask[5]==0){
 80017c8:	e0bfe317 	ldw	r2,-116(fp)
 80017cc:	10001c1e 	bne	r2,zero,8001840 <textVGAColorScreenSaver+0xa6c>
			sprintf(color_string, "Low Pass Level: OFF");
 80017d0:	e0bfe804 	addi	r2,fp,-96
 80017d4:	00c81df4 	movhi	r3,8311
 80017d8:	18dbd304 	addi	r3,r3,28492
 80017dc:	10c00015 	stw	r3,0(r2)
 80017e0:	00dcdcf4 	movhi	r3,29555
 80017e4:	18d85404 	addi	r3,r3,24912
 80017e8:	10c00115 	stw	r3,4(r2)
 80017ec:	00dd9974 	movhi	r3,30309
 80017f0:	18d30804 	addi	r3,r3,19488
 80017f4:	10c00215 	stw	r3,8(r2)
 80017f8:	00c80eb4 	movhi	r3,8250
 80017fc:	18db1944 	addi	r3,r3,27749
 8001800:	10c00315 	stw	r3,12(r2)
 8001804:	00c011b4 	movhi	r3,70
 8001808:	18d193c4 	addi	r3,r3,17999
 800180c:	10c00415 	stw	r3,16(r2)
			textVGADrawColorText (color_string, x_2, lowpass_y, bg, fg);
 8001810:	e0bfd417 	ldw	r2,-176(fp)
 8001814:	11003fcc 	andi	r4,r2,255
 8001818:	e0bfd317 	ldw	r2,-180(fp)
 800181c:	10803fcc 	andi	r2,r2,255
 8001820:	e0ffe804 	addi	r3,fp,-96
 8001824:	d8800015 	stw	r2,0(sp)
 8001828:	200f883a 	mov	r7,r4
 800182c:	e1bfdc17 	ldw	r6,-144(fp)
 8001830:	e17fd617 	ldw	r5,-168(fp)
 8001834:	1809883a 	mov	r4,r3
 8001838:	8000ba40 	call	8000ba4 <textVGADrawColorText>
 800183c:	00003206 	br	8001908 <textVGAColorScreenSaver+0xb34>
		}
		else if(lowpass_level==3){
 8001840:	e0bfcc17 	ldw	r2,-208(fp)
 8001844:	108000d8 	cmpnei	r2,r2,3
 8001848:	10001c1e 	bne	r2,zero,80018bc <textVGAColorScreenSaver+0xae8>
			sprintf(color_string, "Low Pass Level: MAX");
 800184c:	e0bfe804 	addi	r2,fp,-96
 8001850:	00c81df4 	movhi	r3,8311
 8001854:	18dbd304 	addi	r3,r3,28492
 8001858:	10c00015 	stw	r3,0(r2)
 800185c:	00dcdcf4 	movhi	r3,29555
 8001860:	18d85404 	addi	r3,r3,24912
 8001864:	10c00115 	stw	r3,4(r2)
 8001868:	00dd9974 	movhi	r3,30309
 800186c:	18d30804 	addi	r3,r3,19488
 8001870:	10c00215 	stw	r3,8(r2)
 8001874:	00c80eb4 	movhi	r3,8250
 8001878:	18db1944 	addi	r3,r3,27749
 800187c:	10c00315 	stw	r3,12(r2)
 8001880:	00c01634 	movhi	r3,88
 8001884:	18d05344 	addi	r3,r3,16717
 8001888:	10c00415 	stw	r3,16(r2)
			textVGADrawColorText (color_string, x_2, lowpass_y, bg, fg);
 800188c:	e0bfd417 	ldw	r2,-176(fp)
 8001890:	11003fcc 	andi	r4,r2,255
 8001894:	e0bfd317 	ldw	r2,-180(fp)
 8001898:	10803fcc 	andi	r2,r2,255
 800189c:	e0ffe804 	addi	r3,fp,-96
 80018a0:	d8800015 	stw	r2,0(sp)
 80018a4:	200f883a 	mov	r7,r4
 80018a8:	e1bfdc17 	ldw	r6,-144(fp)
 80018ac:	e17fd617 	ldw	r5,-168(fp)
 80018b0:	1809883a 	mov	r4,r3
 80018b4:	8000ba40 	call	8000ba4 <textVGADrawColorText>
 80018b8:	00001306 	br	8001908 <textVGAColorScreenSaver+0xb34>

		}
		else{
			sprintf(color_string, "Low Pass Level: %d  ", lowpass_level+1);
 80018bc:	e0bfcc17 	ldw	r2,-208(fp)
 80018c0:	10c00044 	addi	r3,r2,1
 80018c4:	e0bfe804 	addi	r2,fp,-96
 80018c8:	180d883a 	mov	r6,r3
 80018cc:	01420074 	movhi	r5,2049
 80018d0:	295e8b04 	addi	r5,r5,31276
 80018d4:	1009883a 	mov	r4,r2
 80018d8:	80029280 	call	8002928 <sprintf>
			textVGADrawColorText (color_string, x_2, lowpass_y, bg, fg);
 80018dc:	e0bfd417 	ldw	r2,-176(fp)
 80018e0:	11003fcc 	andi	r4,r2,255
 80018e4:	e0bfd317 	ldw	r2,-180(fp)
 80018e8:	10803fcc 	andi	r2,r2,255
 80018ec:	e0ffe804 	addi	r3,fp,-96
 80018f0:	d8800015 	stw	r2,0(sp)
 80018f4:	200f883a 	mov	r7,r4
 80018f8:	e1bfdc17 	ldw	r6,-144(fp)
 80018fc:	e17fd617 	ldw	r5,-168(fp)
 8001900:	1809883a 	mov	r4,r3
 8001904:	8000ba40 	call	8000ba4 <textVGADrawColorText>
		}

		if(KEY0_PIO->data == 0 && key0_pressed == 1){
 8001908:	e0bfd117 	ldw	r2,-188(fp)
 800190c:	10800017 	ldw	r2,0(r2)
 8001910:	1000041e 	bne	r2,zero,8001924 <textVGAColorScreenSaver+0xb50>
 8001914:	e0bfc517 	ldw	r2,-236(fp)
 8001918:	10800058 	cmpnei	r2,r2,1
 800191c:	1000011e 	bne	r2,zero,8001924 <textVGAColorScreenSaver+0xb50>
			key0_pressed = 0;
 8001920:	e03fc515 	stw	zero,-236(fp)
		}
		if(KEY1_PIO->data == 0 && key1_pressed == 1){
 8001924:	e0bfd217 	ldw	r2,-184(fp)
 8001928:	10800017 	ldw	r2,0(r2)
 800192c:	103d811e 	bne	r2,zero,8000f34 <__alt_data_end+0xfc000f34>
 8001930:	e0bfc617 	ldw	r2,-232(fp)
 8001934:	10800058 	cmpnei	r2,r2,1
 8001938:	103d7e1e 	bne	r2,zero,8000f34 <__alt_data_end+0xfc000f34>
			key1_pressed = 0;
 800193c:	e03fc615 	stw	zero,-232(fp)
		}
	}
 8001940:	003d7c06 	br	8000f34 <__alt_data_end+0xfc000f34>

08001944 <__fixunssfsi>:
 8001944:	defffd04 	addi	sp,sp,-12
 8001948:	dc000015 	stw	r16,0(sp)
 800194c:	0413c034 	movhi	r16,20224
 8001950:	800b883a 	mov	r5,r16
 8001954:	dc400115 	stw	r17,4(sp)
 8001958:	dfc00215 	stw	ra,8(sp)
 800195c:	2023883a 	mov	r17,r4
 8001960:	8001b800 	call	8001b80 <__gesf2>
 8001964:	1000070e 	bge	r2,zero,8001984 <__fixunssfsi+0x40>
 8001968:	8809883a 	mov	r4,r17
 800196c:	80025500 	call	8002550 <__fixsfsi>
 8001970:	dfc00217 	ldw	ra,8(sp)
 8001974:	dc400117 	ldw	r17,4(sp)
 8001978:	dc000017 	ldw	r16,0(sp)
 800197c:	dec00304 	addi	sp,sp,12
 8001980:	f800283a 	ret
 8001984:	800b883a 	mov	r5,r16
 8001988:	8809883a 	mov	r4,r17
 800198c:	800206c0 	call	800206c <__subsf3>
 8001990:	1009883a 	mov	r4,r2
 8001994:	80025500 	call	8002550 <__fixsfsi>
 8001998:	00e00034 	movhi	r3,32768
 800199c:	10c5883a 	add	r2,r2,r3
 80019a0:	003ff306 	br	8001970 <__alt_data_end+0xfc001970>

080019a4 <__divsi3>:
 80019a4:	20001b16 	blt	r4,zero,8001a14 <__divsi3+0x70>
 80019a8:	000f883a 	mov	r7,zero
 80019ac:	28001616 	blt	r5,zero,8001a08 <__divsi3+0x64>
 80019b0:	200d883a 	mov	r6,r4
 80019b4:	29001a2e 	bgeu	r5,r4,8001a20 <__divsi3+0x7c>
 80019b8:	00800804 	movi	r2,32
 80019bc:	00c00044 	movi	r3,1
 80019c0:	00000106 	br	80019c8 <__divsi3+0x24>
 80019c4:	10000d26 	beq	r2,zero,80019fc <__divsi3+0x58>
 80019c8:	294b883a 	add	r5,r5,r5
 80019cc:	10bfffc4 	addi	r2,r2,-1
 80019d0:	18c7883a 	add	r3,r3,r3
 80019d4:	293ffb36 	bltu	r5,r4,80019c4 <__alt_data_end+0xfc0019c4>
 80019d8:	0005883a 	mov	r2,zero
 80019dc:	18000726 	beq	r3,zero,80019fc <__divsi3+0x58>
 80019e0:	0005883a 	mov	r2,zero
 80019e4:	31400236 	bltu	r6,r5,80019f0 <__divsi3+0x4c>
 80019e8:	314dc83a 	sub	r6,r6,r5
 80019ec:	10c4b03a 	or	r2,r2,r3
 80019f0:	1806d07a 	srli	r3,r3,1
 80019f4:	280ad07a 	srli	r5,r5,1
 80019f8:	183ffa1e 	bne	r3,zero,80019e4 <__alt_data_end+0xfc0019e4>
 80019fc:	38000126 	beq	r7,zero,8001a04 <__divsi3+0x60>
 8001a00:	0085c83a 	sub	r2,zero,r2
 8001a04:	f800283a 	ret
 8001a08:	014bc83a 	sub	r5,zero,r5
 8001a0c:	39c0005c 	xori	r7,r7,1
 8001a10:	003fe706 	br	80019b0 <__alt_data_end+0xfc0019b0>
 8001a14:	0109c83a 	sub	r4,zero,r4
 8001a18:	01c00044 	movi	r7,1
 8001a1c:	003fe306 	br	80019ac <__alt_data_end+0xfc0019ac>
 8001a20:	00c00044 	movi	r3,1
 8001a24:	003fee06 	br	80019e0 <__alt_data_end+0xfc0019e0>

08001a28 <__modsi3>:
 8001a28:	20001716 	blt	r4,zero,8001a88 <__modsi3+0x60>
 8001a2c:	000f883a 	mov	r7,zero
 8001a30:	2005883a 	mov	r2,r4
 8001a34:	28001216 	blt	r5,zero,8001a80 <__modsi3+0x58>
 8001a38:	2900162e 	bgeu	r5,r4,8001a94 <__modsi3+0x6c>
 8001a3c:	01800804 	movi	r6,32
 8001a40:	00c00044 	movi	r3,1
 8001a44:	00000106 	br	8001a4c <__modsi3+0x24>
 8001a48:	30000a26 	beq	r6,zero,8001a74 <__modsi3+0x4c>
 8001a4c:	294b883a 	add	r5,r5,r5
 8001a50:	31bfffc4 	addi	r6,r6,-1
 8001a54:	18c7883a 	add	r3,r3,r3
 8001a58:	293ffb36 	bltu	r5,r4,8001a48 <__alt_data_end+0xfc001a48>
 8001a5c:	18000526 	beq	r3,zero,8001a74 <__modsi3+0x4c>
 8001a60:	1806d07a 	srli	r3,r3,1
 8001a64:	11400136 	bltu	r2,r5,8001a6c <__modsi3+0x44>
 8001a68:	1145c83a 	sub	r2,r2,r5
 8001a6c:	280ad07a 	srli	r5,r5,1
 8001a70:	183ffb1e 	bne	r3,zero,8001a60 <__alt_data_end+0xfc001a60>
 8001a74:	38000126 	beq	r7,zero,8001a7c <__modsi3+0x54>
 8001a78:	0085c83a 	sub	r2,zero,r2
 8001a7c:	f800283a 	ret
 8001a80:	014bc83a 	sub	r5,zero,r5
 8001a84:	003fec06 	br	8001a38 <__alt_data_end+0xfc001a38>
 8001a88:	0109c83a 	sub	r4,zero,r4
 8001a8c:	01c00044 	movi	r7,1
 8001a90:	003fe706 	br	8001a30 <__alt_data_end+0xfc001a30>
 8001a94:	00c00044 	movi	r3,1
 8001a98:	003ff106 	br	8001a60 <__alt_data_end+0xfc001a60>

08001a9c <__udivsi3>:
 8001a9c:	200d883a 	mov	r6,r4
 8001aa0:	2900152e 	bgeu	r5,r4,8001af8 <__udivsi3+0x5c>
 8001aa4:	28001416 	blt	r5,zero,8001af8 <__udivsi3+0x5c>
 8001aa8:	00800804 	movi	r2,32
 8001aac:	00c00044 	movi	r3,1
 8001ab0:	00000206 	br	8001abc <__udivsi3+0x20>
 8001ab4:	10000e26 	beq	r2,zero,8001af0 <__udivsi3+0x54>
 8001ab8:	28000516 	blt	r5,zero,8001ad0 <__udivsi3+0x34>
 8001abc:	294b883a 	add	r5,r5,r5
 8001ac0:	10bfffc4 	addi	r2,r2,-1
 8001ac4:	18c7883a 	add	r3,r3,r3
 8001ac8:	293ffa36 	bltu	r5,r4,8001ab4 <__alt_data_end+0xfc001ab4>
 8001acc:	18000826 	beq	r3,zero,8001af0 <__udivsi3+0x54>
 8001ad0:	0005883a 	mov	r2,zero
 8001ad4:	31400236 	bltu	r6,r5,8001ae0 <__udivsi3+0x44>
 8001ad8:	314dc83a 	sub	r6,r6,r5
 8001adc:	10c4b03a 	or	r2,r2,r3
 8001ae0:	1806d07a 	srli	r3,r3,1
 8001ae4:	280ad07a 	srli	r5,r5,1
 8001ae8:	183ffa1e 	bne	r3,zero,8001ad4 <__alt_data_end+0xfc001ad4>
 8001aec:	f800283a 	ret
 8001af0:	0005883a 	mov	r2,zero
 8001af4:	f800283a 	ret
 8001af8:	00c00044 	movi	r3,1
 8001afc:	003ff406 	br	8001ad0 <__alt_data_end+0xfc001ad0>

08001b00 <__umodsi3>:
 8001b00:	2005883a 	mov	r2,r4
 8001b04:	2900122e 	bgeu	r5,r4,8001b50 <__umodsi3+0x50>
 8001b08:	28001116 	blt	r5,zero,8001b50 <__umodsi3+0x50>
 8001b0c:	01800804 	movi	r6,32
 8001b10:	00c00044 	movi	r3,1
 8001b14:	00000206 	br	8001b20 <__umodsi3+0x20>
 8001b18:	30000c26 	beq	r6,zero,8001b4c <__umodsi3+0x4c>
 8001b1c:	28000516 	blt	r5,zero,8001b34 <__umodsi3+0x34>
 8001b20:	294b883a 	add	r5,r5,r5
 8001b24:	31bfffc4 	addi	r6,r6,-1
 8001b28:	18c7883a 	add	r3,r3,r3
 8001b2c:	293ffa36 	bltu	r5,r4,8001b18 <__alt_data_end+0xfc001b18>
 8001b30:	18000626 	beq	r3,zero,8001b4c <__umodsi3+0x4c>
 8001b34:	1806d07a 	srli	r3,r3,1
 8001b38:	11400136 	bltu	r2,r5,8001b40 <__umodsi3+0x40>
 8001b3c:	1145c83a 	sub	r2,r2,r5
 8001b40:	280ad07a 	srli	r5,r5,1
 8001b44:	183ffb1e 	bne	r3,zero,8001b34 <__alt_data_end+0xfc001b34>
 8001b48:	f800283a 	ret
 8001b4c:	f800283a 	ret
 8001b50:	00c00044 	movi	r3,1
 8001b54:	003ff706 	br	8001b34 <__alt_data_end+0xfc001b34>

08001b58 <__mulsi3>:
 8001b58:	0005883a 	mov	r2,zero
 8001b5c:	20000726 	beq	r4,zero,8001b7c <__mulsi3+0x24>
 8001b60:	20c0004c 	andi	r3,r4,1
 8001b64:	2008d07a 	srli	r4,r4,1
 8001b68:	18000126 	beq	r3,zero,8001b70 <__mulsi3+0x18>
 8001b6c:	1145883a 	add	r2,r2,r5
 8001b70:	294b883a 	add	r5,r5,r5
 8001b74:	203ffa1e 	bne	r4,zero,8001b60 <__alt_data_end+0xfc001b60>
 8001b78:	f800283a 	ret
 8001b7c:	f800283a 	ret

08001b80 <__gesf2>:
 8001b80:	2004d5fa 	srli	r2,r4,23
 8001b84:	2806d5fa 	srli	r3,r5,23
 8001b88:	01802034 	movhi	r6,128
 8001b8c:	31bfffc4 	addi	r6,r6,-1
 8001b90:	10803fcc 	andi	r2,r2,255
 8001b94:	01c03fc4 	movi	r7,255
 8001b98:	3110703a 	and	r8,r6,r4
 8001b9c:	18c03fcc 	andi	r3,r3,255
 8001ba0:	314c703a 	and	r6,r6,r5
 8001ba4:	2008d7fa 	srli	r4,r4,31
 8001ba8:	280ad7fa 	srli	r5,r5,31
 8001bac:	11c01926 	beq	r2,r7,8001c14 <__gesf2+0x94>
 8001bb0:	01c03fc4 	movi	r7,255
 8001bb4:	19c00f26 	beq	r3,r7,8001bf4 <__gesf2+0x74>
 8001bb8:	1000061e 	bne	r2,zero,8001bd4 <__gesf2+0x54>
 8001bbc:	400f003a 	cmpeq	r7,r8,zero
 8001bc0:	1800071e 	bne	r3,zero,8001be0 <__gesf2+0x60>
 8001bc4:	3000061e 	bne	r6,zero,8001be0 <__gesf2+0x60>
 8001bc8:	0005883a 	mov	r2,zero
 8001bcc:	40000e1e 	bne	r8,zero,8001c08 <__gesf2+0x88>
 8001bd0:	f800283a 	ret
 8001bd4:	18000a1e 	bne	r3,zero,8001c00 <__gesf2+0x80>
 8001bd8:	30000b26 	beq	r6,zero,8001c08 <__gesf2+0x88>
 8001bdc:	000f883a 	mov	r7,zero
 8001be0:	29403fcc 	andi	r5,r5,255
 8001be4:	38000726 	beq	r7,zero,8001c04 <__gesf2+0x84>
 8001be8:	28000826 	beq	r5,zero,8001c0c <__gesf2+0x8c>
 8001bec:	00800044 	movi	r2,1
 8001bf0:	f800283a 	ret
 8001bf4:	303ff026 	beq	r6,zero,8001bb8 <__alt_data_end+0xfc001bb8>
 8001bf8:	00bfff84 	movi	r2,-2
 8001bfc:	f800283a 	ret
 8001c00:	29403fcc 	andi	r5,r5,255
 8001c04:	21400526 	beq	r4,r5,8001c1c <__gesf2+0x9c>
 8001c08:	203ff826 	beq	r4,zero,8001bec <__alt_data_end+0xfc001bec>
 8001c0c:	00bfffc4 	movi	r2,-1
 8001c10:	f800283a 	ret
 8001c14:	403fe626 	beq	r8,zero,8001bb0 <__alt_data_end+0xfc001bb0>
 8001c18:	003ff706 	br	8001bf8 <__alt_data_end+0xfc001bf8>
 8001c1c:	18bffa16 	blt	r3,r2,8001c08 <__alt_data_end+0xfc001c08>
 8001c20:	10c00216 	blt	r2,r3,8001c2c <__gesf2+0xac>
 8001c24:	323ff836 	bltu	r6,r8,8001c08 <__alt_data_end+0xfc001c08>
 8001c28:	4180022e 	bgeu	r8,r6,8001c34 <__gesf2+0xb4>
 8001c2c:	203fef1e 	bne	r4,zero,8001bec <__alt_data_end+0xfc001bec>
 8001c30:	003ff606 	br	8001c0c <__alt_data_end+0xfc001c0c>
 8001c34:	0005883a 	mov	r2,zero
 8001c38:	f800283a 	ret

08001c3c <__mulsf3>:
 8001c3c:	defff504 	addi	sp,sp,-44
 8001c40:	dc000115 	stw	r16,4(sp)
 8001c44:	2020d5fa 	srli	r16,r4,23
 8001c48:	dd400615 	stw	r21,24(sp)
 8001c4c:	202ad7fa 	srli	r21,r4,31
 8001c50:	dc800315 	stw	r18,12(sp)
 8001c54:	04802034 	movhi	r18,128
 8001c58:	df000915 	stw	fp,36(sp)
 8001c5c:	dd000515 	stw	r20,20(sp)
 8001c60:	94bfffc4 	addi	r18,r18,-1
 8001c64:	dfc00a15 	stw	ra,40(sp)
 8001c68:	ddc00815 	stw	r23,32(sp)
 8001c6c:	dd800715 	stw	r22,28(sp)
 8001c70:	dcc00415 	stw	r19,16(sp)
 8001c74:	dc400215 	stw	r17,8(sp)
 8001c78:	84003fcc 	andi	r16,r16,255
 8001c7c:	9124703a 	and	r18,r18,r4
 8001c80:	a829883a 	mov	r20,r21
 8001c84:	af003fcc 	andi	fp,r21,255
 8001c88:	80005426 	beq	r16,zero,8001ddc <__mulsf3+0x1a0>
 8001c8c:	00803fc4 	movi	r2,255
 8001c90:	80802f26 	beq	r16,r2,8001d50 <__mulsf3+0x114>
 8001c94:	91002034 	orhi	r4,r18,128
 8001c98:	202490fa 	slli	r18,r4,3
 8001c9c:	843fe044 	addi	r16,r16,-127
 8001ca0:	0023883a 	mov	r17,zero
 8001ca4:	002f883a 	mov	r23,zero
 8001ca8:	2804d5fa 	srli	r2,r5,23
 8001cac:	282cd7fa 	srli	r22,r5,31
 8001cb0:	01002034 	movhi	r4,128
 8001cb4:	213fffc4 	addi	r4,r4,-1
 8001cb8:	10803fcc 	andi	r2,r2,255
 8001cbc:	2166703a 	and	r19,r4,r5
 8001cc0:	b1803fcc 	andi	r6,r22,255
 8001cc4:	10004c26 	beq	r2,zero,8001df8 <__mulsf3+0x1bc>
 8001cc8:	00c03fc4 	movi	r3,255
 8001ccc:	10c04726 	beq	r2,r3,8001dec <__mulsf3+0x1b0>
 8001cd0:	99002034 	orhi	r4,r19,128
 8001cd4:	202690fa 	slli	r19,r4,3
 8001cd8:	10bfe044 	addi	r2,r2,-127
 8001cdc:	0007883a 	mov	r3,zero
 8001ce0:	80a1883a 	add	r16,r16,r2
 8001ce4:	010003c4 	movi	r4,15
 8001ce8:	1c44b03a 	or	r2,r3,r17
 8001cec:	b56af03a 	xor	r21,r22,r21
 8001cf0:	81c00044 	addi	r7,r16,1
 8001cf4:	20806b36 	bltu	r4,r2,8001ea4 <__mulsf3+0x268>
 8001cf8:	100490ba 	slli	r2,r2,2
 8001cfc:	01020034 	movhi	r4,2048
 8001d00:	21074404 	addi	r4,r4,7440
 8001d04:	1105883a 	add	r2,r2,r4
 8001d08:	10800017 	ldw	r2,0(r2)
 8001d0c:	1000683a 	jmp	r2
 8001d10:	08001ea4 	muli	zero,at,122
 8001d14:	08001d64 	muli	zero,at,117
 8001d18:	08001d64 	muli	zero,at,117
 8001d1c:	08001d60 	cmpeqi	zero,at,117
 8001d20:	08001e88 	cmpgei	zero,at,122
 8001d24:	08001e88 	cmpgei	zero,at,122
 8001d28:	08001e74 	orhi	zero,at,121
 8001d2c:	08001d60 	cmpeqi	zero,at,117
 8001d30:	08001e88 	cmpgei	zero,at,122
 8001d34:	08001e74 	orhi	zero,at,121
 8001d38:	08001e88 	cmpgei	zero,at,122
 8001d3c:	08001d60 	cmpeqi	zero,at,117
 8001d40:	08001e94 	ori	zero,at,122
 8001d44:	08001e94 	ori	zero,at,122
 8001d48:	08001e94 	ori	zero,at,122
 8001d4c:	08001fa4 	muli	zero,at,126
 8001d50:	90003b1e 	bne	r18,zero,8001e40 <__mulsf3+0x204>
 8001d54:	04400204 	movi	r17,8
 8001d58:	05c00084 	movi	r23,2
 8001d5c:	003fd206 	br	8001ca8 <__alt_data_end+0xfc001ca8>
 8001d60:	302b883a 	mov	r21,r6
 8001d64:	00800084 	movi	r2,2
 8001d68:	18802626 	beq	r3,r2,8001e04 <__mulsf3+0x1c8>
 8001d6c:	008000c4 	movi	r2,3
 8001d70:	1880b826 	beq	r3,r2,8002054 <__mulsf3+0x418>
 8001d74:	00800044 	movi	r2,1
 8001d78:	1880af1e 	bne	r3,r2,8002038 <__mulsf3+0x3fc>
 8001d7c:	a829883a 	mov	r20,r21
 8001d80:	0007883a 	mov	r3,zero
 8001d84:	0009883a 	mov	r4,zero
 8001d88:	18803fcc 	andi	r2,r3,255
 8001d8c:	100695fa 	slli	r3,r2,23
 8001d90:	a0803fcc 	andi	r2,r20,255
 8001d94:	100a97fa 	slli	r5,r2,31
 8001d98:	00802034 	movhi	r2,128
 8001d9c:	10bfffc4 	addi	r2,r2,-1
 8001da0:	2084703a 	and	r2,r4,r2
 8001da4:	10c4b03a 	or	r2,r2,r3
 8001da8:	1144b03a 	or	r2,r2,r5
 8001dac:	dfc00a17 	ldw	ra,40(sp)
 8001db0:	df000917 	ldw	fp,36(sp)
 8001db4:	ddc00817 	ldw	r23,32(sp)
 8001db8:	dd800717 	ldw	r22,28(sp)
 8001dbc:	dd400617 	ldw	r21,24(sp)
 8001dc0:	dd000517 	ldw	r20,20(sp)
 8001dc4:	dcc00417 	ldw	r19,16(sp)
 8001dc8:	dc800317 	ldw	r18,12(sp)
 8001dcc:	dc400217 	ldw	r17,8(sp)
 8001dd0:	dc000117 	ldw	r16,4(sp)
 8001dd4:	dec00b04 	addi	sp,sp,44
 8001dd8:	f800283a 	ret
 8001ddc:	90000d1e 	bne	r18,zero,8001e14 <__mulsf3+0x1d8>
 8001de0:	04400104 	movi	r17,4
 8001de4:	05c00044 	movi	r23,1
 8001de8:	003faf06 	br	8001ca8 <__alt_data_end+0xfc001ca8>
 8001dec:	9806c03a 	cmpne	r3,r19,zero
 8001df0:	18c00084 	addi	r3,r3,2
 8001df4:	003fba06 	br	8001ce0 <__alt_data_end+0xfc001ce0>
 8001df8:	9800141e 	bne	r19,zero,8001e4c <__mulsf3+0x210>
 8001dfc:	00c00044 	movi	r3,1
 8001e00:	003fb706 	br	8001ce0 <__alt_data_end+0xfc001ce0>
 8001e04:	a829883a 	mov	r20,r21
 8001e08:	00ffffc4 	movi	r3,-1
 8001e0c:	0009883a 	mov	r4,zero
 8001e10:	003fdd06 	br	8001d88 <__alt_data_end+0xfc001d88>
 8001e14:	9009883a 	mov	r4,r18
 8001e18:	d9400015 	stw	r5,0(sp)
 8001e1c:	80026b00 	call	80026b0 <__clzsi2>
 8001e20:	10fffec4 	addi	r3,r2,-5
 8001e24:	10801d84 	addi	r2,r2,118
 8001e28:	90e4983a 	sll	r18,r18,r3
 8001e2c:	00a1c83a 	sub	r16,zero,r2
 8001e30:	0023883a 	mov	r17,zero
 8001e34:	002f883a 	mov	r23,zero
 8001e38:	d9400017 	ldw	r5,0(sp)
 8001e3c:	003f9a06 	br	8001ca8 <__alt_data_end+0xfc001ca8>
 8001e40:	04400304 	movi	r17,12
 8001e44:	05c000c4 	movi	r23,3
 8001e48:	003f9706 	br	8001ca8 <__alt_data_end+0xfc001ca8>
 8001e4c:	9809883a 	mov	r4,r19
 8001e50:	d9800015 	stw	r6,0(sp)
 8001e54:	80026b00 	call	80026b0 <__clzsi2>
 8001e58:	10fffec4 	addi	r3,r2,-5
 8001e5c:	10801d84 	addi	r2,r2,118
 8001e60:	98e6983a 	sll	r19,r19,r3
 8001e64:	0085c83a 	sub	r2,zero,r2
 8001e68:	0007883a 	mov	r3,zero
 8001e6c:	d9800017 	ldw	r6,0(sp)
 8001e70:	003f9b06 	br	8001ce0 <__alt_data_end+0xfc001ce0>
 8001e74:	01002034 	movhi	r4,128
 8001e78:	0029883a 	mov	r20,zero
 8001e7c:	213fffc4 	addi	r4,r4,-1
 8001e80:	00ffffc4 	movi	r3,-1
 8001e84:	003fc006 	br	8001d88 <__alt_data_end+0xfc001d88>
 8001e88:	9027883a 	mov	r19,r18
 8001e8c:	b807883a 	mov	r3,r23
 8001e90:	003fb406 	br	8001d64 <__alt_data_end+0xfc001d64>
 8001e94:	9027883a 	mov	r19,r18
 8001e98:	e02b883a 	mov	r21,fp
 8001e9c:	b807883a 	mov	r3,r23
 8001ea0:	003fb006 	br	8001d64 <__alt_data_end+0xfc001d64>
 8001ea4:	9028d43a 	srli	r20,r18,16
 8001ea8:	982cd43a 	srli	r22,r19,16
 8001eac:	94bfffcc 	andi	r18,r18,65535
 8001eb0:	9cffffcc 	andi	r19,r19,65535
 8001eb4:	980b883a 	mov	r5,r19
 8001eb8:	9009883a 	mov	r4,r18
 8001ebc:	d9c00015 	stw	r7,0(sp)
 8001ec0:	8001b580 	call	8001b58 <__mulsi3>
 8001ec4:	a00b883a 	mov	r5,r20
 8001ec8:	9809883a 	mov	r4,r19
 8001ecc:	1023883a 	mov	r17,r2
 8001ed0:	8001b580 	call	8001b58 <__mulsi3>
 8001ed4:	a009883a 	mov	r4,r20
 8001ed8:	b00b883a 	mov	r5,r22
 8001edc:	1027883a 	mov	r19,r2
 8001ee0:	8001b580 	call	8001b58 <__mulsi3>
 8001ee4:	b00b883a 	mov	r5,r22
 8001ee8:	9009883a 	mov	r4,r18
 8001eec:	1029883a 	mov	r20,r2
 8001ef0:	8001b580 	call	8001b58 <__mulsi3>
 8001ef4:	8806d43a 	srli	r3,r17,16
 8001ef8:	14c5883a 	add	r2,r2,r19
 8001efc:	d9c00017 	ldw	r7,0(sp)
 8001f00:	1885883a 	add	r2,r3,r2
 8001f04:	14c0022e 	bgeu	r2,r19,8001f10 <__mulsf3+0x2d4>
 8001f08:	00c00074 	movhi	r3,1
 8001f0c:	a0e9883a 	add	r20,r20,r3
 8001f10:	1026943a 	slli	r19,r2,16
 8001f14:	8c7fffcc 	andi	r17,r17,65535
 8001f18:	1004d43a 	srli	r2,r2,16
 8001f1c:	9c63883a 	add	r17,r19,r17
 8001f20:	882691ba 	slli	r19,r17,6
 8001f24:	1505883a 	add	r2,r2,r20
 8001f28:	8822d6ba 	srli	r17,r17,26
 8001f2c:	100891ba 	slli	r4,r2,6
 8001f30:	9826c03a 	cmpne	r19,r19,zero
 8001f34:	9c62b03a 	or	r17,r19,r17
 8001f38:	8926b03a 	or	r19,r17,r4
 8001f3c:	9882002c 	andhi	r2,r19,2048
 8001f40:	10000426 	beq	r2,zero,8001f54 <__mulsf3+0x318>
 8001f44:	9804d07a 	srli	r2,r19,1
 8001f48:	9900004c 	andi	r4,r19,1
 8001f4c:	3821883a 	mov	r16,r7
 8001f50:	1126b03a 	or	r19,r2,r4
 8001f54:	80c01fc4 	addi	r3,r16,127
 8001f58:	00c0210e 	bge	zero,r3,8001fe0 <__mulsf3+0x3a4>
 8001f5c:	988001cc 	andi	r2,r19,7
 8001f60:	10000426 	beq	r2,zero,8001f74 <__mulsf3+0x338>
 8001f64:	988003cc 	andi	r2,r19,15
 8001f68:	01000104 	movi	r4,4
 8001f6c:	11000126 	beq	r2,r4,8001f74 <__mulsf3+0x338>
 8001f70:	9927883a 	add	r19,r19,r4
 8001f74:	9882002c 	andhi	r2,r19,2048
 8001f78:	10000426 	beq	r2,zero,8001f8c <__mulsf3+0x350>
 8001f7c:	00be0034 	movhi	r2,63488
 8001f80:	10bfffc4 	addi	r2,r2,-1
 8001f84:	80c02004 	addi	r3,r16,128
 8001f88:	98a6703a 	and	r19,r19,r2
 8001f8c:	00803f84 	movi	r2,254
 8001f90:	10ff9c16 	blt	r2,r3,8001e04 <__alt_data_end+0xfc001e04>
 8001f94:	980891ba 	slli	r4,r19,6
 8001f98:	a829883a 	mov	r20,r21
 8001f9c:	2008d27a 	srli	r4,r4,9
 8001fa0:	003f7906 	br	8001d88 <__alt_data_end+0xfc001d88>
 8001fa4:	9080102c 	andhi	r2,r18,64
 8001fa8:	10000826 	beq	r2,zero,8001fcc <__mulsf3+0x390>
 8001fac:	9880102c 	andhi	r2,r19,64
 8001fb0:	1000061e 	bne	r2,zero,8001fcc <__mulsf3+0x390>
 8001fb4:	00802034 	movhi	r2,128
 8001fb8:	99001034 	orhi	r4,r19,64
 8001fbc:	10bfffc4 	addi	r2,r2,-1
 8001fc0:	b029883a 	mov	r20,r22
 8001fc4:	2088703a 	and	r4,r4,r2
 8001fc8:	003fad06 	br	8001e80 <__alt_data_end+0xfc001e80>
 8001fcc:	00802034 	movhi	r2,128
 8001fd0:	91001034 	orhi	r4,r18,64
 8001fd4:	10bfffc4 	addi	r2,r2,-1
 8001fd8:	2088703a 	and	r4,r4,r2
 8001fdc:	003fa806 	br	8001e80 <__alt_data_end+0xfc001e80>
 8001fe0:	00800044 	movi	r2,1
 8001fe4:	10c7c83a 	sub	r3,r2,r3
 8001fe8:	008006c4 	movi	r2,27
 8001fec:	10ff6316 	blt	r2,r3,8001d7c <__alt_data_end+0xfc001d7c>
 8001ff0:	00800804 	movi	r2,32
 8001ff4:	10c5c83a 	sub	r2,r2,r3
 8001ff8:	9884983a 	sll	r2,r19,r2
 8001ffc:	98c6d83a 	srl	r3,r19,r3
 8002000:	1004c03a 	cmpne	r2,r2,zero
 8002004:	1884b03a 	or	r2,r3,r2
 8002008:	10c001cc 	andi	r3,r2,7
 800200c:	18000426 	beq	r3,zero,8002020 <__mulsf3+0x3e4>
 8002010:	10c003cc 	andi	r3,r2,15
 8002014:	01000104 	movi	r4,4
 8002018:	19000126 	beq	r3,r4,8002020 <__mulsf3+0x3e4>
 800201c:	1105883a 	add	r2,r2,r4
 8002020:	10c1002c 	andhi	r3,r2,1024
 8002024:	18000626 	beq	r3,zero,8002040 <__mulsf3+0x404>
 8002028:	a829883a 	mov	r20,r21
 800202c:	00c00044 	movi	r3,1
 8002030:	0009883a 	mov	r4,zero
 8002034:	003f5406 	br	8001d88 <__alt_data_end+0xfc001d88>
 8002038:	3821883a 	mov	r16,r7
 800203c:	003fc506 	br	8001f54 <__alt_data_end+0xfc001f54>
 8002040:	100491ba 	slli	r2,r2,6
 8002044:	a829883a 	mov	r20,r21
 8002048:	0007883a 	mov	r3,zero
 800204c:	1008d27a 	srli	r4,r2,9
 8002050:	003f4d06 	br	8001d88 <__alt_data_end+0xfc001d88>
 8002054:	00802034 	movhi	r2,128
 8002058:	99001034 	orhi	r4,r19,64
 800205c:	10bfffc4 	addi	r2,r2,-1
 8002060:	a829883a 	mov	r20,r21
 8002064:	2088703a 	and	r4,r4,r2
 8002068:	003f8506 	br	8001e80 <__alt_data_end+0xfc001e80>

0800206c <__subsf3>:
 800206c:	defffc04 	addi	sp,sp,-16
 8002070:	280cd5fa 	srli	r6,r5,23
 8002074:	dc000015 	stw	r16,0(sp)
 8002078:	01c02034 	movhi	r7,128
 800207c:	2020d5fa 	srli	r16,r4,23
 8002080:	39ffffc4 	addi	r7,r7,-1
 8002084:	3906703a 	and	r3,r7,r4
 8002088:	dc400115 	stw	r17,4(sp)
 800208c:	394e703a 	and	r7,r7,r5
 8002090:	2022d7fa 	srli	r17,r4,31
 8002094:	dfc00315 	stw	ra,12(sp)
 8002098:	dc800215 	stw	r18,8(sp)
 800209c:	31803fcc 	andi	r6,r6,255
 80020a0:	01003fc4 	movi	r4,255
 80020a4:	84003fcc 	andi	r16,r16,255
 80020a8:	180690fa 	slli	r3,r3,3
 80020ac:	2804d7fa 	srli	r2,r5,31
 80020b0:	380e90fa 	slli	r7,r7,3
 80020b4:	31006d26 	beq	r6,r4,800226c <__subsf3+0x200>
 80020b8:	1080005c 	xori	r2,r2,1
 80020bc:	8189c83a 	sub	r4,r16,r6
 80020c0:	14404f26 	beq	r2,r17,8002200 <__subsf3+0x194>
 80020c4:	0100770e 	bge	zero,r4,80022a4 <__subsf3+0x238>
 80020c8:	30001e1e 	bne	r6,zero,8002144 <__subsf3+0xd8>
 80020cc:	38006a1e 	bne	r7,zero,8002278 <__subsf3+0x20c>
 80020d0:	188001cc 	andi	r2,r3,7
 80020d4:	10000426 	beq	r2,zero,80020e8 <__subsf3+0x7c>
 80020d8:	188003cc 	andi	r2,r3,15
 80020dc:	01000104 	movi	r4,4
 80020e0:	11000126 	beq	r2,r4,80020e8 <__subsf3+0x7c>
 80020e4:	1907883a 	add	r3,r3,r4
 80020e8:	1881002c 	andhi	r2,r3,1024
 80020ec:	10003926 	beq	r2,zero,80021d4 <__subsf3+0x168>
 80020f0:	84000044 	addi	r16,r16,1
 80020f4:	00803fc4 	movi	r2,255
 80020f8:	80807526 	beq	r16,r2,80022d0 <__subsf3+0x264>
 80020fc:	180691ba 	slli	r3,r3,6
 8002100:	8880004c 	andi	r2,r17,1
 8002104:	180ad27a 	srli	r5,r3,9
 8002108:	84003fcc 	andi	r16,r16,255
 800210c:	800695fa 	slli	r3,r16,23
 8002110:	10803fcc 	andi	r2,r2,255
 8002114:	01002034 	movhi	r4,128
 8002118:	213fffc4 	addi	r4,r4,-1
 800211c:	100497fa 	slli	r2,r2,31
 8002120:	2920703a 	and	r16,r5,r4
 8002124:	80e0b03a 	or	r16,r16,r3
 8002128:	8084b03a 	or	r2,r16,r2
 800212c:	dfc00317 	ldw	ra,12(sp)
 8002130:	dc800217 	ldw	r18,8(sp)
 8002134:	dc400117 	ldw	r17,4(sp)
 8002138:	dc000017 	ldw	r16,0(sp)
 800213c:	dec00404 	addi	sp,sp,16
 8002140:	f800283a 	ret
 8002144:	00803fc4 	movi	r2,255
 8002148:	80bfe126 	beq	r16,r2,80020d0 <__alt_data_end+0xfc0020d0>
 800214c:	39c10034 	orhi	r7,r7,1024
 8002150:	008006c4 	movi	r2,27
 8002154:	11007416 	blt	r2,r4,8002328 <__subsf3+0x2bc>
 8002158:	00800804 	movi	r2,32
 800215c:	1105c83a 	sub	r2,r2,r4
 8002160:	3884983a 	sll	r2,r7,r2
 8002164:	390ed83a 	srl	r7,r7,r4
 8002168:	1008c03a 	cmpne	r4,r2,zero
 800216c:	390eb03a 	or	r7,r7,r4
 8002170:	19c7c83a 	sub	r3,r3,r7
 8002174:	1881002c 	andhi	r2,r3,1024
 8002178:	10001426 	beq	r2,zero,80021cc <__subsf3+0x160>
 800217c:	04810034 	movhi	r18,1024
 8002180:	94bfffc4 	addi	r18,r18,-1
 8002184:	1ca4703a 	and	r18,r3,r18
 8002188:	9009883a 	mov	r4,r18
 800218c:	80026b00 	call	80026b0 <__clzsi2>
 8002190:	10bffec4 	addi	r2,r2,-5
 8002194:	90a4983a 	sll	r18,r18,r2
 8002198:	14005116 	blt	r2,r16,80022e0 <__subsf3+0x274>
 800219c:	1405c83a 	sub	r2,r2,r16
 80021a0:	10c00044 	addi	r3,r2,1
 80021a4:	00800804 	movi	r2,32
 80021a8:	10c5c83a 	sub	r2,r2,r3
 80021ac:	9084983a 	sll	r2,r18,r2
 80021b0:	90e4d83a 	srl	r18,r18,r3
 80021b4:	0021883a 	mov	r16,zero
 80021b8:	1006c03a 	cmpne	r3,r2,zero
 80021bc:	90c6b03a 	or	r3,r18,r3
 80021c0:	003fc306 	br	80020d0 <__alt_data_end+0xfc0020d0>
 80021c4:	2000e026 	beq	r4,zero,8002548 <__subsf3+0x4dc>
 80021c8:	2007883a 	mov	r3,r4
 80021cc:	188001cc 	andi	r2,r3,7
 80021d0:	103fc11e 	bne	r2,zero,80020d8 <__alt_data_end+0xfc0020d8>
 80021d4:	180ad0fa 	srli	r5,r3,3
 80021d8:	00c03fc4 	movi	r3,255
 80021dc:	8880004c 	andi	r2,r17,1
 80021e0:	80c0031e 	bne	r16,r3,80021f0 <__subsf3+0x184>
 80021e4:	28006d26 	beq	r5,zero,800239c <__subsf3+0x330>
 80021e8:	29401034 	orhi	r5,r5,64
 80021ec:	043fffc4 	movi	r16,-1
 80021f0:	00c02034 	movhi	r3,128
 80021f4:	18ffffc4 	addi	r3,r3,-1
 80021f8:	28ca703a 	and	r5,r5,r3
 80021fc:	003fc206 	br	8002108 <__alt_data_end+0xfc002108>
 8002200:	01003c0e 	bge	zero,r4,80022f4 <__subsf3+0x288>
 8002204:	30002126 	beq	r6,zero,800228c <__subsf3+0x220>
 8002208:	01403fc4 	movi	r5,255
 800220c:	817fb026 	beq	r16,r5,80020d0 <__alt_data_end+0xfc0020d0>
 8002210:	39c10034 	orhi	r7,r7,1024
 8002214:	014006c4 	movi	r5,27
 8002218:	29007416 	blt	r5,r4,80023ec <__subsf3+0x380>
 800221c:	01400804 	movi	r5,32
 8002220:	290bc83a 	sub	r5,r5,r4
 8002224:	394a983a 	sll	r5,r7,r5
 8002228:	390ed83a 	srl	r7,r7,r4
 800222c:	2808c03a 	cmpne	r4,r5,zero
 8002230:	390eb03a 	or	r7,r7,r4
 8002234:	19c7883a 	add	r3,r3,r7
 8002238:	1901002c 	andhi	r4,r3,1024
 800223c:	20003826 	beq	r4,zero,8002320 <__subsf3+0x2b4>
 8002240:	84000044 	addi	r16,r16,1
 8002244:	01003fc4 	movi	r4,255
 8002248:	81005426 	beq	r16,r4,800239c <__subsf3+0x330>
 800224c:	1023883a 	mov	r17,r2
 8002250:	00bf0034 	movhi	r2,64512
 8002254:	10bfffc4 	addi	r2,r2,-1
 8002258:	1900004c 	andi	r4,r3,1
 800225c:	1886703a 	and	r3,r3,r2
 8002260:	1806d07a 	srli	r3,r3,1
 8002264:	1906b03a 	or	r3,r3,r4
 8002268:	003f9906 	br	80020d0 <__alt_data_end+0xfc0020d0>
 800226c:	383f9226 	beq	r7,zero,80020b8 <__alt_data_end+0xfc0020b8>
 8002270:	10803fcc 	andi	r2,r2,255
 8002274:	003f9106 	br	80020bc <__alt_data_end+0xfc0020bc>
 8002278:	213fffc4 	addi	r4,r4,-1
 800227c:	203fbc26 	beq	r4,zero,8002170 <__alt_data_end+0xfc002170>
 8002280:	00803fc4 	movi	r2,255
 8002284:	80bfb21e 	bne	r16,r2,8002150 <__alt_data_end+0xfc002150>
 8002288:	003f9106 	br	80020d0 <__alt_data_end+0xfc0020d0>
 800228c:	383f9026 	beq	r7,zero,80020d0 <__alt_data_end+0xfc0020d0>
 8002290:	213fffc4 	addi	r4,r4,-1
 8002294:	203fe726 	beq	r4,zero,8002234 <__alt_data_end+0xfc002234>
 8002298:	01403fc4 	movi	r5,255
 800229c:	817fdd1e 	bne	r16,r5,8002214 <__alt_data_end+0xfc002214>
 80022a0:	003f8b06 	br	80020d0 <__alt_data_end+0xfc0020d0>
 80022a4:	2000221e 	bne	r4,zero,8002330 <__subsf3+0x2c4>
 80022a8:	81000044 	addi	r4,r16,1
 80022ac:	21003fcc 	andi	r4,r4,255
 80022b0:	01400044 	movi	r5,1
 80022b4:	2900470e 	bge	r5,r4,80023d4 <__subsf3+0x368>
 80022b8:	19e5c83a 	sub	r18,r3,r7
 80022bc:	9141002c 	andhi	r5,r18,1024
 80022c0:	28002d26 	beq	r5,zero,8002378 <__subsf3+0x30c>
 80022c4:	38e5c83a 	sub	r18,r7,r3
 80022c8:	1023883a 	mov	r17,r2
 80022cc:	003fae06 	br	8002188 <__alt_data_end+0xfc002188>
 80022d0:	8880004c 	andi	r2,r17,1
 80022d4:	043fffc4 	movi	r16,-1
 80022d8:	000b883a 	mov	r5,zero
 80022dc:	003f8a06 	br	8002108 <__alt_data_end+0xfc002108>
 80022e0:	00ff0034 	movhi	r3,64512
 80022e4:	18ffffc4 	addi	r3,r3,-1
 80022e8:	80a1c83a 	sub	r16,r16,r2
 80022ec:	90c6703a 	and	r3,r18,r3
 80022f0:	003f7706 	br	80020d0 <__alt_data_end+0xfc0020d0>
 80022f4:	2000431e 	bne	r4,zero,8002404 <__subsf3+0x398>
 80022f8:	81000044 	addi	r4,r16,1
 80022fc:	21803fcc 	andi	r6,r4,255
 8002300:	01400044 	movi	r5,1
 8002304:	2980280e 	bge	r5,r6,80023a8 <__subsf3+0x33c>
 8002308:	01403fc4 	movi	r5,255
 800230c:	21402326 	beq	r4,r5,800239c <__subsf3+0x330>
 8002310:	19c7883a 	add	r3,r3,r7
 8002314:	1806d07a 	srli	r3,r3,1
 8002318:	2021883a 	mov	r16,r4
 800231c:	003f6c06 	br	80020d0 <__alt_data_end+0xfc0020d0>
 8002320:	1023883a 	mov	r17,r2
 8002324:	003fa906 	br	80021cc <__alt_data_end+0xfc0021cc>
 8002328:	01c00044 	movi	r7,1
 800232c:	003f9006 	br	8002170 <__alt_data_end+0xfc002170>
 8002330:	8000151e 	bne	r16,zero,8002388 <__subsf3+0x31c>
 8002334:	18002f26 	beq	r3,zero,80023f4 <__subsf3+0x388>
 8002338:	0108303a 	nor	r4,zero,r4
 800233c:	20000a26 	beq	r4,zero,8002368 <__subsf3+0x2fc>
 8002340:	01403fc4 	movi	r5,255
 8002344:	31402b26 	beq	r6,r5,80023f4 <__subsf3+0x388>
 8002348:	014006c4 	movi	r5,27
 800234c:	29006e16 	blt	r5,r4,8002508 <__subsf3+0x49c>
 8002350:	01400804 	movi	r5,32
 8002354:	290bc83a 	sub	r5,r5,r4
 8002358:	194a983a 	sll	r5,r3,r5
 800235c:	1908d83a 	srl	r4,r3,r4
 8002360:	2806c03a 	cmpne	r3,r5,zero
 8002364:	20c6b03a 	or	r3,r4,r3
 8002368:	38c7c83a 	sub	r3,r7,r3
 800236c:	3021883a 	mov	r16,r6
 8002370:	1023883a 	mov	r17,r2
 8002374:	003f7f06 	br	8002174 <__alt_data_end+0xfc002174>
 8002378:	903f831e 	bne	r18,zero,8002188 <__alt_data_end+0xfc002188>
 800237c:	0005883a 	mov	r2,zero
 8002380:	0021883a 	mov	r16,zero
 8002384:	003f9a06 	br	80021f0 <__alt_data_end+0xfc0021f0>
 8002388:	01403fc4 	movi	r5,255
 800238c:	31401926 	beq	r6,r5,80023f4 <__subsf3+0x388>
 8002390:	0109c83a 	sub	r4,zero,r4
 8002394:	18c10034 	orhi	r3,r3,1024
 8002398:	003feb06 	br	8002348 <__alt_data_end+0xfc002348>
 800239c:	043fffc4 	movi	r16,-1
 80023a0:	000b883a 	mov	r5,zero
 80023a4:	003f5806 	br	8002108 <__alt_data_end+0xfc002108>
 80023a8:	8000481e 	bne	r16,zero,80024cc <__subsf3+0x460>
 80023ac:	18006226 	beq	r3,zero,8002538 <__subsf3+0x4cc>
 80023b0:	383f4726 	beq	r7,zero,80020d0 <__alt_data_end+0xfc0020d0>
 80023b4:	19c7883a 	add	r3,r3,r7
 80023b8:	1881002c 	andhi	r2,r3,1024
 80023bc:	103f8326 	beq	r2,zero,80021cc <__alt_data_end+0xfc0021cc>
 80023c0:	00bf0034 	movhi	r2,64512
 80023c4:	10bfffc4 	addi	r2,r2,-1
 80023c8:	2821883a 	mov	r16,r5
 80023cc:	1886703a 	and	r3,r3,r2
 80023d0:	003f3f06 	br	80020d0 <__alt_data_end+0xfc0020d0>
 80023d4:	80001c1e 	bne	r16,zero,8002448 <__subsf3+0x3dc>
 80023d8:	1800261e 	bne	r3,zero,8002474 <__subsf3+0x408>
 80023dc:	38004c26 	beq	r7,zero,8002510 <__subsf3+0x4a4>
 80023e0:	3807883a 	mov	r3,r7
 80023e4:	1023883a 	mov	r17,r2
 80023e8:	003f3906 	br	80020d0 <__alt_data_end+0xfc0020d0>
 80023ec:	01c00044 	movi	r7,1
 80023f0:	003f9006 	br	8002234 <__alt_data_end+0xfc002234>
 80023f4:	3807883a 	mov	r3,r7
 80023f8:	3021883a 	mov	r16,r6
 80023fc:	1023883a 	mov	r17,r2
 8002400:	003f3306 	br	80020d0 <__alt_data_end+0xfc0020d0>
 8002404:	8000161e 	bne	r16,zero,8002460 <__subsf3+0x3f4>
 8002408:	18002d26 	beq	r3,zero,80024c0 <__subsf3+0x454>
 800240c:	0108303a 	nor	r4,zero,r4
 8002410:	20000a26 	beq	r4,zero,800243c <__subsf3+0x3d0>
 8002414:	01403fc4 	movi	r5,255
 8002418:	31402926 	beq	r6,r5,80024c0 <__subsf3+0x454>
 800241c:	014006c4 	movi	r5,27
 8002420:	29004716 	blt	r5,r4,8002540 <__subsf3+0x4d4>
 8002424:	01400804 	movi	r5,32
 8002428:	290bc83a 	sub	r5,r5,r4
 800242c:	194a983a 	sll	r5,r3,r5
 8002430:	1908d83a 	srl	r4,r3,r4
 8002434:	2806c03a 	cmpne	r3,r5,zero
 8002438:	20c6b03a 	or	r3,r4,r3
 800243c:	19c7883a 	add	r3,r3,r7
 8002440:	3021883a 	mov	r16,r6
 8002444:	003f7c06 	br	8002238 <__alt_data_end+0xfc002238>
 8002448:	1800111e 	bne	r3,zero,8002490 <__subsf3+0x424>
 800244c:	38003326 	beq	r7,zero,800251c <__subsf3+0x4b0>
 8002450:	3807883a 	mov	r3,r7
 8002454:	1023883a 	mov	r17,r2
 8002458:	04003fc4 	movi	r16,255
 800245c:	003f1c06 	br	80020d0 <__alt_data_end+0xfc0020d0>
 8002460:	01403fc4 	movi	r5,255
 8002464:	31401626 	beq	r6,r5,80024c0 <__subsf3+0x454>
 8002468:	0109c83a 	sub	r4,zero,r4
 800246c:	18c10034 	orhi	r3,r3,1024
 8002470:	003fea06 	br	800241c <__alt_data_end+0xfc00241c>
 8002474:	383f1626 	beq	r7,zero,80020d0 <__alt_data_end+0xfc0020d0>
 8002478:	19c9c83a 	sub	r4,r3,r7
 800247c:	2141002c 	andhi	r5,r4,1024
 8002480:	283f5026 	beq	r5,zero,80021c4 <__alt_data_end+0xfc0021c4>
 8002484:	38c7c83a 	sub	r3,r7,r3
 8002488:	1023883a 	mov	r17,r2
 800248c:	003f1006 	br	80020d0 <__alt_data_end+0xfc0020d0>
 8002490:	38001b26 	beq	r7,zero,8002500 <__subsf3+0x494>
 8002494:	1806d0fa 	srli	r3,r3,3
 8002498:	1900102c 	andhi	r4,r3,64
 800249c:	20000526 	beq	r4,zero,80024b4 <__subsf3+0x448>
 80024a0:	380ed0fa 	srli	r7,r7,3
 80024a4:	3900102c 	andhi	r4,r7,64
 80024a8:	2000021e 	bne	r4,zero,80024b4 <__subsf3+0x448>
 80024ac:	3807883a 	mov	r3,r7
 80024b0:	1023883a 	mov	r17,r2
 80024b4:	180690fa 	slli	r3,r3,3
 80024b8:	04003fc4 	movi	r16,255
 80024bc:	003f0406 	br	80020d0 <__alt_data_end+0xfc0020d0>
 80024c0:	3807883a 	mov	r3,r7
 80024c4:	3021883a 	mov	r16,r6
 80024c8:	003f0106 	br	80020d0 <__alt_data_end+0xfc0020d0>
 80024cc:	18001726 	beq	r3,zero,800252c <__subsf3+0x4c0>
 80024d0:	38000b26 	beq	r7,zero,8002500 <__subsf3+0x494>
 80024d4:	1806d0fa 	srli	r3,r3,3
 80024d8:	1900102c 	andhi	r4,r3,64
 80024dc:	20000426 	beq	r4,zero,80024f0 <__subsf3+0x484>
 80024e0:	380ed0fa 	srli	r7,r7,3
 80024e4:	3900102c 	andhi	r4,r7,64
 80024e8:	2000011e 	bne	r4,zero,80024f0 <__subsf3+0x484>
 80024ec:	3807883a 	mov	r3,r7
 80024f0:	180690fa 	slli	r3,r3,3
 80024f4:	1023883a 	mov	r17,r2
 80024f8:	04003fc4 	movi	r16,255
 80024fc:	003ef406 	br	80020d0 <__alt_data_end+0xfc0020d0>
 8002500:	04003fc4 	movi	r16,255
 8002504:	003ef206 	br	80020d0 <__alt_data_end+0xfc0020d0>
 8002508:	00c00044 	movi	r3,1
 800250c:	003f9606 	br	8002368 <__alt_data_end+0xfc002368>
 8002510:	000b883a 	mov	r5,zero
 8002514:	0005883a 	mov	r2,zero
 8002518:	003f3506 	br	80021f0 <__alt_data_end+0xfc0021f0>
 800251c:	01402034 	movhi	r5,128
 8002520:	297fffc4 	addi	r5,r5,-1
 8002524:	0005883a 	mov	r2,zero
 8002528:	003f2f06 	br	80021e8 <__alt_data_end+0xfc0021e8>
 800252c:	3807883a 	mov	r3,r7
 8002530:	04003fc4 	movi	r16,255
 8002534:	003ee606 	br	80020d0 <__alt_data_end+0xfc0020d0>
 8002538:	3807883a 	mov	r3,r7
 800253c:	003ee406 	br	80020d0 <__alt_data_end+0xfc0020d0>
 8002540:	00c00044 	movi	r3,1
 8002544:	003fbd06 	br	800243c <__alt_data_end+0xfc00243c>
 8002548:	0005883a 	mov	r2,zero
 800254c:	003f2806 	br	80021f0 <__alt_data_end+0xfc0021f0>

08002550 <__fixsfsi>:
 8002550:	200ad5fa 	srli	r5,r4,23
 8002554:	00c02034 	movhi	r3,128
 8002558:	18ffffc4 	addi	r3,r3,-1
 800255c:	29403fcc 	andi	r5,r5,255
 8002560:	00801f84 	movi	r2,126
 8002564:	1906703a 	and	r3,r3,r4
 8002568:	2008d7fa 	srli	r4,r4,31
 800256c:	11400e0e 	bge	r2,r5,80025a8 <__fixsfsi+0x58>
 8002570:	00802744 	movi	r2,157
 8002574:	11400816 	blt	r2,r5,8002598 <__fixsfsi+0x48>
 8002578:	00802544 	movi	r2,149
 800257c:	18c02034 	orhi	r3,r3,128
 8002580:	11400b0e 	bge	r2,r5,80025b0 <__fixsfsi+0x60>
 8002584:	28bfda84 	addi	r2,r5,-150
 8002588:	1884983a 	sll	r2,r3,r2
 800258c:	20000726 	beq	r4,zero,80025ac <__fixsfsi+0x5c>
 8002590:	0085c83a 	sub	r2,zero,r2
 8002594:	f800283a 	ret
 8002598:	00a00034 	movhi	r2,32768
 800259c:	10bfffc4 	addi	r2,r2,-1
 80025a0:	2085883a 	add	r2,r4,r2
 80025a4:	f800283a 	ret
 80025a8:	0005883a 	mov	r2,zero
 80025ac:	f800283a 	ret
 80025b0:	00802584 	movi	r2,150
 80025b4:	1145c83a 	sub	r2,r2,r5
 80025b8:	1884d83a 	srl	r2,r3,r2
 80025bc:	003ff306 	br	800258c <__alt_data_end+0xfc00258c>

080025c0 <__floatunsisf>:
 80025c0:	defffe04 	addi	sp,sp,-8
 80025c4:	dfc00115 	stw	ra,4(sp)
 80025c8:	dc000015 	stw	r16,0(sp)
 80025cc:	20002c26 	beq	r4,zero,8002680 <__floatunsisf+0xc0>
 80025d0:	2021883a 	mov	r16,r4
 80025d4:	80026b00 	call	80026b0 <__clzsi2>
 80025d8:	00c02784 	movi	r3,158
 80025dc:	1887c83a 	sub	r3,r3,r2
 80025e0:	01002584 	movi	r4,150
 80025e4:	20c00f16 	blt	r4,r3,8002624 <__floatunsisf+0x64>
 80025e8:	20c9c83a 	sub	r4,r4,r3
 80025ec:	8108983a 	sll	r4,r16,r4
 80025f0:	00802034 	movhi	r2,128
 80025f4:	10bfffc4 	addi	r2,r2,-1
 80025f8:	2088703a 	and	r4,r4,r2
 80025fc:	18803fcc 	andi	r2,r3,255
 8002600:	100695fa 	slli	r3,r2,23
 8002604:	00802034 	movhi	r2,128
 8002608:	10bfffc4 	addi	r2,r2,-1
 800260c:	2084703a 	and	r2,r4,r2
 8002610:	10c4b03a 	or	r2,r2,r3
 8002614:	dfc00117 	ldw	ra,4(sp)
 8002618:	dc000017 	ldw	r16,0(sp)
 800261c:	dec00204 	addi	sp,sp,8
 8002620:	f800283a 	ret
 8002624:	01002644 	movi	r4,153
 8002628:	20c01816 	blt	r4,r3,800268c <__floatunsisf+0xcc>
 800262c:	20c9c83a 	sub	r4,r4,r3
 8002630:	8108983a 	sll	r4,r16,r4
 8002634:	017f0034 	movhi	r5,64512
 8002638:	297fffc4 	addi	r5,r5,-1
 800263c:	218001cc 	andi	r6,r4,7
 8002640:	214a703a 	and	r5,r4,r5
 8002644:	30000426 	beq	r6,zero,8002658 <__floatunsisf+0x98>
 8002648:	210003cc 	andi	r4,r4,15
 800264c:	01800104 	movi	r6,4
 8002650:	21800126 	beq	r4,r6,8002658 <__floatunsisf+0x98>
 8002654:	298b883a 	add	r5,r5,r6
 8002658:	2901002c 	andhi	r4,r5,1024
 800265c:	20000526 	beq	r4,zero,8002674 <__floatunsisf+0xb4>
 8002660:	00c027c4 	movi	r3,159
 8002664:	1887c83a 	sub	r3,r3,r2
 8002668:	00bf0034 	movhi	r2,64512
 800266c:	10bfffc4 	addi	r2,r2,-1
 8002670:	288a703a 	and	r5,r5,r2
 8002674:	280891ba 	slli	r4,r5,6
 8002678:	2008d27a 	srli	r4,r4,9
 800267c:	003fdf06 	br	80025fc <__alt_data_end+0xfc0025fc>
 8002680:	0007883a 	mov	r3,zero
 8002684:	0009883a 	mov	r4,zero
 8002688:	003fdc06 	br	80025fc <__alt_data_end+0xfc0025fc>
 800268c:	01402e44 	movi	r5,185
 8002690:	28cbc83a 	sub	r5,r5,r3
 8002694:	01000144 	movi	r4,5
 8002698:	2089c83a 	sub	r4,r4,r2
 800269c:	814a983a 	sll	r5,r16,r5
 80026a0:	8108d83a 	srl	r4,r16,r4
 80026a4:	2820c03a 	cmpne	r16,r5,zero
 80026a8:	2408b03a 	or	r4,r4,r16
 80026ac:	003fe106 	br	8002634 <__alt_data_end+0xfc002634>

080026b0 <__clzsi2>:
 80026b0:	00bfffd4 	movui	r2,65535
 80026b4:	11000536 	bltu	r2,r4,80026cc <__clzsi2+0x1c>
 80026b8:	00803fc4 	movi	r2,255
 80026bc:	11000f36 	bltu	r2,r4,80026fc <__clzsi2+0x4c>
 80026c0:	00800804 	movi	r2,32
 80026c4:	0007883a 	mov	r3,zero
 80026c8:	00000506 	br	80026e0 <__clzsi2+0x30>
 80026cc:	00804034 	movhi	r2,256
 80026d0:	10bfffc4 	addi	r2,r2,-1
 80026d4:	11000c2e 	bgeu	r2,r4,8002708 <__clzsi2+0x58>
 80026d8:	00800204 	movi	r2,8
 80026dc:	00c00604 	movi	r3,24
 80026e0:	20c8d83a 	srl	r4,r4,r3
 80026e4:	00c20074 	movhi	r3,2049
 80026e8:	18de9044 	addi	r3,r3,31297
 80026ec:	1909883a 	add	r4,r3,r4
 80026f0:	20c00003 	ldbu	r3,0(r4)
 80026f4:	10c5c83a 	sub	r2,r2,r3
 80026f8:	f800283a 	ret
 80026fc:	00800604 	movi	r2,24
 8002700:	00c00204 	movi	r3,8
 8002704:	003ff606 	br	80026e0 <__alt_data_end+0xfc0026e0>
 8002708:	00800404 	movi	r2,16
 800270c:	1007883a 	mov	r3,r2
 8002710:	003ff306 	br	80026e0 <__alt_data_end+0xfc0026e0>

08002714 <_printf_r>:
 8002714:	defffd04 	addi	sp,sp,-12
 8002718:	2805883a 	mov	r2,r5
 800271c:	dfc00015 	stw	ra,0(sp)
 8002720:	d9800115 	stw	r6,4(sp)
 8002724:	d9c00215 	stw	r7,8(sp)
 8002728:	21400217 	ldw	r5,8(r4)
 800272c:	d9c00104 	addi	r7,sp,4
 8002730:	100d883a 	mov	r6,r2
 8002734:	8004ce80 	call	8004ce8 <___vfprintf_internal_r>
 8002738:	dfc00017 	ldw	ra,0(sp)
 800273c:	dec00304 	addi	sp,sp,12
 8002740:	f800283a 	ret

08002744 <printf>:
 8002744:	defffc04 	addi	sp,sp,-16
 8002748:	dfc00015 	stw	ra,0(sp)
 800274c:	d9400115 	stw	r5,4(sp)
 8002750:	d9800215 	stw	r6,8(sp)
 8002754:	d9c00315 	stw	r7,12(sp)
 8002758:	008200b4 	movhi	r2,2050
 800275c:	10a73d04 	addi	r2,r2,-25356
 8002760:	10800017 	ldw	r2,0(r2)
 8002764:	200b883a 	mov	r5,r4
 8002768:	d9800104 	addi	r6,sp,4
 800276c:	11000217 	ldw	r4,8(r2)
 8002770:	8006fc40 	call	8006fc4 <__vfprintf_internal>
 8002774:	dfc00017 	ldw	ra,0(sp)
 8002778:	dec00404 	addi	sp,sp,16
 800277c:	f800283a 	ret

08002780 <_puts_r>:
 8002780:	defff604 	addi	sp,sp,-40
 8002784:	dc000715 	stw	r16,28(sp)
 8002788:	2021883a 	mov	r16,r4
 800278c:	2809883a 	mov	r4,r5
 8002790:	dc400815 	stw	r17,32(sp)
 8002794:	dfc00915 	stw	ra,36(sp)
 8002798:	2823883a 	mov	r17,r5
 800279c:	80029940 	call	8002994 <strlen>
 80027a0:	10c00044 	addi	r3,r2,1
 80027a4:	d8800115 	stw	r2,4(sp)
 80027a8:	00820074 	movhi	r2,2049
 80027ac:	109ed104 	addi	r2,r2,31556
 80027b0:	d8800215 	stw	r2,8(sp)
 80027b4:	00800044 	movi	r2,1
 80027b8:	d8800315 	stw	r2,12(sp)
 80027bc:	00800084 	movi	r2,2
 80027c0:	dc400015 	stw	r17,0(sp)
 80027c4:	d8c00615 	stw	r3,24(sp)
 80027c8:	dec00415 	stw	sp,16(sp)
 80027cc:	d8800515 	stw	r2,20(sp)
 80027d0:	80000226 	beq	r16,zero,80027dc <_puts_r+0x5c>
 80027d4:	80800e17 	ldw	r2,56(r16)
 80027d8:	10001426 	beq	r2,zero,800282c <_puts_r+0xac>
 80027dc:	81400217 	ldw	r5,8(r16)
 80027e0:	2880030b 	ldhu	r2,12(r5)
 80027e4:	10c8000c 	andi	r3,r2,8192
 80027e8:	1800061e 	bne	r3,zero,8002804 <_puts_r+0x84>
 80027ec:	29001917 	ldw	r4,100(r5)
 80027f0:	00f7ffc4 	movi	r3,-8193
 80027f4:	10880014 	ori	r2,r2,8192
 80027f8:	20c6703a 	and	r3,r4,r3
 80027fc:	2880030d 	sth	r2,12(r5)
 8002800:	28c01915 	stw	r3,100(r5)
 8002804:	d9800404 	addi	r6,sp,16
 8002808:	8009883a 	mov	r4,r16
 800280c:	800952c0 	call	800952c <__sfvwrite_r>
 8002810:	1000091e 	bne	r2,zero,8002838 <_puts_r+0xb8>
 8002814:	00800284 	movi	r2,10
 8002818:	dfc00917 	ldw	ra,36(sp)
 800281c:	dc400817 	ldw	r17,32(sp)
 8002820:	dc000717 	ldw	r16,28(sp)
 8002824:	dec00a04 	addi	sp,sp,40
 8002828:	f800283a 	ret
 800282c:	8009883a 	mov	r4,r16
 8002830:	80090a80 	call	80090a8 <__sinit>
 8002834:	003fe906 	br	80027dc <__alt_data_end+0xfc0027dc>
 8002838:	00bfffc4 	movi	r2,-1
 800283c:	003ff606 	br	8002818 <__alt_data_end+0xfc002818>

08002840 <puts>:
 8002840:	008200b4 	movhi	r2,2050
 8002844:	10a73d04 	addi	r2,r2,-25356
 8002848:	200b883a 	mov	r5,r4
 800284c:	11000017 	ldw	r4,0(r2)
 8002850:	80027801 	jmpi	8002780 <_puts_r>

08002854 <srand>:
 8002854:	008200b4 	movhi	r2,2050
 8002858:	10a73d04 	addi	r2,r2,-25356
 800285c:	10800017 	ldw	r2,0(r2)
 8002860:	11002915 	stw	r4,164(r2)
 8002864:	10002a15 	stw	zero,168(r2)
 8002868:	f800283a 	ret

0800286c <rand>:
 800286c:	008200b4 	movhi	r2,2050
 8002870:	defffe04 	addi	sp,sp,-8
 8002874:	10a73d04 	addi	r2,r2,-25356
 8002878:	dc000015 	stw	r16,0(sp)
 800287c:	14000017 	ldw	r16,0(r2)
 8002880:	dfc00115 	stw	ra,4(sp)
 8002884:	01932574 	movhi	r6,19605
 8002888:	81002917 	ldw	r4,164(r16)
 800288c:	81402a17 	ldw	r5,168(r16)
 8002890:	01d614b4 	movhi	r7,22610
 8002894:	319fcb44 	addi	r6,r6,32557
 8002898:	39fd0b44 	addi	r7,r7,-3027
 800289c:	800f9800 	call	800f980 <__muldi3>
 80028a0:	11000044 	addi	r4,r2,1
 80028a4:	2085803a 	cmpltu	r2,r4,r2
 80028a8:	10c7883a 	add	r3,r2,r3
 80028ac:	00a00034 	movhi	r2,32768
 80028b0:	10bfffc4 	addi	r2,r2,-1
 80028b4:	1884703a 	and	r2,r3,r2
 80028b8:	81002915 	stw	r4,164(r16)
 80028bc:	80c02a15 	stw	r3,168(r16)
 80028c0:	dfc00117 	ldw	ra,4(sp)
 80028c4:	dc000017 	ldw	r16,0(sp)
 80028c8:	dec00204 	addi	sp,sp,8
 80028cc:	f800283a 	ret

080028d0 <_sprintf_r>:
 80028d0:	deffe404 	addi	sp,sp,-112
 80028d4:	2807883a 	mov	r3,r5
 80028d8:	dfc01a15 	stw	ra,104(sp)
 80028dc:	d9c01b15 	stw	r7,108(sp)
 80028e0:	00a00034 	movhi	r2,32768
 80028e4:	10bfffc4 	addi	r2,r2,-1
 80028e8:	02008204 	movi	r8,520
 80028ec:	d8800215 	stw	r2,8(sp)
 80028f0:	d8800515 	stw	r2,20(sp)
 80028f4:	d9c01b04 	addi	r7,sp,108
 80028f8:	d80b883a 	mov	r5,sp
 80028fc:	00bfffc4 	movi	r2,-1
 8002900:	d8c00015 	stw	r3,0(sp)
 8002904:	d8c00415 	stw	r3,16(sp)
 8002908:	da00030d 	sth	r8,12(sp)
 800290c:	d880038d 	sth	r2,14(sp)
 8002910:	8002a2c0 	call	8002a2c <___svfprintf_internal_r>
 8002914:	d8c00017 	ldw	r3,0(sp)
 8002918:	18000005 	stb	zero,0(r3)
 800291c:	dfc01a17 	ldw	ra,104(sp)
 8002920:	dec01c04 	addi	sp,sp,112
 8002924:	f800283a 	ret

08002928 <sprintf>:
 8002928:	deffe304 	addi	sp,sp,-116
 800292c:	2007883a 	mov	r3,r4
 8002930:	dfc01a15 	stw	ra,104(sp)
 8002934:	d9801b15 	stw	r6,108(sp)
 8002938:	d9c01c15 	stw	r7,112(sp)
 800293c:	010200b4 	movhi	r4,2050
 8002940:	21273d04 	addi	r4,r4,-25356
 8002944:	21000017 	ldw	r4,0(r4)
 8002948:	00a00034 	movhi	r2,32768
 800294c:	10bfffc4 	addi	r2,r2,-1
 8002950:	280d883a 	mov	r6,r5
 8002954:	02008204 	movi	r8,520
 8002958:	d8800215 	stw	r2,8(sp)
 800295c:	d8800515 	stw	r2,20(sp)
 8002960:	d9c01b04 	addi	r7,sp,108
 8002964:	d80b883a 	mov	r5,sp
 8002968:	00bfffc4 	movi	r2,-1
 800296c:	d8c00015 	stw	r3,0(sp)
 8002970:	d8c00415 	stw	r3,16(sp)
 8002974:	da00030d 	sth	r8,12(sp)
 8002978:	d880038d 	sth	r2,14(sp)
 800297c:	8002a2c0 	call	8002a2c <___svfprintf_internal_r>
 8002980:	d8c00017 	ldw	r3,0(sp)
 8002984:	18000005 	stb	zero,0(r3)
 8002988:	dfc01a17 	ldw	ra,104(sp)
 800298c:	dec01d04 	addi	sp,sp,116
 8002990:	f800283a 	ret

08002994 <strlen>:
 8002994:	208000cc 	andi	r2,r4,3
 8002998:	10002026 	beq	r2,zero,8002a1c <strlen+0x88>
 800299c:	20800007 	ldb	r2,0(r4)
 80029a0:	10002026 	beq	r2,zero,8002a24 <strlen+0x90>
 80029a4:	2005883a 	mov	r2,r4
 80029a8:	00000206 	br	80029b4 <strlen+0x20>
 80029ac:	10c00007 	ldb	r3,0(r2)
 80029b0:	18001826 	beq	r3,zero,8002a14 <strlen+0x80>
 80029b4:	10800044 	addi	r2,r2,1
 80029b8:	10c000cc 	andi	r3,r2,3
 80029bc:	183ffb1e 	bne	r3,zero,80029ac <__alt_data_end+0xfc0029ac>
 80029c0:	10c00017 	ldw	r3,0(r2)
 80029c4:	01ffbff4 	movhi	r7,65279
 80029c8:	39ffbfc4 	addi	r7,r7,-257
 80029cc:	00ca303a 	nor	r5,zero,r3
 80029d0:	01a02074 	movhi	r6,32897
 80029d4:	19c7883a 	add	r3,r3,r7
 80029d8:	31a02004 	addi	r6,r6,-32640
 80029dc:	1946703a 	and	r3,r3,r5
 80029e0:	1986703a 	and	r3,r3,r6
 80029e4:	1800091e 	bne	r3,zero,8002a0c <strlen+0x78>
 80029e8:	10800104 	addi	r2,r2,4
 80029ec:	10c00017 	ldw	r3,0(r2)
 80029f0:	19cb883a 	add	r5,r3,r7
 80029f4:	00c6303a 	nor	r3,zero,r3
 80029f8:	28c6703a 	and	r3,r5,r3
 80029fc:	1986703a 	and	r3,r3,r6
 8002a00:	183ff926 	beq	r3,zero,80029e8 <__alt_data_end+0xfc0029e8>
 8002a04:	00000106 	br	8002a0c <strlen+0x78>
 8002a08:	10800044 	addi	r2,r2,1
 8002a0c:	10c00007 	ldb	r3,0(r2)
 8002a10:	183ffd1e 	bne	r3,zero,8002a08 <__alt_data_end+0xfc002a08>
 8002a14:	1105c83a 	sub	r2,r2,r4
 8002a18:	f800283a 	ret
 8002a1c:	2005883a 	mov	r2,r4
 8002a20:	003fe706 	br	80029c0 <__alt_data_end+0xfc0029c0>
 8002a24:	0005883a 	mov	r2,zero
 8002a28:	f800283a 	ret

08002a2c <___svfprintf_internal_r>:
 8002a2c:	deffb704 	addi	sp,sp,-292
 8002a30:	dfc04815 	stw	ra,288(sp)
 8002a34:	ddc04615 	stw	r23,280(sp)
 8002a38:	d9402d15 	stw	r5,180(sp)
 8002a3c:	d9003915 	stw	r4,228(sp)
 8002a40:	302f883a 	mov	r23,r6
 8002a44:	d9c02e15 	stw	r7,184(sp)
 8002a48:	df004715 	stw	fp,284(sp)
 8002a4c:	dd804515 	stw	r22,276(sp)
 8002a50:	dd404415 	stw	r21,272(sp)
 8002a54:	dd004315 	stw	r20,268(sp)
 8002a58:	dcc04215 	stw	r19,264(sp)
 8002a5c:	dc804115 	stw	r18,260(sp)
 8002a60:	dc404015 	stw	r17,256(sp)
 8002a64:	dc003f15 	stw	r16,252(sp)
 8002a68:	8009c280 	call	8009c28 <_localeconv_r>
 8002a6c:	10800017 	ldw	r2,0(r2)
 8002a70:	1009883a 	mov	r4,r2
 8002a74:	d8803415 	stw	r2,208(sp)
 8002a78:	80029940 	call	8002994 <strlen>
 8002a7c:	d8c02d17 	ldw	r3,180(sp)
 8002a80:	d8803815 	stw	r2,224(sp)
 8002a84:	1880030b 	ldhu	r2,12(r3)
 8002a88:	1080200c 	andi	r2,r2,128
 8002a8c:	10000226 	beq	r2,zero,8002a98 <___svfprintf_internal_r+0x6c>
 8002a90:	18800417 	ldw	r2,16(r3)
 8002a94:	1006b126 	beq	r2,zero,800455c <___svfprintf_internal_r+0x1b30>
 8002a98:	dcc03917 	ldw	r19,228(sp)
 8002a9c:	d8c00404 	addi	r3,sp,16
 8002aa0:	05420074 	movhi	r21,2049
 8002aa4:	d9001e04 	addi	r4,sp,120
 8002aa8:	ad5ee284 	addi	r21,r21,31626
 8002aac:	d8c01e15 	stw	r3,120(sp)
 8002ab0:	d8002015 	stw	zero,128(sp)
 8002ab4:	d8001f15 	stw	zero,124(sp)
 8002ab8:	d8003315 	stw	zero,204(sp)
 8002abc:	d8003615 	stw	zero,216(sp)
 8002ac0:	d8003715 	stw	zero,220(sp)
 8002ac4:	1811883a 	mov	r8,r3
 8002ac8:	d8003a15 	stw	zero,232(sp)
 8002acc:	d8003b15 	stw	zero,236(sp)
 8002ad0:	d8002f15 	stw	zero,188(sp)
 8002ad4:	d9002815 	stw	r4,160(sp)
 8002ad8:	b8800007 	ldb	r2,0(r23)
 8002adc:	10027726 	beq	r2,zero,80034bc <___svfprintf_internal_r+0xa90>
 8002ae0:	00c00944 	movi	r3,37
 8002ae4:	b823883a 	mov	r17,r23
 8002ae8:	10c0021e 	bne	r2,r3,8002af4 <___svfprintf_internal_r+0xc8>
 8002aec:	00001406 	br	8002b40 <___svfprintf_internal_r+0x114>
 8002af0:	10c00326 	beq	r2,r3,8002b00 <___svfprintf_internal_r+0xd4>
 8002af4:	8c400044 	addi	r17,r17,1
 8002af8:	88800007 	ldb	r2,0(r17)
 8002afc:	103ffc1e 	bne	r2,zero,8002af0 <__alt_data_end+0xfc002af0>
 8002b00:	8de1c83a 	sub	r16,r17,r23
 8002b04:	80000e26 	beq	r16,zero,8002b40 <___svfprintf_internal_r+0x114>
 8002b08:	d8c02017 	ldw	r3,128(sp)
 8002b0c:	d8801f17 	ldw	r2,124(sp)
 8002b10:	45c00015 	stw	r23,0(r8)
 8002b14:	1c07883a 	add	r3,r3,r16
 8002b18:	10800044 	addi	r2,r2,1
 8002b1c:	d8c02015 	stw	r3,128(sp)
 8002b20:	44000115 	stw	r16,4(r8)
 8002b24:	d8801f15 	stw	r2,124(sp)
 8002b28:	00c001c4 	movi	r3,7
 8002b2c:	18809916 	blt	r3,r2,8002d94 <___svfprintf_internal_r+0x368>
 8002b30:	42000204 	addi	r8,r8,8
 8002b34:	d9402f17 	ldw	r5,188(sp)
 8002b38:	2c0b883a 	add	r5,r5,r16
 8002b3c:	d9402f15 	stw	r5,188(sp)
 8002b40:	88800007 	ldb	r2,0(r17)
 8002b44:	10009a26 	beq	r2,zero,8002db0 <___svfprintf_internal_r+0x384>
 8002b48:	8dc00044 	addi	r23,r17,1
 8002b4c:	8c400047 	ldb	r17,1(r17)
 8002b50:	0021883a 	mov	r16,zero
 8002b54:	00bfffc4 	movi	r2,-1
 8002b58:	0025883a 	mov	r18,zero
 8002b5c:	dc002905 	stb	r16,164(sp)
 8002b60:	d8002785 	stb	zero,158(sp)
 8002b64:	d8002b05 	stb	zero,172(sp)
 8002b68:	d8802a15 	stw	r2,168(sp)
 8002b6c:	d8003115 	stw	zero,196(sp)
 8002b70:	05001604 	movi	r20,88
 8002b74:	05800244 	movi	r22,9
 8002b78:	4039883a 	mov	fp,r8
 8002b7c:	9021883a 	mov	r16,r18
 8002b80:	bdc00044 	addi	r23,r23,1
 8002b84:	88bff804 	addi	r2,r17,-32
 8002b88:	a0831e36 	bltu	r20,r2,8003804 <___svfprintf_internal_r+0xdd8>
 8002b8c:	100490ba 	slli	r2,r2,2
 8002b90:	00c20034 	movhi	r3,2048
 8002b94:	18cae904 	addi	r3,r3,11172
 8002b98:	10c5883a 	add	r2,r2,r3
 8002b9c:	10800017 	ldw	r2,0(r2)
 8002ba0:	1000683a 	jmp	r2
 8002ba4:	0800374c 	andi	zero,at,221
 8002ba8:	08003804 	addi	zero,at,224
 8002bac:	08003804 	addi	zero,at,224
 8002bb0:	08003740 	call	800374 <__alt_mem_onchip_memory2_0+0x800374>
 8002bb4:	08003804 	addi	zero,at,224
 8002bb8:	08003804 	addi	zero,at,224
 8002bbc:	08003804 	addi	zero,at,224
 8002bc0:	08003804 	addi	zero,at,224
 8002bc4:	08003804 	addi	zero,at,224
 8002bc8:	08003804 	addi	zero,at,224
 8002bcc:	08002e0c 	andi	zero,at,184
 8002bd0:	08003650 	cmplti	zero,at,217
 8002bd4:	08003804 	addi	zero,at,224
 8002bd8:	08002d18 	cmpnei	zero,at,180
 8002bdc:	08002e30 	cmpltui	zero,at,184
 8002be0:	08003804 	addi	zero,at,224
 8002be4:	08002ebc 	xorhi	zero,at,186
 8002be8:	08002e80 	call	8002e8 <__alt_mem_onchip_memory2_0+0x8002e8>
 8002bec:	08002e80 	call	8002e8 <__alt_mem_onchip_memory2_0+0x8002e8>
 8002bf0:	08002e80 	call	8002e8 <__alt_mem_onchip_memory2_0+0x8002e8>
 8002bf4:	08002e80 	call	8002e8 <__alt_mem_onchip_memory2_0+0x8002e8>
 8002bf8:	08002e80 	call	8002e8 <__alt_mem_onchip_memory2_0+0x8002e8>
 8002bfc:	08002e80 	call	8002e8 <__alt_mem_onchip_memory2_0+0x8002e8>
 8002c00:	08002e80 	call	8002e8 <__alt_mem_onchip_memory2_0+0x8002e8>
 8002c04:	08002e80 	call	8002e8 <__alt_mem_onchip_memory2_0+0x8002e8>
 8002c08:	08002e80 	call	8002e8 <__alt_mem_onchip_memory2_0+0x8002e8>
 8002c0c:	08003804 	addi	zero,at,224
 8002c10:	08003804 	addi	zero,at,224
 8002c14:	08003804 	addi	zero,at,224
 8002c18:	08003804 	addi	zero,at,224
 8002c1c:	08003804 	addi	zero,at,224
 8002c20:	08003804 	addi	zero,at,224
 8002c24:	08003804 	addi	zero,at,224
 8002c28:	08003804 	addi	zero,at,224
 8002c2c:	08003804 	addi	zero,at,224
 8002c30:	08003804 	addi	zero,at,224
 8002c34:	08002f80 	call	8002f8 <__alt_mem_onchip_memory2_0+0x8002f8>
 8002c38:	08002ec8 	cmpgei	zero,at,187
 8002c3c:	08003804 	addi	zero,at,224
 8002c40:	08002ec8 	cmpgei	zero,at,187
 8002c44:	08003804 	addi	zero,at,224
 8002c48:	08003804 	addi	zero,at,224
 8002c4c:	08003804 	addi	zero,at,224
 8002c50:	08003804 	addi	zero,at,224
 8002c54:	08002f74 	orhi	zero,at,189
 8002c58:	08003804 	addi	zero,at,224
 8002c5c:	08003804 	addi	zero,at,224
 8002c60:	08003048 	cmpgei	zero,at,193
 8002c64:	08003804 	addi	zero,at,224
 8002c68:	08003804 	addi	zero,at,224
 8002c6c:	08003804 	addi	zero,at,224
 8002c70:	08003804 	addi	zero,at,224
 8002c74:	08003804 	addi	zero,at,224
 8002c78:	080034c4 	addi	zero,at,211
 8002c7c:	08003804 	addi	zero,at,224
 8002c80:	08003804 	addi	zero,at,224
 8002c84:	08003530 	cmpltui	zero,at,212
 8002c88:	08003804 	addi	zero,at,224
 8002c8c:	08003804 	addi	zero,at,224
 8002c90:	08003804 	addi	zero,at,224
 8002c94:	08003804 	addi	zero,at,224
 8002c98:	08003804 	addi	zero,at,224
 8002c9c:	08003804 	addi	zero,at,224
 8002ca0:	08003804 	addi	zero,at,224
 8002ca4:	08003804 	addi	zero,at,224
 8002ca8:	08003804 	addi	zero,at,224
 8002cac:	08003804 	addi	zero,at,224
 8002cb0:	080035ec 	andhi	zero,at,215
 8002cb4:	0800376c 	andhi	zero,at,221
 8002cb8:	08002ec8 	cmpgei	zero,at,187
 8002cbc:	08002ec8 	cmpgei	zero,at,187
 8002cc0:	08002ec8 	cmpgei	zero,at,187
 8002cc4:	080037e0 	cmpeqi	zero,at,223
 8002cc8:	0800376c 	andhi	zero,at,221
 8002ccc:	08003804 	addi	zero,at,224
 8002cd0:	08003804 	addi	zero,at,224
 8002cd4:	0800378c 	andi	zero,at,222
 8002cd8:	08003804 	addi	zero,at,224
 8002cdc:	080037a0 	cmpeqi	zero,at,222
 8002ce0:	08003630 	cmpltui	zero,at,216
 8002ce4:	08002d24 	muli	zero,at,180
 8002ce8:	08003668 	cmpgeui	zero,at,217
 8002cec:	08003804 	addi	zero,at,224
 8002cf0:	08003674 	orhi	zero,at,217
 8002cf4:	08003804 	addi	zero,at,224
 8002cf8:	080036d8 	cmpnei	zero,at,219
 8002cfc:	08003804 	addi	zero,at,224
 8002d00:	08003804 	addi	zero,at,224
 8002d04:	080036f8 	rdprs	zero,at,219
 8002d08:	d8c03117 	ldw	r3,196(sp)
 8002d0c:	d8802e15 	stw	r2,184(sp)
 8002d10:	00c7c83a 	sub	r3,zero,r3
 8002d14:	d8c03115 	stw	r3,196(sp)
 8002d18:	84000114 	ori	r16,r16,4
 8002d1c:	bc400007 	ldb	r17,0(r23)
 8002d20:	003f9706 	br	8002b80 <__alt_data_end+0xfc002b80>
 8002d24:	00800c04 	movi	r2,48
 8002d28:	d8802705 	stb	r2,156(sp)
 8002d2c:	00801e04 	movi	r2,120
 8002d30:	d8802745 	stb	r2,157(sp)
 8002d34:	d9002a17 	ldw	r4,168(sp)
 8002d38:	d8802e17 	ldw	r2,184(sp)
 8002d3c:	d8002785 	stb	zero,158(sp)
 8002d40:	e011883a 	mov	r8,fp
 8002d44:	10c00104 	addi	r3,r2,4
 8002d48:	15000017 	ldw	r20,0(r2)
 8002d4c:	002d883a 	mov	r22,zero
 8002d50:	80800094 	ori	r2,r16,2
 8002d54:	2002b616 	blt	r4,zero,8003830 <___svfprintf_internal_r+0xe04>
 8002d58:	00bfdfc4 	movi	r2,-129
 8002d5c:	80a4703a 	and	r18,r16,r2
 8002d60:	d8c02e15 	stw	r3,184(sp)
 8002d64:	94800094 	ori	r18,r18,2
 8002d68:	a002a01e 	bne	r20,zero,80037ec <___svfprintf_internal_r+0xdc0>
 8002d6c:	01420074 	movhi	r5,2049
 8002d70:	295edb04 	addi	r5,r5,31596
 8002d74:	d9403a15 	stw	r5,232(sp)
 8002d78:	04401e04 	movi	r17,120
 8002d7c:	d8c02a17 	ldw	r3,168(sp)
 8002d80:	0039883a 	mov	fp,zero
 8002d84:	1801e626 	beq	r3,zero,8003520 <___svfprintf_internal_r+0xaf4>
 8002d88:	0029883a 	mov	r20,zero
 8002d8c:	002d883a 	mov	r22,zero
 8002d90:	00020506 	br	80035a8 <___svfprintf_internal_r+0xb7c>
 8002d94:	d9402d17 	ldw	r5,180(sp)
 8002d98:	d9801e04 	addi	r6,sp,120
 8002d9c:	9809883a 	mov	r4,r19
 8002da0:	800c3cc0 	call	800c3cc <__ssprint_r>
 8002da4:	1000081e 	bne	r2,zero,8002dc8 <___svfprintf_internal_r+0x39c>
 8002da8:	da000404 	addi	r8,sp,16
 8002dac:	003f6106 	br	8002b34 <__alt_data_end+0xfc002b34>
 8002db0:	d8802017 	ldw	r2,128(sp)
 8002db4:	10000426 	beq	r2,zero,8002dc8 <___svfprintf_internal_r+0x39c>
 8002db8:	d9402d17 	ldw	r5,180(sp)
 8002dbc:	d9003917 	ldw	r4,228(sp)
 8002dc0:	d9801e04 	addi	r6,sp,120
 8002dc4:	800c3cc0 	call	800c3cc <__ssprint_r>
 8002dc8:	d8802d17 	ldw	r2,180(sp)
 8002dcc:	10c0030b 	ldhu	r3,12(r2)
 8002dd0:	d8802f17 	ldw	r2,188(sp)
 8002dd4:	18c0100c 	andi	r3,r3,64
 8002dd8:	1806251e 	bne	r3,zero,8004670 <___svfprintf_internal_r+0x1c44>
 8002ddc:	dfc04817 	ldw	ra,288(sp)
 8002de0:	df004717 	ldw	fp,284(sp)
 8002de4:	ddc04617 	ldw	r23,280(sp)
 8002de8:	dd804517 	ldw	r22,276(sp)
 8002dec:	dd404417 	ldw	r21,272(sp)
 8002df0:	dd004317 	ldw	r20,268(sp)
 8002df4:	dcc04217 	ldw	r19,264(sp)
 8002df8:	dc804117 	ldw	r18,260(sp)
 8002dfc:	dc404017 	ldw	r17,256(sp)
 8002e00:	dc003f17 	ldw	r16,252(sp)
 8002e04:	dec04904 	addi	sp,sp,292
 8002e08:	f800283a 	ret
 8002e0c:	d9002e17 	ldw	r4,184(sp)
 8002e10:	d9402e17 	ldw	r5,184(sp)
 8002e14:	21000017 	ldw	r4,0(r4)
 8002e18:	28800104 	addi	r2,r5,4
 8002e1c:	d9003115 	stw	r4,196(sp)
 8002e20:	203fb916 	blt	r4,zero,8002d08 <__alt_data_end+0xfc002d08>
 8002e24:	d8802e15 	stw	r2,184(sp)
 8002e28:	bc400007 	ldb	r17,0(r23)
 8002e2c:	003f5406 	br	8002b80 <__alt_data_end+0xfc002b80>
 8002e30:	bc400007 	ldb	r17,0(r23)
 8002e34:	01000a84 	movi	r4,42
 8002e38:	b8c00044 	addi	r3,r23,1
 8002e3c:	89076926 	beq	r17,r4,8004be4 <___svfprintf_internal_r+0x21b8>
 8002e40:	8cbff404 	addi	r18,r17,-48
 8002e44:	b486b936 	bltu	r22,r18,800492c <___svfprintf_internal_r+0x1f00>
 8002e48:	0009883a 	mov	r4,zero
 8002e4c:	1823883a 	mov	r17,r3
 8002e50:	01400284 	movi	r5,10
 8002e54:	8001b580 	call	8001b58 <__mulsi3>
 8002e58:	88c00007 	ldb	r3,0(r17)
 8002e5c:	1489883a 	add	r4,r2,r18
 8002e60:	8dc00044 	addi	r23,r17,1
 8002e64:	1cbff404 	addi	r18,r3,-48
 8002e68:	b823883a 	mov	r17,r23
 8002e6c:	b4bff82e 	bgeu	r22,r18,8002e50 <__alt_data_end+0xfc002e50>
 8002e70:	1823883a 	mov	r17,r3
 8002e74:	20060416 	blt	r4,zero,8004688 <___svfprintf_internal_r+0x1c5c>
 8002e78:	d9002a15 	stw	r4,168(sp)
 8002e7c:	003f4106 	br	8002b84 <__alt_data_end+0xfc002b84>
 8002e80:	8cbff404 	addi	r18,r17,-48
 8002e84:	d8003115 	stw	zero,196(sp)
 8002e88:	0009883a 	mov	r4,zero
 8002e8c:	b823883a 	mov	r17,r23
 8002e90:	01400284 	movi	r5,10
 8002e94:	8001b580 	call	8001b58 <__mulsi3>
 8002e98:	88c00007 	ldb	r3,0(r17)
 8002e9c:	9089883a 	add	r4,r18,r2
 8002ea0:	bdc00044 	addi	r23,r23,1
 8002ea4:	1cbff404 	addi	r18,r3,-48
 8002ea8:	b823883a 	mov	r17,r23
 8002eac:	b4bff82e 	bgeu	r22,r18,8002e90 <__alt_data_end+0xfc002e90>
 8002eb0:	1823883a 	mov	r17,r3
 8002eb4:	d9003115 	stw	r4,196(sp)
 8002eb8:	003f3206 	br	8002b84 <__alt_data_end+0xfc002b84>
 8002ebc:	84002014 	ori	r16,r16,128
 8002ec0:	bc400007 	ldb	r17,0(r23)
 8002ec4:	003f2e06 	br	8002b80 <__alt_data_end+0xfc002b80>
 8002ec8:	8025883a 	mov	r18,r16
 8002ecc:	dc002903 	ldbu	r16,164(sp)
 8002ed0:	e011883a 	mov	r8,fp
 8002ed4:	84003fcc 	andi	r16,r16,255
 8002ed8:	8007721e 	bne	r16,zero,8004ca4 <___svfprintf_internal_r+0x2278>
 8002edc:	9080020c 	andi	r2,r18,8
 8002ee0:	1004a526 	beq	r2,zero,8004178 <___svfprintf_internal_r+0x174c>
 8002ee4:	d9002e17 	ldw	r4,184(sp)
 8002ee8:	d9402e17 	ldw	r5,184(sp)
 8002eec:	d8802e17 	ldw	r2,184(sp)
 8002ef0:	21000017 	ldw	r4,0(r4)
 8002ef4:	29400117 	ldw	r5,4(r5)
 8002ef8:	10800204 	addi	r2,r2,8
 8002efc:	d9003615 	stw	r4,216(sp)
 8002f00:	d9403715 	stw	r5,220(sp)
 8002f04:	d8802e15 	stw	r2,184(sp)
 8002f08:	d9003617 	ldw	r4,216(sp)
 8002f0c:	d9403717 	ldw	r5,220(sp)
 8002f10:	da003e15 	stw	r8,248(sp)
 8002f14:	04000044 	movi	r16,1
 8002f18:	800c0ec0 	call	800c0ec <__fpclassifyd>
 8002f1c:	da003e17 	ldw	r8,248(sp)
 8002f20:	1404731e 	bne	r2,r16,80040f0 <___svfprintf_internal_r+0x16c4>
 8002f24:	d9003617 	ldw	r4,216(sp)
 8002f28:	d9403717 	ldw	r5,220(sp)
 8002f2c:	000d883a 	mov	r6,zero
 8002f30:	000f883a 	mov	r7,zero
 8002f34:	8011a2c0 	call	8011a2c <__ledf2>
 8002f38:	da003e17 	ldw	r8,248(sp)
 8002f3c:	10061b16 	blt	r2,zero,80047ac <___svfprintf_internal_r+0x1d80>
 8002f40:	df002783 	ldbu	fp,158(sp)
 8002f44:	008011c4 	movi	r2,71
 8002f48:	1445810e 	bge	r2,r17,8004550 <___svfprintf_internal_r+0x1b24>
 8002f4c:	04020074 	movhi	r16,2049
 8002f50:	841ed304 	addi	r16,r16,31564
 8002f54:	00c000c4 	movi	r3,3
 8002f58:	00bfdfc4 	movi	r2,-129
 8002f5c:	d8c02915 	stw	r3,164(sp)
 8002f60:	90a4703a 	and	r18,r18,r2
 8002f64:	d8c02b15 	stw	r3,172(sp)
 8002f68:	d8002a15 	stw	zero,168(sp)
 8002f6c:	d8003215 	stw	zero,200(sp)
 8002f70:	00006c06 	br	8003124 <___svfprintf_internal_r+0x6f8>
 8002f74:	84000214 	ori	r16,r16,8
 8002f78:	bc400007 	ldb	r17,0(r23)
 8002f7c:	003f0006 	br	8002b80 <__alt_data_end+0xfc002b80>
 8002f80:	8025883a 	mov	r18,r16
 8002f84:	dc002903 	ldbu	r16,164(sp)
 8002f88:	e011883a 	mov	r8,fp
 8002f8c:	84003fcc 	andi	r16,r16,255
 8002f90:	80073f1e 	bne	r16,zero,8004c90 <___svfprintf_internal_r+0x2264>
 8002f94:	94800414 	ori	r18,r18,16
 8002f98:	9080080c 	andi	r2,r18,32
 8002f9c:	1003bb26 	beq	r2,zero,8003e8c <___svfprintf_internal_r+0x1460>
 8002fa0:	d9002e17 	ldw	r4,184(sp)
 8002fa4:	20800117 	ldw	r2,4(r4)
 8002fa8:	25000017 	ldw	r20,0(r4)
 8002fac:	21000204 	addi	r4,r4,8
 8002fb0:	d9002e15 	stw	r4,184(sp)
 8002fb4:	102d883a 	mov	r22,r2
 8002fb8:	1003bd16 	blt	r2,zero,8003eb0 <___svfprintf_internal_r+0x1484>
 8002fbc:	d9002a17 	ldw	r4,168(sp)
 8002fc0:	df002783 	ldbu	fp,158(sp)
 8002fc4:	2003d016 	blt	r4,zero,8003f08 <___svfprintf_internal_r+0x14dc>
 8002fc8:	00ffdfc4 	movi	r3,-129
 8002fcc:	a584b03a 	or	r2,r20,r22
 8002fd0:	90e4703a 	and	r18,r18,r3
 8002fd4:	10015026 	beq	r2,zero,8003518 <___svfprintf_internal_r+0xaec>
 8002fd8:	b0037026 	beq	r22,zero,8003d9c <___svfprintf_internal_r+0x1370>
 8002fdc:	dc402915 	stw	r17,164(sp)
 8002fe0:	dc001e04 	addi	r16,sp,120
 8002fe4:	b023883a 	mov	r17,r22
 8002fe8:	402d883a 	mov	r22,r8
 8002fec:	a009883a 	mov	r4,r20
 8002ff0:	880b883a 	mov	r5,r17
 8002ff4:	01800284 	movi	r6,10
 8002ff8:	000f883a 	mov	r7,zero
 8002ffc:	80100880 	call	8010088 <__umoddi3>
 8003000:	10800c04 	addi	r2,r2,48
 8003004:	843fffc4 	addi	r16,r16,-1
 8003008:	a009883a 	mov	r4,r20
 800300c:	880b883a 	mov	r5,r17
 8003010:	80800005 	stb	r2,0(r16)
 8003014:	01800284 	movi	r6,10
 8003018:	000f883a 	mov	r7,zero
 800301c:	800fa8c0 	call	800fa8c <__udivdi3>
 8003020:	1029883a 	mov	r20,r2
 8003024:	10c4b03a 	or	r2,r2,r3
 8003028:	1823883a 	mov	r17,r3
 800302c:	103fef1e 	bne	r2,zero,8002fec <__alt_data_end+0xfc002fec>
 8003030:	d8c02817 	ldw	r3,160(sp)
 8003034:	dc402917 	ldw	r17,164(sp)
 8003038:	b011883a 	mov	r8,r22
 800303c:	1c07c83a 	sub	r3,r3,r16
 8003040:	d8c02b15 	stw	r3,172(sp)
 8003044:	00003106 	br	800310c <___svfprintf_internal_r+0x6e0>
 8003048:	8025883a 	mov	r18,r16
 800304c:	dc002903 	ldbu	r16,164(sp)
 8003050:	e011883a 	mov	r8,fp
 8003054:	84003fcc 	andi	r16,r16,255
 8003058:	80070a1e 	bne	r16,zero,8004c84 <___svfprintf_internal_r+0x2258>
 800305c:	94800414 	ori	r18,r18,16
 8003060:	9080080c 	andi	r2,r18,32
 8003064:	1002f626 	beq	r2,zero,8003c40 <___svfprintf_internal_r+0x1214>
 8003068:	d9002e17 	ldw	r4,184(sp)
 800306c:	d9402a17 	ldw	r5,168(sp)
 8003070:	d8002785 	stb	zero,158(sp)
 8003074:	20800204 	addi	r2,r4,8
 8003078:	25000017 	ldw	r20,0(r4)
 800307c:	25800117 	ldw	r22,4(r4)
 8003080:	28043716 	blt	r5,zero,8004160 <___svfprintf_internal_r+0x1734>
 8003084:	013fdfc4 	movi	r4,-129
 8003088:	a586b03a 	or	r3,r20,r22
 800308c:	d8802e15 	stw	r2,184(sp)
 8003090:	9124703a 	and	r18,r18,r4
 8003094:	1802f71e 	bne	r3,zero,8003c74 <___svfprintf_internal_r+0x1248>
 8003098:	d9402a17 	ldw	r5,168(sp)
 800309c:	0039883a 	mov	fp,zero
 80030a0:	2806df26 	beq	r5,zero,8004c20 <___svfprintf_internal_r+0x21f4>
 80030a4:	0029883a 	mov	r20,zero
 80030a8:	002d883a 	mov	r22,zero
 80030ac:	dc001e04 	addi	r16,sp,120
 80030b0:	a006d0fa 	srli	r3,r20,3
 80030b4:	b008977a 	slli	r4,r22,29
 80030b8:	b02cd0fa 	srli	r22,r22,3
 80030bc:	a50001cc 	andi	r20,r20,7
 80030c0:	a0800c04 	addi	r2,r20,48
 80030c4:	843fffc4 	addi	r16,r16,-1
 80030c8:	20e8b03a 	or	r20,r4,r3
 80030cc:	80800005 	stb	r2,0(r16)
 80030d0:	a586b03a 	or	r3,r20,r22
 80030d4:	183ff61e 	bne	r3,zero,80030b0 <__alt_data_end+0xfc0030b0>
 80030d8:	90c0004c 	andi	r3,r18,1
 80030dc:	18013f26 	beq	r3,zero,80035dc <___svfprintf_internal_r+0xbb0>
 80030e0:	10803fcc 	andi	r2,r2,255
 80030e4:	1080201c 	xori	r2,r2,128
 80030e8:	10bfe004 	addi	r2,r2,-128
 80030ec:	00c00c04 	movi	r3,48
 80030f0:	10c13a26 	beq	r2,r3,80035dc <___svfprintf_internal_r+0xbb0>
 80030f4:	80ffffc5 	stb	r3,-1(r16)
 80030f8:	d8c02817 	ldw	r3,160(sp)
 80030fc:	80bfffc4 	addi	r2,r16,-1
 8003100:	1021883a 	mov	r16,r2
 8003104:	1887c83a 	sub	r3,r3,r2
 8003108:	d8c02b15 	stw	r3,172(sp)
 800310c:	d8802b17 	ldw	r2,172(sp)
 8003110:	d9002a17 	ldw	r4,168(sp)
 8003114:	1100010e 	bge	r2,r4,800311c <___svfprintf_internal_r+0x6f0>
 8003118:	2005883a 	mov	r2,r4
 800311c:	d8802915 	stw	r2,164(sp)
 8003120:	d8003215 	stw	zero,200(sp)
 8003124:	e7003fcc 	andi	fp,fp,255
 8003128:	e700201c 	xori	fp,fp,128
 800312c:	e73fe004 	addi	fp,fp,-128
 8003130:	e0000326 	beq	fp,zero,8003140 <___svfprintf_internal_r+0x714>
 8003134:	d8c02917 	ldw	r3,164(sp)
 8003138:	18c00044 	addi	r3,r3,1
 800313c:	d8c02915 	stw	r3,164(sp)
 8003140:	90c0008c 	andi	r3,r18,2
 8003144:	d8c02c15 	stw	r3,176(sp)
 8003148:	18000326 	beq	r3,zero,8003158 <___svfprintf_internal_r+0x72c>
 800314c:	d8c02917 	ldw	r3,164(sp)
 8003150:	18c00084 	addi	r3,r3,2
 8003154:	d8c02915 	stw	r3,164(sp)
 8003158:	90c0210c 	andi	r3,r18,132
 800315c:	d8c03015 	stw	r3,192(sp)
 8003160:	1801c31e 	bne	r3,zero,8003870 <___svfprintf_internal_r+0xe44>
 8003164:	d9003117 	ldw	r4,196(sp)
 8003168:	d8c02917 	ldw	r3,164(sp)
 800316c:	20e9c83a 	sub	r20,r4,r3
 8003170:	0501bf0e 	bge	zero,r20,8003870 <___svfprintf_internal_r+0xe44>
 8003174:	02400404 	movi	r9,16
 8003178:	d8c02017 	ldw	r3,128(sp)
 800317c:	d8801f17 	ldw	r2,124(sp)
 8003180:	4d053d0e 	bge	r9,r20,8004678 <___svfprintf_internal_r+0x1c4c>
 8003184:	01420074 	movhi	r5,2049
 8003188:	295ee684 	addi	r5,r5,31642
 800318c:	dc403c15 	stw	r17,240(sp)
 8003190:	d9403515 	stw	r5,212(sp)
 8003194:	a023883a 	mov	r17,r20
 8003198:	482d883a 	mov	r22,r9
 800319c:	9029883a 	mov	r20,r18
 80031a0:	070001c4 	movi	fp,7
 80031a4:	8025883a 	mov	r18,r16
 80031a8:	dc002d17 	ldw	r16,180(sp)
 80031ac:	00000306 	br	80031bc <___svfprintf_internal_r+0x790>
 80031b0:	8c7ffc04 	addi	r17,r17,-16
 80031b4:	42000204 	addi	r8,r8,8
 80031b8:	b440130e 	bge	r22,r17,8003208 <___svfprintf_internal_r+0x7dc>
 80031bc:	01020074 	movhi	r4,2049
 80031c0:	18c00404 	addi	r3,r3,16
 80031c4:	10800044 	addi	r2,r2,1
 80031c8:	211ee684 	addi	r4,r4,31642
 80031cc:	41000015 	stw	r4,0(r8)
 80031d0:	45800115 	stw	r22,4(r8)
 80031d4:	d8c02015 	stw	r3,128(sp)
 80031d8:	d8801f15 	stw	r2,124(sp)
 80031dc:	e0bff40e 	bge	fp,r2,80031b0 <__alt_data_end+0xfc0031b0>
 80031e0:	d9801e04 	addi	r6,sp,120
 80031e4:	800b883a 	mov	r5,r16
 80031e8:	9809883a 	mov	r4,r19
 80031ec:	800c3cc0 	call	800c3cc <__ssprint_r>
 80031f0:	103ef51e 	bne	r2,zero,8002dc8 <__alt_data_end+0xfc002dc8>
 80031f4:	8c7ffc04 	addi	r17,r17,-16
 80031f8:	d8c02017 	ldw	r3,128(sp)
 80031fc:	d8801f17 	ldw	r2,124(sp)
 8003200:	da000404 	addi	r8,sp,16
 8003204:	b47fed16 	blt	r22,r17,80031bc <__alt_data_end+0xfc0031bc>
 8003208:	9021883a 	mov	r16,r18
 800320c:	a025883a 	mov	r18,r20
 8003210:	8829883a 	mov	r20,r17
 8003214:	dc403c17 	ldw	r17,240(sp)
 8003218:	d9403517 	ldw	r5,212(sp)
 800321c:	a0c7883a 	add	r3,r20,r3
 8003220:	10800044 	addi	r2,r2,1
 8003224:	41400015 	stw	r5,0(r8)
 8003228:	45000115 	stw	r20,4(r8)
 800322c:	d8c02015 	stw	r3,128(sp)
 8003230:	d8801f15 	stw	r2,124(sp)
 8003234:	010001c4 	movi	r4,7
 8003238:	2082c116 	blt	r4,r2,8003d40 <___svfprintf_internal_r+0x1314>
 800323c:	df002787 	ldb	fp,158(sp)
 8003240:	42000204 	addi	r8,r8,8
 8003244:	e0000c26 	beq	fp,zero,8003278 <___svfprintf_internal_r+0x84c>
 8003248:	d8801f17 	ldw	r2,124(sp)
 800324c:	d9002784 	addi	r4,sp,158
 8003250:	18c00044 	addi	r3,r3,1
 8003254:	10800044 	addi	r2,r2,1
 8003258:	41000015 	stw	r4,0(r8)
 800325c:	01000044 	movi	r4,1
 8003260:	41000115 	stw	r4,4(r8)
 8003264:	d8c02015 	stw	r3,128(sp)
 8003268:	d8801f15 	stw	r2,124(sp)
 800326c:	010001c4 	movi	r4,7
 8003270:	20825a16 	blt	r4,r2,8003bdc <___svfprintf_internal_r+0x11b0>
 8003274:	42000204 	addi	r8,r8,8
 8003278:	d8802c17 	ldw	r2,176(sp)
 800327c:	10000c26 	beq	r2,zero,80032b0 <___svfprintf_internal_r+0x884>
 8003280:	d8801f17 	ldw	r2,124(sp)
 8003284:	d9002704 	addi	r4,sp,156
 8003288:	18c00084 	addi	r3,r3,2
 800328c:	10800044 	addi	r2,r2,1
 8003290:	41000015 	stw	r4,0(r8)
 8003294:	01000084 	movi	r4,2
 8003298:	41000115 	stw	r4,4(r8)
 800329c:	d8c02015 	stw	r3,128(sp)
 80032a0:	d8801f15 	stw	r2,124(sp)
 80032a4:	010001c4 	movi	r4,7
 80032a8:	20825416 	blt	r4,r2,8003bfc <___svfprintf_internal_r+0x11d0>
 80032ac:	42000204 	addi	r8,r8,8
 80032b0:	d9003017 	ldw	r4,192(sp)
 80032b4:	00802004 	movi	r2,128
 80032b8:	2081b926 	beq	r4,r2,80039a0 <___svfprintf_internal_r+0xf74>
 80032bc:	d9402a17 	ldw	r5,168(sp)
 80032c0:	d8802b17 	ldw	r2,172(sp)
 80032c4:	28adc83a 	sub	r22,r5,r2
 80032c8:	05802f0e 	bge	zero,r22,8003388 <___svfprintf_internal_r+0x95c>
 80032cc:	07000404 	movi	fp,16
 80032d0:	d8801f17 	ldw	r2,124(sp)
 80032d4:	e583e20e 	bge	fp,r22,8004260 <___svfprintf_internal_r+0x1834>
 80032d8:	01420074 	movhi	r5,2049
 80032dc:	295ee284 	addi	r5,r5,31626
 80032e0:	dc402a15 	stw	r17,168(sp)
 80032e4:	d9402c15 	stw	r5,176(sp)
 80032e8:	b023883a 	mov	r17,r22
 80032ec:	050001c4 	movi	r20,7
 80032f0:	902d883a 	mov	r22,r18
 80032f4:	8025883a 	mov	r18,r16
 80032f8:	dc002d17 	ldw	r16,180(sp)
 80032fc:	00000306 	br	800330c <___svfprintf_internal_r+0x8e0>
 8003300:	8c7ffc04 	addi	r17,r17,-16
 8003304:	42000204 	addi	r8,r8,8
 8003308:	e440110e 	bge	fp,r17,8003350 <___svfprintf_internal_r+0x924>
 800330c:	18c00404 	addi	r3,r3,16
 8003310:	10800044 	addi	r2,r2,1
 8003314:	45400015 	stw	r21,0(r8)
 8003318:	47000115 	stw	fp,4(r8)
 800331c:	d8c02015 	stw	r3,128(sp)
 8003320:	d8801f15 	stw	r2,124(sp)
 8003324:	a0bff60e 	bge	r20,r2,8003300 <__alt_data_end+0xfc003300>
 8003328:	d9801e04 	addi	r6,sp,120
 800332c:	800b883a 	mov	r5,r16
 8003330:	9809883a 	mov	r4,r19
 8003334:	800c3cc0 	call	800c3cc <__ssprint_r>
 8003338:	103ea31e 	bne	r2,zero,8002dc8 <__alt_data_end+0xfc002dc8>
 800333c:	8c7ffc04 	addi	r17,r17,-16
 8003340:	d8c02017 	ldw	r3,128(sp)
 8003344:	d8801f17 	ldw	r2,124(sp)
 8003348:	da000404 	addi	r8,sp,16
 800334c:	e47fef16 	blt	fp,r17,800330c <__alt_data_end+0xfc00330c>
 8003350:	9021883a 	mov	r16,r18
 8003354:	b025883a 	mov	r18,r22
 8003358:	882d883a 	mov	r22,r17
 800335c:	dc402a17 	ldw	r17,168(sp)
 8003360:	d9002c17 	ldw	r4,176(sp)
 8003364:	1d87883a 	add	r3,r3,r22
 8003368:	10800044 	addi	r2,r2,1
 800336c:	41000015 	stw	r4,0(r8)
 8003370:	45800115 	stw	r22,4(r8)
 8003374:	d8c02015 	stw	r3,128(sp)
 8003378:	d8801f15 	stw	r2,124(sp)
 800337c:	010001c4 	movi	r4,7
 8003380:	20820e16 	blt	r4,r2,8003bbc <___svfprintf_internal_r+0x1190>
 8003384:	42000204 	addi	r8,r8,8
 8003388:	9080400c 	andi	r2,r18,256
 800338c:	10013a1e 	bne	r2,zero,8003878 <___svfprintf_internal_r+0xe4c>
 8003390:	d9402b17 	ldw	r5,172(sp)
 8003394:	d8801f17 	ldw	r2,124(sp)
 8003398:	44000015 	stw	r16,0(r8)
 800339c:	1947883a 	add	r3,r3,r5
 80033a0:	10800044 	addi	r2,r2,1
 80033a4:	41400115 	stw	r5,4(r8)
 80033a8:	d8c02015 	stw	r3,128(sp)
 80033ac:	d8801f15 	stw	r2,124(sp)
 80033b0:	010001c4 	movi	r4,7
 80033b4:	2081f316 	blt	r4,r2,8003b84 <___svfprintf_internal_r+0x1158>
 80033b8:	42000204 	addi	r8,r8,8
 80033bc:	9480010c 	andi	r18,r18,4
 80033c0:	90003226 	beq	r18,zero,800348c <___svfprintf_internal_r+0xa60>
 80033c4:	d9403117 	ldw	r5,196(sp)
 80033c8:	d8802917 	ldw	r2,164(sp)
 80033cc:	28a1c83a 	sub	r16,r5,r2
 80033d0:	04002e0e 	bge	zero,r16,800348c <___svfprintf_internal_r+0xa60>
 80033d4:	04400404 	movi	r17,16
 80033d8:	d8801f17 	ldw	r2,124(sp)
 80033dc:	8c04db0e 	bge	r17,r16,800474c <___svfprintf_internal_r+0x1d20>
 80033e0:	01420074 	movhi	r5,2049
 80033e4:	295ee684 	addi	r5,r5,31642
 80033e8:	d9403515 	stw	r5,212(sp)
 80033ec:	048001c4 	movi	r18,7
 80033f0:	dd002d17 	ldw	r20,180(sp)
 80033f4:	00000306 	br	8003404 <___svfprintf_internal_r+0x9d8>
 80033f8:	843ffc04 	addi	r16,r16,-16
 80033fc:	42000204 	addi	r8,r8,8
 8003400:	8c00130e 	bge	r17,r16,8003450 <___svfprintf_internal_r+0xa24>
 8003404:	01020074 	movhi	r4,2049
 8003408:	18c00404 	addi	r3,r3,16
 800340c:	10800044 	addi	r2,r2,1
 8003410:	211ee684 	addi	r4,r4,31642
 8003414:	41000015 	stw	r4,0(r8)
 8003418:	44400115 	stw	r17,4(r8)
 800341c:	d8c02015 	stw	r3,128(sp)
 8003420:	d8801f15 	stw	r2,124(sp)
 8003424:	90bff40e 	bge	r18,r2,80033f8 <__alt_data_end+0xfc0033f8>
 8003428:	d9801e04 	addi	r6,sp,120
 800342c:	a00b883a 	mov	r5,r20
 8003430:	9809883a 	mov	r4,r19
 8003434:	800c3cc0 	call	800c3cc <__ssprint_r>
 8003438:	103e631e 	bne	r2,zero,8002dc8 <__alt_data_end+0xfc002dc8>
 800343c:	843ffc04 	addi	r16,r16,-16
 8003440:	d8c02017 	ldw	r3,128(sp)
 8003444:	d8801f17 	ldw	r2,124(sp)
 8003448:	da000404 	addi	r8,sp,16
 800344c:	8c3fed16 	blt	r17,r16,8003404 <__alt_data_end+0xfc003404>
 8003450:	d9403517 	ldw	r5,212(sp)
 8003454:	1c07883a 	add	r3,r3,r16
 8003458:	10800044 	addi	r2,r2,1
 800345c:	41400015 	stw	r5,0(r8)
 8003460:	44000115 	stw	r16,4(r8)
 8003464:	d8c02015 	stw	r3,128(sp)
 8003468:	d8801f15 	stw	r2,124(sp)
 800346c:	010001c4 	movi	r4,7
 8003470:	2080060e 	bge	r4,r2,800348c <___svfprintf_internal_r+0xa60>
 8003474:	d9402d17 	ldw	r5,180(sp)
 8003478:	d9801e04 	addi	r6,sp,120
 800347c:	9809883a 	mov	r4,r19
 8003480:	800c3cc0 	call	800c3cc <__ssprint_r>
 8003484:	103e501e 	bne	r2,zero,8002dc8 <__alt_data_end+0xfc002dc8>
 8003488:	d8c02017 	ldw	r3,128(sp)
 800348c:	d8803117 	ldw	r2,196(sp)
 8003490:	d9002917 	ldw	r4,164(sp)
 8003494:	1100010e 	bge	r2,r4,800349c <___svfprintf_internal_r+0xa70>
 8003498:	2005883a 	mov	r2,r4
 800349c:	d9402f17 	ldw	r5,188(sp)
 80034a0:	288b883a 	add	r5,r5,r2
 80034a4:	d9402f15 	stw	r5,188(sp)
 80034a8:	1801be1e 	bne	r3,zero,8003ba4 <___svfprintf_internal_r+0x1178>
 80034ac:	b8800007 	ldb	r2,0(r23)
 80034b0:	d8001f15 	stw	zero,124(sp)
 80034b4:	da000404 	addi	r8,sp,16
 80034b8:	103d891e 	bne	r2,zero,8002ae0 <__alt_data_end+0xfc002ae0>
 80034bc:	b823883a 	mov	r17,r23
 80034c0:	003d9f06 	br	8002b40 <__alt_data_end+0xfc002b40>
 80034c4:	8025883a 	mov	r18,r16
 80034c8:	dc002903 	ldbu	r16,164(sp)
 80034cc:	e011883a 	mov	r8,fp
 80034d0:	84003fcc 	andi	r16,r16,255
 80034d4:	8005e61e 	bne	r16,zero,8004c70 <___svfprintf_internal_r+0x2244>
 80034d8:	94800414 	ori	r18,r18,16
 80034dc:	9080080c 	andi	r2,r18,32
 80034e0:	10022026 	beq	r2,zero,8003d64 <___svfprintf_internal_r+0x1338>
 80034e4:	d9002e17 	ldw	r4,184(sp)
 80034e8:	d9402a17 	ldw	r5,168(sp)
 80034ec:	d8002785 	stb	zero,158(sp)
 80034f0:	20c00204 	addi	r3,r4,8
 80034f4:	25000017 	ldw	r20,0(r4)
 80034f8:	25800117 	ldw	r22,4(r4)
 80034fc:	2803ad16 	blt	r5,zero,80043b4 <___svfprintf_internal_r+0x1988>
 8003500:	013fdfc4 	movi	r4,-129
 8003504:	a584b03a 	or	r2,r20,r22
 8003508:	d8c02e15 	stw	r3,184(sp)
 800350c:	9124703a 	and	r18,r18,r4
 8003510:	0039883a 	mov	fp,zero
 8003514:	103eb01e 	bne	r2,zero,8002fd8 <__alt_data_end+0xfc002fd8>
 8003518:	d8802a17 	ldw	r2,168(sp)
 800351c:	1002e71e 	bne	r2,zero,80040bc <___svfprintf_internal_r+0x1690>
 8003520:	d8002a15 	stw	zero,168(sp)
 8003524:	d8002b15 	stw	zero,172(sp)
 8003528:	dc001e04 	addi	r16,sp,120
 800352c:	003ef706 	br	800310c <__alt_data_end+0xfc00310c>
 8003530:	8025883a 	mov	r18,r16
 8003534:	dc002903 	ldbu	r16,164(sp)
 8003538:	e011883a 	mov	r8,fp
 800353c:	84003fcc 	andi	r16,r16,255
 8003540:	8005c81e 	bne	r16,zero,8004c64 <___svfprintf_internal_r+0x2238>
 8003544:	01020074 	movhi	r4,2049
 8003548:	211ed604 	addi	r4,r4,31576
 800354c:	d9003a15 	stw	r4,232(sp)
 8003550:	9080080c 	andi	r2,r18,32
 8003554:	10007226 	beq	r2,zero,8003720 <___svfprintf_internal_r+0xcf4>
 8003558:	d9402e17 	ldw	r5,184(sp)
 800355c:	2d000017 	ldw	r20,0(r5)
 8003560:	2d800117 	ldw	r22,4(r5)
 8003564:	29400204 	addi	r5,r5,8
 8003568:	d9402e15 	stw	r5,184(sp)
 800356c:	9080004c 	andi	r2,r18,1
 8003570:	1001aa26 	beq	r2,zero,8003c1c <___svfprintf_internal_r+0x11f0>
 8003574:	a584b03a 	or	r2,r20,r22
 8003578:	10032526 	beq	r2,zero,8004210 <___svfprintf_internal_r+0x17e4>
 800357c:	d8c02a17 	ldw	r3,168(sp)
 8003580:	00800c04 	movi	r2,48
 8003584:	d8802705 	stb	r2,156(sp)
 8003588:	dc402745 	stb	r17,157(sp)
 800358c:	d8002785 	stb	zero,158(sp)
 8003590:	90800094 	ori	r2,r18,2
 8003594:	1804a316 	blt	r3,zero,8004824 <___svfprintf_internal_r+0x1df8>
 8003598:	00bfdfc4 	movi	r2,-129
 800359c:	90a4703a 	and	r18,r18,r2
 80035a0:	94800094 	ori	r18,r18,2
 80035a4:	0039883a 	mov	fp,zero
 80035a8:	d9003a17 	ldw	r4,232(sp)
 80035ac:	dc001e04 	addi	r16,sp,120
 80035b0:	a08003cc 	andi	r2,r20,15
 80035b4:	b006973a 	slli	r3,r22,28
 80035b8:	2085883a 	add	r2,r4,r2
 80035bc:	a028d13a 	srli	r20,r20,4
 80035c0:	10800003 	ldbu	r2,0(r2)
 80035c4:	b02cd13a 	srli	r22,r22,4
 80035c8:	843fffc4 	addi	r16,r16,-1
 80035cc:	1d28b03a 	or	r20,r3,r20
 80035d0:	80800005 	stb	r2,0(r16)
 80035d4:	a584b03a 	or	r2,r20,r22
 80035d8:	103ff51e 	bne	r2,zero,80035b0 <__alt_data_end+0xfc0035b0>
 80035dc:	d8c02817 	ldw	r3,160(sp)
 80035e0:	1c07c83a 	sub	r3,r3,r16
 80035e4:	d8c02b15 	stw	r3,172(sp)
 80035e8:	003ec806 	br	800310c <__alt_data_end+0xfc00310c>
 80035ec:	d8c02e17 	ldw	r3,184(sp)
 80035f0:	d9002e17 	ldw	r4,184(sp)
 80035f4:	8025883a 	mov	r18,r16
 80035f8:	18800017 	ldw	r2,0(r3)
 80035fc:	21000104 	addi	r4,r4,4
 8003600:	00c00044 	movi	r3,1
 8003604:	e011883a 	mov	r8,fp
 8003608:	d8c02915 	stw	r3,164(sp)
 800360c:	d8002785 	stb	zero,158(sp)
 8003610:	d8801405 	stb	r2,80(sp)
 8003614:	d9002e15 	stw	r4,184(sp)
 8003618:	d8c02b15 	stw	r3,172(sp)
 800361c:	d8002a15 	stw	zero,168(sp)
 8003620:	d8003215 	stw	zero,200(sp)
 8003624:	dc001404 	addi	r16,sp,80
 8003628:	0039883a 	mov	fp,zero
 800362c:	003ec406 	br	8003140 <__alt_data_end+0xfc003140>
 8003630:	8025883a 	mov	r18,r16
 8003634:	dc002903 	ldbu	r16,164(sp)
 8003638:	e011883a 	mov	r8,fp
 800363c:	84003fcc 	andi	r16,r16,255
 8003640:	803e8726 	beq	r16,zero,8003060 <__alt_data_end+0xfc003060>
 8003644:	d8c02b03 	ldbu	r3,172(sp)
 8003648:	d8c02785 	stb	r3,158(sp)
 800364c:	003e8406 	br	8003060 <__alt_data_end+0xfc003060>
 8003650:	00c00044 	movi	r3,1
 8003654:	d8c02905 	stb	r3,164(sp)
 8003658:	00c00ac4 	movi	r3,43
 800365c:	d8c02b05 	stb	r3,172(sp)
 8003660:	bc400007 	ldb	r17,0(r23)
 8003664:	003d4606 	br	8002b80 <__alt_data_end+0xfc002b80>
 8003668:	84000814 	ori	r16,r16,32
 800366c:	bc400007 	ldb	r17,0(r23)
 8003670:	003d4306 	br	8002b80 <__alt_data_end+0xfc002b80>
 8003674:	d8802e17 	ldw	r2,184(sp)
 8003678:	8025883a 	mov	r18,r16
 800367c:	d8002785 	stb	zero,158(sp)
 8003680:	14000017 	ldw	r16,0(r2)
 8003684:	e011883a 	mov	r8,fp
 8003688:	15000104 	addi	r20,r2,4
 800368c:	80042126 	beq	r16,zero,8004714 <___svfprintf_internal_r+0x1ce8>
 8003690:	d8c02a17 	ldw	r3,168(sp)
 8003694:	1803ee16 	blt	r3,zero,8004650 <___svfprintf_internal_r+0x1c24>
 8003698:	180d883a 	mov	r6,r3
 800369c:	000b883a 	mov	r5,zero
 80036a0:	8009883a 	mov	r4,r16
 80036a4:	df003e15 	stw	fp,248(sp)
 80036a8:	800a6200 	call	800a620 <memchr>
 80036ac:	da003e17 	ldw	r8,248(sp)
 80036b0:	10046a26 	beq	r2,zero,800485c <___svfprintf_internal_r+0x1e30>
 80036b4:	1405c83a 	sub	r2,r2,r16
 80036b8:	d8802b15 	stw	r2,172(sp)
 80036bc:	1003ea16 	blt	r2,zero,8004668 <___svfprintf_internal_r+0x1c3c>
 80036c0:	df002783 	ldbu	fp,158(sp)
 80036c4:	d8802915 	stw	r2,164(sp)
 80036c8:	dd002e15 	stw	r20,184(sp)
 80036cc:	d8002a15 	stw	zero,168(sp)
 80036d0:	d8003215 	stw	zero,200(sp)
 80036d4:	003e9306 	br	8003124 <__alt_data_end+0xfc003124>
 80036d8:	8025883a 	mov	r18,r16
 80036dc:	dc002903 	ldbu	r16,164(sp)
 80036e0:	e011883a 	mov	r8,fp
 80036e4:	84003fcc 	andi	r16,r16,255
 80036e8:	803f7c26 	beq	r16,zero,80034dc <__alt_data_end+0xfc0034dc>
 80036ec:	d8c02b03 	ldbu	r3,172(sp)
 80036f0:	d8c02785 	stb	r3,158(sp)
 80036f4:	003f7906 	br	80034dc <__alt_data_end+0xfc0034dc>
 80036f8:	8025883a 	mov	r18,r16
 80036fc:	dc002903 	ldbu	r16,164(sp)
 8003700:	e011883a 	mov	r8,fp
 8003704:	84003fcc 	andi	r16,r16,255
 8003708:	8005741e 	bne	r16,zero,8004cdc <___svfprintf_internal_r+0x22b0>
 800370c:	01020074 	movhi	r4,2049
 8003710:	211edb04 	addi	r4,r4,31596
 8003714:	d9003a15 	stw	r4,232(sp)
 8003718:	9080080c 	andi	r2,r18,32
 800371c:	103f8e1e 	bne	r2,zero,8003558 <__alt_data_end+0xfc003558>
 8003720:	9080040c 	andi	r2,r18,16
 8003724:	1002a726 	beq	r2,zero,80041c4 <___svfprintf_internal_r+0x1798>
 8003728:	d8802e17 	ldw	r2,184(sp)
 800372c:	002d883a 	mov	r22,zero
 8003730:	15000017 	ldw	r20,0(r2)
 8003734:	10800104 	addi	r2,r2,4
 8003738:	d8802e15 	stw	r2,184(sp)
 800373c:	003f8b06 	br	800356c <__alt_data_end+0xfc00356c>
 8003740:	84000054 	ori	r16,r16,1
 8003744:	bc400007 	ldb	r17,0(r23)
 8003748:	003d0d06 	br	8002b80 <__alt_data_end+0xfc002b80>
 800374c:	d8802b07 	ldb	r2,172(sp)
 8003750:	1002a41e 	bne	r2,zero,80041e4 <___svfprintf_internal_r+0x17b8>
 8003754:	00c00044 	movi	r3,1
 8003758:	d8c02905 	stb	r3,164(sp)
 800375c:	00c00804 	movi	r3,32
 8003760:	d8c02b05 	stb	r3,172(sp)
 8003764:	bc400007 	ldb	r17,0(r23)
 8003768:	003d0506 	br	8002b80 <__alt_data_end+0xfc002b80>
 800376c:	8025883a 	mov	r18,r16
 8003770:	dc002903 	ldbu	r16,164(sp)
 8003774:	e011883a 	mov	r8,fp
 8003778:	84003fcc 	andi	r16,r16,255
 800377c:	803e0626 	beq	r16,zero,8002f98 <__alt_data_end+0xfc002f98>
 8003780:	d8c02b03 	ldbu	r3,172(sp)
 8003784:	d8c02785 	stb	r3,158(sp)
 8003788:	003e0306 	br	8002f98 <__alt_data_end+0xfc002f98>
 800378c:	bc400007 	ldb	r17,0(r23)
 8003790:	00801b04 	movi	r2,108
 8003794:	88830a26 	beq	r17,r2,80043c0 <___svfprintf_internal_r+0x1994>
 8003798:	84000414 	ori	r16,r16,16
 800379c:	003cf806 	br	8002b80 <__alt_data_end+0xfc002b80>
 80037a0:	8025883a 	mov	r18,r16
 80037a4:	dc002903 	ldbu	r16,164(sp)
 80037a8:	e011883a 	mov	r8,fp
 80037ac:	84003fcc 	andi	r16,r16,255
 80037b0:	8005471e 	bne	r16,zero,8004cd0 <___svfprintf_internal_r+0x22a4>
 80037b4:	9080080c 	andi	r2,r18,32
 80037b8:	10028c26 	beq	r2,zero,80041ec <___svfprintf_internal_r+0x17c0>
 80037bc:	d9002e17 	ldw	r4,184(sp)
 80037c0:	d9402f17 	ldw	r5,188(sp)
 80037c4:	20800017 	ldw	r2,0(r4)
 80037c8:	2807d7fa 	srai	r3,r5,31
 80037cc:	21000104 	addi	r4,r4,4
 80037d0:	d9002e15 	stw	r4,184(sp)
 80037d4:	11400015 	stw	r5,0(r2)
 80037d8:	10c00115 	stw	r3,4(r2)
 80037dc:	003cbe06 	br	8002ad8 <__alt_data_end+0xfc002ad8>
 80037e0:	84001014 	ori	r16,r16,64
 80037e4:	bc400007 	ldb	r17,0(r23)
 80037e8:	003ce506 	br	8002b80 <__alt_data_end+0xfc002b80>
 80037ec:	01020074 	movhi	r4,2049
 80037f0:	211edb04 	addi	r4,r4,31596
 80037f4:	0039883a 	mov	fp,zero
 80037f8:	d9003a15 	stw	r4,232(sp)
 80037fc:	04401e04 	movi	r17,120
 8003800:	003f6906 	br	80035a8 <__alt_data_end+0xfc0035a8>
 8003804:	8025883a 	mov	r18,r16
 8003808:	dc002903 	ldbu	r16,164(sp)
 800380c:	e011883a 	mov	r8,fp
 8003810:	84003fcc 	andi	r16,r16,255
 8003814:	8005261e 	bne	r16,zero,8004cb0 <___svfprintf_internal_r+0x2284>
 8003818:	883d6526 	beq	r17,zero,8002db0 <__alt_data_end+0xfc002db0>
 800381c:	00c00044 	movi	r3,1
 8003820:	d8c02915 	stw	r3,164(sp)
 8003824:	dc401405 	stb	r17,80(sp)
 8003828:	d8002785 	stb	zero,158(sp)
 800382c:	003f7a06 	br	8003618 <__alt_data_end+0xfc003618>
 8003830:	01020074 	movhi	r4,2049
 8003834:	211edb04 	addi	r4,r4,31596
 8003838:	d9003a15 	stw	r4,232(sp)
 800383c:	d8c02e15 	stw	r3,184(sp)
 8003840:	1025883a 	mov	r18,r2
 8003844:	04401e04 	movi	r17,120
 8003848:	a584b03a 	or	r2,r20,r22
 800384c:	1000fa1e 	bne	r2,zero,8003c38 <___svfprintf_internal_r+0x120c>
 8003850:	0039883a 	mov	fp,zero
 8003854:	00800084 	movi	r2,2
 8003858:	10803fcc 	andi	r2,r2,255
 800385c:	00c00044 	movi	r3,1
 8003860:	10c21626 	beq	r2,r3,80040bc <___svfprintf_internal_r+0x1690>
 8003864:	00c00084 	movi	r3,2
 8003868:	10fe0e1e 	bne	r2,r3,80030a4 <__alt_data_end+0xfc0030a4>
 800386c:	003d4606 	br	8002d88 <__alt_data_end+0xfc002d88>
 8003870:	d8c02017 	ldw	r3,128(sp)
 8003874:	003e7306 	br	8003244 <__alt_data_end+0xfc003244>
 8003878:	00801944 	movi	r2,101
 800387c:	14407c0e 	bge	r2,r17,8003a70 <___svfprintf_internal_r+0x1044>
 8003880:	d9003617 	ldw	r4,216(sp)
 8003884:	d9403717 	ldw	r5,220(sp)
 8003888:	000d883a 	mov	r6,zero
 800388c:	000f883a 	mov	r7,zero
 8003890:	d8c03d15 	stw	r3,244(sp)
 8003894:	da003e15 	stw	r8,248(sp)
 8003898:	80118c80 	call	80118c8 <__eqdf2>
 800389c:	d8c03d17 	ldw	r3,244(sp)
 80038a0:	da003e17 	ldw	r8,248(sp)
 80038a4:	1000f51e 	bne	r2,zero,8003c7c <___svfprintf_internal_r+0x1250>
 80038a8:	d8801f17 	ldw	r2,124(sp)
 80038ac:	01020074 	movhi	r4,2049
 80038b0:	211ee204 	addi	r4,r4,31624
 80038b4:	18c00044 	addi	r3,r3,1
 80038b8:	10800044 	addi	r2,r2,1
 80038bc:	41000015 	stw	r4,0(r8)
 80038c0:	01000044 	movi	r4,1
 80038c4:	41000115 	stw	r4,4(r8)
 80038c8:	d8c02015 	stw	r3,128(sp)
 80038cc:	d8801f15 	stw	r2,124(sp)
 80038d0:	010001c4 	movi	r4,7
 80038d4:	20826616 	blt	r4,r2,8004270 <___svfprintf_internal_r+0x1844>
 80038d8:	42000204 	addi	r8,r8,8
 80038dc:	d8802617 	ldw	r2,152(sp)
 80038e0:	d9403317 	ldw	r5,204(sp)
 80038e4:	11400216 	blt	r2,r5,80038f0 <___svfprintf_internal_r+0xec4>
 80038e8:	9080004c 	andi	r2,r18,1
 80038ec:	103eb326 	beq	r2,zero,80033bc <__alt_data_end+0xfc0033bc>
 80038f0:	d8803817 	ldw	r2,224(sp)
 80038f4:	d9003417 	ldw	r4,208(sp)
 80038f8:	d9403817 	ldw	r5,224(sp)
 80038fc:	1887883a 	add	r3,r3,r2
 8003900:	d8801f17 	ldw	r2,124(sp)
 8003904:	41000015 	stw	r4,0(r8)
 8003908:	41400115 	stw	r5,4(r8)
 800390c:	10800044 	addi	r2,r2,1
 8003910:	d8c02015 	stw	r3,128(sp)
 8003914:	d8801f15 	stw	r2,124(sp)
 8003918:	010001c4 	movi	r4,7
 800391c:	2082af16 	blt	r4,r2,80043dc <___svfprintf_internal_r+0x19b0>
 8003920:	42000204 	addi	r8,r8,8
 8003924:	d8803317 	ldw	r2,204(sp)
 8003928:	143fffc4 	addi	r16,r2,-1
 800392c:	043ea30e 	bge	zero,r16,80033bc <__alt_data_end+0xfc0033bc>
 8003930:	04400404 	movi	r17,16
 8003934:	d8801f17 	ldw	r2,124(sp)
 8003938:	8c00860e 	bge	r17,r16,8003b54 <___svfprintf_internal_r+0x1128>
 800393c:	01420074 	movhi	r5,2049
 8003940:	295ee284 	addi	r5,r5,31626
 8003944:	d9402c15 	stw	r5,176(sp)
 8003948:	058001c4 	movi	r22,7
 800394c:	dd002d17 	ldw	r20,180(sp)
 8003950:	00000306 	br	8003960 <___svfprintf_internal_r+0xf34>
 8003954:	42000204 	addi	r8,r8,8
 8003958:	843ffc04 	addi	r16,r16,-16
 800395c:	8c00800e 	bge	r17,r16,8003b60 <___svfprintf_internal_r+0x1134>
 8003960:	18c00404 	addi	r3,r3,16
 8003964:	10800044 	addi	r2,r2,1
 8003968:	45400015 	stw	r21,0(r8)
 800396c:	44400115 	stw	r17,4(r8)
 8003970:	d8c02015 	stw	r3,128(sp)
 8003974:	d8801f15 	stw	r2,124(sp)
 8003978:	b0bff60e 	bge	r22,r2,8003954 <__alt_data_end+0xfc003954>
 800397c:	d9801e04 	addi	r6,sp,120
 8003980:	a00b883a 	mov	r5,r20
 8003984:	9809883a 	mov	r4,r19
 8003988:	800c3cc0 	call	800c3cc <__ssprint_r>
 800398c:	103d0e1e 	bne	r2,zero,8002dc8 <__alt_data_end+0xfc002dc8>
 8003990:	d8c02017 	ldw	r3,128(sp)
 8003994:	d8801f17 	ldw	r2,124(sp)
 8003998:	da000404 	addi	r8,sp,16
 800399c:	003fee06 	br	8003958 <__alt_data_end+0xfc003958>
 80039a0:	d9403117 	ldw	r5,196(sp)
 80039a4:	d8802917 	ldw	r2,164(sp)
 80039a8:	28adc83a 	sub	r22,r5,r2
 80039ac:	05be430e 	bge	zero,r22,80032bc <__alt_data_end+0xfc0032bc>
 80039b0:	07000404 	movi	fp,16
 80039b4:	d8801f17 	ldw	r2,124(sp)
 80039b8:	e583a20e 	bge	fp,r22,8004844 <___svfprintf_internal_r+0x1e18>
 80039bc:	01420074 	movhi	r5,2049
 80039c0:	295ee284 	addi	r5,r5,31626
 80039c4:	dc403015 	stw	r17,192(sp)
 80039c8:	d9402c15 	stw	r5,176(sp)
 80039cc:	b023883a 	mov	r17,r22
 80039d0:	050001c4 	movi	r20,7
 80039d4:	902d883a 	mov	r22,r18
 80039d8:	8025883a 	mov	r18,r16
 80039dc:	dc002d17 	ldw	r16,180(sp)
 80039e0:	00000306 	br	80039f0 <___svfprintf_internal_r+0xfc4>
 80039e4:	8c7ffc04 	addi	r17,r17,-16
 80039e8:	42000204 	addi	r8,r8,8
 80039ec:	e440110e 	bge	fp,r17,8003a34 <___svfprintf_internal_r+0x1008>
 80039f0:	18c00404 	addi	r3,r3,16
 80039f4:	10800044 	addi	r2,r2,1
 80039f8:	45400015 	stw	r21,0(r8)
 80039fc:	47000115 	stw	fp,4(r8)
 8003a00:	d8c02015 	stw	r3,128(sp)
 8003a04:	d8801f15 	stw	r2,124(sp)
 8003a08:	a0bff60e 	bge	r20,r2,80039e4 <__alt_data_end+0xfc0039e4>
 8003a0c:	d9801e04 	addi	r6,sp,120
 8003a10:	800b883a 	mov	r5,r16
 8003a14:	9809883a 	mov	r4,r19
 8003a18:	800c3cc0 	call	800c3cc <__ssprint_r>
 8003a1c:	103cea1e 	bne	r2,zero,8002dc8 <__alt_data_end+0xfc002dc8>
 8003a20:	8c7ffc04 	addi	r17,r17,-16
 8003a24:	d8c02017 	ldw	r3,128(sp)
 8003a28:	d8801f17 	ldw	r2,124(sp)
 8003a2c:	da000404 	addi	r8,sp,16
 8003a30:	e47fef16 	blt	fp,r17,80039f0 <__alt_data_end+0xfc0039f0>
 8003a34:	9021883a 	mov	r16,r18
 8003a38:	b025883a 	mov	r18,r22
 8003a3c:	882d883a 	mov	r22,r17
 8003a40:	dc403017 	ldw	r17,192(sp)
 8003a44:	d9002c17 	ldw	r4,176(sp)
 8003a48:	1d87883a 	add	r3,r3,r22
 8003a4c:	10800044 	addi	r2,r2,1
 8003a50:	41000015 	stw	r4,0(r8)
 8003a54:	45800115 	stw	r22,4(r8)
 8003a58:	d8c02015 	stw	r3,128(sp)
 8003a5c:	d8801f15 	stw	r2,124(sp)
 8003a60:	010001c4 	movi	r4,7
 8003a64:	20819a16 	blt	r4,r2,80040d0 <___svfprintf_internal_r+0x16a4>
 8003a68:	42000204 	addi	r8,r8,8
 8003a6c:	003e1306 	br	80032bc <__alt_data_end+0xfc0032bc>
 8003a70:	d9403317 	ldw	r5,204(sp)
 8003a74:	00800044 	movi	r2,1
 8003a78:	18c00044 	addi	r3,r3,1
 8003a7c:	1141710e 	bge	r2,r5,8004044 <___svfprintf_internal_r+0x1618>
 8003a80:	dc401f17 	ldw	r17,124(sp)
 8003a84:	00800044 	movi	r2,1
 8003a88:	40800115 	stw	r2,4(r8)
 8003a8c:	8c400044 	addi	r17,r17,1
 8003a90:	44000015 	stw	r16,0(r8)
 8003a94:	d8c02015 	stw	r3,128(sp)
 8003a98:	dc401f15 	stw	r17,124(sp)
 8003a9c:	008001c4 	movi	r2,7
 8003aa0:	14417416 	blt	r2,r17,8004074 <___svfprintf_internal_r+0x1648>
 8003aa4:	42000204 	addi	r8,r8,8
 8003aa8:	d8803817 	ldw	r2,224(sp)
 8003aac:	d9003417 	ldw	r4,208(sp)
 8003ab0:	8c400044 	addi	r17,r17,1
 8003ab4:	10c7883a 	add	r3,r2,r3
 8003ab8:	40800115 	stw	r2,4(r8)
 8003abc:	41000015 	stw	r4,0(r8)
 8003ac0:	d8c02015 	stw	r3,128(sp)
 8003ac4:	dc401f15 	stw	r17,124(sp)
 8003ac8:	008001c4 	movi	r2,7
 8003acc:	14417216 	blt	r2,r17,8004098 <___svfprintf_internal_r+0x166c>
 8003ad0:	45800204 	addi	r22,r8,8
 8003ad4:	d9003617 	ldw	r4,216(sp)
 8003ad8:	d9403717 	ldw	r5,220(sp)
 8003adc:	000d883a 	mov	r6,zero
 8003ae0:	000f883a 	mov	r7,zero
 8003ae4:	d8c03d15 	stw	r3,244(sp)
 8003ae8:	80118c80 	call	80118c8 <__eqdf2>
 8003aec:	d8c03d17 	ldw	r3,244(sp)
 8003af0:	1000b326 	beq	r2,zero,8003dc0 <___svfprintf_internal_r+0x1394>
 8003af4:	d9403317 	ldw	r5,204(sp)
 8003af8:	84000044 	addi	r16,r16,1
 8003afc:	8c400044 	addi	r17,r17,1
 8003b00:	28bfffc4 	addi	r2,r5,-1
 8003b04:	1887883a 	add	r3,r3,r2
 8003b08:	b0800115 	stw	r2,4(r22)
 8003b0c:	b4000015 	stw	r16,0(r22)
 8003b10:	d8c02015 	stw	r3,128(sp)
 8003b14:	dc401f15 	stw	r17,124(sp)
 8003b18:	008001c4 	movi	r2,7
 8003b1c:	1440d216 	blt	r2,r17,8003e68 <___svfprintf_internal_r+0x143c>
 8003b20:	b5800204 	addi	r22,r22,8
 8003b24:	d9003b17 	ldw	r4,236(sp)
 8003b28:	df0022c4 	addi	fp,sp,139
 8003b2c:	8c400044 	addi	r17,r17,1
 8003b30:	20c7883a 	add	r3,r4,r3
 8003b34:	b7000015 	stw	fp,0(r22)
 8003b38:	b1000115 	stw	r4,4(r22)
 8003b3c:	d8c02015 	stw	r3,128(sp)
 8003b40:	dc401f15 	stw	r17,124(sp)
 8003b44:	008001c4 	movi	r2,7
 8003b48:	14400e16 	blt	r2,r17,8003b84 <___svfprintf_internal_r+0x1158>
 8003b4c:	b2000204 	addi	r8,r22,8
 8003b50:	003e1a06 	br	80033bc <__alt_data_end+0xfc0033bc>
 8003b54:	01020074 	movhi	r4,2049
 8003b58:	211ee284 	addi	r4,r4,31626
 8003b5c:	d9002c15 	stw	r4,176(sp)
 8003b60:	d9002c17 	ldw	r4,176(sp)
 8003b64:	1c07883a 	add	r3,r3,r16
 8003b68:	44000115 	stw	r16,4(r8)
 8003b6c:	41000015 	stw	r4,0(r8)
 8003b70:	10800044 	addi	r2,r2,1
 8003b74:	d8c02015 	stw	r3,128(sp)
 8003b78:	d8801f15 	stw	r2,124(sp)
 8003b7c:	010001c4 	movi	r4,7
 8003b80:	20be0d0e 	bge	r4,r2,80033b8 <__alt_data_end+0xfc0033b8>
 8003b84:	d9402d17 	ldw	r5,180(sp)
 8003b88:	d9801e04 	addi	r6,sp,120
 8003b8c:	9809883a 	mov	r4,r19
 8003b90:	800c3cc0 	call	800c3cc <__ssprint_r>
 8003b94:	103c8c1e 	bne	r2,zero,8002dc8 <__alt_data_end+0xfc002dc8>
 8003b98:	d8c02017 	ldw	r3,128(sp)
 8003b9c:	da000404 	addi	r8,sp,16
 8003ba0:	003e0606 	br	80033bc <__alt_data_end+0xfc0033bc>
 8003ba4:	d9402d17 	ldw	r5,180(sp)
 8003ba8:	d9801e04 	addi	r6,sp,120
 8003bac:	9809883a 	mov	r4,r19
 8003bb0:	800c3cc0 	call	800c3cc <__ssprint_r>
 8003bb4:	103e3d26 	beq	r2,zero,80034ac <__alt_data_end+0xfc0034ac>
 8003bb8:	003c8306 	br	8002dc8 <__alt_data_end+0xfc002dc8>
 8003bbc:	d9402d17 	ldw	r5,180(sp)
 8003bc0:	d9801e04 	addi	r6,sp,120
 8003bc4:	9809883a 	mov	r4,r19
 8003bc8:	800c3cc0 	call	800c3cc <__ssprint_r>
 8003bcc:	103c7e1e 	bne	r2,zero,8002dc8 <__alt_data_end+0xfc002dc8>
 8003bd0:	d8c02017 	ldw	r3,128(sp)
 8003bd4:	da000404 	addi	r8,sp,16
 8003bd8:	003deb06 	br	8003388 <__alt_data_end+0xfc003388>
 8003bdc:	d9402d17 	ldw	r5,180(sp)
 8003be0:	d9801e04 	addi	r6,sp,120
 8003be4:	9809883a 	mov	r4,r19
 8003be8:	800c3cc0 	call	800c3cc <__ssprint_r>
 8003bec:	103c761e 	bne	r2,zero,8002dc8 <__alt_data_end+0xfc002dc8>
 8003bf0:	d8c02017 	ldw	r3,128(sp)
 8003bf4:	da000404 	addi	r8,sp,16
 8003bf8:	003d9f06 	br	8003278 <__alt_data_end+0xfc003278>
 8003bfc:	d9402d17 	ldw	r5,180(sp)
 8003c00:	d9801e04 	addi	r6,sp,120
 8003c04:	9809883a 	mov	r4,r19
 8003c08:	800c3cc0 	call	800c3cc <__ssprint_r>
 8003c0c:	103c6e1e 	bne	r2,zero,8002dc8 <__alt_data_end+0xfc002dc8>
 8003c10:	d8c02017 	ldw	r3,128(sp)
 8003c14:	da000404 	addi	r8,sp,16
 8003c18:	003da506 	br	80032b0 <__alt_data_end+0xfc0032b0>
 8003c1c:	d9402a17 	ldw	r5,168(sp)
 8003c20:	d8002785 	stb	zero,158(sp)
 8003c24:	283f0816 	blt	r5,zero,8003848 <__alt_data_end+0xfc003848>
 8003c28:	00ffdfc4 	movi	r3,-129
 8003c2c:	a584b03a 	or	r2,r20,r22
 8003c30:	90e4703a 	and	r18,r18,r3
 8003c34:	103c5126 	beq	r2,zero,8002d7c <__alt_data_end+0xfc002d7c>
 8003c38:	0039883a 	mov	fp,zero
 8003c3c:	003e5a06 	br	80035a8 <__alt_data_end+0xfc0035a8>
 8003c40:	9080040c 	andi	r2,r18,16
 8003c44:	10013d26 	beq	r2,zero,800413c <___svfprintf_internal_r+0x1710>
 8003c48:	d8c02e17 	ldw	r3,184(sp)
 8003c4c:	d9002a17 	ldw	r4,168(sp)
 8003c50:	d8002785 	stb	zero,158(sp)
 8003c54:	18800104 	addi	r2,r3,4
 8003c58:	1d000017 	ldw	r20,0(r3)
 8003c5c:	002d883a 	mov	r22,zero
 8003c60:	20013f16 	blt	r4,zero,8004160 <___svfprintf_internal_r+0x1734>
 8003c64:	00ffdfc4 	movi	r3,-129
 8003c68:	d8802e15 	stw	r2,184(sp)
 8003c6c:	90e4703a 	and	r18,r18,r3
 8003c70:	a03d0926 	beq	r20,zero,8003098 <__alt_data_end+0xfc003098>
 8003c74:	0039883a 	mov	fp,zero
 8003c78:	003d0c06 	br	80030ac <__alt_data_end+0xfc0030ac>
 8003c7c:	dc402617 	ldw	r17,152(sp)
 8003c80:	0441830e 	bge	zero,r17,8004290 <___svfprintf_internal_r+0x1864>
 8003c84:	dc403217 	ldw	r17,200(sp)
 8003c88:	d8803317 	ldw	r2,204(sp)
 8003c8c:	1440010e 	bge	r2,r17,8003c94 <___svfprintf_internal_r+0x1268>
 8003c90:	1023883a 	mov	r17,r2
 8003c94:	04400a0e 	bge	zero,r17,8003cc0 <___svfprintf_internal_r+0x1294>
 8003c98:	d8801f17 	ldw	r2,124(sp)
 8003c9c:	1c47883a 	add	r3,r3,r17
 8003ca0:	44000015 	stw	r16,0(r8)
 8003ca4:	10800044 	addi	r2,r2,1
 8003ca8:	44400115 	stw	r17,4(r8)
 8003cac:	d8c02015 	stw	r3,128(sp)
 8003cb0:	d8801f15 	stw	r2,124(sp)
 8003cb4:	010001c4 	movi	r4,7
 8003cb8:	20827516 	blt	r4,r2,8004690 <___svfprintf_internal_r+0x1c64>
 8003cbc:	42000204 	addi	r8,r8,8
 8003cc0:	88027b16 	blt	r17,zero,80046b0 <___svfprintf_internal_r+0x1c84>
 8003cc4:	d9003217 	ldw	r4,200(sp)
 8003cc8:	2463c83a 	sub	r17,r4,r17
 8003ccc:	0440990e 	bge	zero,r17,8003f34 <___svfprintf_internal_r+0x1508>
 8003cd0:	05800404 	movi	r22,16
 8003cd4:	d8801f17 	ldw	r2,124(sp)
 8003cd8:	b441530e 	bge	r22,r17,8004228 <___svfprintf_internal_r+0x17fc>
 8003cdc:	01020074 	movhi	r4,2049
 8003ce0:	211ee284 	addi	r4,r4,31626
 8003ce4:	d9002c15 	stw	r4,176(sp)
 8003ce8:	070001c4 	movi	fp,7
 8003cec:	dd002d17 	ldw	r20,180(sp)
 8003cf0:	00000306 	br	8003d00 <___svfprintf_internal_r+0x12d4>
 8003cf4:	42000204 	addi	r8,r8,8
 8003cf8:	8c7ffc04 	addi	r17,r17,-16
 8003cfc:	b4414d0e 	bge	r22,r17,8004234 <___svfprintf_internal_r+0x1808>
 8003d00:	18c00404 	addi	r3,r3,16
 8003d04:	10800044 	addi	r2,r2,1
 8003d08:	45400015 	stw	r21,0(r8)
 8003d0c:	45800115 	stw	r22,4(r8)
 8003d10:	d8c02015 	stw	r3,128(sp)
 8003d14:	d8801f15 	stw	r2,124(sp)
 8003d18:	e0bff60e 	bge	fp,r2,8003cf4 <__alt_data_end+0xfc003cf4>
 8003d1c:	d9801e04 	addi	r6,sp,120
 8003d20:	a00b883a 	mov	r5,r20
 8003d24:	9809883a 	mov	r4,r19
 8003d28:	800c3cc0 	call	800c3cc <__ssprint_r>
 8003d2c:	103c261e 	bne	r2,zero,8002dc8 <__alt_data_end+0xfc002dc8>
 8003d30:	d8c02017 	ldw	r3,128(sp)
 8003d34:	d8801f17 	ldw	r2,124(sp)
 8003d38:	da000404 	addi	r8,sp,16
 8003d3c:	003fee06 	br	8003cf8 <__alt_data_end+0xfc003cf8>
 8003d40:	d9402d17 	ldw	r5,180(sp)
 8003d44:	d9801e04 	addi	r6,sp,120
 8003d48:	9809883a 	mov	r4,r19
 8003d4c:	800c3cc0 	call	800c3cc <__ssprint_r>
 8003d50:	103c1d1e 	bne	r2,zero,8002dc8 <__alt_data_end+0xfc002dc8>
 8003d54:	d8c02017 	ldw	r3,128(sp)
 8003d58:	df002787 	ldb	fp,158(sp)
 8003d5c:	da000404 	addi	r8,sp,16
 8003d60:	003d3806 	br	8003244 <__alt_data_end+0xfc003244>
 8003d64:	9080040c 	andi	r2,r18,16
 8003d68:	10005c26 	beq	r2,zero,8003edc <___svfprintf_internal_r+0x14b0>
 8003d6c:	d8c02e17 	ldw	r3,184(sp)
 8003d70:	d9002a17 	ldw	r4,168(sp)
 8003d74:	d8002785 	stb	zero,158(sp)
 8003d78:	18800104 	addi	r2,r3,4
 8003d7c:	1d000017 	ldw	r20,0(r3)
 8003d80:	002d883a 	mov	r22,zero
 8003d84:	20005e16 	blt	r4,zero,8003f00 <___svfprintf_internal_r+0x14d4>
 8003d88:	00ffdfc4 	movi	r3,-129
 8003d8c:	d8802e15 	stw	r2,184(sp)
 8003d90:	90e4703a 	and	r18,r18,r3
 8003d94:	0039883a 	mov	fp,zero
 8003d98:	a03ddf26 	beq	r20,zero,8003518 <__alt_data_end+0xfc003518>
 8003d9c:	00800244 	movi	r2,9
 8003da0:	153c8e36 	bltu	r2,r20,8002fdc <__alt_data_end+0xfc002fdc>
 8003da4:	a5000c04 	addi	r20,r20,48
 8003da8:	dc001dc4 	addi	r16,sp,119
 8003dac:	dd001dc5 	stb	r20,119(sp)
 8003db0:	d8c02817 	ldw	r3,160(sp)
 8003db4:	1c07c83a 	sub	r3,r3,r16
 8003db8:	d8c02b15 	stw	r3,172(sp)
 8003dbc:	003cd306 	br	800310c <__alt_data_end+0xfc00310c>
 8003dc0:	d8803317 	ldw	r2,204(sp)
 8003dc4:	143fffc4 	addi	r16,r2,-1
 8003dc8:	043f560e 	bge	zero,r16,8003b24 <__alt_data_end+0xfc003b24>
 8003dcc:	07000404 	movi	fp,16
 8003dd0:	e403530e 	bge	fp,r16,8004b20 <___svfprintf_internal_r+0x20f4>
 8003dd4:	01420074 	movhi	r5,2049
 8003dd8:	295ee284 	addi	r5,r5,31626
 8003ddc:	d9402c15 	stw	r5,176(sp)
 8003de0:	01c001c4 	movi	r7,7
 8003de4:	dd002d17 	ldw	r20,180(sp)
 8003de8:	00000306 	br	8003df8 <___svfprintf_internal_r+0x13cc>
 8003dec:	843ffc04 	addi	r16,r16,-16
 8003df0:	b5800204 	addi	r22,r22,8
 8003df4:	e400130e 	bge	fp,r16,8003e44 <___svfprintf_internal_r+0x1418>
 8003df8:	18c00404 	addi	r3,r3,16
 8003dfc:	8c400044 	addi	r17,r17,1
 8003e00:	b5400015 	stw	r21,0(r22)
 8003e04:	b7000115 	stw	fp,4(r22)
 8003e08:	d8c02015 	stw	r3,128(sp)
 8003e0c:	dc401f15 	stw	r17,124(sp)
 8003e10:	3c7ff60e 	bge	r7,r17,8003dec <__alt_data_end+0xfc003dec>
 8003e14:	d9801e04 	addi	r6,sp,120
 8003e18:	a00b883a 	mov	r5,r20
 8003e1c:	9809883a 	mov	r4,r19
 8003e20:	d9c03d15 	stw	r7,244(sp)
 8003e24:	800c3cc0 	call	800c3cc <__ssprint_r>
 8003e28:	d9c03d17 	ldw	r7,244(sp)
 8003e2c:	103be61e 	bne	r2,zero,8002dc8 <__alt_data_end+0xfc002dc8>
 8003e30:	843ffc04 	addi	r16,r16,-16
 8003e34:	d8c02017 	ldw	r3,128(sp)
 8003e38:	dc401f17 	ldw	r17,124(sp)
 8003e3c:	dd800404 	addi	r22,sp,16
 8003e40:	e43fed16 	blt	fp,r16,8003df8 <__alt_data_end+0xfc003df8>
 8003e44:	d8802c17 	ldw	r2,176(sp)
 8003e48:	1c07883a 	add	r3,r3,r16
 8003e4c:	8c400044 	addi	r17,r17,1
 8003e50:	b0800015 	stw	r2,0(r22)
 8003e54:	b4000115 	stw	r16,4(r22)
 8003e58:	d8c02015 	stw	r3,128(sp)
 8003e5c:	dc401f15 	stw	r17,124(sp)
 8003e60:	008001c4 	movi	r2,7
 8003e64:	147f2e0e 	bge	r2,r17,8003b20 <__alt_data_end+0xfc003b20>
 8003e68:	d9402d17 	ldw	r5,180(sp)
 8003e6c:	d9801e04 	addi	r6,sp,120
 8003e70:	9809883a 	mov	r4,r19
 8003e74:	800c3cc0 	call	800c3cc <__ssprint_r>
 8003e78:	103bd31e 	bne	r2,zero,8002dc8 <__alt_data_end+0xfc002dc8>
 8003e7c:	d8c02017 	ldw	r3,128(sp)
 8003e80:	dc401f17 	ldw	r17,124(sp)
 8003e84:	dd800404 	addi	r22,sp,16
 8003e88:	003f2606 	br	8003b24 <__alt_data_end+0xfc003b24>
 8003e8c:	9080040c 	andi	r2,r18,16
 8003e90:	1000c326 	beq	r2,zero,80041a0 <___svfprintf_internal_r+0x1774>
 8003e94:	d9402e17 	ldw	r5,184(sp)
 8003e98:	2d000017 	ldw	r20,0(r5)
 8003e9c:	29400104 	addi	r5,r5,4
 8003ea0:	d9402e15 	stw	r5,184(sp)
 8003ea4:	a02dd7fa 	srai	r22,r20,31
 8003ea8:	b005883a 	mov	r2,r22
 8003eac:	103c430e 	bge	r2,zero,8002fbc <__alt_data_end+0xfc002fbc>
 8003eb0:	d9402a17 	ldw	r5,168(sp)
 8003eb4:	0529c83a 	sub	r20,zero,r20
 8003eb8:	07000b44 	movi	fp,45
 8003ebc:	a004c03a 	cmpne	r2,r20,zero
 8003ec0:	05adc83a 	sub	r22,zero,r22
 8003ec4:	df002785 	stb	fp,158(sp)
 8003ec8:	b0adc83a 	sub	r22,r22,r2
 8003ecc:	28022e16 	blt	r5,zero,8004788 <___svfprintf_internal_r+0x1d5c>
 8003ed0:	00bfdfc4 	movi	r2,-129
 8003ed4:	90a4703a 	and	r18,r18,r2
 8003ed8:	003c3f06 	br	8002fd8 <__alt_data_end+0xfc002fd8>
 8003edc:	9080100c 	andi	r2,r18,64
 8003ee0:	d8002785 	stb	zero,158(sp)
 8003ee4:	10012526 	beq	r2,zero,800437c <___svfprintf_internal_r+0x1950>
 8003ee8:	d9402e17 	ldw	r5,184(sp)
 8003eec:	d8c02a17 	ldw	r3,168(sp)
 8003ef0:	002d883a 	mov	r22,zero
 8003ef4:	28800104 	addi	r2,r5,4
 8003ef8:	2d00000b 	ldhu	r20,0(r5)
 8003efc:	183fa20e 	bge	r3,zero,8003d88 <__alt_data_end+0xfc003d88>
 8003f00:	d8802e15 	stw	r2,184(sp)
 8003f04:	0039883a 	mov	fp,zero
 8003f08:	a584b03a 	or	r2,r20,r22
 8003f0c:	103c321e 	bne	r2,zero,8002fd8 <__alt_data_end+0xfc002fd8>
 8003f10:	00800044 	movi	r2,1
 8003f14:	003e5006 	br	8003858 <__alt_data_end+0xfc003858>
 8003f18:	d9402d17 	ldw	r5,180(sp)
 8003f1c:	d9801e04 	addi	r6,sp,120
 8003f20:	9809883a 	mov	r4,r19
 8003f24:	800c3cc0 	call	800c3cc <__ssprint_r>
 8003f28:	103ba71e 	bne	r2,zero,8002dc8 <__alt_data_end+0xfc002dc8>
 8003f2c:	d8c02017 	ldw	r3,128(sp)
 8003f30:	da000404 	addi	r8,sp,16
 8003f34:	d9003217 	ldw	r4,200(sp)
 8003f38:	d8802617 	ldw	r2,152(sp)
 8003f3c:	d9403317 	ldw	r5,204(sp)
 8003f40:	8123883a 	add	r17,r16,r4
 8003f44:	11400216 	blt	r2,r5,8003f50 <___svfprintf_internal_r+0x1524>
 8003f48:	9100004c 	andi	r4,r18,1
 8003f4c:	20000d26 	beq	r4,zero,8003f84 <___svfprintf_internal_r+0x1558>
 8003f50:	d9003817 	ldw	r4,224(sp)
 8003f54:	d9403417 	ldw	r5,208(sp)
 8003f58:	1907883a 	add	r3,r3,r4
 8003f5c:	d9001f17 	ldw	r4,124(sp)
 8003f60:	41400015 	stw	r5,0(r8)
 8003f64:	d9403817 	ldw	r5,224(sp)
 8003f68:	21000044 	addi	r4,r4,1
 8003f6c:	d8c02015 	stw	r3,128(sp)
 8003f70:	41400115 	stw	r5,4(r8)
 8003f74:	d9001f15 	stw	r4,124(sp)
 8003f78:	014001c4 	movi	r5,7
 8003f7c:	2901dc16 	blt	r5,r4,80046f0 <___svfprintf_internal_r+0x1cc4>
 8003f80:	42000204 	addi	r8,r8,8
 8003f84:	d9003317 	ldw	r4,204(sp)
 8003f88:	8121883a 	add	r16,r16,r4
 8003f8c:	2085c83a 	sub	r2,r4,r2
 8003f90:	8461c83a 	sub	r16,r16,r17
 8003f94:	1400010e 	bge	r2,r16,8003f9c <___svfprintf_internal_r+0x1570>
 8003f98:	1021883a 	mov	r16,r2
 8003f9c:	04000a0e 	bge	zero,r16,8003fc8 <___svfprintf_internal_r+0x159c>
 8003fa0:	d9001f17 	ldw	r4,124(sp)
 8003fa4:	1c07883a 	add	r3,r3,r16
 8003fa8:	44400015 	stw	r17,0(r8)
 8003fac:	21000044 	addi	r4,r4,1
 8003fb0:	44000115 	stw	r16,4(r8)
 8003fb4:	d8c02015 	stw	r3,128(sp)
 8003fb8:	d9001f15 	stw	r4,124(sp)
 8003fbc:	014001c4 	movi	r5,7
 8003fc0:	2901e616 	blt	r5,r4,800475c <___svfprintf_internal_r+0x1d30>
 8003fc4:	42000204 	addi	r8,r8,8
 8003fc8:	8001f616 	blt	r16,zero,80047a4 <___svfprintf_internal_r+0x1d78>
 8003fcc:	1421c83a 	sub	r16,r2,r16
 8003fd0:	043cfa0e 	bge	zero,r16,80033bc <__alt_data_end+0xfc0033bc>
 8003fd4:	04400404 	movi	r17,16
 8003fd8:	d8801f17 	ldw	r2,124(sp)
 8003fdc:	8c3edd0e 	bge	r17,r16,8003b54 <__alt_data_end+0xfc003b54>
 8003fe0:	01420074 	movhi	r5,2049
 8003fe4:	295ee284 	addi	r5,r5,31626
 8003fe8:	d9402c15 	stw	r5,176(sp)
 8003fec:	058001c4 	movi	r22,7
 8003ff0:	dd002d17 	ldw	r20,180(sp)
 8003ff4:	00000306 	br	8004004 <___svfprintf_internal_r+0x15d8>
 8003ff8:	42000204 	addi	r8,r8,8
 8003ffc:	843ffc04 	addi	r16,r16,-16
 8004000:	8c3ed70e 	bge	r17,r16,8003b60 <__alt_data_end+0xfc003b60>
 8004004:	18c00404 	addi	r3,r3,16
 8004008:	10800044 	addi	r2,r2,1
 800400c:	45400015 	stw	r21,0(r8)
 8004010:	44400115 	stw	r17,4(r8)
 8004014:	d8c02015 	stw	r3,128(sp)
 8004018:	d8801f15 	stw	r2,124(sp)
 800401c:	b0bff60e 	bge	r22,r2,8003ff8 <__alt_data_end+0xfc003ff8>
 8004020:	d9801e04 	addi	r6,sp,120
 8004024:	a00b883a 	mov	r5,r20
 8004028:	9809883a 	mov	r4,r19
 800402c:	800c3cc0 	call	800c3cc <__ssprint_r>
 8004030:	103b651e 	bne	r2,zero,8002dc8 <__alt_data_end+0xfc002dc8>
 8004034:	d8c02017 	ldw	r3,128(sp)
 8004038:	d8801f17 	ldw	r2,124(sp)
 800403c:	da000404 	addi	r8,sp,16
 8004040:	003fee06 	br	8003ffc <__alt_data_end+0xfc003ffc>
 8004044:	9088703a 	and	r4,r18,r2
 8004048:	203e8d1e 	bne	r4,zero,8003a80 <__alt_data_end+0xfc003a80>
 800404c:	dc401f17 	ldw	r17,124(sp)
 8004050:	40800115 	stw	r2,4(r8)
 8004054:	44000015 	stw	r16,0(r8)
 8004058:	8c400044 	addi	r17,r17,1
 800405c:	d8c02015 	stw	r3,128(sp)
 8004060:	dc401f15 	stw	r17,124(sp)
 8004064:	008001c4 	movi	r2,7
 8004068:	147f7f16 	blt	r2,r17,8003e68 <__alt_data_end+0xfc003e68>
 800406c:	45800204 	addi	r22,r8,8
 8004070:	003eac06 	br	8003b24 <__alt_data_end+0xfc003b24>
 8004074:	d9402d17 	ldw	r5,180(sp)
 8004078:	d9801e04 	addi	r6,sp,120
 800407c:	9809883a 	mov	r4,r19
 8004080:	800c3cc0 	call	800c3cc <__ssprint_r>
 8004084:	103b501e 	bne	r2,zero,8002dc8 <__alt_data_end+0xfc002dc8>
 8004088:	d8c02017 	ldw	r3,128(sp)
 800408c:	dc401f17 	ldw	r17,124(sp)
 8004090:	da000404 	addi	r8,sp,16
 8004094:	003e8406 	br	8003aa8 <__alt_data_end+0xfc003aa8>
 8004098:	d9402d17 	ldw	r5,180(sp)
 800409c:	d9801e04 	addi	r6,sp,120
 80040a0:	9809883a 	mov	r4,r19
 80040a4:	800c3cc0 	call	800c3cc <__ssprint_r>
 80040a8:	103b471e 	bne	r2,zero,8002dc8 <__alt_data_end+0xfc002dc8>
 80040ac:	d8c02017 	ldw	r3,128(sp)
 80040b0:	dc401f17 	ldw	r17,124(sp)
 80040b4:	dd800404 	addi	r22,sp,16
 80040b8:	003e8606 	br	8003ad4 <__alt_data_end+0xfc003ad4>
 80040bc:	0029883a 	mov	r20,zero
 80040c0:	a5000c04 	addi	r20,r20,48
 80040c4:	dc001dc4 	addi	r16,sp,119
 80040c8:	dd001dc5 	stb	r20,119(sp)
 80040cc:	003f3806 	br	8003db0 <__alt_data_end+0xfc003db0>
 80040d0:	d9402d17 	ldw	r5,180(sp)
 80040d4:	d9801e04 	addi	r6,sp,120
 80040d8:	9809883a 	mov	r4,r19
 80040dc:	800c3cc0 	call	800c3cc <__ssprint_r>
 80040e0:	103b391e 	bne	r2,zero,8002dc8 <__alt_data_end+0xfc002dc8>
 80040e4:	d8c02017 	ldw	r3,128(sp)
 80040e8:	da000404 	addi	r8,sp,16
 80040ec:	003c7306 	br	80032bc <__alt_data_end+0xfc0032bc>
 80040f0:	d9003617 	ldw	r4,216(sp)
 80040f4:	d9403717 	ldw	r5,220(sp)
 80040f8:	da003e15 	stw	r8,248(sp)
 80040fc:	800c0ec0 	call	800c0ec <__fpclassifyd>
 8004100:	da003e17 	ldw	r8,248(sp)
 8004104:	1000bd1e 	bne	r2,zero,80043fc <___svfprintf_internal_r+0x19d0>
 8004108:	008011c4 	movi	r2,71
 800410c:	14411e0e 	bge	r2,r17,8004588 <___svfprintf_internal_r+0x1b5c>
 8004110:	04020074 	movhi	r16,2049
 8004114:	841ed504 	addi	r16,r16,31572
 8004118:	00c000c4 	movi	r3,3
 800411c:	00bfdfc4 	movi	r2,-129
 8004120:	d8c02915 	stw	r3,164(sp)
 8004124:	90a4703a 	and	r18,r18,r2
 8004128:	df002783 	ldbu	fp,158(sp)
 800412c:	d8c02b15 	stw	r3,172(sp)
 8004130:	d8002a15 	stw	zero,168(sp)
 8004134:	d8003215 	stw	zero,200(sp)
 8004138:	003bfa06 	br	8003124 <__alt_data_end+0xfc003124>
 800413c:	9080100c 	andi	r2,r18,64
 8004140:	d8002785 	stb	zero,158(sp)
 8004144:	10009426 	beq	r2,zero,8004398 <___svfprintf_internal_r+0x196c>
 8004148:	d9402e17 	ldw	r5,184(sp)
 800414c:	d8c02a17 	ldw	r3,168(sp)
 8004150:	002d883a 	mov	r22,zero
 8004154:	28800104 	addi	r2,r5,4
 8004158:	2d00000b 	ldhu	r20,0(r5)
 800415c:	183ec10e 	bge	r3,zero,8003c64 <__alt_data_end+0xfc003c64>
 8004160:	a586b03a 	or	r3,r20,r22
 8004164:	d8802e15 	stw	r2,184(sp)
 8004168:	183ec21e 	bne	r3,zero,8003c74 <__alt_data_end+0xfc003c74>
 800416c:	0039883a 	mov	fp,zero
 8004170:	0005883a 	mov	r2,zero
 8004174:	003db806 	br	8003858 <__alt_data_end+0xfc003858>
 8004178:	d8c02e17 	ldw	r3,184(sp)
 800417c:	d9002e17 	ldw	r4,184(sp)
 8004180:	d9402e17 	ldw	r5,184(sp)
 8004184:	18c00017 	ldw	r3,0(r3)
 8004188:	21000117 	ldw	r4,4(r4)
 800418c:	29400204 	addi	r5,r5,8
 8004190:	d8c03615 	stw	r3,216(sp)
 8004194:	d9003715 	stw	r4,220(sp)
 8004198:	d9402e15 	stw	r5,184(sp)
 800419c:	003b5a06 	br	8002f08 <__alt_data_end+0xfc002f08>
 80041a0:	9080100c 	andi	r2,r18,64
 80041a4:	10010726 	beq	r2,zero,80045c4 <___svfprintf_internal_r+0x1b98>
 80041a8:	d8802e17 	ldw	r2,184(sp)
 80041ac:	1500000f 	ldh	r20,0(r2)
 80041b0:	10800104 	addi	r2,r2,4
 80041b4:	d8802e15 	stw	r2,184(sp)
 80041b8:	a02dd7fa 	srai	r22,r20,31
 80041bc:	b005883a 	mov	r2,r22
 80041c0:	003b7d06 	br	8002fb8 <__alt_data_end+0xfc002fb8>
 80041c4:	9080100c 	andi	r2,r18,64
 80041c8:	10010526 	beq	r2,zero,80045e0 <___svfprintf_internal_r+0x1bb4>
 80041cc:	d8c02e17 	ldw	r3,184(sp)
 80041d0:	002d883a 	mov	r22,zero
 80041d4:	1d00000b 	ldhu	r20,0(r3)
 80041d8:	18c00104 	addi	r3,r3,4
 80041dc:	d8c02e15 	stw	r3,184(sp)
 80041e0:	003ce206 	br	800356c <__alt_data_end+0xfc00356c>
 80041e4:	bc400007 	ldb	r17,0(r23)
 80041e8:	003a6506 	br	8002b80 <__alt_data_end+0xfc002b80>
 80041ec:	9080040c 	andi	r2,r18,16
 80041f0:	10010126 	beq	r2,zero,80045f8 <___svfprintf_internal_r+0x1bcc>
 80041f4:	d8c02e17 	ldw	r3,184(sp)
 80041f8:	d9002f17 	ldw	r4,188(sp)
 80041fc:	18800017 	ldw	r2,0(r3)
 8004200:	18c00104 	addi	r3,r3,4
 8004204:	d8c02e15 	stw	r3,184(sp)
 8004208:	11000015 	stw	r4,0(r2)
 800420c:	003a3206 	br	8002ad8 <__alt_data_end+0xfc002ad8>
 8004210:	d9002a17 	ldw	r4,168(sp)
 8004214:	d8002785 	stb	zero,158(sp)
 8004218:	203d8d16 	blt	r4,zero,8003850 <__alt_data_end+0xfc003850>
 800421c:	00bfdfc4 	movi	r2,-129
 8004220:	90a4703a 	and	r18,r18,r2
 8004224:	003ad506 	br	8002d7c <__alt_data_end+0xfc002d7c>
 8004228:	01420074 	movhi	r5,2049
 800422c:	295ee284 	addi	r5,r5,31626
 8004230:	d9402c15 	stw	r5,176(sp)
 8004234:	d9402c17 	ldw	r5,176(sp)
 8004238:	1c47883a 	add	r3,r3,r17
 800423c:	10800044 	addi	r2,r2,1
 8004240:	41400015 	stw	r5,0(r8)
 8004244:	44400115 	stw	r17,4(r8)
 8004248:	d8c02015 	stw	r3,128(sp)
 800424c:	d8801f15 	stw	r2,124(sp)
 8004250:	010001c4 	movi	r4,7
 8004254:	20bf3016 	blt	r4,r2,8003f18 <__alt_data_end+0xfc003f18>
 8004258:	42000204 	addi	r8,r8,8
 800425c:	003f3506 	br	8003f34 <__alt_data_end+0xfc003f34>
 8004260:	01020074 	movhi	r4,2049
 8004264:	211ee284 	addi	r4,r4,31626
 8004268:	d9002c15 	stw	r4,176(sp)
 800426c:	003c3c06 	br	8003360 <__alt_data_end+0xfc003360>
 8004270:	d9402d17 	ldw	r5,180(sp)
 8004274:	d9801e04 	addi	r6,sp,120
 8004278:	9809883a 	mov	r4,r19
 800427c:	800c3cc0 	call	800c3cc <__ssprint_r>
 8004280:	103ad11e 	bne	r2,zero,8002dc8 <__alt_data_end+0xfc002dc8>
 8004284:	d8c02017 	ldw	r3,128(sp)
 8004288:	da000404 	addi	r8,sp,16
 800428c:	003d9306 	br	80038dc <__alt_data_end+0xfc0038dc>
 8004290:	d8801f17 	ldw	r2,124(sp)
 8004294:	01420074 	movhi	r5,2049
 8004298:	01000044 	movi	r4,1
 800429c:	18c00044 	addi	r3,r3,1
 80042a0:	10800044 	addi	r2,r2,1
 80042a4:	295ee204 	addi	r5,r5,31624
 80042a8:	41000115 	stw	r4,4(r8)
 80042ac:	41400015 	stw	r5,0(r8)
 80042b0:	d8c02015 	stw	r3,128(sp)
 80042b4:	d8801f15 	stw	r2,124(sp)
 80042b8:	010001c4 	movi	r4,7
 80042bc:	2080b516 	blt	r4,r2,8004594 <___svfprintf_internal_r+0x1b68>
 80042c0:	42000204 	addi	r8,r8,8
 80042c4:	8800041e 	bne	r17,zero,80042d8 <___svfprintf_internal_r+0x18ac>
 80042c8:	d8803317 	ldw	r2,204(sp)
 80042cc:	1000021e 	bne	r2,zero,80042d8 <___svfprintf_internal_r+0x18ac>
 80042d0:	9080004c 	andi	r2,r18,1
 80042d4:	103c3926 	beq	r2,zero,80033bc <__alt_data_end+0xfc0033bc>
 80042d8:	d9003817 	ldw	r4,224(sp)
 80042dc:	d8801f17 	ldw	r2,124(sp)
 80042e0:	d9403417 	ldw	r5,208(sp)
 80042e4:	20c7883a 	add	r3,r4,r3
 80042e8:	10800044 	addi	r2,r2,1
 80042ec:	41000115 	stw	r4,4(r8)
 80042f0:	41400015 	stw	r5,0(r8)
 80042f4:	d8c02015 	stw	r3,128(sp)
 80042f8:	d8801f15 	stw	r2,124(sp)
 80042fc:	010001c4 	movi	r4,7
 8004300:	20818016 	blt	r4,r2,8004904 <___svfprintf_internal_r+0x1ed8>
 8004304:	42000204 	addi	r8,r8,8
 8004308:	0463c83a 	sub	r17,zero,r17
 800430c:	0440cb0e 	bge	zero,r17,800463c <___svfprintf_internal_r+0x1c10>
 8004310:	05800404 	movi	r22,16
 8004314:	b440e80e 	bge	r22,r17,80046b8 <___svfprintf_internal_r+0x1c8c>
 8004318:	01420074 	movhi	r5,2049
 800431c:	295ee284 	addi	r5,r5,31626
 8004320:	d9402c15 	stw	r5,176(sp)
 8004324:	070001c4 	movi	fp,7
 8004328:	dd002d17 	ldw	r20,180(sp)
 800432c:	00000306 	br	800433c <___svfprintf_internal_r+0x1910>
 8004330:	42000204 	addi	r8,r8,8
 8004334:	8c7ffc04 	addi	r17,r17,-16
 8004338:	b440e20e 	bge	r22,r17,80046c4 <___svfprintf_internal_r+0x1c98>
 800433c:	18c00404 	addi	r3,r3,16
 8004340:	10800044 	addi	r2,r2,1
 8004344:	45400015 	stw	r21,0(r8)
 8004348:	45800115 	stw	r22,4(r8)
 800434c:	d8c02015 	stw	r3,128(sp)
 8004350:	d8801f15 	stw	r2,124(sp)
 8004354:	e0bff60e 	bge	fp,r2,8004330 <__alt_data_end+0xfc004330>
 8004358:	d9801e04 	addi	r6,sp,120
 800435c:	a00b883a 	mov	r5,r20
 8004360:	9809883a 	mov	r4,r19
 8004364:	800c3cc0 	call	800c3cc <__ssprint_r>
 8004368:	103a971e 	bne	r2,zero,8002dc8 <__alt_data_end+0xfc002dc8>
 800436c:	d8c02017 	ldw	r3,128(sp)
 8004370:	d8801f17 	ldw	r2,124(sp)
 8004374:	da000404 	addi	r8,sp,16
 8004378:	003fee06 	br	8004334 <__alt_data_end+0xfc004334>
 800437c:	d9002e17 	ldw	r4,184(sp)
 8004380:	d9402a17 	ldw	r5,168(sp)
 8004384:	002d883a 	mov	r22,zero
 8004388:	20800104 	addi	r2,r4,4
 800438c:	25000017 	ldw	r20,0(r4)
 8004390:	283e7d0e 	bge	r5,zero,8003d88 <__alt_data_end+0xfc003d88>
 8004394:	003eda06 	br	8003f00 <__alt_data_end+0xfc003f00>
 8004398:	d9002e17 	ldw	r4,184(sp)
 800439c:	d9402a17 	ldw	r5,168(sp)
 80043a0:	002d883a 	mov	r22,zero
 80043a4:	20800104 	addi	r2,r4,4
 80043a8:	25000017 	ldw	r20,0(r4)
 80043ac:	283e2d0e 	bge	r5,zero,8003c64 <__alt_data_end+0xfc003c64>
 80043b0:	003f6b06 	br	8004160 <__alt_data_end+0xfc004160>
 80043b4:	d8c02e15 	stw	r3,184(sp)
 80043b8:	0039883a 	mov	fp,zero
 80043bc:	003ed206 	br	8003f08 <__alt_data_end+0xfc003f08>
 80043c0:	bc400043 	ldbu	r17,1(r23)
 80043c4:	84000814 	ori	r16,r16,32
 80043c8:	bdc00044 	addi	r23,r23,1
 80043cc:	8c403fcc 	andi	r17,r17,255
 80043d0:	8c40201c 	xori	r17,r17,128
 80043d4:	8c7fe004 	addi	r17,r17,-128
 80043d8:	0039e906 	br	8002b80 <__alt_data_end+0xfc002b80>
 80043dc:	d9402d17 	ldw	r5,180(sp)
 80043e0:	d9801e04 	addi	r6,sp,120
 80043e4:	9809883a 	mov	r4,r19
 80043e8:	800c3cc0 	call	800c3cc <__ssprint_r>
 80043ec:	103a761e 	bne	r2,zero,8002dc8 <__alt_data_end+0xfc002dc8>
 80043f0:	d8c02017 	ldw	r3,128(sp)
 80043f4:	da000404 	addi	r8,sp,16
 80043f8:	003d4a06 	br	8003924 <__alt_data_end+0xfc003924>
 80043fc:	d9002a17 	ldw	r4,168(sp)
 8004400:	05bff7c4 	movi	r22,-33
 8004404:	00bfffc4 	movi	r2,-1
 8004408:	8dac703a 	and	r22,r17,r22
 800440c:	20806a26 	beq	r4,r2,80045b8 <___svfprintf_internal_r+0x1b8c>
 8004410:	008011c4 	movi	r2,71
 8004414:	b0813726 	beq	r22,r2,80048f4 <___svfprintf_internal_r+0x1ec8>
 8004418:	d9003717 	ldw	r4,220(sp)
 800441c:	90c04014 	ori	r3,r18,256
 8004420:	d8c02c15 	stw	r3,176(sp)
 8004424:	20015d16 	blt	r4,zero,800499c <___svfprintf_internal_r+0x1f70>
 8004428:	dd003717 	ldw	r20,220(sp)
 800442c:	d8002905 	stb	zero,164(sp)
 8004430:	00801984 	movi	r2,102
 8004434:	88814026 	beq	r17,r2,8004938 <___svfprintf_internal_r+0x1f0c>
 8004438:	00801184 	movi	r2,70
 800443c:	88817126 	beq	r17,r2,8004a04 <___svfprintf_internal_r+0x1fd8>
 8004440:	00801144 	movi	r2,69
 8004444:	b0816226 	beq	r22,r2,80049d0 <___svfprintf_internal_r+0x1fa4>
 8004448:	d8c02a17 	ldw	r3,168(sp)
 800444c:	d8802104 	addi	r2,sp,132
 8004450:	d8800315 	stw	r2,12(sp)
 8004454:	d9403617 	ldw	r5,216(sp)
 8004458:	d8802504 	addi	r2,sp,148
 800445c:	d8800215 	stw	r2,8(sp)
 8004460:	d8802604 	addi	r2,sp,152
 8004464:	d8c00015 	stw	r3,0(sp)
 8004468:	d8800115 	stw	r2,4(sp)
 800446c:	01c00084 	movi	r7,2
 8004470:	a00d883a 	mov	r6,r20
 8004474:	9809883a 	mov	r4,r19
 8004478:	d8c03d15 	stw	r3,244(sp)
 800447c:	da003e15 	stw	r8,248(sp)
 8004480:	80074180 	call	8007418 <_dtoa_r>
 8004484:	1021883a 	mov	r16,r2
 8004488:	008019c4 	movi	r2,103
 800448c:	d8c03d17 	ldw	r3,244(sp)
 8004490:	da003e17 	ldw	r8,248(sp)
 8004494:	8880e726 	beq	r17,r2,8004834 <___svfprintf_internal_r+0x1e08>
 8004498:	008011c4 	movi	r2,71
 800449c:	8880d426 	beq	r17,r2,80047f0 <___svfprintf_internal_r+0x1dc4>
 80044a0:	80f9883a 	add	fp,r16,r3
 80044a4:	d9003617 	ldw	r4,216(sp)
 80044a8:	000d883a 	mov	r6,zero
 80044ac:	000f883a 	mov	r7,zero
 80044b0:	a00b883a 	mov	r5,r20
 80044b4:	da003e15 	stw	r8,248(sp)
 80044b8:	80118c80 	call	80118c8 <__eqdf2>
 80044bc:	da003e17 	ldw	r8,248(sp)
 80044c0:	1000e426 	beq	r2,zero,8004854 <___svfprintf_internal_r+0x1e28>
 80044c4:	d8802117 	ldw	r2,132(sp)
 80044c8:	1700062e 	bgeu	r2,fp,80044e4 <___svfprintf_internal_r+0x1ab8>
 80044cc:	01000c04 	movi	r4,48
 80044d0:	10c00044 	addi	r3,r2,1
 80044d4:	d8c02115 	stw	r3,132(sp)
 80044d8:	11000005 	stb	r4,0(r2)
 80044dc:	d8802117 	ldw	r2,132(sp)
 80044e0:	173ffb36 	bltu	r2,fp,80044d0 <__alt_data_end+0xfc0044d0>
 80044e4:	1405c83a 	sub	r2,r2,r16
 80044e8:	d8803315 	stw	r2,204(sp)
 80044ec:	008011c4 	movi	r2,71
 80044f0:	b080c526 	beq	r22,r2,8004808 <___svfprintf_internal_r+0x1ddc>
 80044f4:	00801944 	movi	r2,101
 80044f8:	1441d80e 	bge	r2,r17,8004c5c <___svfprintf_internal_r+0x2230>
 80044fc:	d8c02617 	ldw	r3,152(sp)
 8004500:	00801984 	movi	r2,102
 8004504:	d8c03215 	stw	r3,200(sp)
 8004508:	88813426 	beq	r17,r2,80049dc <___svfprintf_internal_r+0x1fb0>
 800450c:	d8c03217 	ldw	r3,200(sp)
 8004510:	d9003317 	ldw	r4,204(sp)
 8004514:	19012516 	blt	r3,r4,80049ac <___svfprintf_internal_r+0x1f80>
 8004518:	9480004c 	andi	r18,r18,1
 800451c:	9001841e 	bne	r18,zero,8004b30 <___svfprintf_internal_r+0x2104>
 8004520:	1805883a 	mov	r2,r3
 8004524:	1801cb16 	blt	r3,zero,8004c54 <___svfprintf_internal_r+0x2228>
 8004528:	d8c03217 	ldw	r3,200(sp)
 800452c:	044019c4 	movi	r17,103
 8004530:	d8c02b15 	stw	r3,172(sp)
 8004534:	df002907 	ldb	fp,164(sp)
 8004538:	e000a61e 	bne	fp,zero,80047d4 <___svfprintf_internal_r+0x1da8>
 800453c:	df002783 	ldbu	fp,158(sp)
 8004540:	d8802915 	stw	r2,164(sp)
 8004544:	dc802c17 	ldw	r18,176(sp)
 8004548:	d8002a15 	stw	zero,168(sp)
 800454c:	003af506 	br	8003124 <__alt_data_end+0xfc003124>
 8004550:	04020074 	movhi	r16,2049
 8004554:	841ed204 	addi	r16,r16,31560
 8004558:	003a7e06 	br	8002f54 <__alt_data_end+0xfc002f54>
 800455c:	d9003917 	ldw	r4,228(sp)
 8004560:	04001004 	movi	r16,64
 8004564:	800b883a 	mov	r5,r16
 8004568:	8009e140 	call	8009e14 <_malloc_r>
 800456c:	d9002d17 	ldw	r4,180(sp)
 8004570:	20800015 	stw	r2,0(r4)
 8004574:	20800415 	stw	r2,16(r4)
 8004578:	1001d026 	beq	r2,zero,8004cbc <___svfprintf_internal_r+0x2290>
 800457c:	d8802d17 	ldw	r2,180(sp)
 8004580:	14000515 	stw	r16,20(r2)
 8004584:	00394406 	br	8002a98 <__alt_data_end+0xfc002a98>
 8004588:	04020074 	movhi	r16,2049
 800458c:	841ed404 	addi	r16,r16,31568
 8004590:	003ee106 	br	8004118 <__alt_data_end+0xfc004118>
 8004594:	d9402d17 	ldw	r5,180(sp)
 8004598:	d9801e04 	addi	r6,sp,120
 800459c:	9809883a 	mov	r4,r19
 80045a0:	800c3cc0 	call	800c3cc <__ssprint_r>
 80045a4:	103a081e 	bne	r2,zero,8002dc8 <__alt_data_end+0xfc002dc8>
 80045a8:	dc402617 	ldw	r17,152(sp)
 80045ac:	d8c02017 	ldw	r3,128(sp)
 80045b0:	da000404 	addi	r8,sp,16
 80045b4:	003f4306 	br	80042c4 <__alt_data_end+0xfc0042c4>
 80045b8:	01400184 	movi	r5,6
 80045bc:	d9402a15 	stw	r5,168(sp)
 80045c0:	003f9506 	br	8004418 <__alt_data_end+0xfc004418>
 80045c4:	d8c02e17 	ldw	r3,184(sp)
 80045c8:	1d000017 	ldw	r20,0(r3)
 80045cc:	18c00104 	addi	r3,r3,4
 80045d0:	d8c02e15 	stw	r3,184(sp)
 80045d4:	a02dd7fa 	srai	r22,r20,31
 80045d8:	b005883a 	mov	r2,r22
 80045dc:	003a7606 	br	8002fb8 <__alt_data_end+0xfc002fb8>
 80045e0:	d9002e17 	ldw	r4,184(sp)
 80045e4:	002d883a 	mov	r22,zero
 80045e8:	25000017 	ldw	r20,0(r4)
 80045ec:	21000104 	addi	r4,r4,4
 80045f0:	d9002e15 	stw	r4,184(sp)
 80045f4:	003bdd06 	br	800356c <__alt_data_end+0xfc00356c>
 80045f8:	9480100c 	andi	r18,r18,64
 80045fc:	90006e26 	beq	r18,zero,80047b8 <___svfprintf_internal_r+0x1d8c>
 8004600:	d9402e17 	ldw	r5,184(sp)
 8004604:	d8c02f17 	ldw	r3,188(sp)
 8004608:	28800017 	ldw	r2,0(r5)
 800460c:	29400104 	addi	r5,r5,4
 8004610:	d9402e15 	stw	r5,184(sp)
 8004614:	10c0000d 	sth	r3,0(r2)
 8004618:	00392f06 	br	8002ad8 <__alt_data_end+0xfc002ad8>
 800461c:	d9402d17 	ldw	r5,180(sp)
 8004620:	d9801e04 	addi	r6,sp,120
 8004624:	9809883a 	mov	r4,r19
 8004628:	800c3cc0 	call	800c3cc <__ssprint_r>
 800462c:	1039e61e 	bne	r2,zero,8002dc8 <__alt_data_end+0xfc002dc8>
 8004630:	d8c02017 	ldw	r3,128(sp)
 8004634:	d8801f17 	ldw	r2,124(sp)
 8004638:	da000404 	addi	r8,sp,16
 800463c:	d9403317 	ldw	r5,204(sp)
 8004640:	10800044 	addi	r2,r2,1
 8004644:	44000015 	stw	r16,0(r8)
 8004648:	28c7883a 	add	r3,r5,r3
 800464c:	003b5506 	br	80033a4 <__alt_data_end+0xfc0033a4>
 8004650:	8009883a 	mov	r4,r16
 8004654:	df003e15 	stw	fp,248(sp)
 8004658:	80029940 	call	8002994 <strlen>
 800465c:	d8802b15 	stw	r2,172(sp)
 8004660:	da003e17 	ldw	r8,248(sp)
 8004664:	103c160e 	bge	r2,zero,80036c0 <__alt_data_end+0xfc0036c0>
 8004668:	0005883a 	mov	r2,zero
 800466c:	003c1406 	br	80036c0 <__alt_data_end+0xfc0036c0>
 8004670:	00bfffc4 	movi	r2,-1
 8004674:	0039d906 	br	8002ddc <__alt_data_end+0xfc002ddc>
 8004678:	01020074 	movhi	r4,2049
 800467c:	211ee684 	addi	r4,r4,31642
 8004680:	d9003515 	stw	r4,212(sp)
 8004684:	003ae406 	br	8003218 <__alt_data_end+0xfc003218>
 8004688:	013fffc4 	movi	r4,-1
 800468c:	0039fa06 	br	8002e78 <__alt_data_end+0xfc002e78>
 8004690:	d9402d17 	ldw	r5,180(sp)
 8004694:	d9801e04 	addi	r6,sp,120
 8004698:	9809883a 	mov	r4,r19
 800469c:	800c3cc0 	call	800c3cc <__ssprint_r>
 80046a0:	1039c91e 	bne	r2,zero,8002dc8 <__alt_data_end+0xfc002dc8>
 80046a4:	d8c02017 	ldw	r3,128(sp)
 80046a8:	da000404 	addi	r8,sp,16
 80046ac:	003d8406 	br	8003cc0 <__alt_data_end+0xfc003cc0>
 80046b0:	0023883a 	mov	r17,zero
 80046b4:	003d8306 	br	8003cc4 <__alt_data_end+0xfc003cc4>
 80046b8:	01020074 	movhi	r4,2049
 80046bc:	211ee284 	addi	r4,r4,31626
 80046c0:	d9002c15 	stw	r4,176(sp)
 80046c4:	d9002c17 	ldw	r4,176(sp)
 80046c8:	1c47883a 	add	r3,r3,r17
 80046cc:	10800044 	addi	r2,r2,1
 80046d0:	41000015 	stw	r4,0(r8)
 80046d4:	44400115 	stw	r17,4(r8)
 80046d8:	d8c02015 	stw	r3,128(sp)
 80046dc:	d8801f15 	stw	r2,124(sp)
 80046e0:	010001c4 	movi	r4,7
 80046e4:	20bfcd16 	blt	r4,r2,800461c <__alt_data_end+0xfc00461c>
 80046e8:	42000204 	addi	r8,r8,8
 80046ec:	003fd306 	br	800463c <__alt_data_end+0xfc00463c>
 80046f0:	d9402d17 	ldw	r5,180(sp)
 80046f4:	d9801e04 	addi	r6,sp,120
 80046f8:	9809883a 	mov	r4,r19
 80046fc:	800c3cc0 	call	800c3cc <__ssprint_r>
 8004700:	1039b11e 	bne	r2,zero,8002dc8 <__alt_data_end+0xfc002dc8>
 8004704:	d8802617 	ldw	r2,152(sp)
 8004708:	d8c02017 	ldw	r3,128(sp)
 800470c:	da000404 	addi	r8,sp,16
 8004710:	003e1c06 	br	8003f84 <__alt_data_end+0xfc003f84>
 8004714:	d8802a17 	ldw	r2,168(sp)
 8004718:	00c00184 	movi	r3,6
 800471c:	1880012e 	bgeu	r3,r2,8004724 <___svfprintf_internal_r+0x1cf8>
 8004720:	1805883a 	mov	r2,r3
 8004724:	d8802b15 	stw	r2,172(sp)
 8004728:	1000f316 	blt	r2,zero,8004af8 <___svfprintf_internal_r+0x20cc>
 800472c:	04020074 	movhi	r16,2049
 8004730:	d8802915 	stw	r2,164(sp)
 8004734:	dd002e15 	stw	r20,184(sp)
 8004738:	d8002a15 	stw	zero,168(sp)
 800473c:	d8003215 	stw	zero,200(sp)
 8004740:	841ee004 	addi	r16,r16,31616
 8004744:	0039883a 	mov	fp,zero
 8004748:	003a7d06 	br	8003140 <__alt_data_end+0xfc003140>
 800474c:	01020074 	movhi	r4,2049
 8004750:	211ee684 	addi	r4,r4,31642
 8004754:	d9003515 	stw	r4,212(sp)
 8004758:	003b3d06 	br	8003450 <__alt_data_end+0xfc003450>
 800475c:	d9402d17 	ldw	r5,180(sp)
 8004760:	d9801e04 	addi	r6,sp,120
 8004764:	9809883a 	mov	r4,r19
 8004768:	800c3cc0 	call	800c3cc <__ssprint_r>
 800476c:	1039961e 	bne	r2,zero,8002dc8 <__alt_data_end+0xfc002dc8>
 8004770:	d8802617 	ldw	r2,152(sp)
 8004774:	d9403317 	ldw	r5,204(sp)
 8004778:	d8c02017 	ldw	r3,128(sp)
 800477c:	da000404 	addi	r8,sp,16
 8004780:	2885c83a 	sub	r2,r5,r2
 8004784:	003e1006 	br	8003fc8 <__alt_data_end+0xfc003fc8>
 8004788:	00800044 	movi	r2,1
 800478c:	10803fcc 	andi	r2,r2,255
 8004790:	00c00044 	movi	r3,1
 8004794:	10fa1026 	beq	r2,r3,8002fd8 <__alt_data_end+0xfc002fd8>
 8004798:	00c00084 	movi	r3,2
 800479c:	10fb8226 	beq	r2,r3,80035a8 <__alt_data_end+0xfc0035a8>
 80047a0:	003a4206 	br	80030ac <__alt_data_end+0xfc0030ac>
 80047a4:	0021883a 	mov	r16,zero
 80047a8:	003e0806 	br	8003fcc <__alt_data_end+0xfc003fcc>
 80047ac:	07000b44 	movi	fp,45
 80047b0:	df002785 	stb	fp,158(sp)
 80047b4:	0039e306 	br	8002f44 <__alt_data_end+0xfc002f44>
 80047b8:	d9002e17 	ldw	r4,184(sp)
 80047bc:	d9402f17 	ldw	r5,188(sp)
 80047c0:	20800017 	ldw	r2,0(r4)
 80047c4:	21000104 	addi	r4,r4,4
 80047c8:	d9002e15 	stw	r4,184(sp)
 80047cc:	11400015 	stw	r5,0(r2)
 80047d0:	0038c106 	br	8002ad8 <__alt_data_end+0xfc002ad8>
 80047d4:	00c00b44 	movi	r3,45
 80047d8:	d8c02785 	stb	r3,158(sp)
 80047dc:	d8802915 	stw	r2,164(sp)
 80047e0:	dc802c17 	ldw	r18,176(sp)
 80047e4:	d8002a15 	stw	zero,168(sp)
 80047e8:	07000b44 	movi	fp,45
 80047ec:	003a5106 	br	8003134 <__alt_data_end+0xfc003134>
 80047f0:	9080004c 	andi	r2,r18,1
 80047f4:	1000941e 	bne	r2,zero,8004a48 <___svfprintf_internal_r+0x201c>
 80047f8:	d8802117 	ldw	r2,132(sp)
 80047fc:	1405c83a 	sub	r2,r2,r16
 8004800:	d8803315 	stw	r2,204(sp)
 8004804:	b441151e 	bne	r22,r17,8004c5c <___svfprintf_internal_r+0x2230>
 8004808:	dd802617 	ldw	r22,152(sp)
 800480c:	00bfff44 	movi	r2,-3
 8004810:	b0801a16 	blt	r22,r2,800487c <___svfprintf_internal_r+0x1e50>
 8004814:	d9402a17 	ldw	r5,168(sp)
 8004818:	2d801816 	blt	r5,r22,800487c <___svfprintf_internal_r+0x1e50>
 800481c:	dd803215 	stw	r22,200(sp)
 8004820:	003f3a06 	br	800450c <__alt_data_end+0xfc00450c>
 8004824:	1025883a 	mov	r18,r2
 8004828:	0039883a 	mov	fp,zero
 800482c:	00800084 	movi	r2,2
 8004830:	003fd606 	br	800478c <__alt_data_end+0xfc00478c>
 8004834:	9080004c 	andi	r2,r18,1
 8004838:	103f191e 	bne	r2,zero,80044a0 <__alt_data_end+0xfc0044a0>
 800483c:	d8802117 	ldw	r2,132(sp)
 8004840:	003f2806 	br	80044e4 <__alt_data_end+0xfc0044e4>
 8004844:	01020074 	movhi	r4,2049
 8004848:	211ee284 	addi	r4,r4,31626
 800484c:	d9002c15 	stw	r4,176(sp)
 8004850:	003c7c06 	br	8003a44 <__alt_data_end+0xfc003a44>
 8004854:	e005883a 	mov	r2,fp
 8004858:	003f2206 	br	80044e4 <__alt_data_end+0xfc0044e4>
 800485c:	d9002a17 	ldw	r4,168(sp)
 8004860:	df002783 	ldbu	fp,158(sp)
 8004864:	dd002e15 	stw	r20,184(sp)
 8004868:	d9002915 	stw	r4,164(sp)
 800486c:	d9002b15 	stw	r4,172(sp)
 8004870:	d8002a15 	stw	zero,168(sp)
 8004874:	d8003215 	stw	zero,200(sp)
 8004878:	003a2a06 	br	8003124 <__alt_data_end+0xfc003124>
 800487c:	8c7fff84 	addi	r17,r17,-2
 8004880:	b5bfffc4 	addi	r22,r22,-1
 8004884:	dd802615 	stw	r22,152(sp)
 8004888:	dc4022c5 	stb	r17,139(sp)
 800488c:	b000c316 	blt	r22,zero,8004b9c <___svfprintf_internal_r+0x2170>
 8004890:	00800ac4 	movi	r2,43
 8004894:	d8802305 	stb	r2,140(sp)
 8004898:	00800244 	movi	r2,9
 800489c:	15806e16 	blt	r2,r22,8004a58 <___svfprintf_internal_r+0x202c>
 80048a0:	00800c04 	movi	r2,48
 80048a4:	b5800c04 	addi	r22,r22,48
 80048a8:	d8802345 	stb	r2,141(sp)
 80048ac:	dd802385 	stb	r22,142(sp)
 80048b0:	d88023c4 	addi	r2,sp,143
 80048b4:	df0022c4 	addi	fp,sp,139
 80048b8:	d8c03317 	ldw	r3,204(sp)
 80048bc:	1739c83a 	sub	fp,r2,fp
 80048c0:	d9003317 	ldw	r4,204(sp)
 80048c4:	e0c7883a 	add	r3,fp,r3
 80048c8:	df003b15 	stw	fp,236(sp)
 80048cc:	d8c02b15 	stw	r3,172(sp)
 80048d0:	00800044 	movi	r2,1
 80048d4:	1100b70e 	bge	r2,r4,8004bb4 <___svfprintf_internal_r+0x2188>
 80048d8:	d8c02b17 	ldw	r3,172(sp)
 80048dc:	18c00044 	addi	r3,r3,1
 80048e0:	d8c02b15 	stw	r3,172(sp)
 80048e4:	1805883a 	mov	r2,r3
 80048e8:	1800b016 	blt	r3,zero,8004bac <___svfprintf_internal_r+0x2180>
 80048ec:	d8003215 	stw	zero,200(sp)
 80048f0:	003f1006 	br	8004534 <__alt_data_end+0xfc004534>
 80048f4:	d8802a17 	ldw	r2,168(sp)
 80048f8:	103ec71e 	bne	r2,zero,8004418 <__alt_data_end+0xfc004418>
 80048fc:	dc002a15 	stw	r16,168(sp)
 8004900:	003ec506 	br	8004418 <__alt_data_end+0xfc004418>
 8004904:	d9402d17 	ldw	r5,180(sp)
 8004908:	d9801e04 	addi	r6,sp,120
 800490c:	9809883a 	mov	r4,r19
 8004910:	800c3cc0 	call	800c3cc <__ssprint_r>
 8004914:	10392c1e 	bne	r2,zero,8002dc8 <__alt_data_end+0xfc002dc8>
 8004918:	dc402617 	ldw	r17,152(sp)
 800491c:	d8c02017 	ldw	r3,128(sp)
 8004920:	d8801f17 	ldw	r2,124(sp)
 8004924:	da000404 	addi	r8,sp,16
 8004928:	003e7706 	br	8004308 <__alt_data_end+0xfc004308>
 800492c:	182f883a 	mov	r23,r3
 8004930:	d8002a15 	stw	zero,168(sp)
 8004934:	00389306 	br	8002b84 <__alt_data_end+0xfc002b84>
 8004938:	d8c02a17 	ldw	r3,168(sp)
 800493c:	d8802104 	addi	r2,sp,132
 8004940:	d8800315 	stw	r2,12(sp)
 8004944:	d9403617 	ldw	r5,216(sp)
 8004948:	d8802504 	addi	r2,sp,148
 800494c:	d8800215 	stw	r2,8(sp)
 8004950:	d8802604 	addi	r2,sp,152
 8004954:	d8c00015 	stw	r3,0(sp)
 8004958:	9809883a 	mov	r4,r19
 800495c:	d8800115 	stw	r2,4(sp)
 8004960:	01c000c4 	movi	r7,3
 8004964:	a00d883a 	mov	r6,r20
 8004968:	da003e15 	stw	r8,248(sp)
 800496c:	80074180 	call	8007418 <_dtoa_r>
 8004970:	d9002a17 	ldw	r4,168(sp)
 8004974:	da003e17 	ldw	r8,248(sp)
 8004978:	1021883a 	mov	r16,r2
 800497c:	1139883a 	add	fp,r2,r4
 8004980:	2007883a 	mov	r3,r4
 8004984:	81000007 	ldb	r4,0(r16)
 8004988:	00800c04 	movi	r2,48
 800498c:	20806f26 	beq	r4,r2,8004b4c <___svfprintf_internal_r+0x2120>
 8004990:	d8c02617 	ldw	r3,152(sp)
 8004994:	e0f9883a 	add	fp,fp,r3
 8004998:	003ec206 	br	80044a4 <__alt_data_end+0xfc0044a4>
 800499c:	00c00b44 	movi	r3,45
 80049a0:	2520003c 	xorhi	r20,r4,32768
 80049a4:	d8c02905 	stb	r3,164(sp)
 80049a8:	003ea106 	br	8004430 <__alt_data_end+0xfc004430>
 80049ac:	d8c03217 	ldw	r3,200(sp)
 80049b0:	00c0890e 	bge	zero,r3,8004bd8 <___svfprintf_internal_r+0x21ac>
 80049b4:	00800044 	movi	r2,1
 80049b8:	d9003317 	ldw	r4,204(sp)
 80049bc:	1105883a 	add	r2,r2,r4
 80049c0:	d8802b15 	stw	r2,172(sp)
 80049c4:	10005f16 	blt	r2,zero,8004b44 <___svfprintf_internal_r+0x2118>
 80049c8:	044019c4 	movi	r17,103
 80049cc:	003ed906 	br	8004534 <__alt_data_end+0xfc004534>
 80049d0:	d9002a17 	ldw	r4,168(sp)
 80049d4:	20c00044 	addi	r3,r4,1
 80049d8:	003e9c06 	br	800444c <__alt_data_end+0xfc00444c>
 80049dc:	d9002a17 	ldw	r4,168(sp)
 80049e0:	00c0680e 	bge	zero,r3,8004b84 <___svfprintf_internal_r+0x2158>
 80049e4:	2000461e 	bne	r4,zero,8004b00 <___svfprintf_internal_r+0x20d4>
 80049e8:	9480004c 	andi	r18,r18,1
 80049ec:	9000441e 	bne	r18,zero,8004b00 <___svfprintf_internal_r+0x20d4>
 80049f0:	1805883a 	mov	r2,r3
 80049f4:	1800a116 	blt	r3,zero,8004c7c <___svfprintf_internal_r+0x2250>
 80049f8:	d8c03217 	ldw	r3,200(sp)
 80049fc:	d8c02b15 	stw	r3,172(sp)
 8004a00:	003ecc06 	br	8004534 <__alt_data_end+0xfc004534>
 8004a04:	d9402a17 	ldw	r5,168(sp)
 8004a08:	d8802104 	addi	r2,sp,132
 8004a0c:	d8800315 	stw	r2,12(sp)
 8004a10:	d9400015 	stw	r5,0(sp)
 8004a14:	d8802504 	addi	r2,sp,148
 8004a18:	d9403617 	ldw	r5,216(sp)
 8004a1c:	d8800215 	stw	r2,8(sp)
 8004a20:	d8802604 	addi	r2,sp,152
 8004a24:	d8800115 	stw	r2,4(sp)
 8004a28:	01c000c4 	movi	r7,3
 8004a2c:	a00d883a 	mov	r6,r20
 8004a30:	9809883a 	mov	r4,r19
 8004a34:	da003e15 	stw	r8,248(sp)
 8004a38:	80074180 	call	8007418 <_dtoa_r>
 8004a3c:	d8c02a17 	ldw	r3,168(sp)
 8004a40:	da003e17 	ldw	r8,248(sp)
 8004a44:	1021883a 	mov	r16,r2
 8004a48:	00801184 	movi	r2,70
 8004a4c:	80f9883a 	add	fp,r16,r3
 8004a50:	88bfcc26 	beq	r17,r2,8004984 <__alt_data_end+0xfc004984>
 8004a54:	003e9306 	br	80044a4 <__alt_data_end+0xfc0044a4>
 8004a58:	df0022c4 	addi	fp,sp,139
 8004a5c:	dc002a15 	stw	r16,168(sp)
 8004a60:	9829883a 	mov	r20,r19
 8004a64:	e021883a 	mov	r16,fp
 8004a68:	4027883a 	mov	r19,r8
 8004a6c:	b009883a 	mov	r4,r22
 8004a70:	01400284 	movi	r5,10
 8004a74:	8001a280 	call	8001a28 <__modsi3>
 8004a78:	10800c04 	addi	r2,r2,48
 8004a7c:	843fffc4 	addi	r16,r16,-1
 8004a80:	b009883a 	mov	r4,r22
 8004a84:	01400284 	movi	r5,10
 8004a88:	80800005 	stb	r2,0(r16)
 8004a8c:	80019a40 	call	80019a4 <__divsi3>
 8004a90:	102d883a 	mov	r22,r2
 8004a94:	00800244 	movi	r2,9
 8004a98:	15bff416 	blt	r2,r22,8004a6c <__alt_data_end+0xfc004a6c>
 8004a9c:	9811883a 	mov	r8,r19
 8004aa0:	b0800c04 	addi	r2,r22,48
 8004aa4:	a027883a 	mov	r19,r20
 8004aa8:	8029883a 	mov	r20,r16
 8004aac:	a17fffc4 	addi	r5,r20,-1
 8004ab0:	a0bfffc5 	stb	r2,-1(r20)
 8004ab4:	dc002a17 	ldw	r16,168(sp)
 8004ab8:	2f00782e 	bgeu	r5,fp,8004c9c <___svfprintf_internal_r+0x2270>
 8004abc:	d9c02384 	addi	r7,sp,142
 8004ac0:	3d0fc83a 	sub	r7,r7,r20
 8004ac4:	d9002344 	addi	r4,sp,141
 8004ac8:	e1cf883a 	add	r7,fp,r7
 8004acc:	00000106 	br	8004ad4 <___svfprintf_internal_r+0x20a8>
 8004ad0:	28800003 	ldbu	r2,0(r5)
 8004ad4:	20800005 	stb	r2,0(r4)
 8004ad8:	21000044 	addi	r4,r4,1
 8004adc:	29400044 	addi	r5,r5,1
 8004ae0:	21fffb1e 	bne	r4,r7,8004ad0 <__alt_data_end+0xfc004ad0>
 8004ae4:	d8802304 	addi	r2,sp,140
 8004ae8:	1505c83a 	sub	r2,r2,r20
 8004aec:	d8c02344 	addi	r3,sp,141
 8004af0:	1885883a 	add	r2,r3,r2
 8004af4:	003f7006 	br	80048b8 <__alt_data_end+0xfc0048b8>
 8004af8:	0005883a 	mov	r2,zero
 8004afc:	003f0b06 	br	800472c <__alt_data_end+0xfc00472c>
 8004b00:	d9002a17 	ldw	r4,168(sp)
 8004b04:	d8c03217 	ldw	r3,200(sp)
 8004b08:	20800044 	addi	r2,r4,1
 8004b0c:	1885883a 	add	r2,r3,r2
 8004b10:	d8802b15 	stw	r2,172(sp)
 8004b14:	103e870e 	bge	r2,zero,8004534 <__alt_data_end+0xfc004534>
 8004b18:	0005883a 	mov	r2,zero
 8004b1c:	003e8506 	br	8004534 <__alt_data_end+0xfc004534>
 8004b20:	01020074 	movhi	r4,2049
 8004b24:	211ee284 	addi	r4,r4,31626
 8004b28:	d9002c15 	stw	r4,176(sp)
 8004b2c:	003cc506 	br	8003e44 <__alt_data_end+0xfc003e44>
 8004b30:	d8c03217 	ldw	r3,200(sp)
 8004b34:	18c00044 	addi	r3,r3,1
 8004b38:	d8c02b15 	stw	r3,172(sp)
 8004b3c:	1805883a 	mov	r2,r3
 8004b40:	183fa10e 	bge	r3,zero,80049c8 <__alt_data_end+0xfc0049c8>
 8004b44:	0005883a 	mov	r2,zero
 8004b48:	003f9f06 	br	80049c8 <__alt_data_end+0xfc0049c8>
 8004b4c:	d9003617 	ldw	r4,216(sp)
 8004b50:	000d883a 	mov	r6,zero
 8004b54:	000f883a 	mov	r7,zero
 8004b58:	a00b883a 	mov	r5,r20
 8004b5c:	d8c03d15 	stw	r3,244(sp)
 8004b60:	da003e15 	stw	r8,248(sp)
 8004b64:	80118c80 	call	80118c8 <__eqdf2>
 8004b68:	d8c03d17 	ldw	r3,244(sp)
 8004b6c:	da003e17 	ldw	r8,248(sp)
 8004b70:	103f8726 	beq	r2,zero,8004990 <__alt_data_end+0xfc004990>
 8004b74:	00800044 	movi	r2,1
 8004b78:	10c7c83a 	sub	r3,r2,r3
 8004b7c:	d8c02615 	stw	r3,152(sp)
 8004b80:	003f8406 	br	8004994 <__alt_data_end+0xfc004994>
 8004b84:	20000e1e 	bne	r4,zero,8004bc0 <___svfprintf_internal_r+0x2194>
 8004b88:	9480004c 	andi	r18,r18,1
 8004b8c:	90000c1e 	bne	r18,zero,8004bc0 <___svfprintf_internal_r+0x2194>
 8004b90:	00800044 	movi	r2,1
 8004b94:	d8802b15 	stw	r2,172(sp)
 8004b98:	003e6606 	br	8004534 <__alt_data_end+0xfc004534>
 8004b9c:	00800b44 	movi	r2,45
 8004ba0:	05adc83a 	sub	r22,zero,r22
 8004ba4:	d8802305 	stb	r2,140(sp)
 8004ba8:	003f3b06 	br	8004898 <__alt_data_end+0xfc004898>
 8004bac:	0005883a 	mov	r2,zero
 8004bb0:	003f4e06 	br	80048ec <__alt_data_end+0xfc0048ec>
 8004bb4:	90a4703a 	and	r18,r18,r2
 8004bb8:	903f4a26 	beq	r18,zero,80048e4 <__alt_data_end+0xfc0048e4>
 8004bbc:	003f4606 	br	80048d8 <__alt_data_end+0xfc0048d8>
 8004bc0:	d8c02a17 	ldw	r3,168(sp)
 8004bc4:	18c00084 	addi	r3,r3,2
 8004bc8:	d8c02b15 	stw	r3,172(sp)
 8004bcc:	1805883a 	mov	r2,r3
 8004bd0:	183e580e 	bge	r3,zero,8004534 <__alt_data_end+0xfc004534>
 8004bd4:	003fd006 	br	8004b18 <__alt_data_end+0xfc004b18>
 8004bd8:	00800084 	movi	r2,2
 8004bdc:	10c5c83a 	sub	r2,r2,r3
 8004be0:	003f7506 	br	80049b8 <__alt_data_end+0xfc0049b8>
 8004be4:	d9402e17 	ldw	r5,184(sp)
 8004be8:	d9002e17 	ldw	r4,184(sp)
 8004bec:	bc400043 	ldbu	r17,1(r23)
 8004bf0:	29400017 	ldw	r5,0(r5)
 8004bf4:	20800104 	addi	r2,r4,4
 8004bf8:	d8802e15 	stw	r2,184(sp)
 8004bfc:	d9402a15 	stw	r5,168(sp)
 8004c00:	182f883a 	mov	r23,r3
 8004c04:	283df10e 	bge	r5,zero,80043cc <__alt_data_end+0xfc0043cc>
 8004c08:	8c403fcc 	andi	r17,r17,255
 8004c0c:	017fffc4 	movi	r5,-1
 8004c10:	8c40201c 	xori	r17,r17,128
 8004c14:	d9402a15 	stw	r5,168(sp)
 8004c18:	8c7fe004 	addi	r17,r17,-128
 8004c1c:	0037d806 	br	8002b80 <__alt_data_end+0xfc002b80>
 8004c20:	9080004c 	andi	r2,r18,1
 8004c24:	0039883a 	mov	fp,zero
 8004c28:	10000726 	beq	r2,zero,8004c48 <___svfprintf_internal_r+0x221c>
 8004c2c:	d8c02817 	ldw	r3,160(sp)
 8004c30:	dc001dc4 	addi	r16,sp,119
 8004c34:	00800c04 	movi	r2,48
 8004c38:	1c07c83a 	sub	r3,r3,r16
 8004c3c:	d8801dc5 	stb	r2,119(sp)
 8004c40:	d8c02b15 	stw	r3,172(sp)
 8004c44:	00393106 	br	800310c <__alt_data_end+0xfc00310c>
 8004c48:	d8002b15 	stw	zero,172(sp)
 8004c4c:	dc001e04 	addi	r16,sp,120
 8004c50:	00392e06 	br	800310c <__alt_data_end+0xfc00310c>
 8004c54:	0005883a 	mov	r2,zero
 8004c58:	003e3306 	br	8004528 <__alt_data_end+0xfc004528>
 8004c5c:	dd802617 	ldw	r22,152(sp)
 8004c60:	003f0706 	br	8004880 <__alt_data_end+0xfc004880>
 8004c64:	d8c02b03 	ldbu	r3,172(sp)
 8004c68:	d8c02785 	stb	r3,158(sp)
 8004c6c:	003a3506 	br	8003544 <__alt_data_end+0xfc003544>
 8004c70:	d8c02b03 	ldbu	r3,172(sp)
 8004c74:	d8c02785 	stb	r3,158(sp)
 8004c78:	003a1706 	br	80034d8 <__alt_data_end+0xfc0034d8>
 8004c7c:	0005883a 	mov	r2,zero
 8004c80:	003f5d06 	br	80049f8 <__alt_data_end+0xfc0049f8>
 8004c84:	d8c02b03 	ldbu	r3,172(sp)
 8004c88:	d8c02785 	stb	r3,158(sp)
 8004c8c:	0038f306 	br	800305c <__alt_data_end+0xfc00305c>
 8004c90:	d8c02b03 	ldbu	r3,172(sp)
 8004c94:	d8c02785 	stb	r3,158(sp)
 8004c98:	0038be06 	br	8002f94 <__alt_data_end+0xfc002f94>
 8004c9c:	d8802344 	addi	r2,sp,141
 8004ca0:	003f0506 	br	80048b8 <__alt_data_end+0xfc0048b8>
 8004ca4:	d8c02b03 	ldbu	r3,172(sp)
 8004ca8:	d8c02785 	stb	r3,158(sp)
 8004cac:	00388b06 	br	8002edc <__alt_data_end+0xfc002edc>
 8004cb0:	d8c02b03 	ldbu	r3,172(sp)
 8004cb4:	d8c02785 	stb	r3,158(sp)
 8004cb8:	003ad706 	br	8003818 <__alt_data_end+0xfc003818>
 8004cbc:	d9403917 	ldw	r5,228(sp)
 8004cc0:	00800304 	movi	r2,12
 8004cc4:	28800015 	stw	r2,0(r5)
 8004cc8:	00bfffc4 	movi	r2,-1
 8004ccc:	00384306 	br	8002ddc <__alt_data_end+0xfc002ddc>
 8004cd0:	d8c02b03 	ldbu	r3,172(sp)
 8004cd4:	d8c02785 	stb	r3,158(sp)
 8004cd8:	003ab606 	br	80037b4 <__alt_data_end+0xfc0037b4>
 8004cdc:	d8c02b03 	ldbu	r3,172(sp)
 8004ce0:	d8c02785 	stb	r3,158(sp)
 8004ce4:	003a8906 	br	800370c <__alt_data_end+0xfc00370c>

08004ce8 <___vfprintf_internal_r>:
 8004ce8:	deffb804 	addi	sp,sp,-288
 8004cec:	dfc04715 	stw	ra,284(sp)
 8004cf0:	ddc04515 	stw	r23,276(sp)
 8004cf4:	dd404315 	stw	r21,268(sp)
 8004cf8:	d9002d15 	stw	r4,180(sp)
 8004cfc:	282f883a 	mov	r23,r5
 8004d00:	302b883a 	mov	r21,r6
 8004d04:	d9c02e15 	stw	r7,184(sp)
 8004d08:	df004615 	stw	fp,280(sp)
 8004d0c:	dd804415 	stw	r22,272(sp)
 8004d10:	dd004215 	stw	r20,264(sp)
 8004d14:	dcc04115 	stw	r19,260(sp)
 8004d18:	dc804015 	stw	r18,256(sp)
 8004d1c:	dc403f15 	stw	r17,252(sp)
 8004d20:	dc003e15 	stw	r16,248(sp)
 8004d24:	8009c280 	call	8009c28 <_localeconv_r>
 8004d28:	10800017 	ldw	r2,0(r2)
 8004d2c:	1009883a 	mov	r4,r2
 8004d30:	d8803415 	stw	r2,208(sp)
 8004d34:	80029940 	call	8002994 <strlen>
 8004d38:	d8803715 	stw	r2,220(sp)
 8004d3c:	d8802d17 	ldw	r2,180(sp)
 8004d40:	10000226 	beq	r2,zero,8004d4c <___vfprintf_internal_r+0x64>
 8004d44:	10800e17 	ldw	r2,56(r2)
 8004d48:	1000fb26 	beq	r2,zero,8005138 <___vfprintf_internal_r+0x450>
 8004d4c:	b880030b 	ldhu	r2,12(r23)
 8004d50:	10c8000c 	andi	r3,r2,8192
 8004d54:	1800061e 	bne	r3,zero,8004d70 <___vfprintf_internal_r+0x88>
 8004d58:	b9001917 	ldw	r4,100(r23)
 8004d5c:	00f7ffc4 	movi	r3,-8193
 8004d60:	10880014 	ori	r2,r2,8192
 8004d64:	20c6703a 	and	r3,r4,r3
 8004d68:	b880030d 	sth	r2,12(r23)
 8004d6c:	b8c01915 	stw	r3,100(r23)
 8004d70:	10c0020c 	andi	r3,r2,8
 8004d74:	1800c326 	beq	r3,zero,8005084 <___vfprintf_internal_r+0x39c>
 8004d78:	b8c00417 	ldw	r3,16(r23)
 8004d7c:	1800c126 	beq	r3,zero,8005084 <___vfprintf_internal_r+0x39c>
 8004d80:	1080068c 	andi	r2,r2,26
 8004d84:	00c00284 	movi	r3,10
 8004d88:	10c0c626 	beq	r2,r3,80050a4 <___vfprintf_internal_r+0x3bc>
 8004d8c:	d8c00404 	addi	r3,sp,16
 8004d90:	05020074 	movhi	r20,2049
 8004d94:	d9001e04 	addi	r4,sp,120
 8004d98:	a51eea84 	addi	r20,r20,31658
 8004d9c:	d8c01e15 	stw	r3,120(sp)
 8004da0:	d8002015 	stw	zero,128(sp)
 8004da4:	d8001f15 	stw	zero,124(sp)
 8004da8:	d8003315 	stw	zero,204(sp)
 8004dac:	d8003615 	stw	zero,216(sp)
 8004db0:	d8003815 	stw	zero,224(sp)
 8004db4:	1811883a 	mov	r8,r3
 8004db8:	d8003915 	stw	zero,228(sp)
 8004dbc:	d8003a15 	stw	zero,232(sp)
 8004dc0:	d8002f15 	stw	zero,188(sp)
 8004dc4:	d9002815 	stw	r4,160(sp)
 8004dc8:	a8800007 	ldb	r2,0(r21)
 8004dcc:	10028b26 	beq	r2,zero,80057fc <___vfprintf_internal_r+0xb14>
 8004dd0:	00c00944 	movi	r3,37
 8004dd4:	a823883a 	mov	r17,r21
 8004dd8:	10c0021e 	bne	r2,r3,8004de4 <___vfprintf_internal_r+0xfc>
 8004ddc:	00001406 	br	8004e30 <___vfprintf_internal_r+0x148>
 8004de0:	10c00326 	beq	r2,r3,8004df0 <___vfprintf_internal_r+0x108>
 8004de4:	8c400044 	addi	r17,r17,1
 8004de8:	88800007 	ldb	r2,0(r17)
 8004dec:	103ffc1e 	bne	r2,zero,8004de0 <__alt_data_end+0xfc004de0>
 8004df0:	8d61c83a 	sub	r16,r17,r21
 8004df4:	80000e26 	beq	r16,zero,8004e30 <___vfprintf_internal_r+0x148>
 8004df8:	d8c02017 	ldw	r3,128(sp)
 8004dfc:	d8801f17 	ldw	r2,124(sp)
 8004e00:	45400015 	stw	r21,0(r8)
 8004e04:	1c07883a 	add	r3,r3,r16
 8004e08:	10800044 	addi	r2,r2,1
 8004e0c:	d8c02015 	stw	r3,128(sp)
 8004e10:	44000115 	stw	r16,4(r8)
 8004e14:	d8801f15 	stw	r2,124(sp)
 8004e18:	00c001c4 	movi	r3,7
 8004e1c:	1880a916 	blt	r3,r2,80050c4 <___vfprintf_internal_r+0x3dc>
 8004e20:	42000204 	addi	r8,r8,8
 8004e24:	d9402f17 	ldw	r5,188(sp)
 8004e28:	2c0b883a 	add	r5,r5,r16
 8004e2c:	d9402f15 	stw	r5,188(sp)
 8004e30:	88800007 	ldb	r2,0(r17)
 8004e34:	1000aa26 	beq	r2,zero,80050e0 <___vfprintf_internal_r+0x3f8>
 8004e38:	8d400044 	addi	r21,r17,1
 8004e3c:	8c400047 	ldb	r17,1(r17)
 8004e40:	0021883a 	mov	r16,zero
 8004e44:	00bfffc4 	movi	r2,-1
 8004e48:	0025883a 	mov	r18,zero
 8004e4c:	dc002905 	stb	r16,164(sp)
 8004e50:	d8002785 	stb	zero,158(sp)
 8004e54:	d8002b05 	stb	zero,172(sp)
 8004e58:	d8802a15 	stw	r2,168(sp)
 8004e5c:	d8003115 	stw	zero,196(sp)
 8004e60:	04c01604 	movi	r19,88
 8004e64:	05800244 	movi	r22,9
 8004e68:	9021883a 	mov	r16,r18
 8004e6c:	4039883a 	mov	fp,r8
 8004e70:	ad400044 	addi	r21,r21,1
 8004e74:	88bff804 	addi	r2,r17,-32
 8004e78:	98833236 	bltu	r19,r2,8005b44 <___vfprintf_internal_r+0xe5c>
 8004e7c:	100490ba 	slli	r2,r2,2
 8004e80:	00c20034 	movhi	r3,2048
 8004e84:	18d3a504 	addi	r3,r3,20116
 8004e88:	10c5883a 	add	r2,r2,r3
 8004e8c:	10800017 	ldw	r2,0(r2)
 8004e90:	1000683a 	jmp	r2
 8004e94:	08005a3c 	xorhi	zero,at,360
 8004e98:	08005b44 	addi	zero,at,365
 8004e9c:	08005b44 	addi	zero,at,365
 8004ea0:	08005a5c 	xori	zero,at,361
 8004ea4:	08005b44 	addi	zero,at,365
 8004ea8:	08005b44 	addi	zero,at,365
 8004eac:	08005b44 	addi	zero,at,365
 8004eb0:	08005b44 	addi	zero,at,365
 8004eb4:	08005b44 	addi	zero,at,365
 8004eb8:	08005b44 	addi	zero,at,365
 8004ebc:	08005144 	addi	zero,at,325
 8004ec0:	0800594c 	andi	zero,at,357
 8004ec4:	08005b44 	addi	zero,at,365
 8004ec8:	08005008 	cmpgei	zero,at,320
 8004ecc:	08005168 	cmpgeui	zero,at,325
 8004ed0:	08005b44 	addi	zero,at,365
 8004ed4:	080051b8 	rdprs	zero,at,326
 8004ed8:	080051c4 	addi	zero,at,327
 8004edc:	080051c4 	addi	zero,at,327
 8004ee0:	080051c4 	addi	zero,at,327
 8004ee4:	080051c4 	addi	zero,at,327
 8004ee8:	080051c4 	addi	zero,at,327
 8004eec:	080051c4 	addi	zero,at,327
 8004ef0:	080051c4 	addi	zero,at,327
 8004ef4:	080051c4 	addi	zero,at,327
 8004ef8:	080051c4 	addi	zero,at,327
 8004efc:	08005b44 	addi	zero,at,365
 8004f00:	08005b44 	addi	zero,at,365
 8004f04:	08005b44 	addi	zero,at,365
 8004f08:	08005b44 	addi	zero,at,365
 8004f0c:	08005b44 	addi	zero,at,365
 8004f10:	08005b44 	addi	zero,at,365
 8004f14:	08005b44 	addi	zero,at,365
 8004f18:	08005b44 	addi	zero,at,365
 8004f1c:	08005b44 	addi	zero,at,365
 8004f20:	08005b44 	addi	zero,at,365
 8004f24:	08005200 	call	800520 <__alt_mem_onchip_memory2_0+0x800520>
 8004f28:	080052c8 	cmpgei	zero,at,331
 8004f2c:	08005b44 	addi	zero,at,365
 8004f30:	080052c8 	cmpgei	zero,at,331
 8004f34:	08005b44 	addi	zero,at,365
 8004f38:	08005b44 	addi	zero,at,365
 8004f3c:	08005b44 	addi	zero,at,365
 8004f40:	08005b44 	addi	zero,at,365
 8004f44:	08005374 	orhi	zero,at,333
 8004f48:	08005b44 	addi	zero,at,365
 8004f4c:	08005b44 	addi	zero,at,365
 8004f50:	08005380 	call	800538 <__alt_mem_onchip_memory2_0+0x800538>
 8004f54:	08005b44 	addi	zero,at,365
 8004f58:	08005b44 	addi	zero,at,365
 8004f5c:	08005b44 	addi	zero,at,365
 8004f60:	08005b44 	addi	zero,at,365
 8004f64:	08005b44 	addi	zero,at,365
 8004f68:	08005804 	addi	zero,at,352
 8004f6c:	08005b44 	addi	zero,at,365
 8004f70:	08005b44 	addi	zero,at,365
 8004f74:	08005870 	cmpltui	zero,at,353
 8004f78:	08005b44 	addi	zero,at,365
 8004f7c:	08005b44 	addi	zero,at,365
 8004f80:	08005b44 	addi	zero,at,365
 8004f84:	08005b44 	addi	zero,at,365
 8004f88:	08005b44 	addi	zero,at,365
 8004f8c:	08005b44 	addi	zero,at,365
 8004f90:	08005b44 	addi	zero,at,365
 8004f94:	08005b44 	addi	zero,at,365
 8004f98:	08005b44 	addi	zero,at,365
 8004f9c:	08005b44 	addi	zero,at,365
 8004fa0:	08005ae8 	cmpgeui	zero,at,363
 8004fa4:	08005a68 	cmpgeui	zero,at,361
 8004fa8:	080052c8 	cmpgei	zero,at,331
 8004fac:	080052c8 	cmpgei	zero,at,331
 8004fb0:	080052c8 	cmpgei	zero,at,331
 8004fb4:	08005a88 	cmpgei	zero,at,362
 8004fb8:	08005a68 	cmpgeui	zero,at,361
 8004fbc:	08005b44 	addi	zero,at,365
 8004fc0:	08005b44 	addi	zero,at,365
 8004fc4:	08005a94 	ori	zero,at,362
 8004fc8:	08005b44 	addi	zero,at,365
 8004fcc:	08005aa8 	cmpgeui	zero,at,362
 8004fd0:	0800592c 	andhi	zero,at,356
 8004fd4:	08005014 	ori	zero,at,320
 8004fd8:	08005964 	muli	zero,at,357
 8004fdc:	08005b44 	addi	zero,at,365
 8004fe0:	08005970 	cmpltui	zero,at,357
 8004fe4:	08005b44 	addi	zero,at,365
 8004fe8:	080059d4 	ori	zero,at,359
 8004fec:	08005b44 	addi	zero,at,365
 8004ff0:	08005b44 	addi	zero,at,365
 8004ff4:	080059f4 	orhi	zero,at,359
 8004ff8:	d8c03117 	ldw	r3,196(sp)
 8004ffc:	d8802e15 	stw	r2,184(sp)
 8005000:	00c7c83a 	sub	r3,zero,r3
 8005004:	d8c03115 	stw	r3,196(sp)
 8005008:	84000114 	ori	r16,r16,4
 800500c:	ac400007 	ldb	r17,0(r21)
 8005010:	003f9706 	br	8004e70 <__alt_data_end+0xfc004e70>
 8005014:	00800c04 	movi	r2,48
 8005018:	d8802705 	stb	r2,156(sp)
 800501c:	00801e04 	movi	r2,120
 8005020:	d8802745 	stb	r2,157(sp)
 8005024:	d9002a17 	ldw	r4,168(sp)
 8005028:	d8802e17 	ldw	r2,184(sp)
 800502c:	d8002785 	stb	zero,158(sp)
 8005030:	e011883a 	mov	r8,fp
 8005034:	10c00104 	addi	r3,r2,4
 8005038:	14c00017 	ldw	r19,0(r2)
 800503c:	002d883a 	mov	r22,zero
 8005040:	80800094 	ori	r2,r16,2
 8005044:	2002ca16 	blt	r4,zero,8005b70 <___vfprintf_internal_r+0xe88>
 8005048:	00bfdfc4 	movi	r2,-129
 800504c:	80a4703a 	and	r18,r16,r2
 8005050:	d8c02e15 	stw	r3,184(sp)
 8005054:	94800094 	ori	r18,r18,2
 8005058:	9802b41e 	bne	r19,zero,8005b2c <___vfprintf_internal_r+0xe44>
 800505c:	01420074 	movhi	r5,2049
 8005060:	295edb04 	addi	r5,r5,31596
 8005064:	d9403915 	stw	r5,228(sp)
 8005068:	04401e04 	movi	r17,120
 800506c:	d8802a17 	ldw	r2,168(sp)
 8005070:	0039883a 	mov	fp,zero
 8005074:	1001fa26 	beq	r2,zero,8005860 <___vfprintf_internal_r+0xb78>
 8005078:	0027883a 	mov	r19,zero
 800507c:	002d883a 	mov	r22,zero
 8005080:	00021906 	br	80058e8 <___vfprintf_internal_r+0xc00>
 8005084:	d9002d17 	ldw	r4,180(sp)
 8005088:	b80b883a 	mov	r5,r23
 800508c:	800709c0 	call	800709c <__swsetup_r>
 8005090:	1005dc1e 	bne	r2,zero,8006804 <___vfprintf_internal_r+0x1b1c>
 8005094:	b880030b 	ldhu	r2,12(r23)
 8005098:	00c00284 	movi	r3,10
 800509c:	1080068c 	andi	r2,r2,26
 80050a0:	10ff3a1e 	bne	r2,r3,8004d8c <__alt_data_end+0xfc004d8c>
 80050a4:	b880038f 	ldh	r2,14(r23)
 80050a8:	103f3816 	blt	r2,zero,8004d8c <__alt_data_end+0xfc004d8c>
 80050ac:	d9c02e17 	ldw	r7,184(sp)
 80050b0:	d9002d17 	ldw	r4,180(sp)
 80050b4:	a80d883a 	mov	r6,r21
 80050b8:	b80b883a 	mov	r5,r23
 80050bc:	8006fe00 	call	8006fe0 <__sbprintf>
 80050c0:	00001106 	br	8005108 <___vfprintf_internal_r+0x420>
 80050c4:	d9002d17 	ldw	r4,180(sp)
 80050c8:	d9801e04 	addi	r6,sp,120
 80050cc:	b80b883a 	mov	r5,r23
 80050d0:	800da380 	call	800da38 <__sprint_r>
 80050d4:	1000081e 	bne	r2,zero,80050f8 <___vfprintf_internal_r+0x410>
 80050d8:	da000404 	addi	r8,sp,16
 80050dc:	003f5106 	br	8004e24 <__alt_data_end+0xfc004e24>
 80050e0:	d8802017 	ldw	r2,128(sp)
 80050e4:	10000426 	beq	r2,zero,80050f8 <___vfprintf_internal_r+0x410>
 80050e8:	d9002d17 	ldw	r4,180(sp)
 80050ec:	d9801e04 	addi	r6,sp,120
 80050f0:	b80b883a 	mov	r5,r23
 80050f4:	800da380 	call	800da38 <__sprint_r>
 80050f8:	b880030b 	ldhu	r2,12(r23)
 80050fc:	1080100c 	andi	r2,r2,64
 8005100:	1005c01e 	bne	r2,zero,8006804 <___vfprintf_internal_r+0x1b1c>
 8005104:	d8802f17 	ldw	r2,188(sp)
 8005108:	dfc04717 	ldw	ra,284(sp)
 800510c:	df004617 	ldw	fp,280(sp)
 8005110:	ddc04517 	ldw	r23,276(sp)
 8005114:	dd804417 	ldw	r22,272(sp)
 8005118:	dd404317 	ldw	r21,268(sp)
 800511c:	dd004217 	ldw	r20,264(sp)
 8005120:	dcc04117 	ldw	r19,260(sp)
 8005124:	dc804017 	ldw	r18,256(sp)
 8005128:	dc403f17 	ldw	r17,252(sp)
 800512c:	dc003e17 	ldw	r16,248(sp)
 8005130:	dec04804 	addi	sp,sp,288
 8005134:	f800283a 	ret
 8005138:	d9002d17 	ldw	r4,180(sp)
 800513c:	80090a80 	call	80090a8 <__sinit>
 8005140:	003f0206 	br	8004d4c <__alt_data_end+0xfc004d4c>
 8005144:	d9002e17 	ldw	r4,184(sp)
 8005148:	d9402e17 	ldw	r5,184(sp)
 800514c:	21000017 	ldw	r4,0(r4)
 8005150:	28800104 	addi	r2,r5,4
 8005154:	d9003115 	stw	r4,196(sp)
 8005158:	203fa716 	blt	r4,zero,8004ff8 <__alt_data_end+0xfc004ff8>
 800515c:	d8802e15 	stw	r2,184(sp)
 8005160:	ac400007 	ldb	r17,0(r21)
 8005164:	003f4206 	br	8004e70 <__alt_data_end+0xfc004e70>
 8005168:	ac400007 	ldb	r17,0(r21)
 800516c:	01000a84 	movi	r4,42
 8005170:	a8c00044 	addi	r3,r21,1
 8005174:	89075826 	beq	r17,r4,8006ed8 <___vfprintf_internal_r+0x21f0>
 8005178:	8cbff404 	addi	r18,r17,-48
 800517c:	b486ae36 	bltu	r22,r18,8006c38 <___vfprintf_internal_r+0x1f50>
 8005180:	0009883a 	mov	r4,zero
 8005184:	1823883a 	mov	r17,r3
 8005188:	01400284 	movi	r5,10
 800518c:	8001b580 	call	8001b58 <__mulsi3>
 8005190:	88c00007 	ldb	r3,0(r17)
 8005194:	1489883a 	add	r4,r2,r18
 8005198:	8d400044 	addi	r21,r17,1
 800519c:	1cbff404 	addi	r18,r3,-48
 80051a0:	a823883a 	mov	r17,r21
 80051a4:	b4bff82e 	bgeu	r22,r18,8005188 <__alt_data_end+0xfc005188>
 80051a8:	1823883a 	mov	r17,r3
 80051ac:	2005f616 	blt	r4,zero,8006988 <___vfprintf_internal_r+0x1ca0>
 80051b0:	d9002a15 	stw	r4,168(sp)
 80051b4:	003f2f06 	br	8004e74 <__alt_data_end+0xfc004e74>
 80051b8:	84002014 	ori	r16,r16,128
 80051bc:	ac400007 	ldb	r17,0(r21)
 80051c0:	003f2b06 	br	8004e70 <__alt_data_end+0xfc004e70>
 80051c4:	8cbff404 	addi	r18,r17,-48
 80051c8:	d8003115 	stw	zero,196(sp)
 80051cc:	0009883a 	mov	r4,zero
 80051d0:	a823883a 	mov	r17,r21
 80051d4:	01400284 	movi	r5,10
 80051d8:	8001b580 	call	8001b58 <__mulsi3>
 80051dc:	88c00007 	ldb	r3,0(r17)
 80051e0:	9089883a 	add	r4,r18,r2
 80051e4:	ad400044 	addi	r21,r21,1
 80051e8:	1cbff404 	addi	r18,r3,-48
 80051ec:	a823883a 	mov	r17,r21
 80051f0:	b4bff82e 	bgeu	r22,r18,80051d4 <__alt_data_end+0xfc0051d4>
 80051f4:	1823883a 	mov	r17,r3
 80051f8:	d9003115 	stw	r4,196(sp)
 80051fc:	003f1d06 	br	8004e74 <__alt_data_end+0xfc004e74>
 8005200:	8025883a 	mov	r18,r16
 8005204:	dc002903 	ldbu	r16,164(sp)
 8005208:	e011883a 	mov	r8,fp
 800520c:	84003fcc 	andi	r16,r16,255
 8005210:	8007531e 	bne	r16,zero,8006f60 <___vfprintf_internal_r+0x2278>
 8005214:	94800414 	ori	r18,r18,16
 8005218:	9080080c 	andi	r2,r18,32
 800521c:	1003a326 	beq	r2,zero,80060ac <___vfprintf_internal_r+0x13c4>
 8005220:	d9002e17 	ldw	r4,184(sp)
 8005224:	20800117 	ldw	r2,4(r4)
 8005228:	24c00017 	ldw	r19,0(r4)
 800522c:	21000204 	addi	r4,r4,8
 8005230:	d9002e15 	stw	r4,184(sp)
 8005234:	102d883a 	mov	r22,r2
 8005238:	10047316 	blt	r2,zero,8006408 <___vfprintf_internal_r+0x1720>
 800523c:	d9002a17 	ldw	r4,168(sp)
 8005240:	df002783 	ldbu	fp,158(sp)
 8005244:	2003e416 	blt	r4,zero,80061d8 <___vfprintf_internal_r+0x14f0>
 8005248:	00ffdfc4 	movi	r3,-129
 800524c:	9d84b03a 	or	r2,r19,r22
 8005250:	90e4703a 	and	r18,r18,r3
 8005254:	10018026 	beq	r2,zero,8005858 <___vfprintf_internal_r+0xb70>
 8005258:	b003ab26 	beq	r22,zero,8006108 <___vfprintf_internal_r+0x1420>
 800525c:	dc402915 	stw	r17,164(sp)
 8005260:	dc001e04 	addi	r16,sp,120
 8005264:	b023883a 	mov	r17,r22
 8005268:	402d883a 	mov	r22,r8
 800526c:	9809883a 	mov	r4,r19
 8005270:	880b883a 	mov	r5,r17
 8005274:	01800284 	movi	r6,10
 8005278:	000f883a 	mov	r7,zero
 800527c:	80100880 	call	8010088 <__umoddi3>
 8005280:	10800c04 	addi	r2,r2,48
 8005284:	843fffc4 	addi	r16,r16,-1
 8005288:	9809883a 	mov	r4,r19
 800528c:	880b883a 	mov	r5,r17
 8005290:	80800005 	stb	r2,0(r16)
 8005294:	01800284 	movi	r6,10
 8005298:	000f883a 	mov	r7,zero
 800529c:	800fa8c0 	call	800fa8c <__udivdi3>
 80052a0:	1027883a 	mov	r19,r2
 80052a4:	10c4b03a 	or	r2,r2,r3
 80052a8:	1823883a 	mov	r17,r3
 80052ac:	103fef1e 	bne	r2,zero,800526c <__alt_data_end+0xfc00526c>
 80052b0:	d8c02817 	ldw	r3,160(sp)
 80052b4:	dc402917 	ldw	r17,164(sp)
 80052b8:	b011883a 	mov	r8,r22
 80052bc:	1c07c83a 	sub	r3,r3,r16
 80052c0:	d8c02b15 	stw	r3,172(sp)
 80052c4:	00005f06 	br	8005444 <___vfprintf_internal_r+0x75c>
 80052c8:	8025883a 	mov	r18,r16
 80052cc:	dc002903 	ldbu	r16,164(sp)
 80052d0:	e011883a 	mov	r8,fp
 80052d4:	84003fcc 	andi	r16,r16,255
 80052d8:	80071e1e 	bne	r16,zero,8006f54 <___vfprintf_internal_r+0x226c>
 80052dc:	9080020c 	andi	r2,r18,8
 80052e0:	1004af26 	beq	r2,zero,80065a0 <___vfprintf_internal_r+0x18b8>
 80052e4:	d9002e17 	ldw	r4,184(sp)
 80052e8:	d9402e17 	ldw	r5,184(sp)
 80052ec:	d8802e17 	ldw	r2,184(sp)
 80052f0:	21000017 	ldw	r4,0(r4)
 80052f4:	29400117 	ldw	r5,4(r5)
 80052f8:	10800204 	addi	r2,r2,8
 80052fc:	d9003615 	stw	r4,216(sp)
 8005300:	d9403815 	stw	r5,224(sp)
 8005304:	d8802e15 	stw	r2,184(sp)
 8005308:	d9003617 	ldw	r4,216(sp)
 800530c:	d9403817 	ldw	r5,224(sp)
 8005310:	da003d15 	stw	r8,244(sp)
 8005314:	04000044 	movi	r16,1
 8005318:	800c0ec0 	call	800c0ec <__fpclassifyd>
 800531c:	da003d17 	ldw	r8,244(sp)
 8005320:	1404441e 	bne	r2,r16,8006434 <___vfprintf_internal_r+0x174c>
 8005324:	d9003617 	ldw	r4,216(sp)
 8005328:	d9403817 	ldw	r5,224(sp)
 800532c:	000d883a 	mov	r6,zero
 8005330:	000f883a 	mov	r7,zero
 8005334:	8011a2c0 	call	8011a2c <__ledf2>
 8005338:	da003d17 	ldw	r8,244(sp)
 800533c:	1005e316 	blt	r2,zero,8006acc <___vfprintf_internal_r+0x1de4>
 8005340:	df002783 	ldbu	fp,158(sp)
 8005344:	008011c4 	movi	r2,71
 8005348:	1445580e 	bge	r2,r17,80068ac <___vfprintf_internal_r+0x1bc4>
 800534c:	04020074 	movhi	r16,2049
 8005350:	841ed304 	addi	r16,r16,31564
 8005354:	00c000c4 	movi	r3,3
 8005358:	00bfdfc4 	movi	r2,-129
 800535c:	d8c02915 	stw	r3,164(sp)
 8005360:	90a4703a 	and	r18,r18,r2
 8005364:	d8c02b15 	stw	r3,172(sp)
 8005368:	d8002a15 	stw	zero,168(sp)
 800536c:	d8003215 	stw	zero,200(sp)
 8005370:	00003a06 	br	800545c <___vfprintf_internal_r+0x774>
 8005374:	84000214 	ori	r16,r16,8
 8005378:	ac400007 	ldb	r17,0(r21)
 800537c:	003ebc06 	br	8004e70 <__alt_data_end+0xfc004e70>
 8005380:	8025883a 	mov	r18,r16
 8005384:	dc002903 	ldbu	r16,164(sp)
 8005388:	e011883a 	mov	r8,fp
 800538c:	84003fcc 	andi	r16,r16,255
 8005390:	8007001e 	bne	r16,zero,8006f94 <___vfprintf_internal_r+0x22ac>
 8005394:	94800414 	ori	r18,r18,16
 8005398:	9080080c 	andi	r2,r18,32
 800539c:	1002fa26 	beq	r2,zero,8005f88 <___vfprintf_internal_r+0x12a0>
 80053a0:	d9002e17 	ldw	r4,184(sp)
 80053a4:	d9402a17 	ldw	r5,168(sp)
 80053a8:	d8002785 	stb	zero,158(sp)
 80053ac:	20800204 	addi	r2,r4,8
 80053b0:	24c00017 	ldw	r19,0(r4)
 80053b4:	25800117 	ldw	r22,4(r4)
 80053b8:	2804b116 	blt	r5,zero,8006680 <___vfprintf_internal_r+0x1998>
 80053bc:	013fdfc4 	movi	r4,-129
 80053c0:	9d86b03a 	or	r3,r19,r22
 80053c4:	d8802e15 	stw	r2,184(sp)
 80053c8:	9124703a 	and	r18,r18,r4
 80053cc:	1802fb1e 	bne	r3,zero,8005fbc <___vfprintf_internal_r+0x12d4>
 80053d0:	d8c02a17 	ldw	r3,168(sp)
 80053d4:	0039883a 	mov	fp,zero
 80053d8:	1805e526 	beq	r3,zero,8006b70 <___vfprintf_internal_r+0x1e88>
 80053dc:	0027883a 	mov	r19,zero
 80053e0:	002d883a 	mov	r22,zero
 80053e4:	dc001e04 	addi	r16,sp,120
 80053e8:	9806d0fa 	srli	r3,r19,3
 80053ec:	b008977a 	slli	r4,r22,29
 80053f0:	b02cd0fa 	srli	r22,r22,3
 80053f4:	9cc001cc 	andi	r19,r19,7
 80053f8:	98800c04 	addi	r2,r19,48
 80053fc:	843fffc4 	addi	r16,r16,-1
 8005400:	20e6b03a 	or	r19,r4,r3
 8005404:	80800005 	stb	r2,0(r16)
 8005408:	9d86b03a 	or	r3,r19,r22
 800540c:	183ff61e 	bne	r3,zero,80053e8 <__alt_data_end+0xfc0053e8>
 8005410:	90c0004c 	andi	r3,r18,1
 8005414:	18014126 	beq	r3,zero,800591c <___vfprintf_internal_r+0xc34>
 8005418:	10803fcc 	andi	r2,r2,255
 800541c:	1080201c 	xori	r2,r2,128
 8005420:	10bfe004 	addi	r2,r2,-128
 8005424:	00c00c04 	movi	r3,48
 8005428:	10c13c26 	beq	r2,r3,800591c <___vfprintf_internal_r+0xc34>
 800542c:	80ffffc5 	stb	r3,-1(r16)
 8005430:	d8c02817 	ldw	r3,160(sp)
 8005434:	80bfffc4 	addi	r2,r16,-1
 8005438:	1021883a 	mov	r16,r2
 800543c:	1887c83a 	sub	r3,r3,r2
 8005440:	d8c02b15 	stw	r3,172(sp)
 8005444:	d8802b17 	ldw	r2,172(sp)
 8005448:	d9002a17 	ldw	r4,168(sp)
 800544c:	1100010e 	bge	r2,r4,8005454 <___vfprintf_internal_r+0x76c>
 8005450:	2005883a 	mov	r2,r4
 8005454:	d8802915 	stw	r2,164(sp)
 8005458:	d8003215 	stw	zero,200(sp)
 800545c:	e7003fcc 	andi	fp,fp,255
 8005460:	e700201c 	xori	fp,fp,128
 8005464:	e73fe004 	addi	fp,fp,-128
 8005468:	e0000326 	beq	fp,zero,8005478 <___vfprintf_internal_r+0x790>
 800546c:	d8c02917 	ldw	r3,164(sp)
 8005470:	18c00044 	addi	r3,r3,1
 8005474:	d8c02915 	stw	r3,164(sp)
 8005478:	90c0008c 	andi	r3,r18,2
 800547c:	d8c02c15 	stw	r3,176(sp)
 8005480:	18000326 	beq	r3,zero,8005490 <___vfprintf_internal_r+0x7a8>
 8005484:	d8c02917 	ldw	r3,164(sp)
 8005488:	18c00084 	addi	r3,r3,2
 800548c:	d8c02915 	stw	r3,164(sp)
 8005490:	90c0210c 	andi	r3,r18,132
 8005494:	d8c03015 	stw	r3,192(sp)
 8005498:	1801c51e 	bne	r3,zero,8005bb0 <___vfprintf_internal_r+0xec8>
 800549c:	d9003117 	ldw	r4,196(sp)
 80054a0:	d8c02917 	ldw	r3,164(sp)
 80054a4:	20e7c83a 	sub	r19,r4,r3
 80054a8:	04c1c10e 	bge	zero,r19,8005bb0 <___vfprintf_internal_r+0xec8>
 80054ac:	02400404 	movi	r9,16
 80054b0:	d8c02017 	ldw	r3,128(sp)
 80054b4:	d8801f17 	ldw	r2,124(sp)
 80054b8:	4cc52f0e 	bge	r9,r19,8006978 <___vfprintf_internal_r+0x1c90>
 80054bc:	01420074 	movhi	r5,2049
 80054c0:	295eee84 	addi	r5,r5,31674
 80054c4:	dc403b15 	stw	r17,236(sp)
 80054c8:	d9403515 	stw	r5,212(sp)
 80054cc:	9823883a 	mov	r17,r19
 80054d0:	482d883a 	mov	r22,r9
 80054d4:	9027883a 	mov	r19,r18
 80054d8:	070001c4 	movi	fp,7
 80054dc:	8025883a 	mov	r18,r16
 80054e0:	dc002d17 	ldw	r16,180(sp)
 80054e4:	00000306 	br	80054f4 <___vfprintf_internal_r+0x80c>
 80054e8:	8c7ffc04 	addi	r17,r17,-16
 80054ec:	42000204 	addi	r8,r8,8
 80054f0:	b440130e 	bge	r22,r17,8005540 <___vfprintf_internal_r+0x858>
 80054f4:	01020074 	movhi	r4,2049
 80054f8:	18c00404 	addi	r3,r3,16
 80054fc:	10800044 	addi	r2,r2,1
 8005500:	211eee84 	addi	r4,r4,31674
 8005504:	41000015 	stw	r4,0(r8)
 8005508:	45800115 	stw	r22,4(r8)
 800550c:	d8c02015 	stw	r3,128(sp)
 8005510:	d8801f15 	stw	r2,124(sp)
 8005514:	e0bff40e 	bge	fp,r2,80054e8 <__alt_data_end+0xfc0054e8>
 8005518:	d9801e04 	addi	r6,sp,120
 800551c:	b80b883a 	mov	r5,r23
 8005520:	8009883a 	mov	r4,r16
 8005524:	800da380 	call	800da38 <__sprint_r>
 8005528:	103ef31e 	bne	r2,zero,80050f8 <__alt_data_end+0xfc0050f8>
 800552c:	8c7ffc04 	addi	r17,r17,-16
 8005530:	d8c02017 	ldw	r3,128(sp)
 8005534:	d8801f17 	ldw	r2,124(sp)
 8005538:	da000404 	addi	r8,sp,16
 800553c:	b47fed16 	blt	r22,r17,80054f4 <__alt_data_end+0xfc0054f4>
 8005540:	9021883a 	mov	r16,r18
 8005544:	9825883a 	mov	r18,r19
 8005548:	8827883a 	mov	r19,r17
 800554c:	dc403b17 	ldw	r17,236(sp)
 8005550:	d9403517 	ldw	r5,212(sp)
 8005554:	98c7883a 	add	r3,r19,r3
 8005558:	10800044 	addi	r2,r2,1
 800555c:	41400015 	stw	r5,0(r8)
 8005560:	44c00115 	stw	r19,4(r8)
 8005564:	d8c02015 	stw	r3,128(sp)
 8005568:	d8801f15 	stw	r2,124(sp)
 800556c:	010001c4 	movi	r4,7
 8005570:	2082c516 	blt	r4,r2,8006088 <___vfprintf_internal_r+0x13a0>
 8005574:	df002787 	ldb	fp,158(sp)
 8005578:	42000204 	addi	r8,r8,8
 800557c:	e0000c26 	beq	fp,zero,80055b0 <___vfprintf_internal_r+0x8c8>
 8005580:	d8801f17 	ldw	r2,124(sp)
 8005584:	d9002784 	addi	r4,sp,158
 8005588:	18c00044 	addi	r3,r3,1
 800558c:	10800044 	addi	r2,r2,1
 8005590:	41000015 	stw	r4,0(r8)
 8005594:	01000044 	movi	r4,1
 8005598:	41000115 	stw	r4,4(r8)
 800559c:	d8c02015 	stw	r3,128(sp)
 80055a0:	d8801f15 	stw	r2,124(sp)
 80055a4:	010001c4 	movi	r4,7
 80055a8:	20825e16 	blt	r4,r2,8005f24 <___vfprintf_internal_r+0x123c>
 80055ac:	42000204 	addi	r8,r8,8
 80055b0:	d8802c17 	ldw	r2,176(sp)
 80055b4:	10000c26 	beq	r2,zero,80055e8 <___vfprintf_internal_r+0x900>
 80055b8:	d8801f17 	ldw	r2,124(sp)
 80055bc:	d9002704 	addi	r4,sp,156
 80055c0:	18c00084 	addi	r3,r3,2
 80055c4:	10800044 	addi	r2,r2,1
 80055c8:	41000015 	stw	r4,0(r8)
 80055cc:	01000084 	movi	r4,2
 80055d0:	41000115 	stw	r4,4(r8)
 80055d4:	d8c02015 	stw	r3,128(sp)
 80055d8:	d8801f15 	stw	r2,124(sp)
 80055dc:	010001c4 	movi	r4,7
 80055e0:	20825816 	blt	r4,r2,8005f44 <___vfprintf_internal_r+0x125c>
 80055e4:	42000204 	addi	r8,r8,8
 80055e8:	d9003017 	ldw	r4,192(sp)
 80055ec:	00802004 	movi	r2,128
 80055f0:	2081bb26 	beq	r4,r2,8005ce0 <___vfprintf_internal_r+0xff8>
 80055f4:	d9402a17 	ldw	r5,168(sp)
 80055f8:	d8802b17 	ldw	r2,172(sp)
 80055fc:	28adc83a 	sub	r22,r5,r2
 8005600:	0580310e 	bge	zero,r22,80056c8 <___vfprintf_internal_r+0x9e0>
 8005604:	07000404 	movi	fp,16
 8005608:	d8801f17 	ldw	r2,124(sp)
 800560c:	e584360e 	bge	fp,r22,80066e8 <___vfprintf_internal_r+0x1a00>
 8005610:	01420074 	movhi	r5,2049
 8005614:	295eea84 	addi	r5,r5,31658
 8005618:	dc402a15 	stw	r17,168(sp)
 800561c:	d9402c15 	stw	r5,176(sp)
 8005620:	b023883a 	mov	r17,r22
 8005624:	04c001c4 	movi	r19,7
 8005628:	a82d883a 	mov	r22,r21
 800562c:	902b883a 	mov	r21,r18
 8005630:	8025883a 	mov	r18,r16
 8005634:	dc002d17 	ldw	r16,180(sp)
 8005638:	00000306 	br	8005648 <___vfprintf_internal_r+0x960>
 800563c:	8c7ffc04 	addi	r17,r17,-16
 8005640:	42000204 	addi	r8,r8,8
 8005644:	e440110e 	bge	fp,r17,800568c <___vfprintf_internal_r+0x9a4>
 8005648:	18c00404 	addi	r3,r3,16
 800564c:	10800044 	addi	r2,r2,1
 8005650:	45000015 	stw	r20,0(r8)
 8005654:	47000115 	stw	fp,4(r8)
 8005658:	d8c02015 	stw	r3,128(sp)
 800565c:	d8801f15 	stw	r2,124(sp)
 8005660:	98bff60e 	bge	r19,r2,800563c <__alt_data_end+0xfc00563c>
 8005664:	d9801e04 	addi	r6,sp,120
 8005668:	b80b883a 	mov	r5,r23
 800566c:	8009883a 	mov	r4,r16
 8005670:	800da380 	call	800da38 <__sprint_r>
 8005674:	103ea01e 	bne	r2,zero,80050f8 <__alt_data_end+0xfc0050f8>
 8005678:	8c7ffc04 	addi	r17,r17,-16
 800567c:	d8c02017 	ldw	r3,128(sp)
 8005680:	d8801f17 	ldw	r2,124(sp)
 8005684:	da000404 	addi	r8,sp,16
 8005688:	e47fef16 	blt	fp,r17,8005648 <__alt_data_end+0xfc005648>
 800568c:	9021883a 	mov	r16,r18
 8005690:	a825883a 	mov	r18,r21
 8005694:	b02b883a 	mov	r21,r22
 8005698:	882d883a 	mov	r22,r17
 800569c:	dc402a17 	ldw	r17,168(sp)
 80056a0:	d9002c17 	ldw	r4,176(sp)
 80056a4:	1d87883a 	add	r3,r3,r22
 80056a8:	10800044 	addi	r2,r2,1
 80056ac:	41000015 	stw	r4,0(r8)
 80056b0:	45800115 	stw	r22,4(r8)
 80056b4:	d8c02015 	stw	r3,128(sp)
 80056b8:	d8801f15 	stw	r2,124(sp)
 80056bc:	010001c4 	movi	r4,7
 80056c0:	20821016 	blt	r4,r2,8005f04 <___vfprintf_internal_r+0x121c>
 80056c4:	42000204 	addi	r8,r8,8
 80056c8:	9080400c 	andi	r2,r18,256
 80056cc:	10013a1e 	bne	r2,zero,8005bb8 <___vfprintf_internal_r+0xed0>
 80056d0:	d9402b17 	ldw	r5,172(sp)
 80056d4:	d8801f17 	ldw	r2,124(sp)
 80056d8:	44000015 	stw	r16,0(r8)
 80056dc:	1947883a 	add	r3,r3,r5
 80056e0:	10800044 	addi	r2,r2,1
 80056e4:	41400115 	stw	r5,4(r8)
 80056e8:	d8c02015 	stw	r3,128(sp)
 80056ec:	d8801f15 	stw	r2,124(sp)
 80056f0:	010001c4 	movi	r4,7
 80056f4:	2081f516 	blt	r4,r2,8005ecc <___vfprintf_internal_r+0x11e4>
 80056f8:	42000204 	addi	r8,r8,8
 80056fc:	9480010c 	andi	r18,r18,4
 8005700:	90003226 	beq	r18,zero,80057cc <___vfprintf_internal_r+0xae4>
 8005704:	d9403117 	ldw	r5,196(sp)
 8005708:	d8802917 	ldw	r2,164(sp)
 800570c:	28a1c83a 	sub	r16,r5,r2
 8005710:	04002e0e 	bge	zero,r16,80057cc <___vfprintf_internal_r+0xae4>
 8005714:	04400404 	movi	r17,16
 8005718:	d8801f17 	ldw	r2,124(sp)
 800571c:	8c04c40e 	bge	r17,r16,8006a30 <___vfprintf_internal_r+0x1d48>
 8005720:	01420074 	movhi	r5,2049
 8005724:	295eee84 	addi	r5,r5,31674
 8005728:	d9403515 	stw	r5,212(sp)
 800572c:	048001c4 	movi	r18,7
 8005730:	dcc02d17 	ldw	r19,180(sp)
 8005734:	00000306 	br	8005744 <___vfprintf_internal_r+0xa5c>
 8005738:	843ffc04 	addi	r16,r16,-16
 800573c:	42000204 	addi	r8,r8,8
 8005740:	8c00130e 	bge	r17,r16,8005790 <___vfprintf_internal_r+0xaa8>
 8005744:	01020074 	movhi	r4,2049
 8005748:	18c00404 	addi	r3,r3,16
 800574c:	10800044 	addi	r2,r2,1
 8005750:	211eee84 	addi	r4,r4,31674
 8005754:	41000015 	stw	r4,0(r8)
 8005758:	44400115 	stw	r17,4(r8)
 800575c:	d8c02015 	stw	r3,128(sp)
 8005760:	d8801f15 	stw	r2,124(sp)
 8005764:	90bff40e 	bge	r18,r2,8005738 <__alt_data_end+0xfc005738>
 8005768:	d9801e04 	addi	r6,sp,120
 800576c:	b80b883a 	mov	r5,r23
 8005770:	9809883a 	mov	r4,r19
 8005774:	800da380 	call	800da38 <__sprint_r>
 8005778:	103e5f1e 	bne	r2,zero,80050f8 <__alt_data_end+0xfc0050f8>
 800577c:	843ffc04 	addi	r16,r16,-16
 8005780:	d8c02017 	ldw	r3,128(sp)
 8005784:	d8801f17 	ldw	r2,124(sp)
 8005788:	da000404 	addi	r8,sp,16
 800578c:	8c3fed16 	blt	r17,r16,8005744 <__alt_data_end+0xfc005744>
 8005790:	d9403517 	ldw	r5,212(sp)
 8005794:	1c07883a 	add	r3,r3,r16
 8005798:	10800044 	addi	r2,r2,1
 800579c:	41400015 	stw	r5,0(r8)
 80057a0:	44000115 	stw	r16,4(r8)
 80057a4:	d8c02015 	stw	r3,128(sp)
 80057a8:	d8801f15 	stw	r2,124(sp)
 80057ac:	010001c4 	movi	r4,7
 80057b0:	2080060e 	bge	r4,r2,80057cc <___vfprintf_internal_r+0xae4>
 80057b4:	d9002d17 	ldw	r4,180(sp)
 80057b8:	d9801e04 	addi	r6,sp,120
 80057bc:	b80b883a 	mov	r5,r23
 80057c0:	800da380 	call	800da38 <__sprint_r>
 80057c4:	103e4c1e 	bne	r2,zero,80050f8 <__alt_data_end+0xfc0050f8>
 80057c8:	d8c02017 	ldw	r3,128(sp)
 80057cc:	d8803117 	ldw	r2,196(sp)
 80057d0:	d9002917 	ldw	r4,164(sp)
 80057d4:	1100010e 	bge	r2,r4,80057dc <___vfprintf_internal_r+0xaf4>
 80057d8:	2005883a 	mov	r2,r4
 80057dc:	d9402f17 	ldw	r5,188(sp)
 80057e0:	288b883a 	add	r5,r5,r2
 80057e4:	d9402f15 	stw	r5,188(sp)
 80057e8:	1801c01e 	bne	r3,zero,8005eec <___vfprintf_internal_r+0x1204>
 80057ec:	a8800007 	ldb	r2,0(r21)
 80057f0:	d8001f15 	stw	zero,124(sp)
 80057f4:	da000404 	addi	r8,sp,16
 80057f8:	103d751e 	bne	r2,zero,8004dd0 <__alt_data_end+0xfc004dd0>
 80057fc:	a823883a 	mov	r17,r21
 8005800:	003d8b06 	br	8004e30 <__alt_data_end+0xfc004e30>
 8005804:	8025883a 	mov	r18,r16
 8005808:	dc002903 	ldbu	r16,164(sp)
 800580c:	e011883a 	mov	r8,fp
 8005810:	84003fcc 	andi	r16,r16,255
 8005814:	8005e51e 	bne	r16,zero,8006fac <___vfprintf_internal_r+0x22c4>
 8005818:	94800414 	ori	r18,r18,16
 800581c:	9080080c 	andi	r2,r18,32
 8005820:	10022b26 	beq	r2,zero,80060d0 <___vfprintf_internal_r+0x13e8>
 8005824:	d9002e17 	ldw	r4,184(sp)
 8005828:	d9402a17 	ldw	r5,168(sp)
 800582c:	d8002785 	stb	zero,158(sp)
 8005830:	20c00204 	addi	r3,r4,8
 8005834:	24c00017 	ldw	r19,0(r4)
 8005838:	25800117 	ldw	r22,4(r4)
 800583c:	28042e16 	blt	r5,zero,80068f8 <___vfprintf_internal_r+0x1c10>
 8005840:	013fdfc4 	movi	r4,-129
 8005844:	9d84b03a 	or	r2,r19,r22
 8005848:	d8c02e15 	stw	r3,184(sp)
 800584c:	9124703a 	and	r18,r18,r4
 8005850:	0039883a 	mov	fp,zero
 8005854:	103e801e 	bne	r2,zero,8005258 <__alt_data_end+0xfc005258>
 8005858:	d9002a17 	ldw	r4,168(sp)
 800585c:	2002e01e 	bne	r4,zero,80063e0 <___vfprintf_internal_r+0x16f8>
 8005860:	d8002a15 	stw	zero,168(sp)
 8005864:	d8002b15 	stw	zero,172(sp)
 8005868:	dc001e04 	addi	r16,sp,120
 800586c:	003ef506 	br	8005444 <__alt_data_end+0xfc005444>
 8005870:	8025883a 	mov	r18,r16
 8005874:	dc002903 	ldbu	r16,164(sp)
 8005878:	e011883a 	mov	r8,fp
 800587c:	84003fcc 	andi	r16,r16,255
 8005880:	8005ba1e 	bne	r16,zero,8006f6c <___vfprintf_internal_r+0x2284>
 8005884:	01020074 	movhi	r4,2049
 8005888:	211ed604 	addi	r4,r4,31576
 800588c:	d9003915 	stw	r4,228(sp)
 8005890:	9080080c 	andi	r2,r18,32
 8005894:	10006126 	beq	r2,zero,8005a1c <___vfprintf_internal_r+0xd34>
 8005898:	d9402e17 	ldw	r5,184(sp)
 800589c:	2cc00017 	ldw	r19,0(r5)
 80058a0:	2d800117 	ldw	r22,4(r5)
 80058a4:	29400204 	addi	r5,r5,8
 80058a8:	d9402e15 	stw	r5,184(sp)
 80058ac:	9080004c 	andi	r2,r18,1
 80058b0:	1001ac26 	beq	r2,zero,8005f64 <___vfprintf_internal_r+0x127c>
 80058b4:	9d84b03a 	or	r2,r19,r22
 80058b8:	10038526 	beq	r2,zero,80066d0 <___vfprintf_internal_r+0x19e8>
 80058bc:	d8c02a17 	ldw	r3,168(sp)
 80058c0:	00800c04 	movi	r2,48
 80058c4:	d8802705 	stb	r2,156(sp)
 80058c8:	dc402745 	stb	r17,157(sp)
 80058cc:	d8002785 	stb	zero,158(sp)
 80058d0:	90800094 	ori	r2,r18,2
 80058d4:	18047916 	blt	r3,zero,8006abc <___vfprintf_internal_r+0x1dd4>
 80058d8:	00bfdfc4 	movi	r2,-129
 80058dc:	90a4703a 	and	r18,r18,r2
 80058e0:	94800094 	ori	r18,r18,2
 80058e4:	0039883a 	mov	fp,zero
 80058e8:	d9003917 	ldw	r4,228(sp)
 80058ec:	dc001e04 	addi	r16,sp,120
 80058f0:	988003cc 	andi	r2,r19,15
 80058f4:	b006973a 	slli	r3,r22,28
 80058f8:	2085883a 	add	r2,r4,r2
 80058fc:	9826d13a 	srli	r19,r19,4
 8005900:	10800003 	ldbu	r2,0(r2)
 8005904:	b02cd13a 	srli	r22,r22,4
 8005908:	843fffc4 	addi	r16,r16,-1
 800590c:	1ce6b03a 	or	r19,r3,r19
 8005910:	80800005 	stb	r2,0(r16)
 8005914:	9d84b03a 	or	r2,r19,r22
 8005918:	103ff51e 	bne	r2,zero,80058f0 <__alt_data_end+0xfc0058f0>
 800591c:	d8c02817 	ldw	r3,160(sp)
 8005920:	1c07c83a 	sub	r3,r3,r16
 8005924:	d8c02b15 	stw	r3,172(sp)
 8005928:	003ec606 	br	8005444 <__alt_data_end+0xfc005444>
 800592c:	8025883a 	mov	r18,r16
 8005930:	dc002903 	ldbu	r16,164(sp)
 8005934:	e011883a 	mov	r8,fp
 8005938:	84003fcc 	andi	r16,r16,255
 800593c:	803e9626 	beq	r16,zero,8005398 <__alt_data_end+0xfc005398>
 8005940:	d8c02b03 	ldbu	r3,172(sp)
 8005944:	d8c02785 	stb	r3,158(sp)
 8005948:	003e9306 	br	8005398 <__alt_data_end+0xfc005398>
 800594c:	00c00044 	movi	r3,1
 8005950:	d8c02905 	stb	r3,164(sp)
 8005954:	00c00ac4 	movi	r3,43
 8005958:	d8c02b05 	stb	r3,172(sp)
 800595c:	ac400007 	ldb	r17,0(r21)
 8005960:	003d4306 	br	8004e70 <__alt_data_end+0xfc004e70>
 8005964:	84000814 	ori	r16,r16,32
 8005968:	ac400007 	ldb	r17,0(r21)
 800596c:	003d4006 	br	8004e70 <__alt_data_end+0xfc004e70>
 8005970:	d8802e17 	ldw	r2,184(sp)
 8005974:	8025883a 	mov	r18,r16
 8005978:	d8002785 	stb	zero,158(sp)
 800597c:	14000017 	ldw	r16,0(r2)
 8005980:	e011883a 	mov	r8,fp
 8005984:	14c00104 	addi	r19,r2,4
 8005988:	80042d26 	beq	r16,zero,8006a40 <___vfprintf_internal_r+0x1d58>
 800598c:	d8c02a17 	ldw	r3,168(sp)
 8005990:	1803e416 	blt	r3,zero,8006924 <___vfprintf_internal_r+0x1c3c>
 8005994:	180d883a 	mov	r6,r3
 8005998:	000b883a 	mov	r5,zero
 800599c:	8009883a 	mov	r4,r16
 80059a0:	df003d15 	stw	fp,244(sp)
 80059a4:	800a6200 	call	800a620 <memchr>
 80059a8:	da003d17 	ldw	r8,244(sp)
 80059ac:	10046826 	beq	r2,zero,8006b50 <___vfprintf_internal_r+0x1e68>
 80059b0:	1405c83a 	sub	r2,r2,r16
 80059b4:	d8802b15 	stw	r2,172(sp)
 80059b8:	1003e016 	blt	r2,zero,800693c <___vfprintf_internal_r+0x1c54>
 80059bc:	df002783 	ldbu	fp,158(sp)
 80059c0:	d8802915 	stw	r2,164(sp)
 80059c4:	dcc02e15 	stw	r19,184(sp)
 80059c8:	d8002a15 	stw	zero,168(sp)
 80059cc:	d8003215 	stw	zero,200(sp)
 80059d0:	003ea206 	br	800545c <__alt_data_end+0xfc00545c>
 80059d4:	8025883a 	mov	r18,r16
 80059d8:	dc002903 	ldbu	r16,164(sp)
 80059dc:	e011883a 	mov	r8,fp
 80059e0:	84003fcc 	andi	r16,r16,255
 80059e4:	803f8d26 	beq	r16,zero,800581c <__alt_data_end+0xfc00581c>
 80059e8:	d8c02b03 	ldbu	r3,172(sp)
 80059ec:	d8c02785 	stb	r3,158(sp)
 80059f0:	003f8a06 	br	800581c <__alt_data_end+0xfc00581c>
 80059f4:	8025883a 	mov	r18,r16
 80059f8:	dc002903 	ldbu	r16,164(sp)
 80059fc:	e011883a 	mov	r8,fp
 8005a00:	84003fcc 	andi	r16,r16,255
 8005a04:	8005661e 	bne	r16,zero,8006fa0 <___vfprintf_internal_r+0x22b8>
 8005a08:	01020074 	movhi	r4,2049
 8005a0c:	211edb04 	addi	r4,r4,31596
 8005a10:	d9003915 	stw	r4,228(sp)
 8005a14:	9080080c 	andi	r2,r18,32
 8005a18:	103f9f1e 	bne	r2,zero,8005898 <__alt_data_end+0xfc005898>
 8005a1c:	9080040c 	andi	r2,r18,16
 8005a20:	1002eb26 	beq	r2,zero,80065d0 <___vfprintf_internal_r+0x18e8>
 8005a24:	d8802e17 	ldw	r2,184(sp)
 8005a28:	002d883a 	mov	r22,zero
 8005a2c:	14c00017 	ldw	r19,0(r2)
 8005a30:	10800104 	addi	r2,r2,4
 8005a34:	d8802e15 	stw	r2,184(sp)
 8005a38:	003f9c06 	br	80058ac <__alt_data_end+0xfc0058ac>
 8005a3c:	d8802b07 	ldb	r2,172(sp)
 8005a40:	1002e11e 	bne	r2,zero,80065c8 <___vfprintf_internal_r+0x18e0>
 8005a44:	00c00044 	movi	r3,1
 8005a48:	d8c02905 	stb	r3,164(sp)
 8005a4c:	00c00804 	movi	r3,32
 8005a50:	d8c02b05 	stb	r3,172(sp)
 8005a54:	ac400007 	ldb	r17,0(r21)
 8005a58:	003d0506 	br	8004e70 <__alt_data_end+0xfc004e70>
 8005a5c:	84000054 	ori	r16,r16,1
 8005a60:	ac400007 	ldb	r17,0(r21)
 8005a64:	003d0206 	br	8004e70 <__alt_data_end+0xfc004e70>
 8005a68:	8025883a 	mov	r18,r16
 8005a6c:	dc002903 	ldbu	r16,164(sp)
 8005a70:	e011883a 	mov	r8,fp
 8005a74:	84003fcc 	andi	r16,r16,255
 8005a78:	803de726 	beq	r16,zero,8005218 <__alt_data_end+0xfc005218>
 8005a7c:	d8c02b03 	ldbu	r3,172(sp)
 8005a80:	d8c02785 	stb	r3,158(sp)
 8005a84:	003de406 	br	8005218 <__alt_data_end+0xfc005218>
 8005a88:	84001014 	ori	r16,r16,64
 8005a8c:	ac400007 	ldb	r17,0(r21)
 8005a90:	003cf706 	br	8004e70 <__alt_data_end+0xfc004e70>
 8005a94:	ac400007 	ldb	r17,0(r21)
 8005a98:	00801b04 	movi	r2,108
 8005a9c:	88838f26 	beq	r17,r2,80068dc <___vfprintf_internal_r+0x1bf4>
 8005aa0:	84000414 	ori	r16,r16,16
 8005aa4:	003cf206 	br	8004e70 <__alt_data_end+0xfc004e70>
 8005aa8:	8025883a 	mov	r18,r16
 8005aac:	dc002903 	ldbu	r16,164(sp)
 8005ab0:	e011883a 	mov	r8,fp
 8005ab4:	84003fcc 	andi	r16,r16,255
 8005ab8:	80053f1e 	bne	r16,zero,8006fb8 <___vfprintf_internal_r+0x22d0>
 8005abc:	9080080c 	andi	r2,r18,32
 8005ac0:	1002d226 	beq	r2,zero,800660c <___vfprintf_internal_r+0x1924>
 8005ac4:	d9002e17 	ldw	r4,184(sp)
 8005ac8:	d9402f17 	ldw	r5,188(sp)
 8005acc:	20800017 	ldw	r2,0(r4)
 8005ad0:	2807d7fa 	srai	r3,r5,31
 8005ad4:	21000104 	addi	r4,r4,4
 8005ad8:	d9002e15 	stw	r4,184(sp)
 8005adc:	11400015 	stw	r5,0(r2)
 8005ae0:	10c00115 	stw	r3,4(r2)
 8005ae4:	003cb806 	br	8004dc8 <__alt_data_end+0xfc004dc8>
 8005ae8:	d8c02e17 	ldw	r3,184(sp)
 8005aec:	d9002e17 	ldw	r4,184(sp)
 8005af0:	8025883a 	mov	r18,r16
 8005af4:	18800017 	ldw	r2,0(r3)
 8005af8:	21000104 	addi	r4,r4,4
 8005afc:	00c00044 	movi	r3,1
 8005b00:	e011883a 	mov	r8,fp
 8005b04:	d8c02915 	stw	r3,164(sp)
 8005b08:	d8002785 	stb	zero,158(sp)
 8005b0c:	d8801405 	stb	r2,80(sp)
 8005b10:	d9002e15 	stw	r4,184(sp)
 8005b14:	d8c02b15 	stw	r3,172(sp)
 8005b18:	d8002a15 	stw	zero,168(sp)
 8005b1c:	d8003215 	stw	zero,200(sp)
 8005b20:	dc001404 	addi	r16,sp,80
 8005b24:	0039883a 	mov	fp,zero
 8005b28:	003e5306 	br	8005478 <__alt_data_end+0xfc005478>
 8005b2c:	01020074 	movhi	r4,2049
 8005b30:	211edb04 	addi	r4,r4,31596
 8005b34:	0039883a 	mov	fp,zero
 8005b38:	d9003915 	stw	r4,228(sp)
 8005b3c:	04401e04 	movi	r17,120
 8005b40:	003f6906 	br	80058e8 <__alt_data_end+0xfc0058e8>
 8005b44:	8025883a 	mov	r18,r16
 8005b48:	dc002903 	ldbu	r16,164(sp)
 8005b4c:	e011883a 	mov	r8,fp
 8005b50:	84003fcc 	andi	r16,r16,255
 8005b54:	8005081e 	bne	r16,zero,8006f78 <___vfprintf_internal_r+0x2290>
 8005b58:	883d6126 	beq	r17,zero,80050e0 <__alt_data_end+0xfc0050e0>
 8005b5c:	00c00044 	movi	r3,1
 8005b60:	d8c02915 	stw	r3,164(sp)
 8005b64:	dc401405 	stb	r17,80(sp)
 8005b68:	d8002785 	stb	zero,158(sp)
 8005b6c:	003fe906 	br	8005b14 <__alt_data_end+0xfc005b14>
 8005b70:	01420074 	movhi	r5,2049
 8005b74:	295edb04 	addi	r5,r5,31596
 8005b78:	d9403915 	stw	r5,228(sp)
 8005b7c:	d8c02e15 	stw	r3,184(sp)
 8005b80:	1025883a 	mov	r18,r2
 8005b84:	04401e04 	movi	r17,120
 8005b88:	9d84b03a 	or	r2,r19,r22
 8005b8c:	1000fc1e 	bne	r2,zero,8005f80 <___vfprintf_internal_r+0x1298>
 8005b90:	0039883a 	mov	fp,zero
 8005b94:	00800084 	movi	r2,2
 8005b98:	10803fcc 	andi	r2,r2,255
 8005b9c:	00c00044 	movi	r3,1
 8005ba0:	10c20f26 	beq	r2,r3,80063e0 <___vfprintf_internal_r+0x16f8>
 8005ba4:	00c00084 	movi	r3,2
 8005ba8:	10fd3326 	beq	r2,r3,8005078 <__alt_data_end+0xfc005078>
 8005bac:	003e0b06 	br	80053dc <__alt_data_end+0xfc0053dc>
 8005bb0:	d8c02017 	ldw	r3,128(sp)
 8005bb4:	003e7106 	br	800557c <__alt_data_end+0xfc00557c>
 8005bb8:	00801944 	movi	r2,101
 8005bbc:	14407e0e 	bge	r2,r17,8005db8 <___vfprintf_internal_r+0x10d0>
 8005bc0:	d9003617 	ldw	r4,216(sp)
 8005bc4:	d9403817 	ldw	r5,224(sp)
 8005bc8:	000d883a 	mov	r6,zero
 8005bcc:	000f883a 	mov	r7,zero
 8005bd0:	d8c03c15 	stw	r3,240(sp)
 8005bd4:	da003d15 	stw	r8,244(sp)
 8005bd8:	80118c80 	call	80118c8 <__eqdf2>
 8005bdc:	d8c03c17 	ldw	r3,240(sp)
 8005be0:	da003d17 	ldw	r8,244(sp)
 8005be4:	1000f71e 	bne	r2,zero,8005fc4 <___vfprintf_internal_r+0x12dc>
 8005be8:	d8801f17 	ldw	r2,124(sp)
 8005bec:	01020074 	movhi	r4,2049
 8005bf0:	211ee204 	addi	r4,r4,31624
 8005bf4:	18c00044 	addi	r3,r3,1
 8005bf8:	10800044 	addi	r2,r2,1
 8005bfc:	41000015 	stw	r4,0(r8)
 8005c00:	01000044 	movi	r4,1
 8005c04:	41000115 	stw	r4,4(r8)
 8005c08:	d8c02015 	stw	r3,128(sp)
 8005c0c:	d8801f15 	stw	r2,124(sp)
 8005c10:	010001c4 	movi	r4,7
 8005c14:	2082b816 	blt	r4,r2,80066f8 <___vfprintf_internal_r+0x1a10>
 8005c18:	42000204 	addi	r8,r8,8
 8005c1c:	d8802617 	ldw	r2,152(sp)
 8005c20:	d9403317 	ldw	r5,204(sp)
 8005c24:	11400216 	blt	r2,r5,8005c30 <___vfprintf_internal_r+0xf48>
 8005c28:	9080004c 	andi	r2,r18,1
 8005c2c:	103eb326 	beq	r2,zero,80056fc <__alt_data_end+0xfc0056fc>
 8005c30:	d8803717 	ldw	r2,220(sp)
 8005c34:	d9003417 	ldw	r4,208(sp)
 8005c38:	d9403717 	ldw	r5,220(sp)
 8005c3c:	1887883a 	add	r3,r3,r2
 8005c40:	d8801f17 	ldw	r2,124(sp)
 8005c44:	41000015 	stw	r4,0(r8)
 8005c48:	41400115 	stw	r5,4(r8)
 8005c4c:	10800044 	addi	r2,r2,1
 8005c50:	d8c02015 	stw	r3,128(sp)
 8005c54:	d8801f15 	stw	r2,124(sp)
 8005c58:	010001c4 	movi	r4,7
 8005c5c:	20832916 	blt	r4,r2,8006904 <___vfprintf_internal_r+0x1c1c>
 8005c60:	42000204 	addi	r8,r8,8
 8005c64:	d8803317 	ldw	r2,204(sp)
 8005c68:	143fffc4 	addi	r16,r2,-1
 8005c6c:	043ea30e 	bge	zero,r16,80056fc <__alt_data_end+0xfc0056fc>
 8005c70:	04400404 	movi	r17,16
 8005c74:	d8801f17 	ldw	r2,124(sp)
 8005c78:	8c00880e 	bge	r17,r16,8005e9c <___vfprintf_internal_r+0x11b4>
 8005c7c:	01420074 	movhi	r5,2049
 8005c80:	295eea84 	addi	r5,r5,31658
 8005c84:	d9402c15 	stw	r5,176(sp)
 8005c88:	058001c4 	movi	r22,7
 8005c8c:	dcc02d17 	ldw	r19,180(sp)
 8005c90:	00000306 	br	8005ca0 <___vfprintf_internal_r+0xfb8>
 8005c94:	42000204 	addi	r8,r8,8
 8005c98:	843ffc04 	addi	r16,r16,-16
 8005c9c:	8c00820e 	bge	r17,r16,8005ea8 <___vfprintf_internal_r+0x11c0>
 8005ca0:	18c00404 	addi	r3,r3,16
 8005ca4:	10800044 	addi	r2,r2,1
 8005ca8:	45000015 	stw	r20,0(r8)
 8005cac:	44400115 	stw	r17,4(r8)
 8005cb0:	d8c02015 	stw	r3,128(sp)
 8005cb4:	d8801f15 	stw	r2,124(sp)
 8005cb8:	b0bff60e 	bge	r22,r2,8005c94 <__alt_data_end+0xfc005c94>
 8005cbc:	d9801e04 	addi	r6,sp,120
 8005cc0:	b80b883a 	mov	r5,r23
 8005cc4:	9809883a 	mov	r4,r19
 8005cc8:	800da380 	call	800da38 <__sprint_r>
 8005ccc:	103d0a1e 	bne	r2,zero,80050f8 <__alt_data_end+0xfc0050f8>
 8005cd0:	d8c02017 	ldw	r3,128(sp)
 8005cd4:	d8801f17 	ldw	r2,124(sp)
 8005cd8:	da000404 	addi	r8,sp,16
 8005cdc:	003fee06 	br	8005c98 <__alt_data_end+0xfc005c98>
 8005ce0:	d9403117 	ldw	r5,196(sp)
 8005ce4:	d8802917 	ldw	r2,164(sp)
 8005ce8:	28adc83a 	sub	r22,r5,r2
 8005cec:	05be410e 	bge	zero,r22,80055f4 <__alt_data_end+0xfc0055f4>
 8005cf0:	07000404 	movi	fp,16
 8005cf4:	d8801f17 	ldw	r2,124(sp)
 8005cf8:	e5838f0e 	bge	fp,r22,8006b38 <___vfprintf_internal_r+0x1e50>
 8005cfc:	01420074 	movhi	r5,2049
 8005d00:	295eea84 	addi	r5,r5,31658
 8005d04:	dc403015 	stw	r17,192(sp)
 8005d08:	d9402c15 	stw	r5,176(sp)
 8005d0c:	b023883a 	mov	r17,r22
 8005d10:	04c001c4 	movi	r19,7
 8005d14:	a82d883a 	mov	r22,r21
 8005d18:	902b883a 	mov	r21,r18
 8005d1c:	8025883a 	mov	r18,r16
 8005d20:	dc002d17 	ldw	r16,180(sp)
 8005d24:	00000306 	br	8005d34 <___vfprintf_internal_r+0x104c>
 8005d28:	8c7ffc04 	addi	r17,r17,-16
 8005d2c:	42000204 	addi	r8,r8,8
 8005d30:	e440110e 	bge	fp,r17,8005d78 <___vfprintf_internal_r+0x1090>
 8005d34:	18c00404 	addi	r3,r3,16
 8005d38:	10800044 	addi	r2,r2,1
 8005d3c:	45000015 	stw	r20,0(r8)
 8005d40:	47000115 	stw	fp,4(r8)
 8005d44:	d8c02015 	stw	r3,128(sp)
 8005d48:	d8801f15 	stw	r2,124(sp)
 8005d4c:	98bff60e 	bge	r19,r2,8005d28 <__alt_data_end+0xfc005d28>
 8005d50:	d9801e04 	addi	r6,sp,120
 8005d54:	b80b883a 	mov	r5,r23
 8005d58:	8009883a 	mov	r4,r16
 8005d5c:	800da380 	call	800da38 <__sprint_r>
 8005d60:	103ce51e 	bne	r2,zero,80050f8 <__alt_data_end+0xfc0050f8>
 8005d64:	8c7ffc04 	addi	r17,r17,-16
 8005d68:	d8c02017 	ldw	r3,128(sp)
 8005d6c:	d8801f17 	ldw	r2,124(sp)
 8005d70:	da000404 	addi	r8,sp,16
 8005d74:	e47fef16 	blt	fp,r17,8005d34 <__alt_data_end+0xfc005d34>
 8005d78:	9021883a 	mov	r16,r18
 8005d7c:	a825883a 	mov	r18,r21
 8005d80:	b02b883a 	mov	r21,r22
 8005d84:	882d883a 	mov	r22,r17
 8005d88:	dc403017 	ldw	r17,192(sp)
 8005d8c:	d9002c17 	ldw	r4,176(sp)
 8005d90:	1d87883a 	add	r3,r3,r22
 8005d94:	10800044 	addi	r2,r2,1
 8005d98:	41000015 	stw	r4,0(r8)
 8005d9c:	45800115 	stw	r22,4(r8)
 8005da0:	d8c02015 	stw	r3,128(sp)
 8005da4:	d8801f15 	stw	r2,124(sp)
 8005da8:	010001c4 	movi	r4,7
 8005dac:	20818e16 	blt	r4,r2,80063e8 <___vfprintf_internal_r+0x1700>
 8005db0:	42000204 	addi	r8,r8,8
 8005db4:	003e0f06 	br	80055f4 <__alt_data_end+0xfc0055f4>
 8005db8:	d9403317 	ldw	r5,204(sp)
 8005dbc:	00800044 	movi	r2,1
 8005dc0:	18c00044 	addi	r3,r3,1
 8005dc4:	1141530e 	bge	r2,r5,8006314 <___vfprintf_internal_r+0x162c>
 8005dc8:	dc401f17 	ldw	r17,124(sp)
 8005dcc:	00800044 	movi	r2,1
 8005dd0:	40800115 	stw	r2,4(r8)
 8005dd4:	8c400044 	addi	r17,r17,1
 8005dd8:	44000015 	stw	r16,0(r8)
 8005ddc:	d8c02015 	stw	r3,128(sp)
 8005de0:	dc401f15 	stw	r17,124(sp)
 8005de4:	008001c4 	movi	r2,7
 8005de8:	14416b16 	blt	r2,r17,8006398 <___vfprintf_internal_r+0x16b0>
 8005dec:	42000204 	addi	r8,r8,8
 8005df0:	d8803717 	ldw	r2,220(sp)
 8005df4:	d9003417 	ldw	r4,208(sp)
 8005df8:	8c400044 	addi	r17,r17,1
 8005dfc:	10c7883a 	add	r3,r2,r3
 8005e00:	40800115 	stw	r2,4(r8)
 8005e04:	41000015 	stw	r4,0(r8)
 8005e08:	d8c02015 	stw	r3,128(sp)
 8005e0c:	dc401f15 	stw	r17,124(sp)
 8005e10:	008001c4 	movi	r2,7
 8005e14:	14416916 	blt	r2,r17,80063bc <___vfprintf_internal_r+0x16d4>
 8005e18:	45800204 	addi	r22,r8,8
 8005e1c:	d9003617 	ldw	r4,216(sp)
 8005e20:	d9403817 	ldw	r5,224(sp)
 8005e24:	000d883a 	mov	r6,zero
 8005e28:	000f883a 	mov	r7,zero
 8005e2c:	d8c03c15 	stw	r3,240(sp)
 8005e30:	80118c80 	call	80118c8 <__eqdf2>
 8005e34:	d8c03c17 	ldw	r3,240(sp)
 8005e38:	1000bc26 	beq	r2,zero,800612c <___vfprintf_internal_r+0x1444>
 8005e3c:	d9403317 	ldw	r5,204(sp)
 8005e40:	84000044 	addi	r16,r16,1
 8005e44:	8c400044 	addi	r17,r17,1
 8005e48:	28bfffc4 	addi	r2,r5,-1
 8005e4c:	1887883a 	add	r3,r3,r2
 8005e50:	b0800115 	stw	r2,4(r22)
 8005e54:	b4000015 	stw	r16,0(r22)
 8005e58:	d8c02015 	stw	r3,128(sp)
 8005e5c:	dc401f15 	stw	r17,124(sp)
 8005e60:	008001c4 	movi	r2,7
 8005e64:	14414316 	blt	r2,r17,8006374 <___vfprintf_internal_r+0x168c>
 8005e68:	b5800204 	addi	r22,r22,8
 8005e6c:	d9003a17 	ldw	r4,232(sp)
 8005e70:	df0022c4 	addi	fp,sp,139
 8005e74:	8c400044 	addi	r17,r17,1
 8005e78:	20c7883a 	add	r3,r4,r3
 8005e7c:	b7000015 	stw	fp,0(r22)
 8005e80:	b1000115 	stw	r4,4(r22)
 8005e84:	d8c02015 	stw	r3,128(sp)
 8005e88:	dc401f15 	stw	r17,124(sp)
 8005e8c:	008001c4 	movi	r2,7
 8005e90:	14400e16 	blt	r2,r17,8005ecc <___vfprintf_internal_r+0x11e4>
 8005e94:	b2000204 	addi	r8,r22,8
 8005e98:	003e1806 	br	80056fc <__alt_data_end+0xfc0056fc>
 8005e9c:	01020074 	movhi	r4,2049
 8005ea0:	211eea84 	addi	r4,r4,31658
 8005ea4:	d9002c15 	stw	r4,176(sp)
 8005ea8:	d9002c17 	ldw	r4,176(sp)
 8005eac:	1c07883a 	add	r3,r3,r16
 8005eb0:	44000115 	stw	r16,4(r8)
 8005eb4:	41000015 	stw	r4,0(r8)
 8005eb8:	10800044 	addi	r2,r2,1
 8005ebc:	d8c02015 	stw	r3,128(sp)
 8005ec0:	d8801f15 	stw	r2,124(sp)
 8005ec4:	010001c4 	movi	r4,7
 8005ec8:	20be0b0e 	bge	r4,r2,80056f8 <__alt_data_end+0xfc0056f8>
 8005ecc:	d9002d17 	ldw	r4,180(sp)
 8005ed0:	d9801e04 	addi	r6,sp,120
 8005ed4:	b80b883a 	mov	r5,r23
 8005ed8:	800da380 	call	800da38 <__sprint_r>
 8005edc:	103c861e 	bne	r2,zero,80050f8 <__alt_data_end+0xfc0050f8>
 8005ee0:	d8c02017 	ldw	r3,128(sp)
 8005ee4:	da000404 	addi	r8,sp,16
 8005ee8:	003e0406 	br	80056fc <__alt_data_end+0xfc0056fc>
 8005eec:	d9002d17 	ldw	r4,180(sp)
 8005ef0:	d9801e04 	addi	r6,sp,120
 8005ef4:	b80b883a 	mov	r5,r23
 8005ef8:	800da380 	call	800da38 <__sprint_r>
 8005efc:	103e3b26 	beq	r2,zero,80057ec <__alt_data_end+0xfc0057ec>
 8005f00:	003c7d06 	br	80050f8 <__alt_data_end+0xfc0050f8>
 8005f04:	d9002d17 	ldw	r4,180(sp)
 8005f08:	d9801e04 	addi	r6,sp,120
 8005f0c:	b80b883a 	mov	r5,r23
 8005f10:	800da380 	call	800da38 <__sprint_r>
 8005f14:	103c781e 	bne	r2,zero,80050f8 <__alt_data_end+0xfc0050f8>
 8005f18:	d8c02017 	ldw	r3,128(sp)
 8005f1c:	da000404 	addi	r8,sp,16
 8005f20:	003de906 	br	80056c8 <__alt_data_end+0xfc0056c8>
 8005f24:	d9002d17 	ldw	r4,180(sp)
 8005f28:	d9801e04 	addi	r6,sp,120
 8005f2c:	b80b883a 	mov	r5,r23
 8005f30:	800da380 	call	800da38 <__sprint_r>
 8005f34:	103c701e 	bne	r2,zero,80050f8 <__alt_data_end+0xfc0050f8>
 8005f38:	d8c02017 	ldw	r3,128(sp)
 8005f3c:	da000404 	addi	r8,sp,16
 8005f40:	003d9b06 	br	80055b0 <__alt_data_end+0xfc0055b0>
 8005f44:	d9002d17 	ldw	r4,180(sp)
 8005f48:	d9801e04 	addi	r6,sp,120
 8005f4c:	b80b883a 	mov	r5,r23
 8005f50:	800da380 	call	800da38 <__sprint_r>
 8005f54:	103c681e 	bne	r2,zero,80050f8 <__alt_data_end+0xfc0050f8>
 8005f58:	d8c02017 	ldw	r3,128(sp)
 8005f5c:	da000404 	addi	r8,sp,16
 8005f60:	003da106 	br	80055e8 <__alt_data_end+0xfc0055e8>
 8005f64:	d9402a17 	ldw	r5,168(sp)
 8005f68:	d8002785 	stb	zero,158(sp)
 8005f6c:	283f0616 	blt	r5,zero,8005b88 <__alt_data_end+0xfc005b88>
 8005f70:	00ffdfc4 	movi	r3,-129
 8005f74:	9d84b03a 	or	r2,r19,r22
 8005f78:	90e4703a 	and	r18,r18,r3
 8005f7c:	103c3b26 	beq	r2,zero,800506c <__alt_data_end+0xfc00506c>
 8005f80:	0039883a 	mov	fp,zero
 8005f84:	003e5806 	br	80058e8 <__alt_data_end+0xfc0058e8>
 8005f88:	9080040c 	andi	r2,r18,16
 8005f8c:	1001b326 	beq	r2,zero,800665c <___vfprintf_internal_r+0x1974>
 8005f90:	d8c02e17 	ldw	r3,184(sp)
 8005f94:	d9002a17 	ldw	r4,168(sp)
 8005f98:	d8002785 	stb	zero,158(sp)
 8005f9c:	18800104 	addi	r2,r3,4
 8005fa0:	1cc00017 	ldw	r19,0(r3)
 8005fa4:	002d883a 	mov	r22,zero
 8005fa8:	2001b516 	blt	r4,zero,8006680 <___vfprintf_internal_r+0x1998>
 8005fac:	00ffdfc4 	movi	r3,-129
 8005fb0:	d8802e15 	stw	r2,184(sp)
 8005fb4:	90e4703a 	and	r18,r18,r3
 8005fb8:	983d0526 	beq	r19,zero,80053d0 <__alt_data_end+0xfc0053d0>
 8005fbc:	0039883a 	mov	fp,zero
 8005fc0:	003d0806 	br	80053e4 <__alt_data_end+0xfc0053e4>
 8005fc4:	dc402617 	ldw	r17,152(sp)
 8005fc8:	0441d30e 	bge	zero,r17,8006718 <___vfprintf_internal_r+0x1a30>
 8005fcc:	dc403217 	ldw	r17,200(sp)
 8005fd0:	d8803317 	ldw	r2,204(sp)
 8005fd4:	1440010e 	bge	r2,r17,8005fdc <___vfprintf_internal_r+0x12f4>
 8005fd8:	1023883a 	mov	r17,r2
 8005fdc:	04400a0e 	bge	zero,r17,8006008 <___vfprintf_internal_r+0x1320>
 8005fe0:	d8801f17 	ldw	r2,124(sp)
 8005fe4:	1c47883a 	add	r3,r3,r17
 8005fe8:	44000015 	stw	r16,0(r8)
 8005fec:	10800044 	addi	r2,r2,1
 8005ff0:	44400115 	stw	r17,4(r8)
 8005ff4:	d8c02015 	stw	r3,128(sp)
 8005ff8:	d8801f15 	stw	r2,124(sp)
 8005ffc:	010001c4 	movi	r4,7
 8006000:	20826516 	blt	r4,r2,8006998 <___vfprintf_internal_r+0x1cb0>
 8006004:	42000204 	addi	r8,r8,8
 8006008:	88026116 	blt	r17,zero,8006990 <___vfprintf_internal_r+0x1ca8>
 800600c:	d9003217 	ldw	r4,200(sp)
 8006010:	2463c83a 	sub	r17,r4,r17
 8006014:	04407b0e 	bge	zero,r17,8006204 <___vfprintf_internal_r+0x151c>
 8006018:	05800404 	movi	r22,16
 800601c:	d8801f17 	ldw	r2,124(sp)
 8006020:	b4419d0e 	bge	r22,r17,8006698 <___vfprintf_internal_r+0x19b0>
 8006024:	01020074 	movhi	r4,2049
 8006028:	211eea84 	addi	r4,r4,31658
 800602c:	d9002c15 	stw	r4,176(sp)
 8006030:	070001c4 	movi	fp,7
 8006034:	dcc02d17 	ldw	r19,180(sp)
 8006038:	00000306 	br	8006048 <___vfprintf_internal_r+0x1360>
 800603c:	42000204 	addi	r8,r8,8
 8006040:	8c7ffc04 	addi	r17,r17,-16
 8006044:	b441970e 	bge	r22,r17,80066a4 <___vfprintf_internal_r+0x19bc>
 8006048:	18c00404 	addi	r3,r3,16
 800604c:	10800044 	addi	r2,r2,1
 8006050:	45000015 	stw	r20,0(r8)
 8006054:	45800115 	stw	r22,4(r8)
 8006058:	d8c02015 	stw	r3,128(sp)
 800605c:	d8801f15 	stw	r2,124(sp)
 8006060:	e0bff60e 	bge	fp,r2,800603c <__alt_data_end+0xfc00603c>
 8006064:	d9801e04 	addi	r6,sp,120
 8006068:	b80b883a 	mov	r5,r23
 800606c:	9809883a 	mov	r4,r19
 8006070:	800da380 	call	800da38 <__sprint_r>
 8006074:	103c201e 	bne	r2,zero,80050f8 <__alt_data_end+0xfc0050f8>
 8006078:	d8c02017 	ldw	r3,128(sp)
 800607c:	d8801f17 	ldw	r2,124(sp)
 8006080:	da000404 	addi	r8,sp,16
 8006084:	003fee06 	br	8006040 <__alt_data_end+0xfc006040>
 8006088:	d9002d17 	ldw	r4,180(sp)
 800608c:	d9801e04 	addi	r6,sp,120
 8006090:	b80b883a 	mov	r5,r23
 8006094:	800da380 	call	800da38 <__sprint_r>
 8006098:	103c171e 	bne	r2,zero,80050f8 <__alt_data_end+0xfc0050f8>
 800609c:	d8c02017 	ldw	r3,128(sp)
 80060a0:	df002787 	ldb	fp,158(sp)
 80060a4:	da000404 	addi	r8,sp,16
 80060a8:	003d3406 	br	800557c <__alt_data_end+0xfc00557c>
 80060ac:	9080040c 	andi	r2,r18,16
 80060b0:	10016126 	beq	r2,zero,8006638 <___vfprintf_internal_r+0x1950>
 80060b4:	d9402e17 	ldw	r5,184(sp)
 80060b8:	2cc00017 	ldw	r19,0(r5)
 80060bc:	29400104 	addi	r5,r5,4
 80060c0:	d9402e15 	stw	r5,184(sp)
 80060c4:	982dd7fa 	srai	r22,r19,31
 80060c8:	b005883a 	mov	r2,r22
 80060cc:	003c5a06 	br	8005238 <__alt_data_end+0xfc005238>
 80060d0:	9080040c 	andi	r2,r18,16
 80060d4:	10003526 	beq	r2,zero,80061ac <___vfprintf_internal_r+0x14c4>
 80060d8:	d8c02e17 	ldw	r3,184(sp)
 80060dc:	d9002a17 	ldw	r4,168(sp)
 80060e0:	d8002785 	stb	zero,158(sp)
 80060e4:	18800104 	addi	r2,r3,4
 80060e8:	1cc00017 	ldw	r19,0(r3)
 80060ec:	002d883a 	mov	r22,zero
 80060f0:	20003716 	blt	r4,zero,80061d0 <___vfprintf_internal_r+0x14e8>
 80060f4:	00ffdfc4 	movi	r3,-129
 80060f8:	d8802e15 	stw	r2,184(sp)
 80060fc:	90e4703a 	and	r18,r18,r3
 8006100:	0039883a 	mov	fp,zero
 8006104:	983dd426 	beq	r19,zero,8005858 <__alt_data_end+0xfc005858>
 8006108:	00800244 	movi	r2,9
 800610c:	14fc5336 	bltu	r2,r19,800525c <__alt_data_end+0xfc00525c>
 8006110:	d8c02817 	ldw	r3,160(sp)
 8006114:	dc001dc4 	addi	r16,sp,119
 8006118:	9cc00c04 	addi	r19,r19,48
 800611c:	1c07c83a 	sub	r3,r3,r16
 8006120:	dcc01dc5 	stb	r19,119(sp)
 8006124:	d8c02b15 	stw	r3,172(sp)
 8006128:	003cc606 	br	8005444 <__alt_data_end+0xfc005444>
 800612c:	d8803317 	ldw	r2,204(sp)
 8006130:	143fffc4 	addi	r16,r2,-1
 8006134:	043f4d0e 	bge	zero,r16,8005e6c <__alt_data_end+0xfc005e6c>
 8006138:	07000404 	movi	fp,16
 800613c:	e400810e 	bge	fp,r16,8006344 <___vfprintf_internal_r+0x165c>
 8006140:	01420074 	movhi	r5,2049
 8006144:	295eea84 	addi	r5,r5,31658
 8006148:	d9402c15 	stw	r5,176(sp)
 800614c:	01c001c4 	movi	r7,7
 8006150:	dcc02d17 	ldw	r19,180(sp)
 8006154:	00000306 	br	8006164 <___vfprintf_internal_r+0x147c>
 8006158:	b5800204 	addi	r22,r22,8
 800615c:	843ffc04 	addi	r16,r16,-16
 8006160:	e4007b0e 	bge	fp,r16,8006350 <___vfprintf_internal_r+0x1668>
 8006164:	18c00404 	addi	r3,r3,16
 8006168:	8c400044 	addi	r17,r17,1
 800616c:	b5000015 	stw	r20,0(r22)
 8006170:	b7000115 	stw	fp,4(r22)
 8006174:	d8c02015 	stw	r3,128(sp)
 8006178:	dc401f15 	stw	r17,124(sp)
 800617c:	3c7ff60e 	bge	r7,r17,8006158 <__alt_data_end+0xfc006158>
 8006180:	d9801e04 	addi	r6,sp,120
 8006184:	b80b883a 	mov	r5,r23
 8006188:	9809883a 	mov	r4,r19
 800618c:	d9c03c15 	stw	r7,240(sp)
 8006190:	800da380 	call	800da38 <__sprint_r>
 8006194:	d9c03c17 	ldw	r7,240(sp)
 8006198:	103bd71e 	bne	r2,zero,80050f8 <__alt_data_end+0xfc0050f8>
 800619c:	d8c02017 	ldw	r3,128(sp)
 80061a0:	dc401f17 	ldw	r17,124(sp)
 80061a4:	dd800404 	addi	r22,sp,16
 80061a8:	003fec06 	br	800615c <__alt_data_end+0xfc00615c>
 80061ac:	9080100c 	andi	r2,r18,64
 80061b0:	d8002785 	stb	zero,158(sp)
 80061b4:	10010e26 	beq	r2,zero,80065f0 <___vfprintf_internal_r+0x1908>
 80061b8:	d9402e17 	ldw	r5,184(sp)
 80061bc:	d8c02a17 	ldw	r3,168(sp)
 80061c0:	002d883a 	mov	r22,zero
 80061c4:	28800104 	addi	r2,r5,4
 80061c8:	2cc0000b 	ldhu	r19,0(r5)
 80061cc:	183fc90e 	bge	r3,zero,80060f4 <__alt_data_end+0xfc0060f4>
 80061d0:	d8802e15 	stw	r2,184(sp)
 80061d4:	0039883a 	mov	fp,zero
 80061d8:	9d84b03a 	or	r2,r19,r22
 80061dc:	103c1e1e 	bne	r2,zero,8005258 <__alt_data_end+0xfc005258>
 80061e0:	00800044 	movi	r2,1
 80061e4:	003e6c06 	br	8005b98 <__alt_data_end+0xfc005b98>
 80061e8:	d9002d17 	ldw	r4,180(sp)
 80061ec:	d9801e04 	addi	r6,sp,120
 80061f0:	b80b883a 	mov	r5,r23
 80061f4:	800da380 	call	800da38 <__sprint_r>
 80061f8:	103bbf1e 	bne	r2,zero,80050f8 <__alt_data_end+0xfc0050f8>
 80061fc:	d8c02017 	ldw	r3,128(sp)
 8006200:	da000404 	addi	r8,sp,16
 8006204:	d9003217 	ldw	r4,200(sp)
 8006208:	d8802617 	ldw	r2,152(sp)
 800620c:	d9403317 	ldw	r5,204(sp)
 8006210:	8123883a 	add	r17,r16,r4
 8006214:	11400216 	blt	r2,r5,8006220 <___vfprintf_internal_r+0x1538>
 8006218:	9100004c 	andi	r4,r18,1
 800621c:	20000d26 	beq	r4,zero,8006254 <___vfprintf_internal_r+0x156c>
 8006220:	d9003717 	ldw	r4,220(sp)
 8006224:	d9403417 	ldw	r5,208(sp)
 8006228:	1907883a 	add	r3,r3,r4
 800622c:	d9001f17 	ldw	r4,124(sp)
 8006230:	41400015 	stw	r5,0(r8)
 8006234:	d9403717 	ldw	r5,220(sp)
 8006238:	21000044 	addi	r4,r4,1
 800623c:	d8c02015 	stw	r3,128(sp)
 8006240:	41400115 	stw	r5,4(r8)
 8006244:	d9001f15 	stw	r4,124(sp)
 8006248:	014001c4 	movi	r5,7
 800624c:	2901e816 	blt	r5,r4,80069f0 <___vfprintf_internal_r+0x1d08>
 8006250:	42000204 	addi	r8,r8,8
 8006254:	d9003317 	ldw	r4,204(sp)
 8006258:	8121883a 	add	r16,r16,r4
 800625c:	2085c83a 	sub	r2,r4,r2
 8006260:	8461c83a 	sub	r16,r16,r17
 8006264:	1400010e 	bge	r2,r16,800626c <___vfprintf_internal_r+0x1584>
 8006268:	1021883a 	mov	r16,r2
 800626c:	04000a0e 	bge	zero,r16,8006298 <___vfprintf_internal_r+0x15b0>
 8006270:	d9001f17 	ldw	r4,124(sp)
 8006274:	1c07883a 	add	r3,r3,r16
 8006278:	44400015 	stw	r17,0(r8)
 800627c:	21000044 	addi	r4,r4,1
 8006280:	44000115 	stw	r16,4(r8)
 8006284:	d8c02015 	stw	r3,128(sp)
 8006288:	d9001f15 	stw	r4,124(sp)
 800628c:	014001c4 	movi	r5,7
 8006290:	2901fb16 	blt	r5,r4,8006a80 <___vfprintf_internal_r+0x1d98>
 8006294:	42000204 	addi	r8,r8,8
 8006298:	8001f716 	blt	r16,zero,8006a78 <___vfprintf_internal_r+0x1d90>
 800629c:	1421c83a 	sub	r16,r2,r16
 80062a0:	043d160e 	bge	zero,r16,80056fc <__alt_data_end+0xfc0056fc>
 80062a4:	04400404 	movi	r17,16
 80062a8:	d8801f17 	ldw	r2,124(sp)
 80062ac:	8c3efb0e 	bge	r17,r16,8005e9c <__alt_data_end+0xfc005e9c>
 80062b0:	01420074 	movhi	r5,2049
 80062b4:	295eea84 	addi	r5,r5,31658
 80062b8:	d9402c15 	stw	r5,176(sp)
 80062bc:	058001c4 	movi	r22,7
 80062c0:	dcc02d17 	ldw	r19,180(sp)
 80062c4:	00000306 	br	80062d4 <___vfprintf_internal_r+0x15ec>
 80062c8:	42000204 	addi	r8,r8,8
 80062cc:	843ffc04 	addi	r16,r16,-16
 80062d0:	8c3ef50e 	bge	r17,r16,8005ea8 <__alt_data_end+0xfc005ea8>
 80062d4:	18c00404 	addi	r3,r3,16
 80062d8:	10800044 	addi	r2,r2,1
 80062dc:	45000015 	stw	r20,0(r8)
 80062e0:	44400115 	stw	r17,4(r8)
 80062e4:	d8c02015 	stw	r3,128(sp)
 80062e8:	d8801f15 	stw	r2,124(sp)
 80062ec:	b0bff60e 	bge	r22,r2,80062c8 <__alt_data_end+0xfc0062c8>
 80062f0:	d9801e04 	addi	r6,sp,120
 80062f4:	b80b883a 	mov	r5,r23
 80062f8:	9809883a 	mov	r4,r19
 80062fc:	800da380 	call	800da38 <__sprint_r>
 8006300:	103b7d1e 	bne	r2,zero,80050f8 <__alt_data_end+0xfc0050f8>
 8006304:	d8c02017 	ldw	r3,128(sp)
 8006308:	d8801f17 	ldw	r2,124(sp)
 800630c:	da000404 	addi	r8,sp,16
 8006310:	003fee06 	br	80062cc <__alt_data_end+0xfc0062cc>
 8006314:	9088703a 	and	r4,r18,r2
 8006318:	203eab1e 	bne	r4,zero,8005dc8 <__alt_data_end+0xfc005dc8>
 800631c:	dc401f17 	ldw	r17,124(sp)
 8006320:	40800115 	stw	r2,4(r8)
 8006324:	44000015 	stw	r16,0(r8)
 8006328:	8c400044 	addi	r17,r17,1
 800632c:	d8c02015 	stw	r3,128(sp)
 8006330:	dc401f15 	stw	r17,124(sp)
 8006334:	008001c4 	movi	r2,7
 8006338:	14400e16 	blt	r2,r17,8006374 <___vfprintf_internal_r+0x168c>
 800633c:	45800204 	addi	r22,r8,8
 8006340:	003eca06 	br	8005e6c <__alt_data_end+0xfc005e6c>
 8006344:	01020074 	movhi	r4,2049
 8006348:	211eea84 	addi	r4,r4,31658
 800634c:	d9002c15 	stw	r4,176(sp)
 8006350:	d8802c17 	ldw	r2,176(sp)
 8006354:	1c07883a 	add	r3,r3,r16
 8006358:	8c400044 	addi	r17,r17,1
 800635c:	b0800015 	stw	r2,0(r22)
 8006360:	b4000115 	stw	r16,4(r22)
 8006364:	d8c02015 	stw	r3,128(sp)
 8006368:	dc401f15 	stw	r17,124(sp)
 800636c:	008001c4 	movi	r2,7
 8006370:	147ebd0e 	bge	r2,r17,8005e68 <__alt_data_end+0xfc005e68>
 8006374:	d9002d17 	ldw	r4,180(sp)
 8006378:	d9801e04 	addi	r6,sp,120
 800637c:	b80b883a 	mov	r5,r23
 8006380:	800da380 	call	800da38 <__sprint_r>
 8006384:	103b5c1e 	bne	r2,zero,80050f8 <__alt_data_end+0xfc0050f8>
 8006388:	d8c02017 	ldw	r3,128(sp)
 800638c:	dc401f17 	ldw	r17,124(sp)
 8006390:	dd800404 	addi	r22,sp,16
 8006394:	003eb506 	br	8005e6c <__alt_data_end+0xfc005e6c>
 8006398:	d9002d17 	ldw	r4,180(sp)
 800639c:	d9801e04 	addi	r6,sp,120
 80063a0:	b80b883a 	mov	r5,r23
 80063a4:	800da380 	call	800da38 <__sprint_r>
 80063a8:	103b531e 	bne	r2,zero,80050f8 <__alt_data_end+0xfc0050f8>
 80063ac:	d8c02017 	ldw	r3,128(sp)
 80063b0:	dc401f17 	ldw	r17,124(sp)
 80063b4:	da000404 	addi	r8,sp,16
 80063b8:	003e8d06 	br	8005df0 <__alt_data_end+0xfc005df0>
 80063bc:	d9002d17 	ldw	r4,180(sp)
 80063c0:	d9801e04 	addi	r6,sp,120
 80063c4:	b80b883a 	mov	r5,r23
 80063c8:	800da380 	call	800da38 <__sprint_r>
 80063cc:	103b4a1e 	bne	r2,zero,80050f8 <__alt_data_end+0xfc0050f8>
 80063d0:	d8c02017 	ldw	r3,128(sp)
 80063d4:	dc401f17 	ldw	r17,124(sp)
 80063d8:	dd800404 	addi	r22,sp,16
 80063dc:	003e8f06 	br	8005e1c <__alt_data_end+0xfc005e1c>
 80063e0:	0027883a 	mov	r19,zero
 80063e4:	003f4a06 	br	8006110 <__alt_data_end+0xfc006110>
 80063e8:	d9002d17 	ldw	r4,180(sp)
 80063ec:	d9801e04 	addi	r6,sp,120
 80063f0:	b80b883a 	mov	r5,r23
 80063f4:	800da380 	call	800da38 <__sprint_r>
 80063f8:	103b3f1e 	bne	r2,zero,80050f8 <__alt_data_end+0xfc0050f8>
 80063fc:	d8c02017 	ldw	r3,128(sp)
 8006400:	da000404 	addi	r8,sp,16
 8006404:	003c7b06 	br	80055f4 <__alt_data_end+0xfc0055f4>
 8006408:	d9402a17 	ldw	r5,168(sp)
 800640c:	04e7c83a 	sub	r19,zero,r19
 8006410:	07000b44 	movi	fp,45
 8006414:	9804c03a 	cmpne	r2,r19,zero
 8006418:	05adc83a 	sub	r22,zero,r22
 800641c:	df002785 	stb	fp,158(sp)
 8006420:	b0adc83a 	sub	r22,r22,r2
 8006424:	28017b16 	blt	r5,zero,8006a14 <___vfprintf_internal_r+0x1d2c>
 8006428:	00bfdfc4 	movi	r2,-129
 800642c:	90a4703a 	and	r18,r18,r2
 8006430:	003b8906 	br	8005258 <__alt_data_end+0xfc005258>
 8006434:	d9003617 	ldw	r4,216(sp)
 8006438:	d9403817 	ldw	r5,224(sp)
 800643c:	da003d15 	stw	r8,244(sp)
 8006440:	800c0ec0 	call	800c0ec <__fpclassifyd>
 8006444:	da003d17 	ldw	r8,244(sp)
 8006448:	1000f026 	beq	r2,zero,800680c <___vfprintf_internal_r+0x1b24>
 800644c:	d9002a17 	ldw	r4,168(sp)
 8006450:	05bff7c4 	movi	r22,-33
 8006454:	00bfffc4 	movi	r2,-1
 8006458:	8dac703a 	and	r22,r17,r22
 800645c:	20820026 	beq	r4,r2,8006c60 <___vfprintf_internal_r+0x1f78>
 8006460:	008011c4 	movi	r2,71
 8006464:	b081f726 	beq	r22,r2,8006c44 <___vfprintf_internal_r+0x1f5c>
 8006468:	d9003817 	ldw	r4,224(sp)
 800646c:	90c04014 	ori	r3,r18,256
 8006470:	d8c02c15 	stw	r3,176(sp)
 8006474:	20021516 	blt	r4,zero,8006ccc <___vfprintf_internal_r+0x1fe4>
 8006478:	dcc03817 	ldw	r19,224(sp)
 800647c:	d8002905 	stb	zero,164(sp)
 8006480:	00801984 	movi	r2,102
 8006484:	8881f926 	beq	r17,r2,8006c6c <___vfprintf_internal_r+0x1f84>
 8006488:	00801184 	movi	r2,70
 800648c:	88821c26 	beq	r17,r2,8006d00 <___vfprintf_internal_r+0x2018>
 8006490:	00801144 	movi	r2,69
 8006494:	b081ef26 	beq	r22,r2,8006c54 <___vfprintf_internal_r+0x1f6c>
 8006498:	d8c02a17 	ldw	r3,168(sp)
 800649c:	d8802104 	addi	r2,sp,132
 80064a0:	d8800315 	stw	r2,12(sp)
 80064a4:	d9403617 	ldw	r5,216(sp)
 80064a8:	d8802504 	addi	r2,sp,148
 80064ac:	d9002d17 	ldw	r4,180(sp)
 80064b0:	d8800215 	stw	r2,8(sp)
 80064b4:	d8802604 	addi	r2,sp,152
 80064b8:	d8c00015 	stw	r3,0(sp)
 80064bc:	d8800115 	stw	r2,4(sp)
 80064c0:	01c00084 	movi	r7,2
 80064c4:	980d883a 	mov	r6,r19
 80064c8:	d8c03c15 	stw	r3,240(sp)
 80064cc:	da003d15 	stw	r8,244(sp)
 80064d0:	80074180 	call	8007418 <_dtoa_r>
 80064d4:	1021883a 	mov	r16,r2
 80064d8:	008019c4 	movi	r2,103
 80064dc:	d8c03c17 	ldw	r3,240(sp)
 80064e0:	da003d17 	ldw	r8,244(sp)
 80064e4:	88817126 	beq	r17,r2,8006aac <___vfprintf_internal_r+0x1dc4>
 80064e8:	008011c4 	movi	r2,71
 80064ec:	88829126 	beq	r17,r2,8006f34 <___vfprintf_internal_r+0x224c>
 80064f0:	80f9883a 	add	fp,r16,r3
 80064f4:	d9003617 	ldw	r4,216(sp)
 80064f8:	000d883a 	mov	r6,zero
 80064fc:	000f883a 	mov	r7,zero
 8006500:	980b883a 	mov	r5,r19
 8006504:	da003d15 	stw	r8,244(sp)
 8006508:	80118c80 	call	80118c8 <__eqdf2>
 800650c:	da003d17 	ldw	r8,244(sp)
 8006510:	10018d26 	beq	r2,zero,8006b48 <___vfprintf_internal_r+0x1e60>
 8006514:	d8802117 	ldw	r2,132(sp)
 8006518:	1700062e 	bgeu	r2,fp,8006534 <___vfprintf_internal_r+0x184c>
 800651c:	01000c04 	movi	r4,48
 8006520:	10c00044 	addi	r3,r2,1
 8006524:	d8c02115 	stw	r3,132(sp)
 8006528:	11000005 	stb	r4,0(r2)
 800652c:	d8802117 	ldw	r2,132(sp)
 8006530:	173ffb36 	bltu	r2,fp,8006520 <__alt_data_end+0xfc006520>
 8006534:	1405c83a 	sub	r2,r2,r16
 8006538:	d8803315 	stw	r2,204(sp)
 800653c:	008011c4 	movi	r2,71
 8006540:	b0817626 	beq	r22,r2,8006b1c <___vfprintf_internal_r+0x1e34>
 8006544:	00801944 	movi	r2,101
 8006548:	1442800e 	bge	r2,r17,8006f4c <___vfprintf_internal_r+0x2264>
 800654c:	d8c02617 	ldw	r3,152(sp)
 8006550:	00801984 	movi	r2,102
 8006554:	d8c03215 	stw	r3,200(sp)
 8006558:	8881fe26 	beq	r17,r2,8006d54 <___vfprintf_internal_r+0x206c>
 800655c:	d8c03217 	ldw	r3,200(sp)
 8006560:	d9003317 	ldw	r4,204(sp)
 8006564:	1901dd16 	blt	r3,r4,8006cdc <___vfprintf_internal_r+0x1ff4>
 8006568:	9480004c 	andi	r18,r18,1
 800656c:	90022b1e 	bne	r18,zero,8006e1c <___vfprintf_internal_r+0x2134>
 8006570:	1805883a 	mov	r2,r3
 8006574:	18028316 	blt	r3,zero,8006f84 <___vfprintf_internal_r+0x229c>
 8006578:	d8c03217 	ldw	r3,200(sp)
 800657c:	044019c4 	movi	r17,103
 8006580:	d8c02b15 	stw	r3,172(sp)
 8006584:	df002907 	ldb	fp,164(sp)
 8006588:	e001531e 	bne	fp,zero,8006ad8 <___vfprintf_internal_r+0x1df0>
 800658c:	df002783 	ldbu	fp,158(sp)
 8006590:	d8802915 	stw	r2,164(sp)
 8006594:	dc802c17 	ldw	r18,176(sp)
 8006598:	d8002a15 	stw	zero,168(sp)
 800659c:	003baf06 	br	800545c <__alt_data_end+0xfc00545c>
 80065a0:	d8c02e17 	ldw	r3,184(sp)
 80065a4:	d9002e17 	ldw	r4,184(sp)
 80065a8:	d9402e17 	ldw	r5,184(sp)
 80065ac:	18c00017 	ldw	r3,0(r3)
 80065b0:	21000117 	ldw	r4,4(r4)
 80065b4:	29400204 	addi	r5,r5,8
 80065b8:	d8c03615 	stw	r3,216(sp)
 80065bc:	d9003815 	stw	r4,224(sp)
 80065c0:	d9402e15 	stw	r5,184(sp)
 80065c4:	003b5006 	br	8005308 <__alt_data_end+0xfc005308>
 80065c8:	ac400007 	ldb	r17,0(r21)
 80065cc:	003a2806 	br	8004e70 <__alt_data_end+0xfc004e70>
 80065d0:	9080100c 	andi	r2,r18,64
 80065d4:	1000a826 	beq	r2,zero,8006878 <___vfprintf_internal_r+0x1b90>
 80065d8:	d8c02e17 	ldw	r3,184(sp)
 80065dc:	002d883a 	mov	r22,zero
 80065e0:	1cc0000b 	ldhu	r19,0(r3)
 80065e4:	18c00104 	addi	r3,r3,4
 80065e8:	d8c02e15 	stw	r3,184(sp)
 80065ec:	003caf06 	br	80058ac <__alt_data_end+0xfc0058ac>
 80065f0:	d9002e17 	ldw	r4,184(sp)
 80065f4:	d9402a17 	ldw	r5,168(sp)
 80065f8:	002d883a 	mov	r22,zero
 80065fc:	20800104 	addi	r2,r4,4
 8006600:	24c00017 	ldw	r19,0(r4)
 8006604:	283ebb0e 	bge	r5,zero,80060f4 <__alt_data_end+0xfc0060f4>
 8006608:	003ef106 	br	80061d0 <__alt_data_end+0xfc0061d0>
 800660c:	9080040c 	andi	r2,r18,16
 8006610:	1000921e 	bne	r2,zero,800685c <___vfprintf_internal_r+0x1b74>
 8006614:	9480100c 	andi	r18,r18,64
 8006618:	90013926 	beq	r18,zero,8006b00 <___vfprintf_internal_r+0x1e18>
 800661c:	d9402e17 	ldw	r5,184(sp)
 8006620:	d8c02f17 	ldw	r3,188(sp)
 8006624:	28800017 	ldw	r2,0(r5)
 8006628:	29400104 	addi	r5,r5,4
 800662c:	d9402e15 	stw	r5,184(sp)
 8006630:	10c0000d 	sth	r3,0(r2)
 8006634:	0039e406 	br	8004dc8 <__alt_data_end+0xfc004dc8>
 8006638:	9080100c 	andi	r2,r18,64
 800663c:	10008026 	beq	r2,zero,8006840 <___vfprintf_internal_r+0x1b58>
 8006640:	d8802e17 	ldw	r2,184(sp)
 8006644:	14c0000f 	ldh	r19,0(r2)
 8006648:	10800104 	addi	r2,r2,4
 800664c:	d8802e15 	stw	r2,184(sp)
 8006650:	982dd7fa 	srai	r22,r19,31
 8006654:	b005883a 	mov	r2,r22
 8006658:	003af706 	br	8005238 <__alt_data_end+0xfc005238>
 800665c:	9080100c 	andi	r2,r18,64
 8006660:	d8002785 	stb	zero,158(sp)
 8006664:	10008a1e 	bne	r2,zero,8006890 <___vfprintf_internal_r+0x1ba8>
 8006668:	d9002e17 	ldw	r4,184(sp)
 800666c:	d9402a17 	ldw	r5,168(sp)
 8006670:	002d883a 	mov	r22,zero
 8006674:	20800104 	addi	r2,r4,4
 8006678:	24c00017 	ldw	r19,0(r4)
 800667c:	283e4b0e 	bge	r5,zero,8005fac <__alt_data_end+0xfc005fac>
 8006680:	9d86b03a 	or	r3,r19,r22
 8006684:	d8802e15 	stw	r2,184(sp)
 8006688:	183e4c1e 	bne	r3,zero,8005fbc <__alt_data_end+0xfc005fbc>
 800668c:	0039883a 	mov	fp,zero
 8006690:	0005883a 	mov	r2,zero
 8006694:	003d4006 	br	8005b98 <__alt_data_end+0xfc005b98>
 8006698:	01420074 	movhi	r5,2049
 800669c:	295eea84 	addi	r5,r5,31658
 80066a0:	d9402c15 	stw	r5,176(sp)
 80066a4:	d9402c17 	ldw	r5,176(sp)
 80066a8:	1c47883a 	add	r3,r3,r17
 80066ac:	10800044 	addi	r2,r2,1
 80066b0:	41400015 	stw	r5,0(r8)
 80066b4:	44400115 	stw	r17,4(r8)
 80066b8:	d8c02015 	stw	r3,128(sp)
 80066bc:	d8801f15 	stw	r2,124(sp)
 80066c0:	010001c4 	movi	r4,7
 80066c4:	20bec816 	blt	r4,r2,80061e8 <__alt_data_end+0xfc0061e8>
 80066c8:	42000204 	addi	r8,r8,8
 80066cc:	003ecd06 	br	8006204 <__alt_data_end+0xfc006204>
 80066d0:	d9002a17 	ldw	r4,168(sp)
 80066d4:	d8002785 	stb	zero,158(sp)
 80066d8:	203d2d16 	blt	r4,zero,8005b90 <__alt_data_end+0xfc005b90>
 80066dc:	00bfdfc4 	movi	r2,-129
 80066e0:	90a4703a 	and	r18,r18,r2
 80066e4:	003a6106 	br	800506c <__alt_data_end+0xfc00506c>
 80066e8:	01020074 	movhi	r4,2049
 80066ec:	211eea84 	addi	r4,r4,31658
 80066f0:	d9002c15 	stw	r4,176(sp)
 80066f4:	003bea06 	br	80056a0 <__alt_data_end+0xfc0056a0>
 80066f8:	d9002d17 	ldw	r4,180(sp)
 80066fc:	d9801e04 	addi	r6,sp,120
 8006700:	b80b883a 	mov	r5,r23
 8006704:	800da380 	call	800da38 <__sprint_r>
 8006708:	103a7b1e 	bne	r2,zero,80050f8 <__alt_data_end+0xfc0050f8>
 800670c:	d8c02017 	ldw	r3,128(sp)
 8006710:	da000404 	addi	r8,sp,16
 8006714:	003d4106 	br	8005c1c <__alt_data_end+0xfc005c1c>
 8006718:	d8801f17 	ldw	r2,124(sp)
 800671c:	01420074 	movhi	r5,2049
 8006720:	01000044 	movi	r4,1
 8006724:	18c00044 	addi	r3,r3,1
 8006728:	10800044 	addi	r2,r2,1
 800672c:	295ee204 	addi	r5,r5,31624
 8006730:	41000115 	stw	r4,4(r8)
 8006734:	41400015 	stw	r5,0(r8)
 8006738:	d8c02015 	stw	r3,128(sp)
 800673c:	d8801f15 	stw	r2,124(sp)
 8006740:	010001c4 	movi	r4,7
 8006744:	20805c16 	blt	r4,r2,80068b8 <___vfprintf_internal_r+0x1bd0>
 8006748:	42000204 	addi	r8,r8,8
 800674c:	8800041e 	bne	r17,zero,8006760 <___vfprintf_internal_r+0x1a78>
 8006750:	d8803317 	ldw	r2,204(sp)
 8006754:	1000021e 	bne	r2,zero,8006760 <___vfprintf_internal_r+0x1a78>
 8006758:	9080004c 	andi	r2,r18,1
 800675c:	103be726 	beq	r2,zero,80056fc <__alt_data_end+0xfc0056fc>
 8006760:	d9003717 	ldw	r4,220(sp)
 8006764:	d8801f17 	ldw	r2,124(sp)
 8006768:	d9403417 	ldw	r5,208(sp)
 800676c:	20c7883a 	add	r3,r4,r3
 8006770:	10800044 	addi	r2,r2,1
 8006774:	41000115 	stw	r4,4(r8)
 8006778:	41400015 	stw	r5,0(r8)
 800677c:	d8c02015 	stw	r3,128(sp)
 8006780:	d8801f15 	stw	r2,124(sp)
 8006784:	010001c4 	movi	r4,7
 8006788:	20812116 	blt	r4,r2,8006c10 <___vfprintf_internal_r+0x1f28>
 800678c:	42000204 	addi	r8,r8,8
 8006790:	0463c83a 	sub	r17,zero,r17
 8006794:	0440730e 	bge	zero,r17,8006964 <___vfprintf_internal_r+0x1c7c>
 8006798:	05800404 	movi	r22,16
 800679c:	b440860e 	bge	r22,r17,80069b8 <___vfprintf_internal_r+0x1cd0>
 80067a0:	01420074 	movhi	r5,2049
 80067a4:	295eea84 	addi	r5,r5,31658
 80067a8:	d9402c15 	stw	r5,176(sp)
 80067ac:	070001c4 	movi	fp,7
 80067b0:	dcc02d17 	ldw	r19,180(sp)
 80067b4:	00000306 	br	80067c4 <___vfprintf_internal_r+0x1adc>
 80067b8:	42000204 	addi	r8,r8,8
 80067bc:	8c7ffc04 	addi	r17,r17,-16
 80067c0:	b440800e 	bge	r22,r17,80069c4 <___vfprintf_internal_r+0x1cdc>
 80067c4:	18c00404 	addi	r3,r3,16
 80067c8:	10800044 	addi	r2,r2,1
 80067cc:	45000015 	stw	r20,0(r8)
 80067d0:	45800115 	stw	r22,4(r8)
 80067d4:	d8c02015 	stw	r3,128(sp)
 80067d8:	d8801f15 	stw	r2,124(sp)
 80067dc:	e0bff60e 	bge	fp,r2,80067b8 <__alt_data_end+0xfc0067b8>
 80067e0:	d9801e04 	addi	r6,sp,120
 80067e4:	b80b883a 	mov	r5,r23
 80067e8:	9809883a 	mov	r4,r19
 80067ec:	800da380 	call	800da38 <__sprint_r>
 80067f0:	103a411e 	bne	r2,zero,80050f8 <__alt_data_end+0xfc0050f8>
 80067f4:	d8c02017 	ldw	r3,128(sp)
 80067f8:	d8801f17 	ldw	r2,124(sp)
 80067fc:	da000404 	addi	r8,sp,16
 8006800:	003fee06 	br	80067bc <__alt_data_end+0xfc0067bc>
 8006804:	00bfffc4 	movi	r2,-1
 8006808:	003a3f06 	br	8005108 <__alt_data_end+0xfc005108>
 800680c:	008011c4 	movi	r2,71
 8006810:	1440b816 	blt	r2,r17,8006af4 <___vfprintf_internal_r+0x1e0c>
 8006814:	04020074 	movhi	r16,2049
 8006818:	841ed404 	addi	r16,r16,31568
 800681c:	00c000c4 	movi	r3,3
 8006820:	00bfdfc4 	movi	r2,-129
 8006824:	d8c02915 	stw	r3,164(sp)
 8006828:	90a4703a 	and	r18,r18,r2
 800682c:	df002783 	ldbu	fp,158(sp)
 8006830:	d8c02b15 	stw	r3,172(sp)
 8006834:	d8002a15 	stw	zero,168(sp)
 8006838:	d8003215 	stw	zero,200(sp)
 800683c:	003b0706 	br	800545c <__alt_data_end+0xfc00545c>
 8006840:	d8c02e17 	ldw	r3,184(sp)
 8006844:	1cc00017 	ldw	r19,0(r3)
 8006848:	18c00104 	addi	r3,r3,4
 800684c:	d8c02e15 	stw	r3,184(sp)
 8006850:	982dd7fa 	srai	r22,r19,31
 8006854:	b005883a 	mov	r2,r22
 8006858:	003a7706 	br	8005238 <__alt_data_end+0xfc005238>
 800685c:	d8c02e17 	ldw	r3,184(sp)
 8006860:	d9002f17 	ldw	r4,188(sp)
 8006864:	18800017 	ldw	r2,0(r3)
 8006868:	18c00104 	addi	r3,r3,4
 800686c:	d8c02e15 	stw	r3,184(sp)
 8006870:	11000015 	stw	r4,0(r2)
 8006874:	00395406 	br	8004dc8 <__alt_data_end+0xfc004dc8>
 8006878:	d9002e17 	ldw	r4,184(sp)
 800687c:	002d883a 	mov	r22,zero
 8006880:	24c00017 	ldw	r19,0(r4)
 8006884:	21000104 	addi	r4,r4,4
 8006888:	d9002e15 	stw	r4,184(sp)
 800688c:	003c0706 	br	80058ac <__alt_data_end+0xfc0058ac>
 8006890:	d9402e17 	ldw	r5,184(sp)
 8006894:	d8c02a17 	ldw	r3,168(sp)
 8006898:	002d883a 	mov	r22,zero
 800689c:	28800104 	addi	r2,r5,4
 80068a0:	2cc0000b 	ldhu	r19,0(r5)
 80068a4:	183dc10e 	bge	r3,zero,8005fac <__alt_data_end+0xfc005fac>
 80068a8:	003f7506 	br	8006680 <__alt_data_end+0xfc006680>
 80068ac:	04020074 	movhi	r16,2049
 80068b0:	841ed204 	addi	r16,r16,31560
 80068b4:	003aa706 	br	8005354 <__alt_data_end+0xfc005354>
 80068b8:	d9002d17 	ldw	r4,180(sp)
 80068bc:	d9801e04 	addi	r6,sp,120
 80068c0:	b80b883a 	mov	r5,r23
 80068c4:	800da380 	call	800da38 <__sprint_r>
 80068c8:	103a0b1e 	bne	r2,zero,80050f8 <__alt_data_end+0xfc0050f8>
 80068cc:	dc402617 	ldw	r17,152(sp)
 80068d0:	d8c02017 	ldw	r3,128(sp)
 80068d4:	da000404 	addi	r8,sp,16
 80068d8:	003f9c06 	br	800674c <__alt_data_end+0xfc00674c>
 80068dc:	ac400043 	ldbu	r17,1(r21)
 80068e0:	84000814 	ori	r16,r16,32
 80068e4:	ad400044 	addi	r21,r21,1
 80068e8:	8c403fcc 	andi	r17,r17,255
 80068ec:	8c40201c 	xori	r17,r17,128
 80068f0:	8c7fe004 	addi	r17,r17,-128
 80068f4:	00395e06 	br	8004e70 <__alt_data_end+0xfc004e70>
 80068f8:	d8c02e15 	stw	r3,184(sp)
 80068fc:	0039883a 	mov	fp,zero
 8006900:	003e3506 	br	80061d8 <__alt_data_end+0xfc0061d8>
 8006904:	d9002d17 	ldw	r4,180(sp)
 8006908:	d9801e04 	addi	r6,sp,120
 800690c:	b80b883a 	mov	r5,r23
 8006910:	800da380 	call	800da38 <__sprint_r>
 8006914:	1039f81e 	bne	r2,zero,80050f8 <__alt_data_end+0xfc0050f8>
 8006918:	d8c02017 	ldw	r3,128(sp)
 800691c:	da000404 	addi	r8,sp,16
 8006920:	003cd006 	br	8005c64 <__alt_data_end+0xfc005c64>
 8006924:	8009883a 	mov	r4,r16
 8006928:	df003d15 	stw	fp,244(sp)
 800692c:	80029940 	call	8002994 <strlen>
 8006930:	d8802b15 	stw	r2,172(sp)
 8006934:	da003d17 	ldw	r8,244(sp)
 8006938:	103c200e 	bge	r2,zero,80059bc <__alt_data_end+0xfc0059bc>
 800693c:	0005883a 	mov	r2,zero
 8006940:	003c1e06 	br	80059bc <__alt_data_end+0xfc0059bc>
 8006944:	d9002d17 	ldw	r4,180(sp)
 8006948:	d9801e04 	addi	r6,sp,120
 800694c:	b80b883a 	mov	r5,r23
 8006950:	800da380 	call	800da38 <__sprint_r>
 8006954:	1039e81e 	bne	r2,zero,80050f8 <__alt_data_end+0xfc0050f8>
 8006958:	d8c02017 	ldw	r3,128(sp)
 800695c:	d8801f17 	ldw	r2,124(sp)
 8006960:	da000404 	addi	r8,sp,16
 8006964:	d9403317 	ldw	r5,204(sp)
 8006968:	10800044 	addi	r2,r2,1
 800696c:	44000015 	stw	r16,0(r8)
 8006970:	28c7883a 	add	r3,r5,r3
 8006974:	003b5b06 	br	80056e4 <__alt_data_end+0xfc0056e4>
 8006978:	01020074 	movhi	r4,2049
 800697c:	211eee84 	addi	r4,r4,31674
 8006980:	d9003515 	stw	r4,212(sp)
 8006984:	003af206 	br	8005550 <__alt_data_end+0xfc005550>
 8006988:	013fffc4 	movi	r4,-1
 800698c:	003a0806 	br	80051b0 <__alt_data_end+0xfc0051b0>
 8006990:	0023883a 	mov	r17,zero
 8006994:	003d9d06 	br	800600c <__alt_data_end+0xfc00600c>
 8006998:	d9002d17 	ldw	r4,180(sp)
 800699c:	d9801e04 	addi	r6,sp,120
 80069a0:	b80b883a 	mov	r5,r23
 80069a4:	800da380 	call	800da38 <__sprint_r>
 80069a8:	1039d31e 	bne	r2,zero,80050f8 <__alt_data_end+0xfc0050f8>
 80069ac:	d8c02017 	ldw	r3,128(sp)
 80069b0:	da000404 	addi	r8,sp,16
 80069b4:	003d9406 	br	8006008 <__alt_data_end+0xfc006008>
 80069b8:	01020074 	movhi	r4,2049
 80069bc:	211eea84 	addi	r4,r4,31658
 80069c0:	d9002c15 	stw	r4,176(sp)
 80069c4:	d9002c17 	ldw	r4,176(sp)
 80069c8:	1c47883a 	add	r3,r3,r17
 80069cc:	10800044 	addi	r2,r2,1
 80069d0:	41000015 	stw	r4,0(r8)
 80069d4:	44400115 	stw	r17,4(r8)
 80069d8:	d8c02015 	stw	r3,128(sp)
 80069dc:	d8801f15 	stw	r2,124(sp)
 80069e0:	010001c4 	movi	r4,7
 80069e4:	20bfd716 	blt	r4,r2,8006944 <__alt_data_end+0xfc006944>
 80069e8:	42000204 	addi	r8,r8,8
 80069ec:	003fdd06 	br	8006964 <__alt_data_end+0xfc006964>
 80069f0:	d9002d17 	ldw	r4,180(sp)
 80069f4:	d9801e04 	addi	r6,sp,120
 80069f8:	b80b883a 	mov	r5,r23
 80069fc:	800da380 	call	800da38 <__sprint_r>
 8006a00:	1039bd1e 	bne	r2,zero,80050f8 <__alt_data_end+0xfc0050f8>
 8006a04:	d8802617 	ldw	r2,152(sp)
 8006a08:	d8c02017 	ldw	r3,128(sp)
 8006a0c:	da000404 	addi	r8,sp,16
 8006a10:	003e1006 	br	8006254 <__alt_data_end+0xfc006254>
 8006a14:	00800044 	movi	r2,1
 8006a18:	10803fcc 	andi	r2,r2,255
 8006a1c:	00c00044 	movi	r3,1
 8006a20:	10fa0d26 	beq	r2,r3,8005258 <__alt_data_end+0xfc005258>
 8006a24:	00c00084 	movi	r3,2
 8006a28:	10fbaf26 	beq	r2,r3,80058e8 <__alt_data_end+0xfc0058e8>
 8006a2c:	003a6d06 	br	80053e4 <__alt_data_end+0xfc0053e4>
 8006a30:	01020074 	movhi	r4,2049
 8006a34:	211eee84 	addi	r4,r4,31674
 8006a38:	d9003515 	stw	r4,212(sp)
 8006a3c:	003b5406 	br	8005790 <__alt_data_end+0xfc005790>
 8006a40:	d8802a17 	ldw	r2,168(sp)
 8006a44:	00c00184 	movi	r3,6
 8006a48:	1880012e 	bgeu	r3,r2,8006a50 <___vfprintf_internal_r+0x1d68>
 8006a4c:	1805883a 	mov	r2,r3
 8006a50:	d8802b15 	stw	r2,172(sp)
 8006a54:	1000ef16 	blt	r2,zero,8006e14 <___vfprintf_internal_r+0x212c>
 8006a58:	04020074 	movhi	r16,2049
 8006a5c:	d8802915 	stw	r2,164(sp)
 8006a60:	dcc02e15 	stw	r19,184(sp)
 8006a64:	d8002a15 	stw	zero,168(sp)
 8006a68:	d8003215 	stw	zero,200(sp)
 8006a6c:	841ee004 	addi	r16,r16,31616
 8006a70:	0039883a 	mov	fp,zero
 8006a74:	003a8006 	br	8005478 <__alt_data_end+0xfc005478>
 8006a78:	0021883a 	mov	r16,zero
 8006a7c:	003e0706 	br	800629c <__alt_data_end+0xfc00629c>
 8006a80:	d9002d17 	ldw	r4,180(sp)
 8006a84:	d9801e04 	addi	r6,sp,120
 8006a88:	b80b883a 	mov	r5,r23
 8006a8c:	800da380 	call	800da38 <__sprint_r>
 8006a90:	1039991e 	bne	r2,zero,80050f8 <__alt_data_end+0xfc0050f8>
 8006a94:	d8802617 	ldw	r2,152(sp)
 8006a98:	d9403317 	ldw	r5,204(sp)
 8006a9c:	d8c02017 	ldw	r3,128(sp)
 8006aa0:	da000404 	addi	r8,sp,16
 8006aa4:	2885c83a 	sub	r2,r5,r2
 8006aa8:	003dfb06 	br	8006298 <__alt_data_end+0xfc006298>
 8006aac:	9080004c 	andi	r2,r18,1
 8006ab0:	103e8f1e 	bne	r2,zero,80064f0 <__alt_data_end+0xfc0064f0>
 8006ab4:	d8802117 	ldw	r2,132(sp)
 8006ab8:	003e9e06 	br	8006534 <__alt_data_end+0xfc006534>
 8006abc:	1025883a 	mov	r18,r2
 8006ac0:	0039883a 	mov	fp,zero
 8006ac4:	00800084 	movi	r2,2
 8006ac8:	003fd306 	br	8006a18 <__alt_data_end+0xfc006a18>
 8006acc:	07000b44 	movi	fp,45
 8006ad0:	df002785 	stb	fp,158(sp)
 8006ad4:	003a1b06 	br	8005344 <__alt_data_end+0xfc005344>
 8006ad8:	00c00b44 	movi	r3,45
 8006adc:	d8c02785 	stb	r3,158(sp)
 8006ae0:	d8802915 	stw	r2,164(sp)
 8006ae4:	dc802c17 	ldw	r18,176(sp)
 8006ae8:	d8002a15 	stw	zero,168(sp)
 8006aec:	07000b44 	movi	fp,45
 8006af0:	003a5e06 	br	800546c <__alt_data_end+0xfc00546c>
 8006af4:	04020074 	movhi	r16,2049
 8006af8:	841ed504 	addi	r16,r16,31572
 8006afc:	003f4706 	br	800681c <__alt_data_end+0xfc00681c>
 8006b00:	d9002e17 	ldw	r4,184(sp)
 8006b04:	d9402f17 	ldw	r5,188(sp)
 8006b08:	20800017 	ldw	r2,0(r4)
 8006b0c:	21000104 	addi	r4,r4,4
 8006b10:	d9002e15 	stw	r4,184(sp)
 8006b14:	11400015 	stw	r5,0(r2)
 8006b18:	0038ab06 	br	8004dc8 <__alt_data_end+0xfc004dc8>
 8006b1c:	dd802617 	ldw	r22,152(sp)
 8006b20:	00bfff44 	movi	r2,-3
 8006b24:	b0801c16 	blt	r22,r2,8006b98 <___vfprintf_internal_r+0x1eb0>
 8006b28:	d9402a17 	ldw	r5,168(sp)
 8006b2c:	2d801a16 	blt	r5,r22,8006b98 <___vfprintf_internal_r+0x1eb0>
 8006b30:	dd803215 	stw	r22,200(sp)
 8006b34:	003e8906 	br	800655c <__alt_data_end+0xfc00655c>
 8006b38:	01020074 	movhi	r4,2049
 8006b3c:	211eea84 	addi	r4,r4,31658
 8006b40:	d9002c15 	stw	r4,176(sp)
 8006b44:	003c9106 	br	8005d8c <__alt_data_end+0xfc005d8c>
 8006b48:	e005883a 	mov	r2,fp
 8006b4c:	003e7906 	br	8006534 <__alt_data_end+0xfc006534>
 8006b50:	d9002a17 	ldw	r4,168(sp)
 8006b54:	df002783 	ldbu	fp,158(sp)
 8006b58:	dcc02e15 	stw	r19,184(sp)
 8006b5c:	d9002915 	stw	r4,164(sp)
 8006b60:	d9002b15 	stw	r4,172(sp)
 8006b64:	d8002a15 	stw	zero,168(sp)
 8006b68:	d8003215 	stw	zero,200(sp)
 8006b6c:	003a3b06 	br	800545c <__alt_data_end+0xfc00545c>
 8006b70:	9080004c 	andi	r2,r18,1
 8006b74:	0039883a 	mov	fp,zero
 8006b78:	10000426 	beq	r2,zero,8006b8c <___vfprintf_internal_r+0x1ea4>
 8006b7c:	00800c04 	movi	r2,48
 8006b80:	dc001dc4 	addi	r16,sp,119
 8006b84:	d8801dc5 	stb	r2,119(sp)
 8006b88:	003b6406 	br	800591c <__alt_data_end+0xfc00591c>
 8006b8c:	d8002b15 	stw	zero,172(sp)
 8006b90:	dc001e04 	addi	r16,sp,120
 8006b94:	003a2b06 	br	8005444 <__alt_data_end+0xfc005444>
 8006b98:	8c7fff84 	addi	r17,r17,-2
 8006b9c:	b5bfffc4 	addi	r22,r22,-1
 8006ba0:	dd802615 	stw	r22,152(sp)
 8006ba4:	dc4022c5 	stb	r17,139(sp)
 8006ba8:	b000bf16 	blt	r22,zero,8006ea8 <___vfprintf_internal_r+0x21c0>
 8006bac:	00800ac4 	movi	r2,43
 8006bb0:	d8802305 	stb	r2,140(sp)
 8006bb4:	00800244 	movi	r2,9
 8006bb8:	15807016 	blt	r2,r22,8006d7c <___vfprintf_internal_r+0x2094>
 8006bbc:	00800c04 	movi	r2,48
 8006bc0:	b5800c04 	addi	r22,r22,48
 8006bc4:	d8802345 	stb	r2,141(sp)
 8006bc8:	dd802385 	stb	r22,142(sp)
 8006bcc:	d88023c4 	addi	r2,sp,143
 8006bd0:	df0022c4 	addi	fp,sp,139
 8006bd4:	d8c03317 	ldw	r3,204(sp)
 8006bd8:	1739c83a 	sub	fp,r2,fp
 8006bdc:	d9003317 	ldw	r4,204(sp)
 8006be0:	e0c7883a 	add	r3,fp,r3
 8006be4:	df003a15 	stw	fp,232(sp)
 8006be8:	d8c02b15 	stw	r3,172(sp)
 8006bec:	00800044 	movi	r2,1
 8006bf0:	1100b30e 	bge	r2,r4,8006ec0 <___vfprintf_internal_r+0x21d8>
 8006bf4:	d8c02b17 	ldw	r3,172(sp)
 8006bf8:	18c00044 	addi	r3,r3,1
 8006bfc:	d8c02b15 	stw	r3,172(sp)
 8006c00:	1805883a 	mov	r2,r3
 8006c04:	1800ac16 	blt	r3,zero,8006eb8 <___vfprintf_internal_r+0x21d0>
 8006c08:	d8003215 	stw	zero,200(sp)
 8006c0c:	003e5d06 	br	8006584 <__alt_data_end+0xfc006584>
 8006c10:	d9002d17 	ldw	r4,180(sp)
 8006c14:	d9801e04 	addi	r6,sp,120
 8006c18:	b80b883a 	mov	r5,r23
 8006c1c:	800da380 	call	800da38 <__sprint_r>
 8006c20:	1039351e 	bne	r2,zero,80050f8 <__alt_data_end+0xfc0050f8>
 8006c24:	dc402617 	ldw	r17,152(sp)
 8006c28:	d8c02017 	ldw	r3,128(sp)
 8006c2c:	d8801f17 	ldw	r2,124(sp)
 8006c30:	da000404 	addi	r8,sp,16
 8006c34:	003ed606 	br	8006790 <__alt_data_end+0xfc006790>
 8006c38:	182b883a 	mov	r21,r3
 8006c3c:	d8002a15 	stw	zero,168(sp)
 8006c40:	00388c06 	br	8004e74 <__alt_data_end+0xfc004e74>
 8006c44:	d8802a17 	ldw	r2,168(sp)
 8006c48:	103e071e 	bne	r2,zero,8006468 <__alt_data_end+0xfc006468>
 8006c4c:	dc002a15 	stw	r16,168(sp)
 8006c50:	003e0506 	br	8006468 <__alt_data_end+0xfc006468>
 8006c54:	d9002a17 	ldw	r4,168(sp)
 8006c58:	20c00044 	addi	r3,r4,1
 8006c5c:	003e0f06 	br	800649c <__alt_data_end+0xfc00649c>
 8006c60:	01400184 	movi	r5,6
 8006c64:	d9402a15 	stw	r5,168(sp)
 8006c68:	003dff06 	br	8006468 <__alt_data_end+0xfc006468>
 8006c6c:	d8802104 	addi	r2,sp,132
 8006c70:	d8800315 	stw	r2,12(sp)
 8006c74:	d8802504 	addi	r2,sp,148
 8006c78:	d8800215 	stw	r2,8(sp)
 8006c7c:	d8802604 	addi	r2,sp,152
 8006c80:	d8800115 	stw	r2,4(sp)
 8006c84:	d8802a17 	ldw	r2,168(sp)
 8006c88:	d9403617 	ldw	r5,216(sp)
 8006c8c:	d9002d17 	ldw	r4,180(sp)
 8006c90:	d8800015 	stw	r2,0(sp)
 8006c94:	01c000c4 	movi	r7,3
 8006c98:	980d883a 	mov	r6,r19
 8006c9c:	da003d15 	stw	r8,244(sp)
 8006ca0:	80074180 	call	8007418 <_dtoa_r>
 8006ca4:	d8c02a17 	ldw	r3,168(sp)
 8006ca8:	da003d17 	ldw	r8,244(sp)
 8006cac:	1021883a 	mov	r16,r2
 8006cb0:	10f9883a 	add	fp,r2,r3
 8006cb4:	81000007 	ldb	r4,0(r16)
 8006cb8:	00800c04 	movi	r2,48
 8006cbc:	20805e26 	beq	r4,r2,8006e38 <___vfprintf_internal_r+0x2150>
 8006cc0:	d8c02617 	ldw	r3,152(sp)
 8006cc4:	e0f9883a 	add	fp,fp,r3
 8006cc8:	003e0a06 	br	80064f4 <__alt_data_end+0xfc0064f4>
 8006ccc:	00c00b44 	movi	r3,45
 8006cd0:	24e0003c 	xorhi	r19,r4,32768
 8006cd4:	d8c02905 	stb	r3,164(sp)
 8006cd8:	003de906 	br	8006480 <__alt_data_end+0xfc006480>
 8006cdc:	d8c03217 	ldw	r3,200(sp)
 8006ce0:	00c07a0e 	bge	zero,r3,8006ecc <___vfprintf_internal_r+0x21e4>
 8006ce4:	00800044 	movi	r2,1
 8006ce8:	d9003317 	ldw	r4,204(sp)
 8006cec:	1105883a 	add	r2,r2,r4
 8006cf0:	d8802b15 	stw	r2,172(sp)
 8006cf4:	10004e16 	blt	r2,zero,8006e30 <___vfprintf_internal_r+0x2148>
 8006cf8:	044019c4 	movi	r17,103
 8006cfc:	003e2106 	br	8006584 <__alt_data_end+0xfc006584>
 8006d00:	d9002a17 	ldw	r4,168(sp)
 8006d04:	d8802104 	addi	r2,sp,132
 8006d08:	d8800315 	stw	r2,12(sp)
 8006d0c:	d9000015 	stw	r4,0(sp)
 8006d10:	d8802504 	addi	r2,sp,148
 8006d14:	d9403617 	ldw	r5,216(sp)
 8006d18:	d9002d17 	ldw	r4,180(sp)
 8006d1c:	d8800215 	stw	r2,8(sp)
 8006d20:	d8802604 	addi	r2,sp,152
 8006d24:	d8800115 	stw	r2,4(sp)
 8006d28:	01c000c4 	movi	r7,3
 8006d2c:	980d883a 	mov	r6,r19
 8006d30:	da003d15 	stw	r8,244(sp)
 8006d34:	80074180 	call	8007418 <_dtoa_r>
 8006d38:	d8c02a17 	ldw	r3,168(sp)
 8006d3c:	da003d17 	ldw	r8,244(sp)
 8006d40:	1021883a 	mov	r16,r2
 8006d44:	00801184 	movi	r2,70
 8006d48:	80f9883a 	add	fp,r16,r3
 8006d4c:	88bfd926 	beq	r17,r2,8006cb4 <__alt_data_end+0xfc006cb4>
 8006d50:	003de806 	br	80064f4 <__alt_data_end+0xfc0064f4>
 8006d54:	d9002a17 	ldw	r4,168(sp)
 8006d58:	00c04d0e 	bge	zero,r3,8006e90 <___vfprintf_internal_r+0x21a8>
 8006d5c:	2000441e 	bne	r4,zero,8006e70 <___vfprintf_internal_r+0x2188>
 8006d60:	9480004c 	andi	r18,r18,1
 8006d64:	9000421e 	bne	r18,zero,8006e70 <___vfprintf_internal_r+0x2188>
 8006d68:	1805883a 	mov	r2,r3
 8006d6c:	18006f16 	blt	r3,zero,8006f2c <___vfprintf_internal_r+0x2244>
 8006d70:	d8c03217 	ldw	r3,200(sp)
 8006d74:	d8c02b15 	stw	r3,172(sp)
 8006d78:	003e0206 	br	8006584 <__alt_data_end+0xfc006584>
 8006d7c:	df0022c4 	addi	fp,sp,139
 8006d80:	dc002a15 	stw	r16,168(sp)
 8006d84:	4027883a 	mov	r19,r8
 8006d88:	e021883a 	mov	r16,fp
 8006d8c:	b009883a 	mov	r4,r22
 8006d90:	01400284 	movi	r5,10
 8006d94:	8001a280 	call	8001a28 <__modsi3>
 8006d98:	10800c04 	addi	r2,r2,48
 8006d9c:	843fffc4 	addi	r16,r16,-1
 8006da0:	b009883a 	mov	r4,r22
 8006da4:	01400284 	movi	r5,10
 8006da8:	80800005 	stb	r2,0(r16)
 8006dac:	80019a40 	call	80019a4 <__divsi3>
 8006db0:	102d883a 	mov	r22,r2
 8006db4:	00800244 	movi	r2,9
 8006db8:	15bff416 	blt	r2,r22,8006d8c <__alt_data_end+0xfc006d8c>
 8006dbc:	9811883a 	mov	r8,r19
 8006dc0:	b0800c04 	addi	r2,r22,48
 8006dc4:	8027883a 	mov	r19,r16
 8006dc8:	997fffc4 	addi	r5,r19,-1
 8006dcc:	98bfffc5 	stb	r2,-1(r19)
 8006dd0:	dc002a17 	ldw	r16,168(sp)
 8006dd4:	2f006d2e 	bgeu	r5,fp,8006f8c <___vfprintf_internal_r+0x22a4>
 8006dd8:	d9c02384 	addi	r7,sp,142
 8006ddc:	3ccfc83a 	sub	r7,r7,r19
 8006de0:	d9002344 	addi	r4,sp,141
 8006de4:	e1cf883a 	add	r7,fp,r7
 8006de8:	00000106 	br	8006df0 <___vfprintf_internal_r+0x2108>
 8006dec:	28800003 	ldbu	r2,0(r5)
 8006df0:	20800005 	stb	r2,0(r4)
 8006df4:	21000044 	addi	r4,r4,1
 8006df8:	29400044 	addi	r5,r5,1
 8006dfc:	393ffb1e 	bne	r7,r4,8006dec <__alt_data_end+0xfc006dec>
 8006e00:	d8802304 	addi	r2,sp,140
 8006e04:	14c5c83a 	sub	r2,r2,r19
 8006e08:	d8c02344 	addi	r3,sp,141
 8006e0c:	1885883a 	add	r2,r3,r2
 8006e10:	003f7006 	br	8006bd4 <__alt_data_end+0xfc006bd4>
 8006e14:	0005883a 	mov	r2,zero
 8006e18:	003f0f06 	br	8006a58 <__alt_data_end+0xfc006a58>
 8006e1c:	d8c03217 	ldw	r3,200(sp)
 8006e20:	18c00044 	addi	r3,r3,1
 8006e24:	d8c02b15 	stw	r3,172(sp)
 8006e28:	1805883a 	mov	r2,r3
 8006e2c:	183fb20e 	bge	r3,zero,8006cf8 <__alt_data_end+0xfc006cf8>
 8006e30:	0005883a 	mov	r2,zero
 8006e34:	003fb006 	br	8006cf8 <__alt_data_end+0xfc006cf8>
 8006e38:	d9003617 	ldw	r4,216(sp)
 8006e3c:	000d883a 	mov	r6,zero
 8006e40:	000f883a 	mov	r7,zero
 8006e44:	980b883a 	mov	r5,r19
 8006e48:	d8c03c15 	stw	r3,240(sp)
 8006e4c:	da003d15 	stw	r8,244(sp)
 8006e50:	80118c80 	call	80118c8 <__eqdf2>
 8006e54:	d8c03c17 	ldw	r3,240(sp)
 8006e58:	da003d17 	ldw	r8,244(sp)
 8006e5c:	103f9826 	beq	r2,zero,8006cc0 <__alt_data_end+0xfc006cc0>
 8006e60:	00800044 	movi	r2,1
 8006e64:	10c7c83a 	sub	r3,r2,r3
 8006e68:	d8c02615 	stw	r3,152(sp)
 8006e6c:	003f9506 	br	8006cc4 <__alt_data_end+0xfc006cc4>
 8006e70:	d9002a17 	ldw	r4,168(sp)
 8006e74:	d8c03217 	ldw	r3,200(sp)
 8006e78:	20800044 	addi	r2,r4,1
 8006e7c:	1885883a 	add	r2,r3,r2
 8006e80:	d8802b15 	stw	r2,172(sp)
 8006e84:	103dbf0e 	bge	r2,zero,8006584 <__alt_data_end+0xfc006584>
 8006e88:	0005883a 	mov	r2,zero
 8006e8c:	003dbd06 	br	8006584 <__alt_data_end+0xfc006584>
 8006e90:	2000201e 	bne	r4,zero,8006f14 <___vfprintf_internal_r+0x222c>
 8006e94:	9480004c 	andi	r18,r18,1
 8006e98:	90001e1e 	bne	r18,zero,8006f14 <___vfprintf_internal_r+0x222c>
 8006e9c:	00800044 	movi	r2,1
 8006ea0:	d8802b15 	stw	r2,172(sp)
 8006ea4:	003db706 	br	8006584 <__alt_data_end+0xfc006584>
 8006ea8:	00800b44 	movi	r2,45
 8006eac:	05adc83a 	sub	r22,zero,r22
 8006eb0:	d8802305 	stb	r2,140(sp)
 8006eb4:	003f3f06 	br	8006bb4 <__alt_data_end+0xfc006bb4>
 8006eb8:	0005883a 	mov	r2,zero
 8006ebc:	003f5206 	br	8006c08 <__alt_data_end+0xfc006c08>
 8006ec0:	90a4703a 	and	r18,r18,r2
 8006ec4:	903f4e26 	beq	r18,zero,8006c00 <__alt_data_end+0xfc006c00>
 8006ec8:	003f4a06 	br	8006bf4 <__alt_data_end+0xfc006bf4>
 8006ecc:	00800084 	movi	r2,2
 8006ed0:	10c5c83a 	sub	r2,r2,r3
 8006ed4:	003f8406 	br	8006ce8 <__alt_data_end+0xfc006ce8>
 8006ed8:	d9402e17 	ldw	r5,184(sp)
 8006edc:	d9002e17 	ldw	r4,184(sp)
 8006ee0:	ac400043 	ldbu	r17,1(r21)
 8006ee4:	29400017 	ldw	r5,0(r5)
 8006ee8:	20800104 	addi	r2,r4,4
 8006eec:	d8802e15 	stw	r2,184(sp)
 8006ef0:	d9402a15 	stw	r5,168(sp)
 8006ef4:	182b883a 	mov	r21,r3
 8006ef8:	283e7b0e 	bge	r5,zero,80068e8 <__alt_data_end+0xfc0068e8>
 8006efc:	8c403fcc 	andi	r17,r17,255
 8006f00:	017fffc4 	movi	r5,-1
 8006f04:	8c40201c 	xori	r17,r17,128
 8006f08:	d9402a15 	stw	r5,168(sp)
 8006f0c:	8c7fe004 	addi	r17,r17,-128
 8006f10:	0037d706 	br	8004e70 <__alt_data_end+0xfc004e70>
 8006f14:	d8c02a17 	ldw	r3,168(sp)
 8006f18:	18c00084 	addi	r3,r3,2
 8006f1c:	d8c02b15 	stw	r3,172(sp)
 8006f20:	1805883a 	mov	r2,r3
 8006f24:	183d970e 	bge	r3,zero,8006584 <__alt_data_end+0xfc006584>
 8006f28:	003fd706 	br	8006e88 <__alt_data_end+0xfc006e88>
 8006f2c:	0005883a 	mov	r2,zero
 8006f30:	003f8f06 	br	8006d70 <__alt_data_end+0xfc006d70>
 8006f34:	9080004c 	andi	r2,r18,1
 8006f38:	103f821e 	bne	r2,zero,8006d44 <__alt_data_end+0xfc006d44>
 8006f3c:	d8802117 	ldw	r2,132(sp)
 8006f40:	1405c83a 	sub	r2,r2,r16
 8006f44:	d8803315 	stw	r2,204(sp)
 8006f48:	b47ef426 	beq	r22,r17,8006b1c <__alt_data_end+0xfc006b1c>
 8006f4c:	dd802617 	ldw	r22,152(sp)
 8006f50:	003f1206 	br	8006b9c <__alt_data_end+0xfc006b9c>
 8006f54:	d8c02b03 	ldbu	r3,172(sp)
 8006f58:	d8c02785 	stb	r3,158(sp)
 8006f5c:	0038df06 	br	80052dc <__alt_data_end+0xfc0052dc>
 8006f60:	d8c02b03 	ldbu	r3,172(sp)
 8006f64:	d8c02785 	stb	r3,158(sp)
 8006f68:	0038aa06 	br	8005214 <__alt_data_end+0xfc005214>
 8006f6c:	d8c02b03 	ldbu	r3,172(sp)
 8006f70:	d8c02785 	stb	r3,158(sp)
 8006f74:	003a4306 	br	8005884 <__alt_data_end+0xfc005884>
 8006f78:	d8c02b03 	ldbu	r3,172(sp)
 8006f7c:	d8c02785 	stb	r3,158(sp)
 8006f80:	003af506 	br	8005b58 <__alt_data_end+0xfc005b58>
 8006f84:	0005883a 	mov	r2,zero
 8006f88:	003d7b06 	br	8006578 <__alt_data_end+0xfc006578>
 8006f8c:	d8802344 	addi	r2,sp,141
 8006f90:	003f1006 	br	8006bd4 <__alt_data_end+0xfc006bd4>
 8006f94:	d8c02b03 	ldbu	r3,172(sp)
 8006f98:	d8c02785 	stb	r3,158(sp)
 8006f9c:	0038fd06 	br	8005394 <__alt_data_end+0xfc005394>
 8006fa0:	d8c02b03 	ldbu	r3,172(sp)
 8006fa4:	d8c02785 	stb	r3,158(sp)
 8006fa8:	003a9706 	br	8005a08 <__alt_data_end+0xfc005a08>
 8006fac:	d8c02b03 	ldbu	r3,172(sp)
 8006fb0:	d8c02785 	stb	r3,158(sp)
 8006fb4:	003a1806 	br	8005818 <__alt_data_end+0xfc005818>
 8006fb8:	d8c02b03 	ldbu	r3,172(sp)
 8006fbc:	d8c02785 	stb	r3,158(sp)
 8006fc0:	003abe06 	br	8005abc <__alt_data_end+0xfc005abc>

08006fc4 <__vfprintf_internal>:
 8006fc4:	008200b4 	movhi	r2,2050
 8006fc8:	10a73d04 	addi	r2,r2,-25356
 8006fcc:	300f883a 	mov	r7,r6
 8006fd0:	280d883a 	mov	r6,r5
 8006fd4:	200b883a 	mov	r5,r4
 8006fd8:	11000017 	ldw	r4,0(r2)
 8006fdc:	8004ce81 	jmpi	8004ce8 <___vfprintf_internal_r>

08006fe0 <__sbprintf>:
 8006fe0:	2880030b 	ldhu	r2,12(r5)
 8006fe4:	2ac01917 	ldw	r11,100(r5)
 8006fe8:	2a80038b 	ldhu	r10,14(r5)
 8006fec:	2a400717 	ldw	r9,28(r5)
 8006ff0:	2a000917 	ldw	r8,36(r5)
 8006ff4:	defee204 	addi	sp,sp,-1144
 8006ff8:	00c10004 	movi	r3,1024
 8006ffc:	dc011a15 	stw	r16,1128(sp)
 8007000:	10bfff4c 	andi	r2,r2,65533
 8007004:	2821883a 	mov	r16,r5
 8007008:	d8cb883a 	add	r5,sp,r3
 800700c:	dc811c15 	stw	r18,1136(sp)
 8007010:	dc411b15 	stw	r17,1132(sp)
 8007014:	dfc11d15 	stw	ra,1140(sp)
 8007018:	2025883a 	mov	r18,r4
 800701c:	d881030d 	sth	r2,1036(sp)
 8007020:	dac11915 	stw	r11,1124(sp)
 8007024:	da81038d 	sth	r10,1038(sp)
 8007028:	da410715 	stw	r9,1052(sp)
 800702c:	da010915 	stw	r8,1060(sp)
 8007030:	dec10015 	stw	sp,1024(sp)
 8007034:	dec10415 	stw	sp,1040(sp)
 8007038:	d8c10215 	stw	r3,1032(sp)
 800703c:	d8c10515 	stw	r3,1044(sp)
 8007040:	d8010615 	stw	zero,1048(sp)
 8007044:	8004ce80 	call	8004ce8 <___vfprintf_internal_r>
 8007048:	1023883a 	mov	r17,r2
 800704c:	10000416 	blt	r2,zero,8007060 <__sbprintf+0x80>
 8007050:	d9410004 	addi	r5,sp,1024
 8007054:	9009883a 	mov	r4,r18
 8007058:	8008cbc0 	call	8008cbc <_fflush_r>
 800705c:	10000d1e 	bne	r2,zero,8007094 <__sbprintf+0xb4>
 8007060:	d881030b 	ldhu	r2,1036(sp)
 8007064:	1080100c 	andi	r2,r2,64
 8007068:	10000326 	beq	r2,zero,8007078 <__sbprintf+0x98>
 800706c:	8080030b 	ldhu	r2,12(r16)
 8007070:	10801014 	ori	r2,r2,64
 8007074:	8080030d 	sth	r2,12(r16)
 8007078:	8805883a 	mov	r2,r17
 800707c:	dfc11d17 	ldw	ra,1140(sp)
 8007080:	dc811c17 	ldw	r18,1136(sp)
 8007084:	dc411b17 	ldw	r17,1132(sp)
 8007088:	dc011a17 	ldw	r16,1128(sp)
 800708c:	dec11e04 	addi	sp,sp,1144
 8007090:	f800283a 	ret
 8007094:	047fffc4 	movi	r17,-1
 8007098:	003ff106 	br	8007060 <__alt_data_end+0xfc007060>

0800709c <__swsetup_r>:
 800709c:	008200b4 	movhi	r2,2050
 80070a0:	defffd04 	addi	sp,sp,-12
 80070a4:	10a73d04 	addi	r2,r2,-25356
 80070a8:	dc400115 	stw	r17,4(sp)
 80070ac:	2023883a 	mov	r17,r4
 80070b0:	11000017 	ldw	r4,0(r2)
 80070b4:	dc000015 	stw	r16,0(sp)
 80070b8:	dfc00215 	stw	ra,8(sp)
 80070bc:	2821883a 	mov	r16,r5
 80070c0:	20000226 	beq	r4,zero,80070cc <__swsetup_r+0x30>
 80070c4:	20800e17 	ldw	r2,56(r4)
 80070c8:	10003126 	beq	r2,zero,8007190 <__swsetup_r+0xf4>
 80070cc:	8080030b 	ldhu	r2,12(r16)
 80070d0:	10c0020c 	andi	r3,r2,8
 80070d4:	1009883a 	mov	r4,r2
 80070d8:	18000f26 	beq	r3,zero,8007118 <__swsetup_r+0x7c>
 80070dc:	80c00417 	ldw	r3,16(r16)
 80070e0:	18001526 	beq	r3,zero,8007138 <__swsetup_r+0x9c>
 80070e4:	1100004c 	andi	r4,r2,1
 80070e8:	20001c1e 	bne	r4,zero,800715c <__swsetup_r+0xc0>
 80070ec:	1080008c 	andi	r2,r2,2
 80070f0:	1000291e 	bne	r2,zero,8007198 <__swsetup_r+0xfc>
 80070f4:	80800517 	ldw	r2,20(r16)
 80070f8:	80800215 	stw	r2,8(r16)
 80070fc:	18001c26 	beq	r3,zero,8007170 <__swsetup_r+0xd4>
 8007100:	0005883a 	mov	r2,zero
 8007104:	dfc00217 	ldw	ra,8(sp)
 8007108:	dc400117 	ldw	r17,4(sp)
 800710c:	dc000017 	ldw	r16,0(sp)
 8007110:	dec00304 	addi	sp,sp,12
 8007114:	f800283a 	ret
 8007118:	2080040c 	andi	r2,r4,16
 800711c:	10002e26 	beq	r2,zero,80071d8 <__swsetup_r+0x13c>
 8007120:	2080010c 	andi	r2,r4,4
 8007124:	10001e1e 	bne	r2,zero,80071a0 <__swsetup_r+0x104>
 8007128:	80c00417 	ldw	r3,16(r16)
 800712c:	20800214 	ori	r2,r4,8
 8007130:	8080030d 	sth	r2,12(r16)
 8007134:	183feb1e 	bne	r3,zero,80070e4 <__alt_data_end+0xfc0070e4>
 8007138:	1100a00c 	andi	r4,r2,640
 800713c:	01408004 	movi	r5,512
 8007140:	217fe826 	beq	r4,r5,80070e4 <__alt_data_end+0xfc0070e4>
 8007144:	800b883a 	mov	r5,r16
 8007148:	8809883a 	mov	r4,r17
 800714c:	8009c580 	call	8009c58 <__smakebuf_r>
 8007150:	8080030b 	ldhu	r2,12(r16)
 8007154:	80c00417 	ldw	r3,16(r16)
 8007158:	003fe206 	br	80070e4 <__alt_data_end+0xfc0070e4>
 800715c:	80800517 	ldw	r2,20(r16)
 8007160:	80000215 	stw	zero,8(r16)
 8007164:	0085c83a 	sub	r2,zero,r2
 8007168:	80800615 	stw	r2,24(r16)
 800716c:	183fe41e 	bne	r3,zero,8007100 <__alt_data_end+0xfc007100>
 8007170:	80c0030b 	ldhu	r3,12(r16)
 8007174:	0005883a 	mov	r2,zero
 8007178:	1900200c 	andi	r4,r3,128
 800717c:	203fe126 	beq	r4,zero,8007104 <__alt_data_end+0xfc007104>
 8007180:	18c01014 	ori	r3,r3,64
 8007184:	80c0030d 	sth	r3,12(r16)
 8007188:	00bfffc4 	movi	r2,-1
 800718c:	003fdd06 	br	8007104 <__alt_data_end+0xfc007104>
 8007190:	80090a80 	call	80090a8 <__sinit>
 8007194:	003fcd06 	br	80070cc <__alt_data_end+0xfc0070cc>
 8007198:	0005883a 	mov	r2,zero
 800719c:	003fd606 	br	80070f8 <__alt_data_end+0xfc0070f8>
 80071a0:	81400c17 	ldw	r5,48(r16)
 80071a4:	28000626 	beq	r5,zero,80071c0 <__swsetup_r+0x124>
 80071a8:	80801004 	addi	r2,r16,64
 80071ac:	28800326 	beq	r5,r2,80071bc <__swsetup_r+0x120>
 80071b0:	8809883a 	mov	r4,r17
 80071b4:	800921c0 	call	800921c <_free_r>
 80071b8:	8100030b 	ldhu	r4,12(r16)
 80071bc:	80000c15 	stw	zero,48(r16)
 80071c0:	80c00417 	ldw	r3,16(r16)
 80071c4:	00bff6c4 	movi	r2,-37
 80071c8:	1108703a 	and	r4,r2,r4
 80071cc:	80000115 	stw	zero,4(r16)
 80071d0:	80c00015 	stw	r3,0(r16)
 80071d4:	003fd506 	br	800712c <__alt_data_end+0xfc00712c>
 80071d8:	00800244 	movi	r2,9
 80071dc:	88800015 	stw	r2,0(r17)
 80071e0:	20801014 	ori	r2,r4,64
 80071e4:	8080030d 	sth	r2,12(r16)
 80071e8:	00bfffc4 	movi	r2,-1
 80071ec:	003fc506 	br	8007104 <__alt_data_end+0xfc007104>

080071f0 <quorem>:
 80071f0:	defff204 	addi	sp,sp,-56
 80071f4:	ddc00b15 	stw	r23,44(sp)
 80071f8:	20800417 	ldw	r2,16(r4)
 80071fc:	2dc00417 	ldw	r23,16(r5)
 8007200:	dfc00d15 	stw	ra,52(sp)
 8007204:	df000c15 	stw	fp,48(sp)
 8007208:	dd800a15 	stw	r22,40(sp)
 800720c:	dd400915 	stw	r21,36(sp)
 8007210:	dd000815 	stw	r20,32(sp)
 8007214:	dcc00715 	stw	r19,28(sp)
 8007218:	dc800615 	stw	r18,24(sp)
 800721c:	dc400515 	stw	r17,20(sp)
 8007220:	dc000415 	stw	r16,16(sp)
 8007224:	15c07a16 	blt	r2,r23,8007410 <quorem+0x220>
 8007228:	bdffffc4 	addi	r23,r23,-1
 800722c:	bde9883a 	add	r20,r23,r23
 8007230:	28c00504 	addi	r3,r5,20
 8007234:	a529883a 	add	r20,r20,r20
 8007238:	1d39883a 	add	fp,r3,r20
 800723c:	24c00504 	addi	r19,r4,20
 8007240:	d9400215 	stw	r5,8(sp)
 8007244:	9d29883a 	add	r20,r19,r20
 8007248:	e1400017 	ldw	r5,0(fp)
 800724c:	d9000015 	stw	r4,0(sp)
 8007250:	a1000017 	ldw	r4,0(r20)
 8007254:	29400044 	addi	r5,r5,1
 8007258:	d8c00115 	stw	r3,4(sp)
 800725c:	dd000315 	stw	r20,12(sp)
 8007260:	8001a9c0 	call	8001a9c <__udivsi3>
 8007264:	1025883a 	mov	r18,r2
 8007268:	10003026 	beq	r2,zero,800732c <quorem+0x13c>
 800726c:	dc400117 	ldw	r17,4(sp)
 8007270:	9829883a 	mov	r20,r19
 8007274:	002d883a 	mov	r22,zero
 8007278:	0021883a 	mov	r16,zero
 800727c:	8d400017 	ldw	r21,0(r17)
 8007280:	900b883a 	mov	r5,r18
 8007284:	8c400104 	addi	r17,r17,4
 8007288:	a93fffcc 	andi	r4,r21,65535
 800728c:	8001b580 	call	8001b58 <__mulsi3>
 8007290:	a808d43a 	srli	r4,r21,16
 8007294:	900b883a 	mov	r5,r18
 8007298:	15ad883a 	add	r22,r2,r22
 800729c:	8001b580 	call	8001b58 <__mulsi3>
 80072a0:	a1000017 	ldw	r4,0(r20)
 80072a4:	b00cd43a 	srli	r6,r22,16
 80072a8:	b0ffffcc 	andi	r3,r22,65535
 80072ac:	217fffcc 	andi	r5,r4,65535
 80072b0:	2c21883a 	add	r16,r5,r16
 80072b4:	80c7c83a 	sub	r3,r16,r3
 80072b8:	2008d43a 	srli	r4,r4,16
 80072bc:	1185883a 	add	r2,r2,r6
 80072c0:	1821d43a 	srai	r16,r3,16
 80072c4:	117fffcc 	andi	r5,r2,65535
 80072c8:	2149c83a 	sub	r4,r4,r5
 80072cc:	2421883a 	add	r16,r4,r16
 80072d0:	8008943a 	slli	r4,r16,16
 80072d4:	18ffffcc 	andi	r3,r3,65535
 80072d8:	102cd43a 	srli	r22,r2,16
 80072dc:	20c8b03a 	or	r4,r4,r3
 80072e0:	a1000015 	stw	r4,0(r20)
 80072e4:	8021d43a 	srai	r16,r16,16
 80072e8:	a5000104 	addi	r20,r20,4
 80072ec:	e47fe32e 	bgeu	fp,r17,800727c <__alt_data_end+0xfc00727c>
 80072f0:	d8c00317 	ldw	r3,12(sp)
 80072f4:	18800017 	ldw	r2,0(r3)
 80072f8:	10000c1e 	bne	r2,zero,800732c <quorem+0x13c>
 80072fc:	18bfff04 	addi	r2,r3,-4
 8007300:	9880082e 	bgeu	r19,r2,8007324 <quorem+0x134>
 8007304:	18ffff17 	ldw	r3,-4(r3)
 8007308:	18000326 	beq	r3,zero,8007318 <quorem+0x128>
 800730c:	00000506 	br	8007324 <quorem+0x134>
 8007310:	10c00017 	ldw	r3,0(r2)
 8007314:	1800031e 	bne	r3,zero,8007324 <quorem+0x134>
 8007318:	10bfff04 	addi	r2,r2,-4
 800731c:	bdffffc4 	addi	r23,r23,-1
 8007320:	98bffb36 	bltu	r19,r2,8007310 <__alt_data_end+0xfc007310>
 8007324:	d8c00017 	ldw	r3,0(sp)
 8007328:	1dc00415 	stw	r23,16(r3)
 800732c:	d9400217 	ldw	r5,8(sp)
 8007330:	d9000017 	ldw	r4,0(sp)
 8007334:	800b4540 	call	800b454 <__mcmp>
 8007338:	10002816 	blt	r2,zero,80073dc <quorem+0x1ec>
 800733c:	dc400117 	ldw	r17,4(sp)
 8007340:	94800044 	addi	r18,r18,1
 8007344:	980d883a 	mov	r6,r19
 8007348:	0007883a 	mov	r3,zero
 800734c:	31000017 	ldw	r4,0(r6)
 8007350:	89400017 	ldw	r5,0(r17)
 8007354:	31800104 	addi	r6,r6,4
 8007358:	20bfffcc 	andi	r2,r4,65535
 800735c:	10c7883a 	add	r3,r2,r3
 8007360:	28bfffcc 	andi	r2,r5,65535
 8007364:	1885c83a 	sub	r2,r3,r2
 8007368:	280ad43a 	srli	r5,r5,16
 800736c:	2008d43a 	srli	r4,r4,16
 8007370:	1007d43a 	srai	r3,r2,16
 8007374:	10bfffcc 	andi	r2,r2,65535
 8007378:	2149c83a 	sub	r4,r4,r5
 800737c:	20c9883a 	add	r4,r4,r3
 8007380:	200a943a 	slli	r5,r4,16
 8007384:	8c400104 	addi	r17,r17,4
 8007388:	2007d43a 	srai	r3,r4,16
 800738c:	2884b03a 	or	r2,r5,r2
 8007390:	30bfff15 	stw	r2,-4(r6)
 8007394:	e47fed2e 	bgeu	fp,r17,800734c <__alt_data_end+0xfc00734c>
 8007398:	bdc5883a 	add	r2,r23,r23
 800739c:	1085883a 	add	r2,r2,r2
 80073a0:	9887883a 	add	r3,r19,r2
 80073a4:	18800017 	ldw	r2,0(r3)
 80073a8:	10000c1e 	bne	r2,zero,80073dc <quorem+0x1ec>
 80073ac:	18bfff04 	addi	r2,r3,-4
 80073b0:	9880082e 	bgeu	r19,r2,80073d4 <quorem+0x1e4>
 80073b4:	18ffff17 	ldw	r3,-4(r3)
 80073b8:	18000326 	beq	r3,zero,80073c8 <quorem+0x1d8>
 80073bc:	00000506 	br	80073d4 <quorem+0x1e4>
 80073c0:	10c00017 	ldw	r3,0(r2)
 80073c4:	1800031e 	bne	r3,zero,80073d4 <quorem+0x1e4>
 80073c8:	10bfff04 	addi	r2,r2,-4
 80073cc:	bdffffc4 	addi	r23,r23,-1
 80073d0:	98bffb36 	bltu	r19,r2,80073c0 <__alt_data_end+0xfc0073c0>
 80073d4:	d8c00017 	ldw	r3,0(sp)
 80073d8:	1dc00415 	stw	r23,16(r3)
 80073dc:	9005883a 	mov	r2,r18
 80073e0:	dfc00d17 	ldw	ra,52(sp)
 80073e4:	df000c17 	ldw	fp,48(sp)
 80073e8:	ddc00b17 	ldw	r23,44(sp)
 80073ec:	dd800a17 	ldw	r22,40(sp)
 80073f0:	dd400917 	ldw	r21,36(sp)
 80073f4:	dd000817 	ldw	r20,32(sp)
 80073f8:	dcc00717 	ldw	r19,28(sp)
 80073fc:	dc800617 	ldw	r18,24(sp)
 8007400:	dc400517 	ldw	r17,20(sp)
 8007404:	dc000417 	ldw	r16,16(sp)
 8007408:	dec00e04 	addi	sp,sp,56
 800740c:	f800283a 	ret
 8007410:	0005883a 	mov	r2,zero
 8007414:	003ff206 	br	80073e0 <__alt_data_end+0xfc0073e0>

08007418 <_dtoa_r>:
 8007418:	20801017 	ldw	r2,64(r4)
 800741c:	deffde04 	addi	sp,sp,-136
 8007420:	df002015 	stw	fp,128(sp)
 8007424:	dcc01b15 	stw	r19,108(sp)
 8007428:	dc801a15 	stw	r18,104(sp)
 800742c:	dc401915 	stw	r17,100(sp)
 8007430:	dc001815 	stw	r16,96(sp)
 8007434:	dfc02115 	stw	ra,132(sp)
 8007438:	ddc01f15 	stw	r23,124(sp)
 800743c:	dd801e15 	stw	r22,120(sp)
 8007440:	dd401d15 	stw	r21,116(sp)
 8007444:	dd001c15 	stw	r20,112(sp)
 8007448:	d9c00315 	stw	r7,12(sp)
 800744c:	2039883a 	mov	fp,r4
 8007450:	3023883a 	mov	r17,r6
 8007454:	2825883a 	mov	r18,r5
 8007458:	dc002417 	ldw	r16,144(sp)
 800745c:	3027883a 	mov	r19,r6
 8007460:	10000826 	beq	r2,zero,8007484 <_dtoa_r+0x6c>
 8007464:	21801117 	ldw	r6,68(r4)
 8007468:	00c00044 	movi	r3,1
 800746c:	100b883a 	mov	r5,r2
 8007470:	1986983a 	sll	r3,r3,r6
 8007474:	11800115 	stw	r6,4(r2)
 8007478:	10c00215 	stw	r3,8(r2)
 800747c:	800ab780 	call	800ab78 <_Bfree>
 8007480:	e0001015 	stw	zero,64(fp)
 8007484:	88002e16 	blt	r17,zero,8007540 <_dtoa_r+0x128>
 8007488:	80000015 	stw	zero,0(r16)
 800748c:	889ffc2c 	andhi	r2,r17,32752
 8007490:	00dffc34 	movhi	r3,32752
 8007494:	10c01c26 	beq	r2,r3,8007508 <_dtoa_r+0xf0>
 8007498:	000d883a 	mov	r6,zero
 800749c:	000f883a 	mov	r7,zero
 80074a0:	9009883a 	mov	r4,r18
 80074a4:	980b883a 	mov	r5,r19
 80074a8:	80118c80 	call	80118c8 <__eqdf2>
 80074ac:	10002b1e 	bne	r2,zero,800755c <_dtoa_r+0x144>
 80074b0:	d9c02317 	ldw	r7,140(sp)
 80074b4:	00800044 	movi	r2,1
 80074b8:	38800015 	stw	r2,0(r7)
 80074bc:	d8802517 	ldw	r2,148(sp)
 80074c0:	10019e26 	beq	r2,zero,8007b3c <_dtoa_r+0x724>
 80074c4:	d8c02517 	ldw	r3,148(sp)
 80074c8:	00820074 	movhi	r2,2049
 80074cc:	109ee244 	addi	r2,r2,31625
 80074d0:	18800015 	stw	r2,0(r3)
 80074d4:	10bfffc4 	addi	r2,r2,-1
 80074d8:	dfc02117 	ldw	ra,132(sp)
 80074dc:	df002017 	ldw	fp,128(sp)
 80074e0:	ddc01f17 	ldw	r23,124(sp)
 80074e4:	dd801e17 	ldw	r22,120(sp)
 80074e8:	dd401d17 	ldw	r21,116(sp)
 80074ec:	dd001c17 	ldw	r20,112(sp)
 80074f0:	dcc01b17 	ldw	r19,108(sp)
 80074f4:	dc801a17 	ldw	r18,104(sp)
 80074f8:	dc401917 	ldw	r17,100(sp)
 80074fc:	dc001817 	ldw	r16,96(sp)
 8007500:	dec02204 	addi	sp,sp,136
 8007504:	f800283a 	ret
 8007508:	d8c02317 	ldw	r3,140(sp)
 800750c:	0089c3c4 	movi	r2,9999
 8007510:	18800015 	stw	r2,0(r3)
 8007514:	90017726 	beq	r18,zero,8007af4 <_dtoa_r+0x6dc>
 8007518:	00820074 	movhi	r2,2049
 800751c:	109ef604 	addi	r2,r2,31704
 8007520:	d9002517 	ldw	r4,148(sp)
 8007524:	203fec26 	beq	r4,zero,80074d8 <__alt_data_end+0xfc0074d8>
 8007528:	10c000c7 	ldb	r3,3(r2)
 800752c:	1801781e 	bne	r3,zero,8007b10 <_dtoa_r+0x6f8>
 8007530:	10c000c4 	addi	r3,r2,3
 8007534:	d9802517 	ldw	r6,148(sp)
 8007538:	30c00015 	stw	r3,0(r6)
 800753c:	003fe606 	br	80074d8 <__alt_data_end+0xfc0074d8>
 8007540:	04e00034 	movhi	r19,32768
 8007544:	9cffffc4 	addi	r19,r19,-1
 8007548:	00800044 	movi	r2,1
 800754c:	8ce6703a 	and	r19,r17,r19
 8007550:	80800015 	stw	r2,0(r16)
 8007554:	9823883a 	mov	r17,r19
 8007558:	003fcc06 	br	800748c <__alt_data_end+0xfc00748c>
 800755c:	d8800204 	addi	r2,sp,8
 8007560:	d8800015 	stw	r2,0(sp)
 8007564:	d9c00104 	addi	r7,sp,4
 8007568:	900b883a 	mov	r5,r18
 800756c:	980d883a 	mov	r6,r19
 8007570:	e009883a 	mov	r4,fp
 8007574:	8820d53a 	srli	r16,r17,20
 8007578:	800b8200 	call	800b820 <__d2b>
 800757c:	d8800915 	stw	r2,36(sp)
 8007580:	8001651e 	bne	r16,zero,8007b18 <_dtoa_r+0x700>
 8007584:	dd800217 	ldw	r22,8(sp)
 8007588:	dc000117 	ldw	r16,4(sp)
 800758c:	00800804 	movi	r2,32
 8007590:	b421883a 	add	r16,r22,r16
 8007594:	80c10c84 	addi	r3,r16,1074
 8007598:	10c2d10e 	bge	r2,r3,80080e0 <_dtoa_r+0xcc8>
 800759c:	00801004 	movi	r2,64
 80075a0:	81010484 	addi	r4,r16,1042
 80075a4:	10c7c83a 	sub	r3,r2,r3
 80075a8:	9108d83a 	srl	r4,r18,r4
 80075ac:	88e2983a 	sll	r17,r17,r3
 80075b0:	2448b03a 	or	r4,r4,r17
 80075b4:	8012de40 	call	8012de4 <__floatunsidf>
 80075b8:	017f8434 	movhi	r5,65040
 80075bc:	01800044 	movi	r6,1
 80075c0:	1009883a 	mov	r4,r2
 80075c4:	194b883a 	add	r5,r3,r5
 80075c8:	843fffc4 	addi	r16,r16,-1
 80075cc:	d9801115 	stw	r6,68(sp)
 80075d0:	000d883a 	mov	r6,zero
 80075d4:	01cffe34 	movhi	r7,16376
 80075d8:	801238c0 	call	801238c <__subdf3>
 80075dc:	0198dbf4 	movhi	r6,25455
 80075e0:	01cff4f4 	movhi	r7,16339
 80075e4:	3190d844 	addi	r6,r6,17249
 80075e8:	39e1e9c4 	addi	r7,r7,-30809
 80075ec:	1009883a 	mov	r4,r2
 80075f0:	180b883a 	mov	r5,r3
 80075f4:	8011b200 	call	8011b20 <__muldf3>
 80075f8:	01a2d874 	movhi	r6,35681
 80075fc:	01cff1f4 	movhi	r7,16327
 8007600:	31b22cc4 	addi	r6,r6,-14157
 8007604:	39e28a04 	addi	r7,r7,-30168
 8007608:	180b883a 	mov	r5,r3
 800760c:	1009883a 	mov	r4,r2
 8007610:	801064c0 	call	801064c <__adddf3>
 8007614:	8009883a 	mov	r4,r16
 8007618:	1029883a 	mov	r20,r2
 800761c:	1823883a 	mov	r17,r3
 8007620:	8012d080 	call	8012d08 <__floatsidf>
 8007624:	019427f4 	movhi	r6,20639
 8007628:	01cff4f4 	movhi	r7,16339
 800762c:	319e7ec4 	addi	r6,r6,31227
 8007630:	39d104c4 	addi	r7,r7,17427
 8007634:	1009883a 	mov	r4,r2
 8007638:	180b883a 	mov	r5,r3
 800763c:	8011b200 	call	8011b20 <__muldf3>
 8007640:	100d883a 	mov	r6,r2
 8007644:	180f883a 	mov	r7,r3
 8007648:	a009883a 	mov	r4,r20
 800764c:	880b883a 	mov	r5,r17
 8007650:	801064c0 	call	801064c <__adddf3>
 8007654:	1009883a 	mov	r4,r2
 8007658:	180b883a 	mov	r5,r3
 800765c:	1029883a 	mov	r20,r2
 8007660:	1823883a 	mov	r17,r3
 8007664:	8012c880 	call	8012c88 <__fixdfsi>
 8007668:	000d883a 	mov	r6,zero
 800766c:	000f883a 	mov	r7,zero
 8007670:	a009883a 	mov	r4,r20
 8007674:	880b883a 	mov	r5,r17
 8007678:	d8800515 	stw	r2,20(sp)
 800767c:	8011a2c0 	call	8011a2c <__ledf2>
 8007680:	10028716 	blt	r2,zero,80080a0 <_dtoa_r+0xc88>
 8007684:	d8c00517 	ldw	r3,20(sp)
 8007688:	00800584 	movi	r2,22
 800768c:	10c27536 	bltu	r2,r3,8008064 <_dtoa_r+0xc4c>
 8007690:	180490fa 	slli	r2,r3,3
 8007694:	00c20074 	movhi	r3,2049
 8007698:	18df1204 	addi	r3,r3,31816
 800769c:	1885883a 	add	r2,r3,r2
 80076a0:	11000017 	ldw	r4,0(r2)
 80076a4:	11400117 	ldw	r5,4(r2)
 80076a8:	900d883a 	mov	r6,r18
 80076ac:	980f883a 	mov	r7,r19
 80076b0:	80119500 	call	8011950 <__gedf2>
 80076b4:	00828d0e 	bge	zero,r2,80080ec <_dtoa_r+0xcd4>
 80076b8:	d9000517 	ldw	r4,20(sp)
 80076bc:	d8000e15 	stw	zero,56(sp)
 80076c0:	213fffc4 	addi	r4,r4,-1
 80076c4:	d9000515 	stw	r4,20(sp)
 80076c8:	b42dc83a 	sub	r22,r22,r16
 80076cc:	b5bfffc4 	addi	r22,r22,-1
 80076d0:	b0026f16 	blt	r22,zero,8008090 <_dtoa_r+0xc78>
 80076d4:	d8000815 	stw	zero,32(sp)
 80076d8:	d9c00517 	ldw	r7,20(sp)
 80076dc:	38026416 	blt	r7,zero,8008070 <_dtoa_r+0xc58>
 80076e0:	b1ed883a 	add	r22,r22,r7
 80076e4:	d9c00d15 	stw	r7,52(sp)
 80076e8:	d8000a15 	stw	zero,40(sp)
 80076ec:	d9800317 	ldw	r6,12(sp)
 80076f0:	00800244 	movi	r2,9
 80076f4:	11811436 	bltu	r2,r6,8007b48 <_dtoa_r+0x730>
 80076f8:	00800144 	movi	r2,5
 80076fc:	1184e10e 	bge	r2,r6,8008a84 <_dtoa_r+0x166c>
 8007700:	31bfff04 	addi	r6,r6,-4
 8007704:	d9800315 	stw	r6,12(sp)
 8007708:	0023883a 	mov	r17,zero
 800770c:	d9800317 	ldw	r6,12(sp)
 8007710:	008000c4 	movi	r2,3
 8007714:	30836726 	beq	r6,r2,80084b4 <_dtoa_r+0x109c>
 8007718:	1183410e 	bge	r2,r6,8008420 <_dtoa_r+0x1008>
 800771c:	d9c00317 	ldw	r7,12(sp)
 8007720:	00800104 	movi	r2,4
 8007724:	38827c26 	beq	r7,r2,8008118 <_dtoa_r+0xd00>
 8007728:	00800144 	movi	r2,5
 800772c:	3884c41e 	bne	r7,r2,8008a40 <_dtoa_r+0x1628>
 8007730:	00800044 	movi	r2,1
 8007734:	d8800b15 	stw	r2,44(sp)
 8007738:	d8c00517 	ldw	r3,20(sp)
 800773c:	d9002217 	ldw	r4,136(sp)
 8007740:	1907883a 	add	r3,r3,r4
 8007744:	19800044 	addi	r6,r3,1
 8007748:	d8c00c15 	stw	r3,48(sp)
 800774c:	d9800615 	stw	r6,24(sp)
 8007750:	0183a40e 	bge	zero,r6,80085e4 <_dtoa_r+0x11cc>
 8007754:	d9800617 	ldw	r6,24(sp)
 8007758:	3021883a 	mov	r16,r6
 800775c:	e0001115 	stw	zero,68(fp)
 8007760:	008005c4 	movi	r2,23
 8007764:	1184c92e 	bgeu	r2,r6,8008a8c <_dtoa_r+0x1674>
 8007768:	00c00044 	movi	r3,1
 800776c:	00800104 	movi	r2,4
 8007770:	1085883a 	add	r2,r2,r2
 8007774:	11000504 	addi	r4,r2,20
 8007778:	180b883a 	mov	r5,r3
 800777c:	18c00044 	addi	r3,r3,1
 8007780:	313ffb2e 	bgeu	r6,r4,8007770 <__alt_data_end+0xfc007770>
 8007784:	e1401115 	stw	r5,68(fp)
 8007788:	e009883a 	mov	r4,fp
 800778c:	800aad00 	call	800aad0 <_Balloc>
 8007790:	d8800715 	stw	r2,28(sp)
 8007794:	e0801015 	stw	r2,64(fp)
 8007798:	00800384 	movi	r2,14
 800779c:	1400f736 	bltu	r2,r16,8007b7c <_dtoa_r+0x764>
 80077a0:	8800f626 	beq	r17,zero,8007b7c <_dtoa_r+0x764>
 80077a4:	d9c00517 	ldw	r7,20(sp)
 80077a8:	01c39a0e 	bge	zero,r7,8008614 <_dtoa_r+0x11fc>
 80077ac:	388003cc 	andi	r2,r7,15
 80077b0:	100490fa 	slli	r2,r2,3
 80077b4:	382bd13a 	srai	r21,r7,4
 80077b8:	00c20074 	movhi	r3,2049
 80077bc:	18df1204 	addi	r3,r3,31816
 80077c0:	1885883a 	add	r2,r3,r2
 80077c4:	a8c0040c 	andi	r3,r21,16
 80077c8:	12400017 	ldw	r9,0(r2)
 80077cc:	12000117 	ldw	r8,4(r2)
 80077d0:	18037926 	beq	r3,zero,80085b8 <_dtoa_r+0x11a0>
 80077d4:	00820074 	movhi	r2,2049
 80077d8:	109f0804 	addi	r2,r2,31776
 80077dc:	11800817 	ldw	r6,32(r2)
 80077e0:	11c00917 	ldw	r7,36(r2)
 80077e4:	9009883a 	mov	r4,r18
 80077e8:	980b883a 	mov	r5,r19
 80077ec:	da001715 	stw	r8,92(sp)
 80077f0:	da401615 	stw	r9,88(sp)
 80077f4:	8010ef80 	call	8010ef8 <__divdf3>
 80077f8:	da001717 	ldw	r8,92(sp)
 80077fc:	da401617 	ldw	r9,88(sp)
 8007800:	ad4003cc 	andi	r21,r21,15
 8007804:	040000c4 	movi	r16,3
 8007808:	1023883a 	mov	r17,r2
 800780c:	1829883a 	mov	r20,r3
 8007810:	a8001126 	beq	r21,zero,8007858 <_dtoa_r+0x440>
 8007814:	05c20074 	movhi	r23,2049
 8007818:	bddf0804 	addi	r23,r23,31776
 800781c:	4805883a 	mov	r2,r9
 8007820:	4007883a 	mov	r3,r8
 8007824:	a980004c 	andi	r6,r21,1
 8007828:	1009883a 	mov	r4,r2
 800782c:	a82bd07a 	srai	r21,r21,1
 8007830:	180b883a 	mov	r5,r3
 8007834:	30000426 	beq	r6,zero,8007848 <_dtoa_r+0x430>
 8007838:	b9800017 	ldw	r6,0(r23)
 800783c:	b9c00117 	ldw	r7,4(r23)
 8007840:	84000044 	addi	r16,r16,1
 8007844:	8011b200 	call	8011b20 <__muldf3>
 8007848:	bdc00204 	addi	r23,r23,8
 800784c:	a83ff51e 	bne	r21,zero,8007824 <__alt_data_end+0xfc007824>
 8007850:	1013883a 	mov	r9,r2
 8007854:	1811883a 	mov	r8,r3
 8007858:	480d883a 	mov	r6,r9
 800785c:	400f883a 	mov	r7,r8
 8007860:	8809883a 	mov	r4,r17
 8007864:	a00b883a 	mov	r5,r20
 8007868:	8010ef80 	call	8010ef8 <__divdf3>
 800786c:	d8800f15 	stw	r2,60(sp)
 8007870:	d8c01015 	stw	r3,64(sp)
 8007874:	d8c00e17 	ldw	r3,56(sp)
 8007878:	18000626 	beq	r3,zero,8007894 <_dtoa_r+0x47c>
 800787c:	d9000f17 	ldw	r4,60(sp)
 8007880:	d9401017 	ldw	r5,64(sp)
 8007884:	000d883a 	mov	r6,zero
 8007888:	01cffc34 	movhi	r7,16368
 800788c:	8011a2c0 	call	8011a2c <__ledf2>
 8007890:	10040b16 	blt	r2,zero,80088c0 <_dtoa_r+0x14a8>
 8007894:	8009883a 	mov	r4,r16
 8007898:	8012d080 	call	8012d08 <__floatsidf>
 800789c:	d9800f17 	ldw	r6,60(sp)
 80078a0:	d9c01017 	ldw	r7,64(sp)
 80078a4:	1009883a 	mov	r4,r2
 80078a8:	180b883a 	mov	r5,r3
 80078ac:	8011b200 	call	8011b20 <__muldf3>
 80078b0:	000d883a 	mov	r6,zero
 80078b4:	01d00734 	movhi	r7,16412
 80078b8:	1009883a 	mov	r4,r2
 80078bc:	180b883a 	mov	r5,r3
 80078c0:	801064c0 	call	801064c <__adddf3>
 80078c4:	1021883a 	mov	r16,r2
 80078c8:	d8800617 	ldw	r2,24(sp)
 80078cc:	047f3034 	movhi	r17,64704
 80078d0:	1c63883a 	add	r17,r3,r17
 80078d4:	10031826 	beq	r2,zero,8008538 <_dtoa_r+0x1120>
 80078d8:	d8c00517 	ldw	r3,20(sp)
 80078dc:	db000617 	ldw	r12,24(sp)
 80078e0:	d8c01315 	stw	r3,76(sp)
 80078e4:	d9000b17 	ldw	r4,44(sp)
 80078e8:	20038f26 	beq	r4,zero,8008728 <_dtoa_r+0x1310>
 80078ec:	60bfffc4 	addi	r2,r12,-1
 80078f0:	100490fa 	slli	r2,r2,3
 80078f4:	00c20074 	movhi	r3,2049
 80078f8:	18df1204 	addi	r3,r3,31816
 80078fc:	1885883a 	add	r2,r3,r2
 8007900:	11800017 	ldw	r6,0(r2)
 8007904:	11c00117 	ldw	r7,4(r2)
 8007908:	d8800717 	ldw	r2,28(sp)
 800790c:	0009883a 	mov	r4,zero
 8007910:	014ff834 	movhi	r5,16352
 8007914:	db001615 	stw	r12,88(sp)
 8007918:	15c00044 	addi	r23,r2,1
 800791c:	8010ef80 	call	8010ef8 <__divdf3>
 8007920:	800d883a 	mov	r6,r16
 8007924:	880f883a 	mov	r7,r17
 8007928:	1009883a 	mov	r4,r2
 800792c:	180b883a 	mov	r5,r3
 8007930:	801238c0 	call	801238c <__subdf3>
 8007934:	d9401017 	ldw	r5,64(sp)
 8007938:	d9000f17 	ldw	r4,60(sp)
 800793c:	102b883a 	mov	r21,r2
 8007940:	d8c01215 	stw	r3,72(sp)
 8007944:	8012c880 	call	8012c88 <__fixdfsi>
 8007948:	1009883a 	mov	r4,r2
 800794c:	1029883a 	mov	r20,r2
 8007950:	8012d080 	call	8012d08 <__floatsidf>
 8007954:	d9000f17 	ldw	r4,60(sp)
 8007958:	d9401017 	ldw	r5,64(sp)
 800795c:	100d883a 	mov	r6,r2
 8007960:	180f883a 	mov	r7,r3
 8007964:	801238c0 	call	801238c <__subdf3>
 8007968:	1823883a 	mov	r17,r3
 800796c:	d8c00717 	ldw	r3,28(sp)
 8007970:	d9401217 	ldw	r5,72(sp)
 8007974:	a2000c04 	addi	r8,r20,48
 8007978:	1021883a 	mov	r16,r2
 800797c:	1a000005 	stb	r8,0(r3)
 8007980:	800d883a 	mov	r6,r16
 8007984:	880f883a 	mov	r7,r17
 8007988:	a809883a 	mov	r4,r21
 800798c:	4029883a 	mov	r20,r8
 8007990:	80119500 	call	8011950 <__gedf2>
 8007994:	00841d16 	blt	zero,r2,8008a0c <_dtoa_r+0x15f4>
 8007998:	800d883a 	mov	r6,r16
 800799c:	880f883a 	mov	r7,r17
 80079a0:	0009883a 	mov	r4,zero
 80079a4:	014ffc34 	movhi	r5,16368
 80079a8:	801238c0 	call	801238c <__subdf3>
 80079ac:	d9401217 	ldw	r5,72(sp)
 80079b0:	100d883a 	mov	r6,r2
 80079b4:	180f883a 	mov	r7,r3
 80079b8:	a809883a 	mov	r4,r21
 80079bc:	80119500 	call	8011950 <__gedf2>
 80079c0:	db001617 	ldw	r12,88(sp)
 80079c4:	00840e16 	blt	zero,r2,8008a00 <_dtoa_r+0x15e8>
 80079c8:	00800044 	movi	r2,1
 80079cc:	13006b0e 	bge	r2,r12,8007b7c <_dtoa_r+0x764>
 80079d0:	d9000717 	ldw	r4,28(sp)
 80079d4:	dd800f15 	stw	r22,60(sp)
 80079d8:	dcc01015 	stw	r19,64(sp)
 80079dc:	2319883a 	add	r12,r4,r12
 80079e0:	dcc01217 	ldw	r19,72(sp)
 80079e4:	602d883a 	mov	r22,r12
 80079e8:	dc801215 	stw	r18,72(sp)
 80079ec:	b825883a 	mov	r18,r23
 80079f0:	00000906 	br	8007a18 <_dtoa_r+0x600>
 80079f4:	801238c0 	call	801238c <__subdf3>
 80079f8:	a80d883a 	mov	r6,r21
 80079fc:	980f883a 	mov	r7,r19
 8007a00:	1009883a 	mov	r4,r2
 8007a04:	180b883a 	mov	r5,r3
 8007a08:	8011a2c0 	call	8011a2c <__ledf2>
 8007a0c:	1003e816 	blt	r2,zero,80089b0 <_dtoa_r+0x1598>
 8007a10:	b825883a 	mov	r18,r23
 8007a14:	bd83e926 	beq	r23,r22,80089bc <_dtoa_r+0x15a4>
 8007a18:	a809883a 	mov	r4,r21
 8007a1c:	980b883a 	mov	r5,r19
 8007a20:	000d883a 	mov	r6,zero
 8007a24:	01d00934 	movhi	r7,16420
 8007a28:	8011b200 	call	8011b20 <__muldf3>
 8007a2c:	000d883a 	mov	r6,zero
 8007a30:	01d00934 	movhi	r7,16420
 8007a34:	8009883a 	mov	r4,r16
 8007a38:	880b883a 	mov	r5,r17
 8007a3c:	102b883a 	mov	r21,r2
 8007a40:	1827883a 	mov	r19,r3
 8007a44:	8011b200 	call	8011b20 <__muldf3>
 8007a48:	180b883a 	mov	r5,r3
 8007a4c:	1009883a 	mov	r4,r2
 8007a50:	1821883a 	mov	r16,r3
 8007a54:	1023883a 	mov	r17,r2
 8007a58:	8012c880 	call	8012c88 <__fixdfsi>
 8007a5c:	1009883a 	mov	r4,r2
 8007a60:	1029883a 	mov	r20,r2
 8007a64:	8012d080 	call	8012d08 <__floatsidf>
 8007a68:	8809883a 	mov	r4,r17
 8007a6c:	800b883a 	mov	r5,r16
 8007a70:	100d883a 	mov	r6,r2
 8007a74:	180f883a 	mov	r7,r3
 8007a78:	801238c0 	call	801238c <__subdf3>
 8007a7c:	a5000c04 	addi	r20,r20,48
 8007a80:	a80d883a 	mov	r6,r21
 8007a84:	980f883a 	mov	r7,r19
 8007a88:	1009883a 	mov	r4,r2
 8007a8c:	180b883a 	mov	r5,r3
 8007a90:	95000005 	stb	r20,0(r18)
 8007a94:	1021883a 	mov	r16,r2
 8007a98:	1823883a 	mov	r17,r3
 8007a9c:	8011a2c0 	call	8011a2c <__ledf2>
 8007aa0:	bdc00044 	addi	r23,r23,1
 8007aa4:	800d883a 	mov	r6,r16
 8007aa8:	880f883a 	mov	r7,r17
 8007aac:	0009883a 	mov	r4,zero
 8007ab0:	014ffc34 	movhi	r5,16368
 8007ab4:	103fcf0e 	bge	r2,zero,80079f4 <__alt_data_end+0xfc0079f4>
 8007ab8:	d8c01317 	ldw	r3,76(sp)
 8007abc:	d8c00515 	stw	r3,20(sp)
 8007ac0:	d9400917 	ldw	r5,36(sp)
 8007ac4:	e009883a 	mov	r4,fp
 8007ac8:	800ab780 	call	800ab78 <_Bfree>
 8007acc:	d9000517 	ldw	r4,20(sp)
 8007ad0:	d9802317 	ldw	r6,140(sp)
 8007ad4:	d9c02517 	ldw	r7,148(sp)
 8007ad8:	b8000005 	stb	zero,0(r23)
 8007adc:	20800044 	addi	r2,r4,1
 8007ae0:	30800015 	stw	r2,0(r6)
 8007ae4:	3802aa26 	beq	r7,zero,8008590 <_dtoa_r+0x1178>
 8007ae8:	3dc00015 	stw	r23,0(r7)
 8007aec:	d8800717 	ldw	r2,28(sp)
 8007af0:	003e7906 	br	80074d8 <__alt_data_end+0xfc0074d8>
 8007af4:	00800434 	movhi	r2,16
 8007af8:	10bfffc4 	addi	r2,r2,-1
 8007afc:	88a2703a 	and	r17,r17,r2
 8007b00:	883e851e 	bne	r17,zero,8007518 <__alt_data_end+0xfc007518>
 8007b04:	00820074 	movhi	r2,2049
 8007b08:	109ef304 	addi	r2,r2,31692
 8007b0c:	003e8406 	br	8007520 <__alt_data_end+0xfc007520>
 8007b10:	10c00204 	addi	r3,r2,8
 8007b14:	003e8706 	br	8007534 <__alt_data_end+0xfc007534>
 8007b18:	01400434 	movhi	r5,16
 8007b1c:	297fffc4 	addi	r5,r5,-1
 8007b20:	994a703a 	and	r5,r19,r5
 8007b24:	9009883a 	mov	r4,r18
 8007b28:	843f0044 	addi	r16,r16,-1023
 8007b2c:	294ffc34 	orhi	r5,r5,16368
 8007b30:	dd800217 	ldw	r22,8(sp)
 8007b34:	d8001115 	stw	zero,68(sp)
 8007b38:	003ea506 	br	80075d0 <__alt_data_end+0xfc0075d0>
 8007b3c:	00820074 	movhi	r2,2049
 8007b40:	109ee204 	addi	r2,r2,31624
 8007b44:	003e6406 	br	80074d8 <__alt_data_end+0xfc0074d8>
 8007b48:	e0001115 	stw	zero,68(fp)
 8007b4c:	000b883a 	mov	r5,zero
 8007b50:	e009883a 	mov	r4,fp
 8007b54:	800aad00 	call	800aad0 <_Balloc>
 8007b58:	01bfffc4 	movi	r6,-1
 8007b5c:	01c00044 	movi	r7,1
 8007b60:	d8800715 	stw	r2,28(sp)
 8007b64:	d9800c15 	stw	r6,48(sp)
 8007b68:	e0801015 	stw	r2,64(fp)
 8007b6c:	d8000315 	stw	zero,12(sp)
 8007b70:	d9c00b15 	stw	r7,44(sp)
 8007b74:	d9800615 	stw	r6,24(sp)
 8007b78:	d8002215 	stw	zero,136(sp)
 8007b7c:	d8800117 	ldw	r2,4(sp)
 8007b80:	10008916 	blt	r2,zero,8007da8 <_dtoa_r+0x990>
 8007b84:	d9000517 	ldw	r4,20(sp)
 8007b88:	00c00384 	movi	r3,14
 8007b8c:	19008616 	blt	r3,r4,8007da8 <_dtoa_r+0x990>
 8007b90:	200490fa 	slli	r2,r4,3
 8007b94:	00c20074 	movhi	r3,2049
 8007b98:	d9802217 	ldw	r6,136(sp)
 8007b9c:	18df1204 	addi	r3,r3,31816
 8007ba0:	1885883a 	add	r2,r3,r2
 8007ba4:	14000017 	ldw	r16,0(r2)
 8007ba8:	14400117 	ldw	r17,4(r2)
 8007bac:	30016316 	blt	r6,zero,800813c <_dtoa_r+0xd24>
 8007bb0:	800d883a 	mov	r6,r16
 8007bb4:	880f883a 	mov	r7,r17
 8007bb8:	9009883a 	mov	r4,r18
 8007bbc:	980b883a 	mov	r5,r19
 8007bc0:	8010ef80 	call	8010ef8 <__divdf3>
 8007bc4:	180b883a 	mov	r5,r3
 8007bc8:	1009883a 	mov	r4,r2
 8007bcc:	8012c880 	call	8012c88 <__fixdfsi>
 8007bd0:	1009883a 	mov	r4,r2
 8007bd4:	102b883a 	mov	r21,r2
 8007bd8:	8012d080 	call	8012d08 <__floatsidf>
 8007bdc:	800d883a 	mov	r6,r16
 8007be0:	880f883a 	mov	r7,r17
 8007be4:	1009883a 	mov	r4,r2
 8007be8:	180b883a 	mov	r5,r3
 8007bec:	8011b200 	call	8011b20 <__muldf3>
 8007bf0:	100d883a 	mov	r6,r2
 8007bf4:	180f883a 	mov	r7,r3
 8007bf8:	9009883a 	mov	r4,r18
 8007bfc:	980b883a 	mov	r5,r19
 8007c00:	801238c0 	call	801238c <__subdf3>
 8007c04:	d9c00717 	ldw	r7,28(sp)
 8007c08:	1009883a 	mov	r4,r2
 8007c0c:	a8800c04 	addi	r2,r21,48
 8007c10:	38800005 	stb	r2,0(r7)
 8007c14:	3dc00044 	addi	r23,r7,1
 8007c18:	d9c00617 	ldw	r7,24(sp)
 8007c1c:	01800044 	movi	r6,1
 8007c20:	180b883a 	mov	r5,r3
 8007c24:	2005883a 	mov	r2,r4
 8007c28:	39803826 	beq	r7,r6,8007d0c <_dtoa_r+0x8f4>
 8007c2c:	000d883a 	mov	r6,zero
 8007c30:	01d00934 	movhi	r7,16420
 8007c34:	8011b200 	call	8011b20 <__muldf3>
 8007c38:	000d883a 	mov	r6,zero
 8007c3c:	000f883a 	mov	r7,zero
 8007c40:	1009883a 	mov	r4,r2
 8007c44:	180b883a 	mov	r5,r3
 8007c48:	1025883a 	mov	r18,r2
 8007c4c:	1827883a 	mov	r19,r3
 8007c50:	80118c80 	call	80118c8 <__eqdf2>
 8007c54:	103f9a26 	beq	r2,zero,8007ac0 <__alt_data_end+0xfc007ac0>
 8007c58:	d9c00617 	ldw	r7,24(sp)
 8007c5c:	d8c00717 	ldw	r3,28(sp)
 8007c60:	b829883a 	mov	r20,r23
 8007c64:	38bfffc4 	addi	r2,r7,-1
 8007c68:	18ad883a 	add	r22,r3,r2
 8007c6c:	00000a06 	br	8007c98 <_dtoa_r+0x880>
 8007c70:	8011b200 	call	8011b20 <__muldf3>
 8007c74:	000d883a 	mov	r6,zero
 8007c78:	000f883a 	mov	r7,zero
 8007c7c:	1009883a 	mov	r4,r2
 8007c80:	180b883a 	mov	r5,r3
 8007c84:	1025883a 	mov	r18,r2
 8007c88:	1827883a 	mov	r19,r3
 8007c8c:	b829883a 	mov	r20,r23
 8007c90:	80118c80 	call	80118c8 <__eqdf2>
 8007c94:	103f8a26 	beq	r2,zero,8007ac0 <__alt_data_end+0xfc007ac0>
 8007c98:	800d883a 	mov	r6,r16
 8007c9c:	880f883a 	mov	r7,r17
 8007ca0:	9009883a 	mov	r4,r18
 8007ca4:	980b883a 	mov	r5,r19
 8007ca8:	8010ef80 	call	8010ef8 <__divdf3>
 8007cac:	180b883a 	mov	r5,r3
 8007cb0:	1009883a 	mov	r4,r2
 8007cb4:	8012c880 	call	8012c88 <__fixdfsi>
 8007cb8:	1009883a 	mov	r4,r2
 8007cbc:	102b883a 	mov	r21,r2
 8007cc0:	8012d080 	call	8012d08 <__floatsidf>
 8007cc4:	800d883a 	mov	r6,r16
 8007cc8:	880f883a 	mov	r7,r17
 8007ccc:	1009883a 	mov	r4,r2
 8007cd0:	180b883a 	mov	r5,r3
 8007cd4:	8011b200 	call	8011b20 <__muldf3>
 8007cd8:	100d883a 	mov	r6,r2
 8007cdc:	180f883a 	mov	r7,r3
 8007ce0:	9009883a 	mov	r4,r18
 8007ce4:	980b883a 	mov	r5,r19
 8007ce8:	801238c0 	call	801238c <__subdf3>
 8007cec:	aa000c04 	addi	r8,r21,48
 8007cf0:	a2000005 	stb	r8,0(r20)
 8007cf4:	000d883a 	mov	r6,zero
 8007cf8:	01d00934 	movhi	r7,16420
 8007cfc:	1009883a 	mov	r4,r2
 8007d00:	180b883a 	mov	r5,r3
 8007d04:	a5c00044 	addi	r23,r20,1
 8007d08:	b53fd91e 	bne	r22,r20,8007c70 <__alt_data_end+0xfc007c70>
 8007d0c:	100d883a 	mov	r6,r2
 8007d10:	180f883a 	mov	r7,r3
 8007d14:	1009883a 	mov	r4,r2
 8007d18:	180b883a 	mov	r5,r3
 8007d1c:	801064c0 	call	801064c <__adddf3>
 8007d20:	100d883a 	mov	r6,r2
 8007d24:	180f883a 	mov	r7,r3
 8007d28:	8009883a 	mov	r4,r16
 8007d2c:	880b883a 	mov	r5,r17
 8007d30:	1027883a 	mov	r19,r2
 8007d34:	1825883a 	mov	r18,r3
 8007d38:	8011a2c0 	call	8011a2c <__ledf2>
 8007d3c:	10000816 	blt	r2,zero,8007d60 <_dtoa_r+0x948>
 8007d40:	980d883a 	mov	r6,r19
 8007d44:	900f883a 	mov	r7,r18
 8007d48:	8009883a 	mov	r4,r16
 8007d4c:	880b883a 	mov	r5,r17
 8007d50:	80118c80 	call	80118c8 <__eqdf2>
 8007d54:	103f5a1e 	bne	r2,zero,8007ac0 <__alt_data_end+0xfc007ac0>
 8007d58:	ad40004c 	andi	r21,r21,1
 8007d5c:	a83f5826 	beq	r21,zero,8007ac0 <__alt_data_end+0xfc007ac0>
 8007d60:	bd3fffc3 	ldbu	r20,-1(r23)
 8007d64:	b8bfffc4 	addi	r2,r23,-1
 8007d68:	1007883a 	mov	r3,r2
 8007d6c:	01400e44 	movi	r5,57
 8007d70:	d9800717 	ldw	r6,28(sp)
 8007d74:	00000506 	br	8007d8c <_dtoa_r+0x974>
 8007d78:	18ffffc4 	addi	r3,r3,-1
 8007d7c:	11824726 	beq	r2,r6,800869c <_dtoa_r+0x1284>
 8007d80:	1d000003 	ldbu	r20,0(r3)
 8007d84:	102f883a 	mov	r23,r2
 8007d88:	10bfffc4 	addi	r2,r2,-1
 8007d8c:	a1003fcc 	andi	r4,r20,255
 8007d90:	2100201c 	xori	r4,r4,128
 8007d94:	213fe004 	addi	r4,r4,-128
 8007d98:	217ff726 	beq	r4,r5,8007d78 <__alt_data_end+0xfc007d78>
 8007d9c:	a2000044 	addi	r8,r20,1
 8007da0:	12000005 	stb	r8,0(r2)
 8007da4:	003f4606 	br	8007ac0 <__alt_data_end+0xfc007ac0>
 8007da8:	d9000b17 	ldw	r4,44(sp)
 8007dac:	2000c826 	beq	r4,zero,80080d0 <_dtoa_r+0xcb8>
 8007db0:	d9800317 	ldw	r6,12(sp)
 8007db4:	00c00044 	movi	r3,1
 8007db8:	1980f90e 	bge	r3,r6,80081a0 <_dtoa_r+0xd88>
 8007dbc:	d8800617 	ldw	r2,24(sp)
 8007dc0:	d8c00a17 	ldw	r3,40(sp)
 8007dc4:	157fffc4 	addi	r21,r2,-1
 8007dc8:	1d41f316 	blt	r3,r21,8008598 <_dtoa_r+0x1180>
 8007dcc:	1d6bc83a 	sub	r21,r3,r21
 8007dd0:	d9c00617 	ldw	r7,24(sp)
 8007dd4:	3802aa16 	blt	r7,zero,8008880 <_dtoa_r+0x1468>
 8007dd8:	dd000817 	ldw	r20,32(sp)
 8007ddc:	d8800617 	ldw	r2,24(sp)
 8007de0:	d8c00817 	ldw	r3,32(sp)
 8007de4:	01400044 	movi	r5,1
 8007de8:	e009883a 	mov	r4,fp
 8007dec:	1887883a 	add	r3,r3,r2
 8007df0:	d8c00815 	stw	r3,32(sp)
 8007df4:	b0ad883a 	add	r22,r22,r2
 8007df8:	800af040 	call	800af04 <__i2b>
 8007dfc:	1023883a 	mov	r17,r2
 8007e00:	a0000826 	beq	r20,zero,8007e24 <_dtoa_r+0xa0c>
 8007e04:	0580070e 	bge	zero,r22,8007e24 <_dtoa_r+0xa0c>
 8007e08:	a005883a 	mov	r2,r20
 8007e0c:	b500b916 	blt	r22,r20,80080f4 <_dtoa_r+0xcdc>
 8007e10:	d9000817 	ldw	r4,32(sp)
 8007e14:	a0a9c83a 	sub	r20,r20,r2
 8007e18:	b0adc83a 	sub	r22,r22,r2
 8007e1c:	2089c83a 	sub	r4,r4,r2
 8007e20:	d9000815 	stw	r4,32(sp)
 8007e24:	d9800a17 	ldw	r6,40(sp)
 8007e28:	0181810e 	bge	zero,r6,8008430 <_dtoa_r+0x1018>
 8007e2c:	d9c00b17 	ldw	r7,44(sp)
 8007e30:	3800b326 	beq	r7,zero,8008100 <_dtoa_r+0xce8>
 8007e34:	a800b226 	beq	r21,zero,8008100 <_dtoa_r+0xce8>
 8007e38:	880b883a 	mov	r5,r17
 8007e3c:	a80d883a 	mov	r6,r21
 8007e40:	e009883a 	mov	r4,fp
 8007e44:	800b1cc0 	call	800b1cc <__pow5mult>
 8007e48:	d9800917 	ldw	r6,36(sp)
 8007e4c:	100b883a 	mov	r5,r2
 8007e50:	e009883a 	mov	r4,fp
 8007e54:	1023883a 	mov	r17,r2
 8007e58:	800af400 	call	800af40 <__multiply>
 8007e5c:	1021883a 	mov	r16,r2
 8007e60:	d8800a17 	ldw	r2,40(sp)
 8007e64:	d9400917 	ldw	r5,36(sp)
 8007e68:	e009883a 	mov	r4,fp
 8007e6c:	1545c83a 	sub	r2,r2,r21
 8007e70:	d8800a15 	stw	r2,40(sp)
 8007e74:	800ab780 	call	800ab78 <_Bfree>
 8007e78:	d8c00a17 	ldw	r3,40(sp)
 8007e7c:	18009f1e 	bne	r3,zero,80080fc <_dtoa_r+0xce4>
 8007e80:	05c00044 	movi	r23,1
 8007e84:	e009883a 	mov	r4,fp
 8007e88:	b80b883a 	mov	r5,r23
 8007e8c:	800af040 	call	800af04 <__i2b>
 8007e90:	d9000d17 	ldw	r4,52(sp)
 8007e94:	102b883a 	mov	r21,r2
 8007e98:	2000ce26 	beq	r4,zero,80081d4 <_dtoa_r+0xdbc>
 8007e9c:	200d883a 	mov	r6,r4
 8007ea0:	100b883a 	mov	r5,r2
 8007ea4:	e009883a 	mov	r4,fp
 8007ea8:	800b1cc0 	call	800b1cc <__pow5mult>
 8007eac:	d9800317 	ldw	r6,12(sp)
 8007eb0:	102b883a 	mov	r21,r2
 8007eb4:	b981810e 	bge	r23,r6,80084bc <_dtoa_r+0x10a4>
 8007eb8:	0027883a 	mov	r19,zero
 8007ebc:	a8800417 	ldw	r2,16(r21)
 8007ec0:	05c00804 	movi	r23,32
 8007ec4:	10800104 	addi	r2,r2,4
 8007ec8:	1085883a 	add	r2,r2,r2
 8007ecc:	1085883a 	add	r2,r2,r2
 8007ed0:	a885883a 	add	r2,r21,r2
 8007ed4:	11000017 	ldw	r4,0(r2)
 8007ed8:	800adec0 	call	800adec <__hi0bits>
 8007edc:	b885c83a 	sub	r2,r23,r2
 8007ee0:	1585883a 	add	r2,r2,r22
 8007ee4:	108007cc 	andi	r2,r2,31
 8007ee8:	1000b326 	beq	r2,zero,80081b8 <_dtoa_r+0xda0>
 8007eec:	00c00804 	movi	r3,32
 8007ef0:	1887c83a 	sub	r3,r3,r2
 8007ef4:	01000104 	movi	r4,4
 8007ef8:	20c2cd0e 	bge	r4,r3,8008a30 <_dtoa_r+0x1618>
 8007efc:	00c00704 	movi	r3,28
 8007f00:	1885c83a 	sub	r2,r3,r2
 8007f04:	d8c00817 	ldw	r3,32(sp)
 8007f08:	a0a9883a 	add	r20,r20,r2
 8007f0c:	b0ad883a 	add	r22,r22,r2
 8007f10:	1887883a 	add	r3,r3,r2
 8007f14:	d8c00815 	stw	r3,32(sp)
 8007f18:	d9800817 	ldw	r6,32(sp)
 8007f1c:	0180040e 	bge	zero,r6,8007f30 <_dtoa_r+0xb18>
 8007f20:	800b883a 	mov	r5,r16
 8007f24:	e009883a 	mov	r4,fp
 8007f28:	800b30c0 	call	800b30c <__lshift>
 8007f2c:	1021883a 	mov	r16,r2
 8007f30:	0580050e 	bge	zero,r22,8007f48 <_dtoa_r+0xb30>
 8007f34:	a80b883a 	mov	r5,r21
 8007f38:	b00d883a 	mov	r6,r22
 8007f3c:	e009883a 	mov	r4,fp
 8007f40:	800b30c0 	call	800b30c <__lshift>
 8007f44:	102b883a 	mov	r21,r2
 8007f48:	d9c00e17 	ldw	r7,56(sp)
 8007f4c:	3801211e 	bne	r7,zero,80083d4 <_dtoa_r+0xfbc>
 8007f50:	d9800617 	ldw	r6,24(sp)
 8007f54:	0181380e 	bge	zero,r6,8008438 <_dtoa_r+0x1020>
 8007f58:	d8c00b17 	ldw	r3,44(sp)
 8007f5c:	1800ab1e 	bne	r3,zero,800820c <_dtoa_r+0xdf4>
 8007f60:	dc800717 	ldw	r18,28(sp)
 8007f64:	dcc00617 	ldw	r19,24(sp)
 8007f68:	9029883a 	mov	r20,r18
 8007f6c:	00000206 	br	8007f78 <_dtoa_r+0xb60>
 8007f70:	800aba00 	call	800aba0 <__multadd>
 8007f74:	1021883a 	mov	r16,r2
 8007f78:	a80b883a 	mov	r5,r21
 8007f7c:	8009883a 	mov	r4,r16
 8007f80:	80071f00 	call	80071f0 <quorem>
 8007f84:	10800c04 	addi	r2,r2,48
 8007f88:	90800005 	stb	r2,0(r18)
 8007f8c:	94800044 	addi	r18,r18,1
 8007f90:	9507c83a 	sub	r3,r18,r20
 8007f94:	000f883a 	mov	r7,zero
 8007f98:	01800284 	movi	r6,10
 8007f9c:	800b883a 	mov	r5,r16
 8007fa0:	e009883a 	mov	r4,fp
 8007fa4:	1cfff216 	blt	r3,r19,8007f70 <__alt_data_end+0xfc007f70>
 8007fa8:	1011883a 	mov	r8,r2
 8007fac:	d8800617 	ldw	r2,24(sp)
 8007fb0:	0082370e 	bge	zero,r2,8008890 <_dtoa_r+0x1478>
 8007fb4:	d9000717 	ldw	r4,28(sp)
 8007fb8:	0025883a 	mov	r18,zero
 8007fbc:	20af883a 	add	r23,r4,r2
 8007fc0:	01800044 	movi	r6,1
 8007fc4:	800b883a 	mov	r5,r16
 8007fc8:	e009883a 	mov	r4,fp
 8007fcc:	da001715 	stw	r8,92(sp)
 8007fd0:	800b30c0 	call	800b30c <__lshift>
 8007fd4:	a80b883a 	mov	r5,r21
 8007fd8:	1009883a 	mov	r4,r2
 8007fdc:	d8800915 	stw	r2,36(sp)
 8007fe0:	800b4540 	call	800b454 <__mcmp>
 8007fe4:	da001717 	ldw	r8,92(sp)
 8007fe8:	0081800e 	bge	zero,r2,80085ec <_dtoa_r+0x11d4>
 8007fec:	b93fffc3 	ldbu	r4,-1(r23)
 8007ff0:	b8bfffc4 	addi	r2,r23,-1
 8007ff4:	1007883a 	mov	r3,r2
 8007ff8:	01800e44 	movi	r6,57
 8007ffc:	d9c00717 	ldw	r7,28(sp)
 8008000:	00000506 	br	8008018 <_dtoa_r+0xc00>
 8008004:	18ffffc4 	addi	r3,r3,-1
 8008008:	11c12326 	beq	r2,r7,8008498 <_dtoa_r+0x1080>
 800800c:	19000003 	ldbu	r4,0(r3)
 8008010:	102f883a 	mov	r23,r2
 8008014:	10bfffc4 	addi	r2,r2,-1
 8008018:	21403fcc 	andi	r5,r4,255
 800801c:	2940201c 	xori	r5,r5,128
 8008020:	297fe004 	addi	r5,r5,-128
 8008024:	29bff726 	beq	r5,r6,8008004 <__alt_data_end+0xfc008004>
 8008028:	21000044 	addi	r4,r4,1
 800802c:	11000005 	stb	r4,0(r2)
 8008030:	a80b883a 	mov	r5,r21
 8008034:	e009883a 	mov	r4,fp
 8008038:	800ab780 	call	800ab78 <_Bfree>
 800803c:	883ea026 	beq	r17,zero,8007ac0 <__alt_data_end+0xfc007ac0>
 8008040:	90000426 	beq	r18,zero,8008054 <_dtoa_r+0xc3c>
 8008044:	94400326 	beq	r18,r17,8008054 <_dtoa_r+0xc3c>
 8008048:	900b883a 	mov	r5,r18
 800804c:	e009883a 	mov	r4,fp
 8008050:	800ab780 	call	800ab78 <_Bfree>
 8008054:	880b883a 	mov	r5,r17
 8008058:	e009883a 	mov	r4,fp
 800805c:	800ab780 	call	800ab78 <_Bfree>
 8008060:	003e9706 	br	8007ac0 <__alt_data_end+0xfc007ac0>
 8008064:	01800044 	movi	r6,1
 8008068:	d9800e15 	stw	r6,56(sp)
 800806c:	003d9606 	br	80076c8 <__alt_data_end+0xfc0076c8>
 8008070:	d8800817 	ldw	r2,32(sp)
 8008074:	d8c00517 	ldw	r3,20(sp)
 8008078:	d8000d15 	stw	zero,52(sp)
 800807c:	10c5c83a 	sub	r2,r2,r3
 8008080:	00c9c83a 	sub	r4,zero,r3
 8008084:	d8800815 	stw	r2,32(sp)
 8008088:	d9000a15 	stw	r4,40(sp)
 800808c:	003d9706 	br	80076ec <__alt_data_end+0xfc0076ec>
 8008090:	05adc83a 	sub	r22,zero,r22
 8008094:	dd800815 	stw	r22,32(sp)
 8008098:	002d883a 	mov	r22,zero
 800809c:	003d8e06 	br	80076d8 <__alt_data_end+0xfc0076d8>
 80080a0:	d9000517 	ldw	r4,20(sp)
 80080a4:	8012d080 	call	8012d08 <__floatsidf>
 80080a8:	100d883a 	mov	r6,r2
 80080ac:	180f883a 	mov	r7,r3
 80080b0:	a009883a 	mov	r4,r20
 80080b4:	880b883a 	mov	r5,r17
 80080b8:	80118c80 	call	80118c8 <__eqdf2>
 80080bc:	103d7126 	beq	r2,zero,8007684 <__alt_data_end+0xfc007684>
 80080c0:	d9c00517 	ldw	r7,20(sp)
 80080c4:	39ffffc4 	addi	r7,r7,-1
 80080c8:	d9c00515 	stw	r7,20(sp)
 80080cc:	003d6d06 	br	8007684 <__alt_data_end+0xfc007684>
 80080d0:	dd400a17 	ldw	r21,40(sp)
 80080d4:	dd000817 	ldw	r20,32(sp)
 80080d8:	0023883a 	mov	r17,zero
 80080dc:	003f4806 	br	8007e00 <__alt_data_end+0xfc007e00>
 80080e0:	10e3c83a 	sub	r17,r2,r3
 80080e4:	9448983a 	sll	r4,r18,r17
 80080e8:	003d3206 	br	80075b4 <__alt_data_end+0xfc0075b4>
 80080ec:	d8000e15 	stw	zero,56(sp)
 80080f0:	003d7506 	br	80076c8 <__alt_data_end+0xfc0076c8>
 80080f4:	b005883a 	mov	r2,r22
 80080f8:	003f4506 	br	8007e10 <__alt_data_end+0xfc007e10>
 80080fc:	dc000915 	stw	r16,36(sp)
 8008100:	d9800a17 	ldw	r6,40(sp)
 8008104:	d9400917 	ldw	r5,36(sp)
 8008108:	e009883a 	mov	r4,fp
 800810c:	800b1cc0 	call	800b1cc <__pow5mult>
 8008110:	1021883a 	mov	r16,r2
 8008114:	003f5a06 	br	8007e80 <__alt_data_end+0xfc007e80>
 8008118:	01c00044 	movi	r7,1
 800811c:	d9c00b15 	stw	r7,44(sp)
 8008120:	d8802217 	ldw	r2,136(sp)
 8008124:	0081280e 	bge	zero,r2,80085c8 <_dtoa_r+0x11b0>
 8008128:	100d883a 	mov	r6,r2
 800812c:	1021883a 	mov	r16,r2
 8008130:	d8800c15 	stw	r2,48(sp)
 8008134:	d8800615 	stw	r2,24(sp)
 8008138:	003d8806 	br	800775c <__alt_data_end+0xfc00775c>
 800813c:	d8800617 	ldw	r2,24(sp)
 8008140:	00be9b16 	blt	zero,r2,8007bb0 <__alt_data_end+0xfc007bb0>
 8008144:	10010f1e 	bne	r2,zero,8008584 <_dtoa_r+0x116c>
 8008148:	880b883a 	mov	r5,r17
 800814c:	000d883a 	mov	r6,zero
 8008150:	01d00534 	movhi	r7,16404
 8008154:	8009883a 	mov	r4,r16
 8008158:	8011b200 	call	8011b20 <__muldf3>
 800815c:	900d883a 	mov	r6,r18
 8008160:	980f883a 	mov	r7,r19
 8008164:	1009883a 	mov	r4,r2
 8008168:	180b883a 	mov	r5,r3
 800816c:	80119500 	call	8011950 <__gedf2>
 8008170:	002b883a 	mov	r21,zero
 8008174:	0023883a 	mov	r17,zero
 8008178:	1000bf16 	blt	r2,zero,8008478 <_dtoa_r+0x1060>
 800817c:	d9802217 	ldw	r6,136(sp)
 8008180:	ddc00717 	ldw	r23,28(sp)
 8008184:	018c303a 	nor	r6,zero,r6
 8008188:	d9800515 	stw	r6,20(sp)
 800818c:	a80b883a 	mov	r5,r21
 8008190:	e009883a 	mov	r4,fp
 8008194:	800ab780 	call	800ab78 <_Bfree>
 8008198:	883e4926 	beq	r17,zero,8007ac0 <__alt_data_end+0xfc007ac0>
 800819c:	003fad06 	br	8008054 <__alt_data_end+0xfc008054>
 80081a0:	d9c01117 	ldw	r7,68(sp)
 80081a4:	3801bc26 	beq	r7,zero,8008898 <_dtoa_r+0x1480>
 80081a8:	10810cc4 	addi	r2,r2,1075
 80081ac:	dd400a17 	ldw	r21,40(sp)
 80081b0:	dd000817 	ldw	r20,32(sp)
 80081b4:	003f0a06 	br	8007de0 <__alt_data_end+0xfc007de0>
 80081b8:	00800704 	movi	r2,28
 80081bc:	d9000817 	ldw	r4,32(sp)
 80081c0:	a0a9883a 	add	r20,r20,r2
 80081c4:	b0ad883a 	add	r22,r22,r2
 80081c8:	2089883a 	add	r4,r4,r2
 80081cc:	d9000815 	stw	r4,32(sp)
 80081d0:	003f5106 	br	8007f18 <__alt_data_end+0xfc007f18>
 80081d4:	d8c00317 	ldw	r3,12(sp)
 80081d8:	b8c1fc0e 	bge	r23,r3,80089cc <_dtoa_r+0x15b4>
 80081dc:	0027883a 	mov	r19,zero
 80081e0:	b805883a 	mov	r2,r23
 80081e4:	003f3e06 	br	8007ee0 <__alt_data_end+0xfc007ee0>
 80081e8:	880b883a 	mov	r5,r17
 80081ec:	e009883a 	mov	r4,fp
 80081f0:	000f883a 	mov	r7,zero
 80081f4:	01800284 	movi	r6,10
 80081f8:	800aba00 	call	800aba0 <__multadd>
 80081fc:	d9000c17 	ldw	r4,48(sp)
 8008200:	1023883a 	mov	r17,r2
 8008204:	0102040e 	bge	zero,r4,8008a18 <_dtoa_r+0x1600>
 8008208:	d9000615 	stw	r4,24(sp)
 800820c:	0500050e 	bge	zero,r20,8008224 <_dtoa_r+0xe0c>
 8008210:	880b883a 	mov	r5,r17
 8008214:	a00d883a 	mov	r6,r20
 8008218:	e009883a 	mov	r4,fp
 800821c:	800b30c0 	call	800b30c <__lshift>
 8008220:	1023883a 	mov	r17,r2
 8008224:	9801241e 	bne	r19,zero,80086b8 <_dtoa_r+0x12a0>
 8008228:	8829883a 	mov	r20,r17
 800822c:	d9000617 	ldw	r4,24(sp)
 8008230:	dcc00717 	ldw	r19,28(sp)
 8008234:	9480004c 	andi	r18,r18,1
 8008238:	20bfffc4 	addi	r2,r4,-1
 800823c:	9885883a 	add	r2,r19,r2
 8008240:	d8800415 	stw	r2,16(sp)
 8008244:	dc800615 	stw	r18,24(sp)
 8008248:	a80b883a 	mov	r5,r21
 800824c:	8009883a 	mov	r4,r16
 8008250:	80071f00 	call	80071f0 <quorem>
 8008254:	880b883a 	mov	r5,r17
 8008258:	8009883a 	mov	r4,r16
 800825c:	102f883a 	mov	r23,r2
 8008260:	800b4540 	call	800b454 <__mcmp>
 8008264:	a80b883a 	mov	r5,r21
 8008268:	a00d883a 	mov	r6,r20
 800826c:	e009883a 	mov	r4,fp
 8008270:	102d883a 	mov	r22,r2
 8008274:	800b4b40 	call	800b4b4 <__mdiff>
 8008278:	1007883a 	mov	r3,r2
 800827c:	10800317 	ldw	r2,12(r2)
 8008280:	bc800c04 	addi	r18,r23,48
 8008284:	180b883a 	mov	r5,r3
 8008288:	10004e1e 	bne	r2,zero,80083c4 <_dtoa_r+0xfac>
 800828c:	8009883a 	mov	r4,r16
 8008290:	d8c01615 	stw	r3,88(sp)
 8008294:	800b4540 	call	800b454 <__mcmp>
 8008298:	d8c01617 	ldw	r3,88(sp)
 800829c:	e009883a 	mov	r4,fp
 80082a0:	d8801615 	stw	r2,88(sp)
 80082a4:	180b883a 	mov	r5,r3
 80082a8:	800ab780 	call	800ab78 <_Bfree>
 80082ac:	d8801617 	ldw	r2,88(sp)
 80082b0:	1000041e 	bne	r2,zero,80082c4 <_dtoa_r+0xeac>
 80082b4:	d9800317 	ldw	r6,12(sp)
 80082b8:	3000021e 	bne	r6,zero,80082c4 <_dtoa_r+0xeac>
 80082bc:	d8c00617 	ldw	r3,24(sp)
 80082c0:	18003726 	beq	r3,zero,80083a0 <_dtoa_r+0xf88>
 80082c4:	b0002016 	blt	r22,zero,8008348 <_dtoa_r+0xf30>
 80082c8:	b000041e 	bne	r22,zero,80082dc <_dtoa_r+0xec4>
 80082cc:	d9000317 	ldw	r4,12(sp)
 80082d0:	2000021e 	bne	r4,zero,80082dc <_dtoa_r+0xec4>
 80082d4:	d8c00617 	ldw	r3,24(sp)
 80082d8:	18001b26 	beq	r3,zero,8008348 <_dtoa_r+0xf30>
 80082dc:	00810716 	blt	zero,r2,80086fc <_dtoa_r+0x12e4>
 80082e0:	d8c00417 	ldw	r3,16(sp)
 80082e4:	9d800044 	addi	r22,r19,1
 80082e8:	9c800005 	stb	r18,0(r19)
 80082ec:	b02f883a 	mov	r23,r22
 80082f0:	98c10626 	beq	r19,r3,800870c <_dtoa_r+0x12f4>
 80082f4:	800b883a 	mov	r5,r16
 80082f8:	000f883a 	mov	r7,zero
 80082fc:	01800284 	movi	r6,10
 8008300:	e009883a 	mov	r4,fp
 8008304:	800aba00 	call	800aba0 <__multadd>
 8008308:	1021883a 	mov	r16,r2
 800830c:	000f883a 	mov	r7,zero
 8008310:	01800284 	movi	r6,10
 8008314:	880b883a 	mov	r5,r17
 8008318:	e009883a 	mov	r4,fp
 800831c:	8d002526 	beq	r17,r20,80083b4 <_dtoa_r+0xf9c>
 8008320:	800aba00 	call	800aba0 <__multadd>
 8008324:	a00b883a 	mov	r5,r20
 8008328:	000f883a 	mov	r7,zero
 800832c:	01800284 	movi	r6,10
 8008330:	e009883a 	mov	r4,fp
 8008334:	1023883a 	mov	r17,r2
 8008338:	800aba00 	call	800aba0 <__multadd>
 800833c:	1029883a 	mov	r20,r2
 8008340:	b027883a 	mov	r19,r22
 8008344:	003fc006 	br	8008248 <__alt_data_end+0xfc008248>
 8008348:	9011883a 	mov	r8,r18
 800834c:	00800e0e 	bge	zero,r2,8008388 <_dtoa_r+0xf70>
 8008350:	800b883a 	mov	r5,r16
 8008354:	01800044 	movi	r6,1
 8008358:	e009883a 	mov	r4,fp
 800835c:	da001715 	stw	r8,92(sp)
 8008360:	800b30c0 	call	800b30c <__lshift>
 8008364:	a80b883a 	mov	r5,r21
 8008368:	1009883a 	mov	r4,r2
 800836c:	1021883a 	mov	r16,r2
 8008370:	800b4540 	call	800b454 <__mcmp>
 8008374:	da001717 	ldw	r8,92(sp)
 8008378:	0081960e 	bge	zero,r2,80089d4 <_dtoa_r+0x15bc>
 800837c:	00800e44 	movi	r2,57
 8008380:	40817026 	beq	r8,r2,8008944 <_dtoa_r+0x152c>
 8008384:	ba000c44 	addi	r8,r23,49
 8008388:	8825883a 	mov	r18,r17
 800838c:	9dc00044 	addi	r23,r19,1
 8008390:	9a000005 	stb	r8,0(r19)
 8008394:	a023883a 	mov	r17,r20
 8008398:	dc000915 	stw	r16,36(sp)
 800839c:	003f2406 	br	8008030 <__alt_data_end+0xfc008030>
 80083a0:	00800e44 	movi	r2,57
 80083a4:	9011883a 	mov	r8,r18
 80083a8:	90816626 	beq	r18,r2,8008944 <_dtoa_r+0x152c>
 80083ac:	05bff516 	blt	zero,r22,8008384 <__alt_data_end+0xfc008384>
 80083b0:	003ff506 	br	8008388 <__alt_data_end+0xfc008388>
 80083b4:	800aba00 	call	800aba0 <__multadd>
 80083b8:	1023883a 	mov	r17,r2
 80083bc:	1029883a 	mov	r20,r2
 80083c0:	003fdf06 	br	8008340 <__alt_data_end+0xfc008340>
 80083c4:	e009883a 	mov	r4,fp
 80083c8:	800ab780 	call	800ab78 <_Bfree>
 80083cc:	00800044 	movi	r2,1
 80083d0:	003fbc06 	br	80082c4 <__alt_data_end+0xfc0082c4>
 80083d4:	a80b883a 	mov	r5,r21
 80083d8:	8009883a 	mov	r4,r16
 80083dc:	800b4540 	call	800b454 <__mcmp>
 80083e0:	103edb0e 	bge	r2,zero,8007f50 <__alt_data_end+0xfc007f50>
 80083e4:	800b883a 	mov	r5,r16
 80083e8:	000f883a 	mov	r7,zero
 80083ec:	01800284 	movi	r6,10
 80083f0:	e009883a 	mov	r4,fp
 80083f4:	800aba00 	call	800aba0 <__multadd>
 80083f8:	1021883a 	mov	r16,r2
 80083fc:	d8800517 	ldw	r2,20(sp)
 8008400:	d8c00b17 	ldw	r3,44(sp)
 8008404:	10bfffc4 	addi	r2,r2,-1
 8008408:	d8800515 	stw	r2,20(sp)
 800840c:	183f761e 	bne	r3,zero,80081e8 <__alt_data_end+0xfc0081e8>
 8008410:	d9000c17 	ldw	r4,48(sp)
 8008414:	0101730e 	bge	zero,r4,80089e4 <_dtoa_r+0x15cc>
 8008418:	d9000615 	stw	r4,24(sp)
 800841c:	003ed006 	br	8007f60 <__alt_data_end+0xfc007f60>
 8008420:	00800084 	movi	r2,2
 8008424:	3081861e 	bne	r6,r2,8008a40 <_dtoa_r+0x1628>
 8008428:	d8000b15 	stw	zero,44(sp)
 800842c:	003f3c06 	br	8008120 <__alt_data_end+0xfc008120>
 8008430:	dc000917 	ldw	r16,36(sp)
 8008434:	003e9206 	br	8007e80 <__alt_data_end+0xfc007e80>
 8008438:	d9c00317 	ldw	r7,12(sp)
 800843c:	00800084 	movi	r2,2
 8008440:	11fec50e 	bge	r2,r7,8007f58 <__alt_data_end+0xfc007f58>
 8008444:	d9000617 	ldw	r4,24(sp)
 8008448:	20013c1e 	bne	r4,zero,800893c <_dtoa_r+0x1524>
 800844c:	a80b883a 	mov	r5,r21
 8008450:	000f883a 	mov	r7,zero
 8008454:	01800144 	movi	r6,5
 8008458:	e009883a 	mov	r4,fp
 800845c:	800aba00 	call	800aba0 <__multadd>
 8008460:	100b883a 	mov	r5,r2
 8008464:	8009883a 	mov	r4,r16
 8008468:	102b883a 	mov	r21,r2
 800846c:	800b4540 	call	800b454 <__mcmp>
 8008470:	dc000915 	stw	r16,36(sp)
 8008474:	00bf410e 	bge	zero,r2,800817c <__alt_data_end+0xfc00817c>
 8008478:	d9c00717 	ldw	r7,28(sp)
 800847c:	00800c44 	movi	r2,49
 8008480:	38800005 	stb	r2,0(r7)
 8008484:	d8800517 	ldw	r2,20(sp)
 8008488:	3dc00044 	addi	r23,r7,1
 800848c:	10800044 	addi	r2,r2,1
 8008490:	d8800515 	stw	r2,20(sp)
 8008494:	003f3d06 	br	800818c <__alt_data_end+0xfc00818c>
 8008498:	d9800517 	ldw	r6,20(sp)
 800849c:	d9c00717 	ldw	r7,28(sp)
 80084a0:	00800c44 	movi	r2,49
 80084a4:	31800044 	addi	r6,r6,1
 80084a8:	d9800515 	stw	r6,20(sp)
 80084ac:	38800005 	stb	r2,0(r7)
 80084b0:	003edf06 	br	8008030 <__alt_data_end+0xfc008030>
 80084b4:	d8000b15 	stw	zero,44(sp)
 80084b8:	003c9f06 	br	8007738 <__alt_data_end+0xfc007738>
 80084bc:	903e7e1e 	bne	r18,zero,8007eb8 <__alt_data_end+0xfc007eb8>
 80084c0:	00800434 	movhi	r2,16
 80084c4:	10bfffc4 	addi	r2,r2,-1
 80084c8:	9884703a 	and	r2,r19,r2
 80084cc:	1000ea1e 	bne	r2,zero,8008878 <_dtoa_r+0x1460>
 80084d0:	9cdffc2c 	andhi	r19,r19,32752
 80084d4:	9800e826 	beq	r19,zero,8008878 <_dtoa_r+0x1460>
 80084d8:	d9c00817 	ldw	r7,32(sp)
 80084dc:	b5800044 	addi	r22,r22,1
 80084e0:	04c00044 	movi	r19,1
 80084e4:	39c00044 	addi	r7,r7,1
 80084e8:	d9c00815 	stw	r7,32(sp)
 80084ec:	d8800d17 	ldw	r2,52(sp)
 80084f0:	103e721e 	bne	r2,zero,8007ebc <__alt_data_end+0xfc007ebc>
 80084f4:	00800044 	movi	r2,1
 80084f8:	003e7906 	br	8007ee0 <__alt_data_end+0xfc007ee0>
 80084fc:	8009883a 	mov	r4,r16
 8008500:	8012d080 	call	8012d08 <__floatsidf>
 8008504:	d9800f17 	ldw	r6,60(sp)
 8008508:	d9c01017 	ldw	r7,64(sp)
 800850c:	1009883a 	mov	r4,r2
 8008510:	180b883a 	mov	r5,r3
 8008514:	8011b200 	call	8011b20 <__muldf3>
 8008518:	000d883a 	mov	r6,zero
 800851c:	01d00734 	movhi	r7,16412
 8008520:	1009883a 	mov	r4,r2
 8008524:	180b883a 	mov	r5,r3
 8008528:	801064c0 	call	801064c <__adddf3>
 800852c:	047f3034 	movhi	r17,64704
 8008530:	1021883a 	mov	r16,r2
 8008534:	1c63883a 	add	r17,r3,r17
 8008538:	d9000f17 	ldw	r4,60(sp)
 800853c:	d9401017 	ldw	r5,64(sp)
 8008540:	000d883a 	mov	r6,zero
 8008544:	01d00534 	movhi	r7,16404
 8008548:	801238c0 	call	801238c <__subdf3>
 800854c:	800d883a 	mov	r6,r16
 8008550:	880f883a 	mov	r7,r17
 8008554:	1009883a 	mov	r4,r2
 8008558:	180b883a 	mov	r5,r3
 800855c:	102b883a 	mov	r21,r2
 8008560:	1829883a 	mov	r20,r3
 8008564:	80119500 	call	8011950 <__gedf2>
 8008568:	00806c16 	blt	zero,r2,800871c <_dtoa_r+0x1304>
 800856c:	89e0003c 	xorhi	r7,r17,32768
 8008570:	800d883a 	mov	r6,r16
 8008574:	a809883a 	mov	r4,r21
 8008578:	a00b883a 	mov	r5,r20
 800857c:	8011a2c0 	call	8011a2c <__ledf2>
 8008580:	103d7e0e 	bge	r2,zero,8007b7c <__alt_data_end+0xfc007b7c>
 8008584:	002b883a 	mov	r21,zero
 8008588:	0023883a 	mov	r17,zero
 800858c:	003efb06 	br	800817c <__alt_data_end+0xfc00817c>
 8008590:	d8800717 	ldw	r2,28(sp)
 8008594:	003bd006 	br	80074d8 <__alt_data_end+0xfc0074d8>
 8008598:	d9000a17 	ldw	r4,40(sp)
 800859c:	d9800d17 	ldw	r6,52(sp)
 80085a0:	dd400a15 	stw	r21,40(sp)
 80085a4:	a905c83a 	sub	r2,r21,r4
 80085a8:	308d883a 	add	r6,r6,r2
 80085ac:	d9800d15 	stw	r6,52(sp)
 80085b0:	002b883a 	mov	r21,zero
 80085b4:	003e0606 	br	8007dd0 <__alt_data_end+0xfc007dd0>
 80085b8:	9023883a 	mov	r17,r18
 80085bc:	9829883a 	mov	r20,r19
 80085c0:	04000084 	movi	r16,2
 80085c4:	003c9206 	br	8007810 <__alt_data_end+0xfc007810>
 80085c8:	04000044 	movi	r16,1
 80085cc:	dc000c15 	stw	r16,48(sp)
 80085d0:	dc000615 	stw	r16,24(sp)
 80085d4:	dc002215 	stw	r16,136(sp)
 80085d8:	e0001115 	stw	zero,68(fp)
 80085dc:	000b883a 	mov	r5,zero
 80085e0:	003c6906 	br	8007788 <__alt_data_end+0xfc007788>
 80085e4:	3021883a 	mov	r16,r6
 80085e8:	003ffb06 	br	80085d8 <__alt_data_end+0xfc0085d8>
 80085ec:	1000021e 	bne	r2,zero,80085f8 <_dtoa_r+0x11e0>
 80085f0:	4200004c 	andi	r8,r8,1
 80085f4:	403e7d1e 	bne	r8,zero,8007fec <__alt_data_end+0xfc007fec>
 80085f8:	01000c04 	movi	r4,48
 80085fc:	00000106 	br	8008604 <_dtoa_r+0x11ec>
 8008600:	102f883a 	mov	r23,r2
 8008604:	b8bfffc4 	addi	r2,r23,-1
 8008608:	10c00007 	ldb	r3,0(r2)
 800860c:	193ffc26 	beq	r3,r4,8008600 <__alt_data_end+0xfc008600>
 8008610:	003e8706 	br	8008030 <__alt_data_end+0xfc008030>
 8008614:	d8800517 	ldw	r2,20(sp)
 8008618:	00a3c83a 	sub	r17,zero,r2
 800861c:	8800a426 	beq	r17,zero,80088b0 <_dtoa_r+0x1498>
 8008620:	888003cc 	andi	r2,r17,15
 8008624:	100490fa 	slli	r2,r2,3
 8008628:	00c20074 	movhi	r3,2049
 800862c:	18df1204 	addi	r3,r3,31816
 8008630:	1885883a 	add	r2,r3,r2
 8008634:	11800017 	ldw	r6,0(r2)
 8008638:	11c00117 	ldw	r7,4(r2)
 800863c:	9009883a 	mov	r4,r18
 8008640:	980b883a 	mov	r5,r19
 8008644:	8823d13a 	srai	r17,r17,4
 8008648:	8011b200 	call	8011b20 <__muldf3>
 800864c:	d8800f15 	stw	r2,60(sp)
 8008650:	d8c01015 	stw	r3,64(sp)
 8008654:	8800e826 	beq	r17,zero,80089f8 <_dtoa_r+0x15e0>
 8008658:	05020074 	movhi	r20,2049
 800865c:	a51f0804 	addi	r20,r20,31776
 8008660:	04000084 	movi	r16,2
 8008664:	8980004c 	andi	r6,r17,1
 8008668:	1009883a 	mov	r4,r2
 800866c:	8823d07a 	srai	r17,r17,1
 8008670:	180b883a 	mov	r5,r3
 8008674:	30000426 	beq	r6,zero,8008688 <_dtoa_r+0x1270>
 8008678:	a1800017 	ldw	r6,0(r20)
 800867c:	a1c00117 	ldw	r7,4(r20)
 8008680:	84000044 	addi	r16,r16,1
 8008684:	8011b200 	call	8011b20 <__muldf3>
 8008688:	a5000204 	addi	r20,r20,8
 800868c:	883ff51e 	bne	r17,zero,8008664 <__alt_data_end+0xfc008664>
 8008690:	d8800f15 	stw	r2,60(sp)
 8008694:	d8c01015 	stw	r3,64(sp)
 8008698:	003c7606 	br	8007874 <__alt_data_end+0xfc007874>
 800869c:	00c00c04 	movi	r3,48
 80086a0:	10c00005 	stb	r3,0(r2)
 80086a4:	d8c00517 	ldw	r3,20(sp)
 80086a8:	bd3fffc3 	ldbu	r20,-1(r23)
 80086ac:	18c00044 	addi	r3,r3,1
 80086b0:	d8c00515 	stw	r3,20(sp)
 80086b4:	003db906 	br	8007d9c <__alt_data_end+0xfc007d9c>
 80086b8:	89400117 	ldw	r5,4(r17)
 80086bc:	e009883a 	mov	r4,fp
 80086c0:	800aad00 	call	800aad0 <_Balloc>
 80086c4:	89800417 	ldw	r6,16(r17)
 80086c8:	89400304 	addi	r5,r17,12
 80086cc:	11000304 	addi	r4,r2,12
 80086d0:	31800084 	addi	r6,r6,2
 80086d4:	318d883a 	add	r6,r6,r6
 80086d8:	318d883a 	add	r6,r6,r6
 80086dc:	1027883a 	mov	r19,r2
 80086e0:	800a7040 	call	800a704 <memcpy>
 80086e4:	01800044 	movi	r6,1
 80086e8:	980b883a 	mov	r5,r19
 80086ec:	e009883a 	mov	r4,fp
 80086f0:	800b30c0 	call	800b30c <__lshift>
 80086f4:	1029883a 	mov	r20,r2
 80086f8:	003ecc06 	br	800822c <__alt_data_end+0xfc00822c>
 80086fc:	00800e44 	movi	r2,57
 8008700:	90809026 	beq	r18,r2,8008944 <_dtoa_r+0x152c>
 8008704:	92000044 	addi	r8,r18,1
 8008708:	003f1f06 	br	8008388 <__alt_data_end+0xfc008388>
 800870c:	9011883a 	mov	r8,r18
 8008710:	8825883a 	mov	r18,r17
 8008714:	a023883a 	mov	r17,r20
 8008718:	003e2906 	br	8007fc0 <__alt_data_end+0xfc007fc0>
 800871c:	002b883a 	mov	r21,zero
 8008720:	0023883a 	mov	r17,zero
 8008724:	003f5406 	br	8008478 <__alt_data_end+0xfc008478>
 8008728:	61bfffc4 	addi	r6,r12,-1
 800872c:	300490fa 	slli	r2,r6,3
 8008730:	00c20074 	movhi	r3,2049
 8008734:	18df1204 	addi	r3,r3,31816
 8008738:	1885883a 	add	r2,r3,r2
 800873c:	11000017 	ldw	r4,0(r2)
 8008740:	11400117 	ldw	r5,4(r2)
 8008744:	d8800717 	ldw	r2,28(sp)
 8008748:	880f883a 	mov	r7,r17
 800874c:	d9801215 	stw	r6,72(sp)
 8008750:	800d883a 	mov	r6,r16
 8008754:	db001615 	stw	r12,88(sp)
 8008758:	15c00044 	addi	r23,r2,1
 800875c:	8011b200 	call	8011b20 <__muldf3>
 8008760:	d9401017 	ldw	r5,64(sp)
 8008764:	d9000f17 	ldw	r4,60(sp)
 8008768:	d8c01515 	stw	r3,84(sp)
 800876c:	d8801415 	stw	r2,80(sp)
 8008770:	8012c880 	call	8012c88 <__fixdfsi>
 8008774:	1009883a 	mov	r4,r2
 8008778:	1021883a 	mov	r16,r2
 800877c:	8012d080 	call	8012d08 <__floatsidf>
 8008780:	d9000f17 	ldw	r4,60(sp)
 8008784:	d9401017 	ldw	r5,64(sp)
 8008788:	100d883a 	mov	r6,r2
 800878c:	180f883a 	mov	r7,r3
 8008790:	801238c0 	call	801238c <__subdf3>
 8008794:	1829883a 	mov	r20,r3
 8008798:	d8c00717 	ldw	r3,28(sp)
 800879c:	84000c04 	addi	r16,r16,48
 80087a0:	1023883a 	mov	r17,r2
 80087a4:	1c000005 	stb	r16,0(r3)
 80087a8:	db001617 	ldw	r12,88(sp)
 80087ac:	00800044 	movi	r2,1
 80087b0:	60802226 	beq	r12,r2,800883c <_dtoa_r+0x1424>
 80087b4:	d9c00717 	ldw	r7,28(sp)
 80087b8:	8805883a 	mov	r2,r17
 80087bc:	b82b883a 	mov	r21,r23
 80087c0:	3b19883a 	add	r12,r7,r12
 80087c4:	6023883a 	mov	r17,r12
 80087c8:	a007883a 	mov	r3,r20
 80087cc:	dc800f15 	stw	r18,60(sp)
 80087d0:	000d883a 	mov	r6,zero
 80087d4:	01d00934 	movhi	r7,16420
 80087d8:	1009883a 	mov	r4,r2
 80087dc:	180b883a 	mov	r5,r3
 80087e0:	8011b200 	call	8011b20 <__muldf3>
 80087e4:	180b883a 	mov	r5,r3
 80087e8:	1009883a 	mov	r4,r2
 80087ec:	1829883a 	mov	r20,r3
 80087f0:	1025883a 	mov	r18,r2
 80087f4:	8012c880 	call	8012c88 <__fixdfsi>
 80087f8:	1009883a 	mov	r4,r2
 80087fc:	1021883a 	mov	r16,r2
 8008800:	8012d080 	call	8012d08 <__floatsidf>
 8008804:	100d883a 	mov	r6,r2
 8008808:	180f883a 	mov	r7,r3
 800880c:	9009883a 	mov	r4,r18
 8008810:	a00b883a 	mov	r5,r20
 8008814:	84000c04 	addi	r16,r16,48
 8008818:	801238c0 	call	801238c <__subdf3>
 800881c:	ad400044 	addi	r21,r21,1
 8008820:	ac3fffc5 	stb	r16,-1(r21)
 8008824:	ac7fea1e 	bne	r21,r17,80087d0 <__alt_data_end+0xfc0087d0>
 8008828:	1023883a 	mov	r17,r2
 800882c:	d8801217 	ldw	r2,72(sp)
 8008830:	dc800f17 	ldw	r18,60(sp)
 8008834:	1829883a 	mov	r20,r3
 8008838:	b8af883a 	add	r23,r23,r2
 800883c:	d9001417 	ldw	r4,80(sp)
 8008840:	d9401517 	ldw	r5,84(sp)
 8008844:	000d883a 	mov	r6,zero
 8008848:	01cff834 	movhi	r7,16352
 800884c:	801064c0 	call	801064c <__adddf3>
 8008850:	880d883a 	mov	r6,r17
 8008854:	a00f883a 	mov	r7,r20
 8008858:	1009883a 	mov	r4,r2
 800885c:	180b883a 	mov	r5,r3
 8008860:	8011a2c0 	call	8011a2c <__ledf2>
 8008864:	10003e0e 	bge	r2,zero,8008960 <_dtoa_r+0x1548>
 8008868:	d9001317 	ldw	r4,76(sp)
 800886c:	bd3fffc3 	ldbu	r20,-1(r23)
 8008870:	d9000515 	stw	r4,20(sp)
 8008874:	003d3b06 	br	8007d64 <__alt_data_end+0xfc007d64>
 8008878:	0027883a 	mov	r19,zero
 800887c:	003f1b06 	br	80084ec <__alt_data_end+0xfc0084ec>
 8008880:	d8800817 	ldw	r2,32(sp)
 8008884:	11e9c83a 	sub	r20,r2,r7
 8008888:	0005883a 	mov	r2,zero
 800888c:	003d5406 	br	8007de0 <__alt_data_end+0xfc007de0>
 8008890:	00800044 	movi	r2,1
 8008894:	003dc706 	br	8007fb4 <__alt_data_end+0xfc007fb4>
 8008898:	d8c00217 	ldw	r3,8(sp)
 800889c:	00800d84 	movi	r2,54
 80088a0:	dd400a17 	ldw	r21,40(sp)
 80088a4:	10c5c83a 	sub	r2,r2,r3
 80088a8:	dd000817 	ldw	r20,32(sp)
 80088ac:	003d4c06 	br	8007de0 <__alt_data_end+0xfc007de0>
 80088b0:	dc800f15 	stw	r18,60(sp)
 80088b4:	dcc01015 	stw	r19,64(sp)
 80088b8:	04000084 	movi	r16,2
 80088bc:	003bed06 	br	8007874 <__alt_data_end+0xfc007874>
 80088c0:	d9000617 	ldw	r4,24(sp)
 80088c4:	203f0d26 	beq	r4,zero,80084fc <__alt_data_end+0xfc0084fc>
 80088c8:	d9800c17 	ldw	r6,48(sp)
 80088cc:	01bcab0e 	bge	zero,r6,8007b7c <__alt_data_end+0xfc007b7c>
 80088d0:	d9401017 	ldw	r5,64(sp)
 80088d4:	d9000f17 	ldw	r4,60(sp)
 80088d8:	000d883a 	mov	r6,zero
 80088dc:	01d00934 	movhi	r7,16420
 80088e0:	8011b200 	call	8011b20 <__muldf3>
 80088e4:	81000044 	addi	r4,r16,1
 80088e8:	d8800f15 	stw	r2,60(sp)
 80088ec:	d8c01015 	stw	r3,64(sp)
 80088f0:	8012d080 	call	8012d08 <__floatsidf>
 80088f4:	d9800f17 	ldw	r6,60(sp)
 80088f8:	d9c01017 	ldw	r7,64(sp)
 80088fc:	1009883a 	mov	r4,r2
 8008900:	180b883a 	mov	r5,r3
 8008904:	8011b200 	call	8011b20 <__muldf3>
 8008908:	01d00734 	movhi	r7,16412
 800890c:	000d883a 	mov	r6,zero
 8008910:	1009883a 	mov	r4,r2
 8008914:	180b883a 	mov	r5,r3
 8008918:	801064c0 	call	801064c <__adddf3>
 800891c:	d9c00517 	ldw	r7,20(sp)
 8008920:	047f3034 	movhi	r17,64704
 8008924:	1021883a 	mov	r16,r2
 8008928:	39ffffc4 	addi	r7,r7,-1
 800892c:	d9c01315 	stw	r7,76(sp)
 8008930:	1c63883a 	add	r17,r3,r17
 8008934:	db000c17 	ldw	r12,48(sp)
 8008938:	003bea06 	br	80078e4 <__alt_data_end+0xfc0078e4>
 800893c:	dc000915 	stw	r16,36(sp)
 8008940:	003e0e06 	br	800817c <__alt_data_end+0xfc00817c>
 8008944:	01000e44 	movi	r4,57
 8008948:	8825883a 	mov	r18,r17
 800894c:	9dc00044 	addi	r23,r19,1
 8008950:	99000005 	stb	r4,0(r19)
 8008954:	a023883a 	mov	r17,r20
 8008958:	dc000915 	stw	r16,36(sp)
 800895c:	003da406 	br	8007ff0 <__alt_data_end+0xfc007ff0>
 8008960:	d9801417 	ldw	r6,80(sp)
 8008964:	d9c01517 	ldw	r7,84(sp)
 8008968:	0009883a 	mov	r4,zero
 800896c:	014ff834 	movhi	r5,16352
 8008970:	801238c0 	call	801238c <__subdf3>
 8008974:	880d883a 	mov	r6,r17
 8008978:	a00f883a 	mov	r7,r20
 800897c:	1009883a 	mov	r4,r2
 8008980:	180b883a 	mov	r5,r3
 8008984:	80119500 	call	8011950 <__gedf2>
 8008988:	00bc7c0e 	bge	zero,r2,8007b7c <__alt_data_end+0xfc007b7c>
 800898c:	01000c04 	movi	r4,48
 8008990:	00000106 	br	8008998 <_dtoa_r+0x1580>
 8008994:	102f883a 	mov	r23,r2
 8008998:	b8bfffc4 	addi	r2,r23,-1
 800899c:	10c00007 	ldb	r3,0(r2)
 80089a0:	193ffc26 	beq	r3,r4,8008994 <__alt_data_end+0xfc008994>
 80089a4:	d9801317 	ldw	r6,76(sp)
 80089a8:	d9800515 	stw	r6,20(sp)
 80089ac:	003c4406 	br	8007ac0 <__alt_data_end+0xfc007ac0>
 80089b0:	d9801317 	ldw	r6,76(sp)
 80089b4:	d9800515 	stw	r6,20(sp)
 80089b8:	003cea06 	br	8007d64 <__alt_data_end+0xfc007d64>
 80089bc:	dd800f17 	ldw	r22,60(sp)
 80089c0:	dcc01017 	ldw	r19,64(sp)
 80089c4:	dc801217 	ldw	r18,72(sp)
 80089c8:	003c6c06 	br	8007b7c <__alt_data_end+0xfc007b7c>
 80089cc:	903e031e 	bne	r18,zero,80081dc <__alt_data_end+0xfc0081dc>
 80089d0:	003ebb06 	br	80084c0 <__alt_data_end+0xfc0084c0>
 80089d4:	103e6c1e 	bne	r2,zero,8008388 <__alt_data_end+0xfc008388>
 80089d8:	4080004c 	andi	r2,r8,1
 80089dc:	103e6a26 	beq	r2,zero,8008388 <__alt_data_end+0xfc008388>
 80089e0:	003e6606 	br	800837c <__alt_data_end+0xfc00837c>
 80089e4:	d8c00317 	ldw	r3,12(sp)
 80089e8:	00800084 	movi	r2,2
 80089ec:	10c02916 	blt	r2,r3,8008a94 <_dtoa_r+0x167c>
 80089f0:	d9000c17 	ldw	r4,48(sp)
 80089f4:	003e8806 	br	8008418 <__alt_data_end+0xfc008418>
 80089f8:	04000084 	movi	r16,2
 80089fc:	003b9d06 	br	8007874 <__alt_data_end+0xfc007874>
 8008a00:	d9001317 	ldw	r4,76(sp)
 8008a04:	d9000515 	stw	r4,20(sp)
 8008a08:	003cd606 	br	8007d64 <__alt_data_end+0xfc007d64>
 8008a0c:	d8801317 	ldw	r2,76(sp)
 8008a10:	d8800515 	stw	r2,20(sp)
 8008a14:	003c2a06 	br	8007ac0 <__alt_data_end+0xfc007ac0>
 8008a18:	d9800317 	ldw	r6,12(sp)
 8008a1c:	00800084 	movi	r2,2
 8008a20:	11801516 	blt	r2,r6,8008a78 <_dtoa_r+0x1660>
 8008a24:	d9c00c17 	ldw	r7,48(sp)
 8008a28:	d9c00615 	stw	r7,24(sp)
 8008a2c:	003df706 	br	800820c <__alt_data_end+0xfc00820c>
 8008a30:	193d3926 	beq	r3,r4,8007f18 <__alt_data_end+0xfc007f18>
 8008a34:	00c00f04 	movi	r3,60
 8008a38:	1885c83a 	sub	r2,r3,r2
 8008a3c:	003ddf06 	br	80081bc <__alt_data_end+0xfc0081bc>
 8008a40:	e009883a 	mov	r4,fp
 8008a44:	e0001115 	stw	zero,68(fp)
 8008a48:	000b883a 	mov	r5,zero
 8008a4c:	800aad00 	call	800aad0 <_Balloc>
 8008a50:	d8800715 	stw	r2,28(sp)
 8008a54:	d8c00717 	ldw	r3,28(sp)
 8008a58:	00bfffc4 	movi	r2,-1
 8008a5c:	01000044 	movi	r4,1
 8008a60:	d8800c15 	stw	r2,48(sp)
 8008a64:	e0c01015 	stw	r3,64(fp)
 8008a68:	d9000b15 	stw	r4,44(sp)
 8008a6c:	d8800615 	stw	r2,24(sp)
 8008a70:	d8002215 	stw	zero,136(sp)
 8008a74:	003c4106 	br	8007b7c <__alt_data_end+0xfc007b7c>
 8008a78:	d8c00c17 	ldw	r3,48(sp)
 8008a7c:	d8c00615 	stw	r3,24(sp)
 8008a80:	003e7006 	br	8008444 <__alt_data_end+0xfc008444>
 8008a84:	04400044 	movi	r17,1
 8008a88:	003b2006 	br	800770c <__alt_data_end+0xfc00770c>
 8008a8c:	000b883a 	mov	r5,zero
 8008a90:	003b3d06 	br	8007788 <__alt_data_end+0xfc007788>
 8008a94:	d8800c17 	ldw	r2,48(sp)
 8008a98:	d8800615 	stw	r2,24(sp)
 8008a9c:	003e6906 	br	8008444 <__alt_data_end+0xfc008444>

08008aa0 <__sflush_r>:
 8008aa0:	2880030b 	ldhu	r2,12(r5)
 8008aa4:	defffb04 	addi	sp,sp,-20
 8008aa8:	dcc00315 	stw	r19,12(sp)
 8008aac:	dc400115 	stw	r17,4(sp)
 8008ab0:	dfc00415 	stw	ra,16(sp)
 8008ab4:	dc800215 	stw	r18,8(sp)
 8008ab8:	dc000015 	stw	r16,0(sp)
 8008abc:	10c0020c 	andi	r3,r2,8
 8008ac0:	2823883a 	mov	r17,r5
 8008ac4:	2027883a 	mov	r19,r4
 8008ac8:	1800311e 	bne	r3,zero,8008b90 <__sflush_r+0xf0>
 8008acc:	28c00117 	ldw	r3,4(r5)
 8008ad0:	10820014 	ori	r2,r2,2048
 8008ad4:	2880030d 	sth	r2,12(r5)
 8008ad8:	00c04b0e 	bge	zero,r3,8008c08 <__sflush_r+0x168>
 8008adc:	8a000a17 	ldw	r8,40(r17)
 8008ae0:	40002326 	beq	r8,zero,8008b70 <__sflush_r+0xd0>
 8008ae4:	9c000017 	ldw	r16,0(r19)
 8008ae8:	10c4000c 	andi	r3,r2,4096
 8008aec:	98000015 	stw	zero,0(r19)
 8008af0:	18004826 	beq	r3,zero,8008c14 <__sflush_r+0x174>
 8008af4:	89801417 	ldw	r6,80(r17)
 8008af8:	10c0010c 	andi	r3,r2,4
 8008afc:	18000626 	beq	r3,zero,8008b18 <__sflush_r+0x78>
 8008b00:	88c00117 	ldw	r3,4(r17)
 8008b04:	88800c17 	ldw	r2,48(r17)
 8008b08:	30cdc83a 	sub	r6,r6,r3
 8008b0c:	10000226 	beq	r2,zero,8008b18 <__sflush_r+0x78>
 8008b10:	88800f17 	ldw	r2,60(r17)
 8008b14:	308dc83a 	sub	r6,r6,r2
 8008b18:	89400717 	ldw	r5,28(r17)
 8008b1c:	000f883a 	mov	r7,zero
 8008b20:	9809883a 	mov	r4,r19
 8008b24:	403ee83a 	callr	r8
 8008b28:	00ffffc4 	movi	r3,-1
 8008b2c:	10c04426 	beq	r2,r3,8008c40 <__sflush_r+0x1a0>
 8008b30:	88c0030b 	ldhu	r3,12(r17)
 8008b34:	89000417 	ldw	r4,16(r17)
 8008b38:	88000115 	stw	zero,4(r17)
 8008b3c:	197dffcc 	andi	r5,r3,63487
 8008b40:	8940030d 	sth	r5,12(r17)
 8008b44:	89000015 	stw	r4,0(r17)
 8008b48:	18c4000c 	andi	r3,r3,4096
 8008b4c:	18002c1e 	bne	r3,zero,8008c00 <__sflush_r+0x160>
 8008b50:	89400c17 	ldw	r5,48(r17)
 8008b54:	9c000015 	stw	r16,0(r19)
 8008b58:	28000526 	beq	r5,zero,8008b70 <__sflush_r+0xd0>
 8008b5c:	88801004 	addi	r2,r17,64
 8008b60:	28800226 	beq	r5,r2,8008b6c <__sflush_r+0xcc>
 8008b64:	9809883a 	mov	r4,r19
 8008b68:	800921c0 	call	800921c <_free_r>
 8008b6c:	88000c15 	stw	zero,48(r17)
 8008b70:	0005883a 	mov	r2,zero
 8008b74:	dfc00417 	ldw	ra,16(sp)
 8008b78:	dcc00317 	ldw	r19,12(sp)
 8008b7c:	dc800217 	ldw	r18,8(sp)
 8008b80:	dc400117 	ldw	r17,4(sp)
 8008b84:	dc000017 	ldw	r16,0(sp)
 8008b88:	dec00504 	addi	sp,sp,20
 8008b8c:	f800283a 	ret
 8008b90:	2c800417 	ldw	r18,16(r5)
 8008b94:	903ff626 	beq	r18,zero,8008b70 <__alt_data_end+0xfc008b70>
 8008b98:	2c000017 	ldw	r16,0(r5)
 8008b9c:	108000cc 	andi	r2,r2,3
 8008ba0:	2c800015 	stw	r18,0(r5)
 8008ba4:	84a1c83a 	sub	r16,r16,r18
 8008ba8:	1000131e 	bne	r2,zero,8008bf8 <__sflush_r+0x158>
 8008bac:	28800517 	ldw	r2,20(r5)
 8008bb0:	88800215 	stw	r2,8(r17)
 8008bb4:	04000316 	blt	zero,r16,8008bc4 <__sflush_r+0x124>
 8008bb8:	003fed06 	br	8008b70 <__alt_data_end+0xfc008b70>
 8008bbc:	90a5883a 	add	r18,r18,r2
 8008bc0:	043feb0e 	bge	zero,r16,8008b70 <__alt_data_end+0xfc008b70>
 8008bc4:	88800917 	ldw	r2,36(r17)
 8008bc8:	89400717 	ldw	r5,28(r17)
 8008bcc:	800f883a 	mov	r7,r16
 8008bd0:	900d883a 	mov	r6,r18
 8008bd4:	9809883a 	mov	r4,r19
 8008bd8:	103ee83a 	callr	r2
 8008bdc:	80a1c83a 	sub	r16,r16,r2
 8008be0:	00bff616 	blt	zero,r2,8008bbc <__alt_data_end+0xfc008bbc>
 8008be4:	88c0030b 	ldhu	r3,12(r17)
 8008be8:	00bfffc4 	movi	r2,-1
 8008bec:	18c01014 	ori	r3,r3,64
 8008bf0:	88c0030d 	sth	r3,12(r17)
 8008bf4:	003fdf06 	br	8008b74 <__alt_data_end+0xfc008b74>
 8008bf8:	0005883a 	mov	r2,zero
 8008bfc:	003fec06 	br	8008bb0 <__alt_data_end+0xfc008bb0>
 8008c00:	88801415 	stw	r2,80(r17)
 8008c04:	003fd206 	br	8008b50 <__alt_data_end+0xfc008b50>
 8008c08:	28c00f17 	ldw	r3,60(r5)
 8008c0c:	00ffb316 	blt	zero,r3,8008adc <__alt_data_end+0xfc008adc>
 8008c10:	003fd706 	br	8008b70 <__alt_data_end+0xfc008b70>
 8008c14:	89400717 	ldw	r5,28(r17)
 8008c18:	000d883a 	mov	r6,zero
 8008c1c:	01c00044 	movi	r7,1
 8008c20:	9809883a 	mov	r4,r19
 8008c24:	403ee83a 	callr	r8
 8008c28:	100d883a 	mov	r6,r2
 8008c2c:	00bfffc4 	movi	r2,-1
 8008c30:	30801426 	beq	r6,r2,8008c84 <__sflush_r+0x1e4>
 8008c34:	8880030b 	ldhu	r2,12(r17)
 8008c38:	8a000a17 	ldw	r8,40(r17)
 8008c3c:	003fae06 	br	8008af8 <__alt_data_end+0xfc008af8>
 8008c40:	98c00017 	ldw	r3,0(r19)
 8008c44:	183fba26 	beq	r3,zero,8008b30 <__alt_data_end+0xfc008b30>
 8008c48:	01000744 	movi	r4,29
 8008c4c:	19000626 	beq	r3,r4,8008c68 <__sflush_r+0x1c8>
 8008c50:	01000584 	movi	r4,22
 8008c54:	19000426 	beq	r3,r4,8008c68 <__sflush_r+0x1c8>
 8008c58:	88c0030b 	ldhu	r3,12(r17)
 8008c5c:	18c01014 	ori	r3,r3,64
 8008c60:	88c0030d 	sth	r3,12(r17)
 8008c64:	003fc306 	br	8008b74 <__alt_data_end+0xfc008b74>
 8008c68:	8880030b 	ldhu	r2,12(r17)
 8008c6c:	88c00417 	ldw	r3,16(r17)
 8008c70:	88000115 	stw	zero,4(r17)
 8008c74:	10bdffcc 	andi	r2,r2,63487
 8008c78:	8880030d 	sth	r2,12(r17)
 8008c7c:	88c00015 	stw	r3,0(r17)
 8008c80:	003fb306 	br	8008b50 <__alt_data_end+0xfc008b50>
 8008c84:	98800017 	ldw	r2,0(r19)
 8008c88:	103fea26 	beq	r2,zero,8008c34 <__alt_data_end+0xfc008c34>
 8008c8c:	00c00744 	movi	r3,29
 8008c90:	10c00226 	beq	r2,r3,8008c9c <__sflush_r+0x1fc>
 8008c94:	00c00584 	movi	r3,22
 8008c98:	10c0031e 	bne	r2,r3,8008ca8 <__sflush_r+0x208>
 8008c9c:	9c000015 	stw	r16,0(r19)
 8008ca0:	0005883a 	mov	r2,zero
 8008ca4:	003fb306 	br	8008b74 <__alt_data_end+0xfc008b74>
 8008ca8:	88c0030b 	ldhu	r3,12(r17)
 8008cac:	3005883a 	mov	r2,r6
 8008cb0:	18c01014 	ori	r3,r3,64
 8008cb4:	88c0030d 	sth	r3,12(r17)
 8008cb8:	003fae06 	br	8008b74 <__alt_data_end+0xfc008b74>

08008cbc <_fflush_r>:
 8008cbc:	defffd04 	addi	sp,sp,-12
 8008cc0:	dc000115 	stw	r16,4(sp)
 8008cc4:	dfc00215 	stw	ra,8(sp)
 8008cc8:	2021883a 	mov	r16,r4
 8008ccc:	20000226 	beq	r4,zero,8008cd8 <_fflush_r+0x1c>
 8008cd0:	20800e17 	ldw	r2,56(r4)
 8008cd4:	10000c26 	beq	r2,zero,8008d08 <_fflush_r+0x4c>
 8008cd8:	2880030f 	ldh	r2,12(r5)
 8008cdc:	1000051e 	bne	r2,zero,8008cf4 <_fflush_r+0x38>
 8008ce0:	0005883a 	mov	r2,zero
 8008ce4:	dfc00217 	ldw	ra,8(sp)
 8008ce8:	dc000117 	ldw	r16,4(sp)
 8008cec:	dec00304 	addi	sp,sp,12
 8008cf0:	f800283a 	ret
 8008cf4:	8009883a 	mov	r4,r16
 8008cf8:	dfc00217 	ldw	ra,8(sp)
 8008cfc:	dc000117 	ldw	r16,4(sp)
 8008d00:	dec00304 	addi	sp,sp,12
 8008d04:	8008aa01 	jmpi	8008aa0 <__sflush_r>
 8008d08:	d9400015 	stw	r5,0(sp)
 8008d0c:	80090a80 	call	80090a8 <__sinit>
 8008d10:	d9400017 	ldw	r5,0(sp)
 8008d14:	003ff006 	br	8008cd8 <__alt_data_end+0xfc008cd8>

08008d18 <fflush>:
 8008d18:	20000526 	beq	r4,zero,8008d30 <fflush+0x18>
 8008d1c:	008200b4 	movhi	r2,2050
 8008d20:	10a73d04 	addi	r2,r2,-25356
 8008d24:	200b883a 	mov	r5,r4
 8008d28:	11000017 	ldw	r4,0(r2)
 8008d2c:	8008cbc1 	jmpi	8008cbc <_fflush_r>
 8008d30:	008200b4 	movhi	r2,2050
 8008d34:	10a73c04 	addi	r2,r2,-25360
 8008d38:	11000017 	ldw	r4,0(r2)
 8008d3c:	01420074 	movhi	r5,2049
 8008d40:	29632f04 	addi	r5,r5,-29508
 8008d44:	8009ab81 	jmpi	8009ab8 <_fwalk_reent>

08008d48 <__fp_unlock>:
 8008d48:	0005883a 	mov	r2,zero
 8008d4c:	f800283a 	ret

08008d50 <_cleanup_r>:
 8008d50:	01420074 	movhi	r5,2049
 8008d54:	297c7104 	addi	r5,r5,-3644
 8008d58:	8009ab81 	jmpi	8009ab8 <_fwalk_reent>

08008d5c <__sinit.part.1>:
 8008d5c:	defff704 	addi	sp,sp,-36
 8008d60:	00c20074 	movhi	r3,2049
 8008d64:	dfc00815 	stw	ra,32(sp)
 8008d68:	ddc00715 	stw	r23,28(sp)
 8008d6c:	dd800615 	stw	r22,24(sp)
 8008d70:	dd400515 	stw	r21,20(sp)
 8008d74:	dd000415 	stw	r20,16(sp)
 8008d78:	dcc00315 	stw	r19,12(sp)
 8008d7c:	dc800215 	stw	r18,8(sp)
 8008d80:	dc400115 	stw	r17,4(sp)
 8008d84:	dc000015 	stw	r16,0(sp)
 8008d88:	18e35404 	addi	r3,r3,-29360
 8008d8c:	24000117 	ldw	r16,4(r4)
 8008d90:	20c00f15 	stw	r3,60(r4)
 8008d94:	2080bb04 	addi	r2,r4,748
 8008d98:	00c000c4 	movi	r3,3
 8008d9c:	20c0b915 	stw	r3,740(r4)
 8008da0:	2080ba15 	stw	r2,744(r4)
 8008da4:	2000b815 	stw	zero,736(r4)
 8008da8:	05c00204 	movi	r23,8
 8008dac:	00800104 	movi	r2,4
 8008db0:	2025883a 	mov	r18,r4
 8008db4:	b80d883a 	mov	r6,r23
 8008db8:	81001704 	addi	r4,r16,92
 8008dbc:	000b883a 	mov	r5,zero
 8008dc0:	80000015 	stw	zero,0(r16)
 8008dc4:	80000115 	stw	zero,4(r16)
 8008dc8:	80000215 	stw	zero,8(r16)
 8008dcc:	8080030d 	sth	r2,12(r16)
 8008dd0:	80001915 	stw	zero,100(r16)
 8008dd4:	8000038d 	sth	zero,14(r16)
 8008dd8:	80000415 	stw	zero,16(r16)
 8008ddc:	80000515 	stw	zero,20(r16)
 8008de0:	80000615 	stw	zero,24(r16)
 8008de4:	800a9a80 	call	800a9a8 <memset>
 8008de8:	05820074 	movhi	r22,2049
 8008dec:	94400217 	ldw	r17,8(r18)
 8008df0:	05420074 	movhi	r21,2049
 8008df4:	05020074 	movhi	r20,2049
 8008df8:	04c20074 	movhi	r19,2049
 8008dfc:	b5b06d04 	addi	r22,r22,-15948
 8008e00:	ad708404 	addi	r21,r21,-15856
 8008e04:	a530a304 	addi	r20,r20,-15732
 8008e08:	9cf0ba04 	addi	r19,r19,-15640
 8008e0c:	85800815 	stw	r22,32(r16)
 8008e10:	85400915 	stw	r21,36(r16)
 8008e14:	85000a15 	stw	r20,40(r16)
 8008e18:	84c00b15 	stw	r19,44(r16)
 8008e1c:	84000715 	stw	r16,28(r16)
 8008e20:	00800284 	movi	r2,10
 8008e24:	8880030d 	sth	r2,12(r17)
 8008e28:	00800044 	movi	r2,1
 8008e2c:	b80d883a 	mov	r6,r23
 8008e30:	89001704 	addi	r4,r17,92
 8008e34:	000b883a 	mov	r5,zero
 8008e38:	88000015 	stw	zero,0(r17)
 8008e3c:	88000115 	stw	zero,4(r17)
 8008e40:	88000215 	stw	zero,8(r17)
 8008e44:	88001915 	stw	zero,100(r17)
 8008e48:	8880038d 	sth	r2,14(r17)
 8008e4c:	88000415 	stw	zero,16(r17)
 8008e50:	88000515 	stw	zero,20(r17)
 8008e54:	88000615 	stw	zero,24(r17)
 8008e58:	800a9a80 	call	800a9a8 <memset>
 8008e5c:	94000317 	ldw	r16,12(r18)
 8008e60:	00800484 	movi	r2,18
 8008e64:	8c400715 	stw	r17,28(r17)
 8008e68:	8d800815 	stw	r22,32(r17)
 8008e6c:	8d400915 	stw	r21,36(r17)
 8008e70:	8d000a15 	stw	r20,40(r17)
 8008e74:	8cc00b15 	stw	r19,44(r17)
 8008e78:	8080030d 	sth	r2,12(r16)
 8008e7c:	00800084 	movi	r2,2
 8008e80:	80000015 	stw	zero,0(r16)
 8008e84:	80000115 	stw	zero,4(r16)
 8008e88:	80000215 	stw	zero,8(r16)
 8008e8c:	80001915 	stw	zero,100(r16)
 8008e90:	8080038d 	sth	r2,14(r16)
 8008e94:	80000415 	stw	zero,16(r16)
 8008e98:	80000515 	stw	zero,20(r16)
 8008e9c:	80000615 	stw	zero,24(r16)
 8008ea0:	b80d883a 	mov	r6,r23
 8008ea4:	000b883a 	mov	r5,zero
 8008ea8:	81001704 	addi	r4,r16,92
 8008eac:	800a9a80 	call	800a9a8 <memset>
 8008eb0:	00800044 	movi	r2,1
 8008eb4:	84000715 	stw	r16,28(r16)
 8008eb8:	85800815 	stw	r22,32(r16)
 8008ebc:	85400915 	stw	r21,36(r16)
 8008ec0:	85000a15 	stw	r20,40(r16)
 8008ec4:	84c00b15 	stw	r19,44(r16)
 8008ec8:	90800e15 	stw	r2,56(r18)
 8008ecc:	dfc00817 	ldw	ra,32(sp)
 8008ed0:	ddc00717 	ldw	r23,28(sp)
 8008ed4:	dd800617 	ldw	r22,24(sp)
 8008ed8:	dd400517 	ldw	r21,20(sp)
 8008edc:	dd000417 	ldw	r20,16(sp)
 8008ee0:	dcc00317 	ldw	r19,12(sp)
 8008ee4:	dc800217 	ldw	r18,8(sp)
 8008ee8:	dc400117 	ldw	r17,4(sp)
 8008eec:	dc000017 	ldw	r16,0(sp)
 8008ef0:	dec00904 	addi	sp,sp,36
 8008ef4:	f800283a 	ret

08008ef8 <__fp_lock>:
 8008ef8:	0005883a 	mov	r2,zero
 8008efc:	f800283a 	ret

08008f00 <__sfmoreglue>:
 8008f00:	defffc04 	addi	sp,sp,-16
 8008f04:	dc800215 	stw	r18,8(sp)
 8008f08:	2825883a 	mov	r18,r5
 8008f0c:	dc000015 	stw	r16,0(sp)
 8008f10:	01401a04 	movi	r5,104
 8008f14:	2021883a 	mov	r16,r4
 8008f18:	913fffc4 	addi	r4,r18,-1
 8008f1c:	dfc00315 	stw	ra,12(sp)
 8008f20:	dc400115 	stw	r17,4(sp)
 8008f24:	8001b580 	call	8001b58 <__mulsi3>
 8008f28:	8009883a 	mov	r4,r16
 8008f2c:	11401d04 	addi	r5,r2,116
 8008f30:	1023883a 	mov	r17,r2
 8008f34:	8009e140 	call	8009e14 <_malloc_r>
 8008f38:	1021883a 	mov	r16,r2
 8008f3c:	10000726 	beq	r2,zero,8008f5c <__sfmoreglue+0x5c>
 8008f40:	11000304 	addi	r4,r2,12
 8008f44:	10000015 	stw	zero,0(r2)
 8008f48:	14800115 	stw	r18,4(r2)
 8008f4c:	11000215 	stw	r4,8(r2)
 8008f50:	89801a04 	addi	r6,r17,104
 8008f54:	000b883a 	mov	r5,zero
 8008f58:	800a9a80 	call	800a9a8 <memset>
 8008f5c:	8005883a 	mov	r2,r16
 8008f60:	dfc00317 	ldw	ra,12(sp)
 8008f64:	dc800217 	ldw	r18,8(sp)
 8008f68:	dc400117 	ldw	r17,4(sp)
 8008f6c:	dc000017 	ldw	r16,0(sp)
 8008f70:	dec00404 	addi	sp,sp,16
 8008f74:	f800283a 	ret

08008f78 <__sfp>:
 8008f78:	defffb04 	addi	sp,sp,-20
 8008f7c:	dc000015 	stw	r16,0(sp)
 8008f80:	040200b4 	movhi	r16,2050
 8008f84:	84273c04 	addi	r16,r16,-25360
 8008f88:	dcc00315 	stw	r19,12(sp)
 8008f8c:	2027883a 	mov	r19,r4
 8008f90:	81000017 	ldw	r4,0(r16)
 8008f94:	dfc00415 	stw	ra,16(sp)
 8008f98:	dc800215 	stw	r18,8(sp)
 8008f9c:	20800e17 	ldw	r2,56(r4)
 8008fa0:	dc400115 	stw	r17,4(sp)
 8008fa4:	1000021e 	bne	r2,zero,8008fb0 <__sfp+0x38>
 8008fa8:	8008d5c0 	call	8008d5c <__sinit.part.1>
 8008fac:	81000017 	ldw	r4,0(r16)
 8008fb0:	2480b804 	addi	r18,r4,736
 8008fb4:	047fffc4 	movi	r17,-1
 8008fb8:	91000117 	ldw	r4,4(r18)
 8008fbc:	94000217 	ldw	r16,8(r18)
 8008fc0:	213fffc4 	addi	r4,r4,-1
 8008fc4:	20000a16 	blt	r4,zero,8008ff0 <__sfp+0x78>
 8008fc8:	8080030f 	ldh	r2,12(r16)
 8008fcc:	10000c26 	beq	r2,zero,8009000 <__sfp+0x88>
 8008fd0:	80c01d04 	addi	r3,r16,116
 8008fd4:	00000206 	br	8008fe0 <__sfp+0x68>
 8008fd8:	18bfe60f 	ldh	r2,-104(r3)
 8008fdc:	10000826 	beq	r2,zero,8009000 <__sfp+0x88>
 8008fe0:	213fffc4 	addi	r4,r4,-1
 8008fe4:	1c3ffd04 	addi	r16,r3,-12
 8008fe8:	18c01a04 	addi	r3,r3,104
 8008fec:	247ffa1e 	bne	r4,r17,8008fd8 <__alt_data_end+0xfc008fd8>
 8008ff0:	90800017 	ldw	r2,0(r18)
 8008ff4:	10001d26 	beq	r2,zero,800906c <__sfp+0xf4>
 8008ff8:	1025883a 	mov	r18,r2
 8008ffc:	003fee06 	br	8008fb8 <__alt_data_end+0xfc008fb8>
 8009000:	00bfffc4 	movi	r2,-1
 8009004:	8080038d 	sth	r2,14(r16)
 8009008:	00800044 	movi	r2,1
 800900c:	8080030d 	sth	r2,12(r16)
 8009010:	80001915 	stw	zero,100(r16)
 8009014:	80000015 	stw	zero,0(r16)
 8009018:	80000215 	stw	zero,8(r16)
 800901c:	80000115 	stw	zero,4(r16)
 8009020:	80000415 	stw	zero,16(r16)
 8009024:	80000515 	stw	zero,20(r16)
 8009028:	80000615 	stw	zero,24(r16)
 800902c:	01800204 	movi	r6,8
 8009030:	000b883a 	mov	r5,zero
 8009034:	81001704 	addi	r4,r16,92
 8009038:	800a9a80 	call	800a9a8 <memset>
 800903c:	8005883a 	mov	r2,r16
 8009040:	80000c15 	stw	zero,48(r16)
 8009044:	80000d15 	stw	zero,52(r16)
 8009048:	80001115 	stw	zero,68(r16)
 800904c:	80001215 	stw	zero,72(r16)
 8009050:	dfc00417 	ldw	ra,16(sp)
 8009054:	dcc00317 	ldw	r19,12(sp)
 8009058:	dc800217 	ldw	r18,8(sp)
 800905c:	dc400117 	ldw	r17,4(sp)
 8009060:	dc000017 	ldw	r16,0(sp)
 8009064:	dec00504 	addi	sp,sp,20
 8009068:	f800283a 	ret
 800906c:	01400104 	movi	r5,4
 8009070:	9809883a 	mov	r4,r19
 8009074:	8008f000 	call	8008f00 <__sfmoreglue>
 8009078:	90800015 	stw	r2,0(r18)
 800907c:	103fde1e 	bne	r2,zero,8008ff8 <__alt_data_end+0xfc008ff8>
 8009080:	00800304 	movi	r2,12
 8009084:	98800015 	stw	r2,0(r19)
 8009088:	0005883a 	mov	r2,zero
 800908c:	003ff006 	br	8009050 <__alt_data_end+0xfc009050>

08009090 <_cleanup>:
 8009090:	008200b4 	movhi	r2,2050
 8009094:	10a73c04 	addi	r2,r2,-25360
 8009098:	11000017 	ldw	r4,0(r2)
 800909c:	01420074 	movhi	r5,2049
 80090a0:	297c7104 	addi	r5,r5,-3644
 80090a4:	8009ab81 	jmpi	8009ab8 <_fwalk_reent>

080090a8 <__sinit>:
 80090a8:	20800e17 	ldw	r2,56(r4)
 80090ac:	10000126 	beq	r2,zero,80090b4 <__sinit+0xc>
 80090b0:	f800283a 	ret
 80090b4:	8008d5c1 	jmpi	8008d5c <__sinit.part.1>

080090b8 <__sfp_lock_acquire>:
 80090b8:	f800283a 	ret

080090bc <__sfp_lock_release>:
 80090bc:	f800283a 	ret

080090c0 <__sinit_lock_acquire>:
 80090c0:	f800283a 	ret

080090c4 <__sinit_lock_release>:
 80090c4:	f800283a 	ret

080090c8 <__fp_lock_all>:
 80090c8:	008200b4 	movhi	r2,2050
 80090cc:	10a73d04 	addi	r2,r2,-25356
 80090d0:	11000017 	ldw	r4,0(r2)
 80090d4:	01420074 	movhi	r5,2049
 80090d8:	2963be04 	addi	r5,r5,-28936
 80090dc:	80099f41 	jmpi	80099f4 <_fwalk>

080090e0 <__fp_unlock_all>:
 80090e0:	008200b4 	movhi	r2,2050
 80090e4:	10a73d04 	addi	r2,r2,-25356
 80090e8:	11000017 	ldw	r4,0(r2)
 80090ec:	01420074 	movhi	r5,2049
 80090f0:	29635204 	addi	r5,r5,-29368
 80090f4:	80099f41 	jmpi	80099f4 <_fwalk>

080090f8 <_malloc_trim_r>:
 80090f8:	defffb04 	addi	sp,sp,-20
 80090fc:	dcc00315 	stw	r19,12(sp)
 8009100:	04c200b4 	movhi	r19,2050
 8009104:	dc800215 	stw	r18,8(sp)
 8009108:	dc400115 	stw	r17,4(sp)
 800910c:	dc000015 	stw	r16,0(sp)
 8009110:	dfc00415 	stw	ra,16(sp)
 8009114:	2821883a 	mov	r16,r5
 8009118:	9ce1a704 	addi	r19,r19,-31076
 800911c:	2025883a 	mov	r18,r4
 8009120:	80134280 	call	8013428 <__malloc_lock>
 8009124:	98800217 	ldw	r2,8(r19)
 8009128:	14400117 	ldw	r17,4(r2)
 800912c:	00bfff04 	movi	r2,-4
 8009130:	88a2703a 	and	r17,r17,r2
 8009134:	8c21c83a 	sub	r16,r17,r16
 8009138:	8403fbc4 	addi	r16,r16,4079
 800913c:	8020d33a 	srli	r16,r16,12
 8009140:	0083ffc4 	movi	r2,4095
 8009144:	843fffc4 	addi	r16,r16,-1
 8009148:	8020933a 	slli	r16,r16,12
 800914c:	1400060e 	bge	r2,r16,8009168 <_malloc_trim_r+0x70>
 8009150:	000b883a 	mov	r5,zero
 8009154:	9009883a 	mov	r4,r18
 8009158:	800c1600 	call	800c160 <_sbrk_r>
 800915c:	98c00217 	ldw	r3,8(r19)
 8009160:	1c47883a 	add	r3,r3,r17
 8009164:	10c00a26 	beq	r2,r3,8009190 <_malloc_trim_r+0x98>
 8009168:	9009883a 	mov	r4,r18
 800916c:	801344c0 	call	801344c <__malloc_unlock>
 8009170:	0005883a 	mov	r2,zero
 8009174:	dfc00417 	ldw	ra,16(sp)
 8009178:	dcc00317 	ldw	r19,12(sp)
 800917c:	dc800217 	ldw	r18,8(sp)
 8009180:	dc400117 	ldw	r17,4(sp)
 8009184:	dc000017 	ldw	r16,0(sp)
 8009188:	dec00504 	addi	sp,sp,20
 800918c:	f800283a 	ret
 8009190:	040bc83a 	sub	r5,zero,r16
 8009194:	9009883a 	mov	r4,r18
 8009198:	800c1600 	call	800c160 <_sbrk_r>
 800919c:	00ffffc4 	movi	r3,-1
 80091a0:	10c00d26 	beq	r2,r3,80091d8 <_malloc_trim_r+0xe0>
 80091a4:	00c200b4 	movhi	r3,2050
 80091a8:	18ef3e04 	addi	r3,r3,-17160
 80091ac:	18800017 	ldw	r2,0(r3)
 80091b0:	99000217 	ldw	r4,8(r19)
 80091b4:	8c23c83a 	sub	r17,r17,r16
 80091b8:	8c400054 	ori	r17,r17,1
 80091bc:	1421c83a 	sub	r16,r2,r16
 80091c0:	24400115 	stw	r17,4(r4)
 80091c4:	9009883a 	mov	r4,r18
 80091c8:	1c000015 	stw	r16,0(r3)
 80091cc:	801344c0 	call	801344c <__malloc_unlock>
 80091d0:	00800044 	movi	r2,1
 80091d4:	003fe706 	br	8009174 <__alt_data_end+0xfc009174>
 80091d8:	000b883a 	mov	r5,zero
 80091dc:	9009883a 	mov	r4,r18
 80091e0:	800c1600 	call	800c160 <_sbrk_r>
 80091e4:	99000217 	ldw	r4,8(r19)
 80091e8:	014003c4 	movi	r5,15
 80091ec:	1107c83a 	sub	r3,r2,r4
 80091f0:	28ffdd0e 	bge	r5,r3,8009168 <__alt_data_end+0xfc009168>
 80091f4:	014200b4 	movhi	r5,2050
 80091f8:	29673f04 	addi	r5,r5,-25348
 80091fc:	29400017 	ldw	r5,0(r5)
 8009200:	18c00054 	ori	r3,r3,1
 8009204:	20c00115 	stw	r3,4(r4)
 8009208:	00c200b4 	movhi	r3,2050
 800920c:	1145c83a 	sub	r2,r2,r5
 8009210:	18ef3e04 	addi	r3,r3,-17160
 8009214:	18800015 	stw	r2,0(r3)
 8009218:	003fd306 	br	8009168 <__alt_data_end+0xfc009168>

0800921c <_free_r>:
 800921c:	28004126 	beq	r5,zero,8009324 <_free_r+0x108>
 8009220:	defffd04 	addi	sp,sp,-12
 8009224:	dc400115 	stw	r17,4(sp)
 8009228:	dc000015 	stw	r16,0(sp)
 800922c:	2023883a 	mov	r17,r4
 8009230:	2821883a 	mov	r16,r5
 8009234:	dfc00215 	stw	ra,8(sp)
 8009238:	80134280 	call	8013428 <__malloc_lock>
 800923c:	81ffff17 	ldw	r7,-4(r16)
 8009240:	00bfff84 	movi	r2,-2
 8009244:	010200b4 	movhi	r4,2050
 8009248:	81bffe04 	addi	r6,r16,-8
 800924c:	3884703a 	and	r2,r7,r2
 8009250:	2121a704 	addi	r4,r4,-31076
 8009254:	308b883a 	add	r5,r6,r2
 8009258:	2a400117 	ldw	r9,4(r5)
 800925c:	22000217 	ldw	r8,8(r4)
 8009260:	00ffff04 	movi	r3,-4
 8009264:	48c6703a 	and	r3,r9,r3
 8009268:	2a005726 	beq	r5,r8,80093c8 <_free_r+0x1ac>
 800926c:	28c00115 	stw	r3,4(r5)
 8009270:	39c0004c 	andi	r7,r7,1
 8009274:	3800091e 	bne	r7,zero,800929c <_free_r+0x80>
 8009278:	823ffe17 	ldw	r8,-8(r16)
 800927c:	22400204 	addi	r9,r4,8
 8009280:	320dc83a 	sub	r6,r6,r8
 8009284:	31c00217 	ldw	r7,8(r6)
 8009288:	1205883a 	add	r2,r2,r8
 800928c:	3a406526 	beq	r7,r9,8009424 <_free_r+0x208>
 8009290:	32000317 	ldw	r8,12(r6)
 8009294:	3a000315 	stw	r8,12(r7)
 8009298:	41c00215 	stw	r7,8(r8)
 800929c:	28cf883a 	add	r7,r5,r3
 80092a0:	39c00117 	ldw	r7,4(r7)
 80092a4:	39c0004c 	andi	r7,r7,1
 80092a8:	38003a26 	beq	r7,zero,8009394 <_free_r+0x178>
 80092ac:	10c00054 	ori	r3,r2,1
 80092b0:	30c00115 	stw	r3,4(r6)
 80092b4:	3087883a 	add	r3,r6,r2
 80092b8:	18800015 	stw	r2,0(r3)
 80092bc:	00c07fc4 	movi	r3,511
 80092c0:	18801936 	bltu	r3,r2,8009328 <_free_r+0x10c>
 80092c4:	1004d0fa 	srli	r2,r2,3
 80092c8:	01c00044 	movi	r7,1
 80092cc:	21400117 	ldw	r5,4(r4)
 80092d0:	10c00044 	addi	r3,r2,1
 80092d4:	18c7883a 	add	r3,r3,r3
 80092d8:	1005d0ba 	srai	r2,r2,2
 80092dc:	18c7883a 	add	r3,r3,r3
 80092e0:	18c7883a 	add	r3,r3,r3
 80092e4:	1907883a 	add	r3,r3,r4
 80092e8:	3884983a 	sll	r2,r7,r2
 80092ec:	19c00017 	ldw	r7,0(r3)
 80092f0:	1a3ffe04 	addi	r8,r3,-8
 80092f4:	1144b03a 	or	r2,r2,r5
 80092f8:	32000315 	stw	r8,12(r6)
 80092fc:	31c00215 	stw	r7,8(r6)
 8009300:	20800115 	stw	r2,4(r4)
 8009304:	19800015 	stw	r6,0(r3)
 8009308:	39800315 	stw	r6,12(r7)
 800930c:	8809883a 	mov	r4,r17
 8009310:	dfc00217 	ldw	ra,8(sp)
 8009314:	dc400117 	ldw	r17,4(sp)
 8009318:	dc000017 	ldw	r16,0(sp)
 800931c:	dec00304 	addi	sp,sp,12
 8009320:	801344c1 	jmpi	801344c <__malloc_unlock>
 8009324:	f800283a 	ret
 8009328:	100ad27a 	srli	r5,r2,9
 800932c:	00c00104 	movi	r3,4
 8009330:	19404a36 	bltu	r3,r5,800945c <_free_r+0x240>
 8009334:	100ad1ba 	srli	r5,r2,6
 8009338:	28c00e44 	addi	r3,r5,57
 800933c:	18c7883a 	add	r3,r3,r3
 8009340:	29400e04 	addi	r5,r5,56
 8009344:	18c7883a 	add	r3,r3,r3
 8009348:	18c7883a 	add	r3,r3,r3
 800934c:	1909883a 	add	r4,r3,r4
 8009350:	20c00017 	ldw	r3,0(r4)
 8009354:	01c200b4 	movhi	r7,2050
 8009358:	213ffe04 	addi	r4,r4,-8
 800935c:	39e1a704 	addi	r7,r7,-31076
 8009360:	20c04426 	beq	r4,r3,8009474 <_free_r+0x258>
 8009364:	01ffff04 	movi	r7,-4
 8009368:	19400117 	ldw	r5,4(r3)
 800936c:	29ca703a 	and	r5,r5,r7
 8009370:	1140022e 	bgeu	r2,r5,800937c <_free_r+0x160>
 8009374:	18c00217 	ldw	r3,8(r3)
 8009378:	20fffb1e 	bne	r4,r3,8009368 <__alt_data_end+0xfc009368>
 800937c:	19000317 	ldw	r4,12(r3)
 8009380:	31000315 	stw	r4,12(r6)
 8009384:	30c00215 	stw	r3,8(r6)
 8009388:	21800215 	stw	r6,8(r4)
 800938c:	19800315 	stw	r6,12(r3)
 8009390:	003fde06 	br	800930c <__alt_data_end+0xfc00930c>
 8009394:	29c00217 	ldw	r7,8(r5)
 8009398:	10c5883a 	add	r2,r2,r3
 800939c:	00c200b4 	movhi	r3,2050
 80093a0:	18e1a904 	addi	r3,r3,-31068
 80093a4:	38c03b26 	beq	r7,r3,8009494 <_free_r+0x278>
 80093a8:	2a000317 	ldw	r8,12(r5)
 80093ac:	11400054 	ori	r5,r2,1
 80093b0:	3087883a 	add	r3,r6,r2
 80093b4:	3a000315 	stw	r8,12(r7)
 80093b8:	41c00215 	stw	r7,8(r8)
 80093bc:	31400115 	stw	r5,4(r6)
 80093c0:	18800015 	stw	r2,0(r3)
 80093c4:	003fbd06 	br	80092bc <__alt_data_end+0xfc0092bc>
 80093c8:	39c0004c 	andi	r7,r7,1
 80093cc:	10c5883a 	add	r2,r2,r3
 80093d0:	3800071e 	bne	r7,zero,80093f0 <_free_r+0x1d4>
 80093d4:	81fffe17 	ldw	r7,-8(r16)
 80093d8:	31cdc83a 	sub	r6,r6,r7
 80093dc:	30c00317 	ldw	r3,12(r6)
 80093e0:	31400217 	ldw	r5,8(r6)
 80093e4:	11c5883a 	add	r2,r2,r7
 80093e8:	28c00315 	stw	r3,12(r5)
 80093ec:	19400215 	stw	r5,8(r3)
 80093f0:	10c00054 	ori	r3,r2,1
 80093f4:	30c00115 	stw	r3,4(r6)
 80093f8:	00c200b4 	movhi	r3,2050
 80093fc:	18e74004 	addi	r3,r3,-25344
 8009400:	18c00017 	ldw	r3,0(r3)
 8009404:	21800215 	stw	r6,8(r4)
 8009408:	10ffc036 	bltu	r2,r3,800930c <__alt_data_end+0xfc00930c>
 800940c:	008200b4 	movhi	r2,2050
 8009410:	10af3504 	addi	r2,r2,-17196
 8009414:	11400017 	ldw	r5,0(r2)
 8009418:	8809883a 	mov	r4,r17
 800941c:	80090f80 	call	80090f8 <_malloc_trim_r>
 8009420:	003fba06 	br	800930c <__alt_data_end+0xfc00930c>
 8009424:	28c9883a 	add	r4,r5,r3
 8009428:	21000117 	ldw	r4,4(r4)
 800942c:	2100004c 	andi	r4,r4,1
 8009430:	2000391e 	bne	r4,zero,8009518 <_free_r+0x2fc>
 8009434:	29c00217 	ldw	r7,8(r5)
 8009438:	29000317 	ldw	r4,12(r5)
 800943c:	1885883a 	add	r2,r3,r2
 8009440:	10c00054 	ori	r3,r2,1
 8009444:	39000315 	stw	r4,12(r7)
 8009448:	21c00215 	stw	r7,8(r4)
 800944c:	30c00115 	stw	r3,4(r6)
 8009450:	308d883a 	add	r6,r6,r2
 8009454:	30800015 	stw	r2,0(r6)
 8009458:	003fac06 	br	800930c <__alt_data_end+0xfc00930c>
 800945c:	00c00504 	movi	r3,20
 8009460:	19401536 	bltu	r3,r5,80094b8 <_free_r+0x29c>
 8009464:	28c01704 	addi	r3,r5,92
 8009468:	18c7883a 	add	r3,r3,r3
 800946c:	294016c4 	addi	r5,r5,91
 8009470:	003fb406 	br	8009344 <__alt_data_end+0xfc009344>
 8009474:	280bd0ba 	srai	r5,r5,2
 8009478:	00c00044 	movi	r3,1
 800947c:	38800117 	ldw	r2,4(r7)
 8009480:	194a983a 	sll	r5,r3,r5
 8009484:	2007883a 	mov	r3,r4
 8009488:	2884b03a 	or	r2,r5,r2
 800948c:	38800115 	stw	r2,4(r7)
 8009490:	003fbb06 	br	8009380 <__alt_data_end+0xfc009380>
 8009494:	21800515 	stw	r6,20(r4)
 8009498:	21800415 	stw	r6,16(r4)
 800949c:	10c00054 	ori	r3,r2,1
 80094a0:	31c00315 	stw	r7,12(r6)
 80094a4:	31c00215 	stw	r7,8(r6)
 80094a8:	30c00115 	stw	r3,4(r6)
 80094ac:	308d883a 	add	r6,r6,r2
 80094b0:	30800015 	stw	r2,0(r6)
 80094b4:	003f9506 	br	800930c <__alt_data_end+0xfc00930c>
 80094b8:	00c01504 	movi	r3,84
 80094bc:	19400536 	bltu	r3,r5,80094d4 <_free_r+0x2b8>
 80094c0:	100ad33a 	srli	r5,r2,12
 80094c4:	28c01bc4 	addi	r3,r5,111
 80094c8:	18c7883a 	add	r3,r3,r3
 80094cc:	29401b84 	addi	r5,r5,110
 80094d0:	003f9c06 	br	8009344 <__alt_data_end+0xfc009344>
 80094d4:	00c05504 	movi	r3,340
 80094d8:	19400536 	bltu	r3,r5,80094f0 <_free_r+0x2d4>
 80094dc:	100ad3fa 	srli	r5,r2,15
 80094e0:	28c01e04 	addi	r3,r5,120
 80094e4:	18c7883a 	add	r3,r3,r3
 80094e8:	29401dc4 	addi	r5,r5,119
 80094ec:	003f9506 	br	8009344 <__alt_data_end+0xfc009344>
 80094f0:	00c15504 	movi	r3,1364
 80094f4:	19400536 	bltu	r3,r5,800950c <_free_r+0x2f0>
 80094f8:	100ad4ba 	srli	r5,r2,18
 80094fc:	28c01f44 	addi	r3,r5,125
 8009500:	18c7883a 	add	r3,r3,r3
 8009504:	29401f04 	addi	r5,r5,124
 8009508:	003f8e06 	br	8009344 <__alt_data_end+0xfc009344>
 800950c:	00c03f84 	movi	r3,254
 8009510:	01401f84 	movi	r5,126
 8009514:	003f8b06 	br	8009344 <__alt_data_end+0xfc009344>
 8009518:	10c00054 	ori	r3,r2,1
 800951c:	30c00115 	stw	r3,4(r6)
 8009520:	308d883a 	add	r6,r6,r2
 8009524:	30800015 	stw	r2,0(r6)
 8009528:	003f7806 	br	800930c <__alt_data_end+0xfc00930c>

0800952c <__sfvwrite_r>:
 800952c:	30800217 	ldw	r2,8(r6)
 8009530:	10006726 	beq	r2,zero,80096d0 <__sfvwrite_r+0x1a4>
 8009534:	28c0030b 	ldhu	r3,12(r5)
 8009538:	defff404 	addi	sp,sp,-48
 800953c:	dd400715 	stw	r21,28(sp)
 8009540:	dd000615 	stw	r20,24(sp)
 8009544:	dc000215 	stw	r16,8(sp)
 8009548:	dfc00b15 	stw	ra,44(sp)
 800954c:	df000a15 	stw	fp,40(sp)
 8009550:	ddc00915 	stw	r23,36(sp)
 8009554:	dd800815 	stw	r22,32(sp)
 8009558:	dcc00515 	stw	r19,20(sp)
 800955c:	dc800415 	stw	r18,16(sp)
 8009560:	dc400315 	stw	r17,12(sp)
 8009564:	1880020c 	andi	r2,r3,8
 8009568:	2821883a 	mov	r16,r5
 800956c:	202b883a 	mov	r21,r4
 8009570:	3029883a 	mov	r20,r6
 8009574:	10002726 	beq	r2,zero,8009614 <__sfvwrite_r+0xe8>
 8009578:	28800417 	ldw	r2,16(r5)
 800957c:	10002526 	beq	r2,zero,8009614 <__sfvwrite_r+0xe8>
 8009580:	1880008c 	andi	r2,r3,2
 8009584:	a4400017 	ldw	r17,0(r20)
 8009588:	10002a26 	beq	r2,zero,8009634 <__sfvwrite_r+0x108>
 800958c:	05a00034 	movhi	r22,32768
 8009590:	0027883a 	mov	r19,zero
 8009594:	0025883a 	mov	r18,zero
 8009598:	b5bf0004 	addi	r22,r22,-1024
 800959c:	980d883a 	mov	r6,r19
 80095a0:	a809883a 	mov	r4,r21
 80095a4:	90004626 	beq	r18,zero,80096c0 <__sfvwrite_r+0x194>
 80095a8:	900f883a 	mov	r7,r18
 80095ac:	b480022e 	bgeu	r22,r18,80095b8 <__sfvwrite_r+0x8c>
 80095b0:	01e00034 	movhi	r7,32768
 80095b4:	39ff0004 	addi	r7,r7,-1024
 80095b8:	80800917 	ldw	r2,36(r16)
 80095bc:	81400717 	ldw	r5,28(r16)
 80095c0:	103ee83a 	callr	r2
 80095c4:	00805a0e 	bge	zero,r2,8009730 <__sfvwrite_r+0x204>
 80095c8:	a0c00217 	ldw	r3,8(r20)
 80095cc:	98a7883a 	add	r19,r19,r2
 80095d0:	90a5c83a 	sub	r18,r18,r2
 80095d4:	1885c83a 	sub	r2,r3,r2
 80095d8:	a0800215 	stw	r2,8(r20)
 80095dc:	103fef1e 	bne	r2,zero,800959c <__alt_data_end+0xfc00959c>
 80095e0:	0005883a 	mov	r2,zero
 80095e4:	dfc00b17 	ldw	ra,44(sp)
 80095e8:	df000a17 	ldw	fp,40(sp)
 80095ec:	ddc00917 	ldw	r23,36(sp)
 80095f0:	dd800817 	ldw	r22,32(sp)
 80095f4:	dd400717 	ldw	r21,28(sp)
 80095f8:	dd000617 	ldw	r20,24(sp)
 80095fc:	dcc00517 	ldw	r19,20(sp)
 8009600:	dc800417 	ldw	r18,16(sp)
 8009604:	dc400317 	ldw	r17,12(sp)
 8009608:	dc000217 	ldw	r16,8(sp)
 800960c:	dec00c04 	addi	sp,sp,48
 8009610:	f800283a 	ret
 8009614:	800b883a 	mov	r5,r16
 8009618:	a809883a 	mov	r4,r21
 800961c:	800709c0 	call	800709c <__swsetup_r>
 8009620:	1000ee1e 	bne	r2,zero,80099dc <__sfvwrite_r+0x4b0>
 8009624:	80c0030b 	ldhu	r3,12(r16)
 8009628:	a4400017 	ldw	r17,0(r20)
 800962c:	1880008c 	andi	r2,r3,2
 8009630:	103fd61e 	bne	r2,zero,800958c <__alt_data_end+0xfc00958c>
 8009634:	1880004c 	andi	r2,r3,1
 8009638:	1000421e 	bne	r2,zero,8009744 <__sfvwrite_r+0x218>
 800963c:	0039883a 	mov	fp,zero
 8009640:	0025883a 	mov	r18,zero
 8009644:	90001a26 	beq	r18,zero,80096b0 <__sfvwrite_r+0x184>
 8009648:	1880800c 	andi	r2,r3,512
 800964c:	84c00217 	ldw	r19,8(r16)
 8009650:	10002126 	beq	r2,zero,80096d8 <__sfvwrite_r+0x1ac>
 8009654:	982f883a 	mov	r23,r19
 8009658:	94c09636 	bltu	r18,r19,80098b4 <__sfvwrite_r+0x388>
 800965c:	1881200c 	andi	r2,r3,1152
 8009660:	1000a11e 	bne	r2,zero,80098e8 <__sfvwrite_r+0x3bc>
 8009664:	81000017 	ldw	r4,0(r16)
 8009668:	b80d883a 	mov	r6,r23
 800966c:	e00b883a 	mov	r5,fp
 8009670:	800a84c0 	call	800a84c <memmove>
 8009674:	80c00217 	ldw	r3,8(r16)
 8009678:	81000017 	ldw	r4,0(r16)
 800967c:	9005883a 	mov	r2,r18
 8009680:	1ce7c83a 	sub	r19,r3,r19
 8009684:	25cf883a 	add	r7,r4,r23
 8009688:	84c00215 	stw	r19,8(r16)
 800968c:	81c00015 	stw	r7,0(r16)
 8009690:	a0c00217 	ldw	r3,8(r20)
 8009694:	e0b9883a 	add	fp,fp,r2
 8009698:	90a5c83a 	sub	r18,r18,r2
 800969c:	18a7c83a 	sub	r19,r3,r2
 80096a0:	a4c00215 	stw	r19,8(r20)
 80096a4:	983fce26 	beq	r19,zero,80095e0 <__alt_data_end+0xfc0095e0>
 80096a8:	80c0030b 	ldhu	r3,12(r16)
 80096ac:	903fe61e 	bne	r18,zero,8009648 <__alt_data_end+0xfc009648>
 80096b0:	8f000017 	ldw	fp,0(r17)
 80096b4:	8c800117 	ldw	r18,4(r17)
 80096b8:	8c400204 	addi	r17,r17,8
 80096bc:	003fe106 	br	8009644 <__alt_data_end+0xfc009644>
 80096c0:	8cc00017 	ldw	r19,0(r17)
 80096c4:	8c800117 	ldw	r18,4(r17)
 80096c8:	8c400204 	addi	r17,r17,8
 80096cc:	003fb306 	br	800959c <__alt_data_end+0xfc00959c>
 80096d0:	0005883a 	mov	r2,zero
 80096d4:	f800283a 	ret
 80096d8:	81000017 	ldw	r4,0(r16)
 80096dc:	80800417 	ldw	r2,16(r16)
 80096e0:	11005a36 	bltu	r2,r4,800984c <__sfvwrite_r+0x320>
 80096e4:	85c00517 	ldw	r23,20(r16)
 80096e8:	95c05836 	bltu	r18,r23,800984c <__sfvwrite_r+0x320>
 80096ec:	00a00034 	movhi	r2,32768
 80096f0:	10bfffc4 	addi	r2,r2,-1
 80096f4:	9009883a 	mov	r4,r18
 80096f8:	1480012e 	bgeu	r2,r18,8009700 <__sfvwrite_r+0x1d4>
 80096fc:	1009883a 	mov	r4,r2
 8009700:	b80b883a 	mov	r5,r23
 8009704:	80019a40 	call	80019a4 <__divsi3>
 8009708:	b80b883a 	mov	r5,r23
 800970c:	1009883a 	mov	r4,r2
 8009710:	8001b580 	call	8001b58 <__mulsi3>
 8009714:	81400717 	ldw	r5,28(r16)
 8009718:	80c00917 	ldw	r3,36(r16)
 800971c:	100f883a 	mov	r7,r2
 8009720:	e00d883a 	mov	r6,fp
 8009724:	a809883a 	mov	r4,r21
 8009728:	183ee83a 	callr	r3
 800972c:	00bfd816 	blt	zero,r2,8009690 <__alt_data_end+0xfc009690>
 8009730:	8080030b 	ldhu	r2,12(r16)
 8009734:	10801014 	ori	r2,r2,64
 8009738:	8080030d 	sth	r2,12(r16)
 800973c:	00bfffc4 	movi	r2,-1
 8009740:	003fa806 	br	80095e4 <__alt_data_end+0xfc0095e4>
 8009744:	0027883a 	mov	r19,zero
 8009748:	0011883a 	mov	r8,zero
 800974c:	0039883a 	mov	fp,zero
 8009750:	0025883a 	mov	r18,zero
 8009754:	90001f26 	beq	r18,zero,80097d4 <__sfvwrite_r+0x2a8>
 8009758:	40005a26 	beq	r8,zero,80098c4 <__sfvwrite_r+0x398>
 800975c:	982d883a 	mov	r22,r19
 8009760:	94c0012e 	bgeu	r18,r19,8009768 <__sfvwrite_r+0x23c>
 8009764:	902d883a 	mov	r22,r18
 8009768:	81000017 	ldw	r4,0(r16)
 800976c:	80800417 	ldw	r2,16(r16)
 8009770:	b02f883a 	mov	r23,r22
 8009774:	81c00517 	ldw	r7,20(r16)
 8009778:	1100032e 	bgeu	r2,r4,8009788 <__sfvwrite_r+0x25c>
 800977c:	80c00217 	ldw	r3,8(r16)
 8009780:	38c7883a 	add	r3,r7,r3
 8009784:	1d801816 	blt	r3,r22,80097e8 <__sfvwrite_r+0x2bc>
 8009788:	b1c03e16 	blt	r22,r7,8009884 <__sfvwrite_r+0x358>
 800978c:	80800917 	ldw	r2,36(r16)
 8009790:	81400717 	ldw	r5,28(r16)
 8009794:	e00d883a 	mov	r6,fp
 8009798:	da000115 	stw	r8,4(sp)
 800979c:	a809883a 	mov	r4,r21
 80097a0:	103ee83a 	callr	r2
 80097a4:	102f883a 	mov	r23,r2
 80097a8:	da000117 	ldw	r8,4(sp)
 80097ac:	00bfe00e 	bge	zero,r2,8009730 <__alt_data_end+0xfc009730>
 80097b0:	9de7c83a 	sub	r19,r19,r23
 80097b4:	98001f26 	beq	r19,zero,8009834 <__sfvwrite_r+0x308>
 80097b8:	a0800217 	ldw	r2,8(r20)
 80097bc:	e5f9883a 	add	fp,fp,r23
 80097c0:	95e5c83a 	sub	r18,r18,r23
 80097c4:	15efc83a 	sub	r23,r2,r23
 80097c8:	a5c00215 	stw	r23,8(r20)
 80097cc:	b83f8426 	beq	r23,zero,80095e0 <__alt_data_end+0xfc0095e0>
 80097d0:	903fe11e 	bne	r18,zero,8009758 <__alt_data_end+0xfc009758>
 80097d4:	8f000017 	ldw	fp,0(r17)
 80097d8:	8c800117 	ldw	r18,4(r17)
 80097dc:	0011883a 	mov	r8,zero
 80097e0:	8c400204 	addi	r17,r17,8
 80097e4:	003fdb06 	br	8009754 <__alt_data_end+0xfc009754>
 80097e8:	180d883a 	mov	r6,r3
 80097ec:	e00b883a 	mov	r5,fp
 80097f0:	da000115 	stw	r8,4(sp)
 80097f4:	d8c00015 	stw	r3,0(sp)
 80097f8:	800a84c0 	call	800a84c <memmove>
 80097fc:	d8c00017 	ldw	r3,0(sp)
 8009800:	80800017 	ldw	r2,0(r16)
 8009804:	800b883a 	mov	r5,r16
 8009808:	a809883a 	mov	r4,r21
 800980c:	10c5883a 	add	r2,r2,r3
 8009810:	80800015 	stw	r2,0(r16)
 8009814:	d8c00015 	stw	r3,0(sp)
 8009818:	8008cbc0 	call	8008cbc <_fflush_r>
 800981c:	d8c00017 	ldw	r3,0(sp)
 8009820:	da000117 	ldw	r8,4(sp)
 8009824:	103fc21e 	bne	r2,zero,8009730 <__alt_data_end+0xfc009730>
 8009828:	182f883a 	mov	r23,r3
 800982c:	9de7c83a 	sub	r19,r19,r23
 8009830:	983fe11e 	bne	r19,zero,80097b8 <__alt_data_end+0xfc0097b8>
 8009834:	800b883a 	mov	r5,r16
 8009838:	a809883a 	mov	r4,r21
 800983c:	8008cbc0 	call	8008cbc <_fflush_r>
 8009840:	103fbb1e 	bne	r2,zero,8009730 <__alt_data_end+0xfc009730>
 8009844:	0011883a 	mov	r8,zero
 8009848:	003fdb06 	br	80097b8 <__alt_data_end+0xfc0097b8>
 800984c:	94c0012e 	bgeu	r18,r19,8009854 <__sfvwrite_r+0x328>
 8009850:	9027883a 	mov	r19,r18
 8009854:	980d883a 	mov	r6,r19
 8009858:	e00b883a 	mov	r5,fp
 800985c:	800a84c0 	call	800a84c <memmove>
 8009860:	80800217 	ldw	r2,8(r16)
 8009864:	80c00017 	ldw	r3,0(r16)
 8009868:	14c5c83a 	sub	r2,r2,r19
 800986c:	1cc7883a 	add	r3,r3,r19
 8009870:	80800215 	stw	r2,8(r16)
 8009874:	80c00015 	stw	r3,0(r16)
 8009878:	10004326 	beq	r2,zero,8009988 <__sfvwrite_r+0x45c>
 800987c:	9805883a 	mov	r2,r19
 8009880:	003f8306 	br	8009690 <__alt_data_end+0xfc009690>
 8009884:	b00d883a 	mov	r6,r22
 8009888:	e00b883a 	mov	r5,fp
 800988c:	da000115 	stw	r8,4(sp)
 8009890:	800a84c0 	call	800a84c <memmove>
 8009894:	80800217 	ldw	r2,8(r16)
 8009898:	80c00017 	ldw	r3,0(r16)
 800989c:	da000117 	ldw	r8,4(sp)
 80098a0:	1585c83a 	sub	r2,r2,r22
 80098a4:	1dad883a 	add	r22,r3,r22
 80098a8:	80800215 	stw	r2,8(r16)
 80098ac:	85800015 	stw	r22,0(r16)
 80098b0:	003fbf06 	br	80097b0 <__alt_data_end+0xfc0097b0>
 80098b4:	81000017 	ldw	r4,0(r16)
 80098b8:	9027883a 	mov	r19,r18
 80098bc:	902f883a 	mov	r23,r18
 80098c0:	003f6906 	br	8009668 <__alt_data_end+0xfc009668>
 80098c4:	900d883a 	mov	r6,r18
 80098c8:	01400284 	movi	r5,10
 80098cc:	e009883a 	mov	r4,fp
 80098d0:	800a6200 	call	800a620 <memchr>
 80098d4:	10003e26 	beq	r2,zero,80099d0 <__sfvwrite_r+0x4a4>
 80098d8:	10800044 	addi	r2,r2,1
 80098dc:	1727c83a 	sub	r19,r2,fp
 80098e0:	02000044 	movi	r8,1
 80098e4:	003f9d06 	br	800975c <__alt_data_end+0xfc00975c>
 80098e8:	80800517 	ldw	r2,20(r16)
 80098ec:	81400417 	ldw	r5,16(r16)
 80098f0:	81c00017 	ldw	r7,0(r16)
 80098f4:	10a7883a 	add	r19,r2,r2
 80098f8:	9885883a 	add	r2,r19,r2
 80098fc:	1026d7fa 	srli	r19,r2,31
 8009900:	396dc83a 	sub	r22,r7,r5
 8009904:	b1000044 	addi	r4,r22,1
 8009908:	9885883a 	add	r2,r19,r2
 800990c:	1027d07a 	srai	r19,r2,1
 8009910:	2485883a 	add	r2,r4,r18
 8009914:	980d883a 	mov	r6,r19
 8009918:	9880022e 	bgeu	r19,r2,8009924 <__sfvwrite_r+0x3f8>
 800991c:	1027883a 	mov	r19,r2
 8009920:	100d883a 	mov	r6,r2
 8009924:	18c1000c 	andi	r3,r3,1024
 8009928:	18001c26 	beq	r3,zero,800999c <__sfvwrite_r+0x470>
 800992c:	300b883a 	mov	r5,r6
 8009930:	a809883a 	mov	r4,r21
 8009934:	8009e140 	call	8009e14 <_malloc_r>
 8009938:	102f883a 	mov	r23,r2
 800993c:	10002926 	beq	r2,zero,80099e4 <__sfvwrite_r+0x4b8>
 8009940:	81400417 	ldw	r5,16(r16)
 8009944:	b00d883a 	mov	r6,r22
 8009948:	1009883a 	mov	r4,r2
 800994c:	800a7040 	call	800a704 <memcpy>
 8009950:	8080030b 	ldhu	r2,12(r16)
 8009954:	00fedfc4 	movi	r3,-1153
 8009958:	10c4703a 	and	r2,r2,r3
 800995c:	10802014 	ori	r2,r2,128
 8009960:	8080030d 	sth	r2,12(r16)
 8009964:	bd89883a 	add	r4,r23,r22
 8009968:	9d8fc83a 	sub	r7,r19,r22
 800996c:	85c00415 	stw	r23,16(r16)
 8009970:	84c00515 	stw	r19,20(r16)
 8009974:	81000015 	stw	r4,0(r16)
 8009978:	9027883a 	mov	r19,r18
 800997c:	81c00215 	stw	r7,8(r16)
 8009980:	902f883a 	mov	r23,r18
 8009984:	003f3806 	br	8009668 <__alt_data_end+0xfc009668>
 8009988:	800b883a 	mov	r5,r16
 800998c:	a809883a 	mov	r4,r21
 8009990:	8008cbc0 	call	8008cbc <_fflush_r>
 8009994:	103fb926 	beq	r2,zero,800987c <__alt_data_end+0xfc00987c>
 8009998:	003f6506 	br	8009730 <__alt_data_end+0xfc009730>
 800999c:	a809883a 	mov	r4,r21
 80099a0:	800bb880 	call	800bb88 <_realloc_r>
 80099a4:	102f883a 	mov	r23,r2
 80099a8:	103fee1e 	bne	r2,zero,8009964 <__alt_data_end+0xfc009964>
 80099ac:	81400417 	ldw	r5,16(r16)
 80099b0:	a809883a 	mov	r4,r21
 80099b4:	800921c0 	call	800921c <_free_r>
 80099b8:	8080030b 	ldhu	r2,12(r16)
 80099bc:	00ffdfc4 	movi	r3,-129
 80099c0:	1884703a 	and	r2,r3,r2
 80099c4:	00c00304 	movi	r3,12
 80099c8:	a8c00015 	stw	r3,0(r21)
 80099cc:	003f5906 	br	8009734 <__alt_data_end+0xfc009734>
 80099d0:	94c00044 	addi	r19,r18,1
 80099d4:	02000044 	movi	r8,1
 80099d8:	003f6006 	br	800975c <__alt_data_end+0xfc00975c>
 80099dc:	00bfffc4 	movi	r2,-1
 80099e0:	003f0006 	br	80095e4 <__alt_data_end+0xfc0095e4>
 80099e4:	00800304 	movi	r2,12
 80099e8:	a8800015 	stw	r2,0(r21)
 80099ec:	8080030b 	ldhu	r2,12(r16)
 80099f0:	003f5006 	br	8009734 <__alt_data_end+0xfc009734>

080099f4 <_fwalk>:
 80099f4:	defff704 	addi	sp,sp,-36
 80099f8:	dd000415 	stw	r20,16(sp)
 80099fc:	dfc00815 	stw	ra,32(sp)
 8009a00:	ddc00715 	stw	r23,28(sp)
 8009a04:	dd800615 	stw	r22,24(sp)
 8009a08:	dd400515 	stw	r21,20(sp)
 8009a0c:	dcc00315 	stw	r19,12(sp)
 8009a10:	dc800215 	stw	r18,8(sp)
 8009a14:	dc400115 	stw	r17,4(sp)
 8009a18:	dc000015 	stw	r16,0(sp)
 8009a1c:	2500b804 	addi	r20,r4,736
 8009a20:	a0002326 	beq	r20,zero,8009ab0 <_fwalk+0xbc>
 8009a24:	282b883a 	mov	r21,r5
 8009a28:	002f883a 	mov	r23,zero
 8009a2c:	05800044 	movi	r22,1
 8009a30:	04ffffc4 	movi	r19,-1
 8009a34:	a4400117 	ldw	r17,4(r20)
 8009a38:	a4800217 	ldw	r18,8(r20)
 8009a3c:	8c7fffc4 	addi	r17,r17,-1
 8009a40:	88000d16 	blt	r17,zero,8009a78 <_fwalk+0x84>
 8009a44:	94000304 	addi	r16,r18,12
 8009a48:	94800384 	addi	r18,r18,14
 8009a4c:	8080000b 	ldhu	r2,0(r16)
 8009a50:	8c7fffc4 	addi	r17,r17,-1
 8009a54:	813ffd04 	addi	r4,r16,-12
 8009a58:	b080042e 	bgeu	r22,r2,8009a6c <_fwalk+0x78>
 8009a5c:	9080000f 	ldh	r2,0(r18)
 8009a60:	14c00226 	beq	r2,r19,8009a6c <_fwalk+0x78>
 8009a64:	a83ee83a 	callr	r21
 8009a68:	b8aeb03a 	or	r23,r23,r2
 8009a6c:	84001a04 	addi	r16,r16,104
 8009a70:	94801a04 	addi	r18,r18,104
 8009a74:	8cfff51e 	bne	r17,r19,8009a4c <__alt_data_end+0xfc009a4c>
 8009a78:	a5000017 	ldw	r20,0(r20)
 8009a7c:	a03fed1e 	bne	r20,zero,8009a34 <__alt_data_end+0xfc009a34>
 8009a80:	b805883a 	mov	r2,r23
 8009a84:	dfc00817 	ldw	ra,32(sp)
 8009a88:	ddc00717 	ldw	r23,28(sp)
 8009a8c:	dd800617 	ldw	r22,24(sp)
 8009a90:	dd400517 	ldw	r21,20(sp)
 8009a94:	dd000417 	ldw	r20,16(sp)
 8009a98:	dcc00317 	ldw	r19,12(sp)
 8009a9c:	dc800217 	ldw	r18,8(sp)
 8009aa0:	dc400117 	ldw	r17,4(sp)
 8009aa4:	dc000017 	ldw	r16,0(sp)
 8009aa8:	dec00904 	addi	sp,sp,36
 8009aac:	f800283a 	ret
 8009ab0:	002f883a 	mov	r23,zero
 8009ab4:	003ff206 	br	8009a80 <__alt_data_end+0xfc009a80>

08009ab8 <_fwalk_reent>:
 8009ab8:	defff704 	addi	sp,sp,-36
 8009abc:	dd000415 	stw	r20,16(sp)
 8009ac0:	dfc00815 	stw	ra,32(sp)
 8009ac4:	ddc00715 	stw	r23,28(sp)
 8009ac8:	dd800615 	stw	r22,24(sp)
 8009acc:	dd400515 	stw	r21,20(sp)
 8009ad0:	dcc00315 	stw	r19,12(sp)
 8009ad4:	dc800215 	stw	r18,8(sp)
 8009ad8:	dc400115 	stw	r17,4(sp)
 8009adc:	dc000015 	stw	r16,0(sp)
 8009ae0:	2500b804 	addi	r20,r4,736
 8009ae4:	a0002326 	beq	r20,zero,8009b74 <_fwalk_reent+0xbc>
 8009ae8:	282b883a 	mov	r21,r5
 8009aec:	2027883a 	mov	r19,r4
 8009af0:	002f883a 	mov	r23,zero
 8009af4:	05800044 	movi	r22,1
 8009af8:	04bfffc4 	movi	r18,-1
 8009afc:	a4400117 	ldw	r17,4(r20)
 8009b00:	a4000217 	ldw	r16,8(r20)
 8009b04:	8c7fffc4 	addi	r17,r17,-1
 8009b08:	88000c16 	blt	r17,zero,8009b3c <_fwalk_reent+0x84>
 8009b0c:	84000304 	addi	r16,r16,12
 8009b10:	8080000b 	ldhu	r2,0(r16)
 8009b14:	8c7fffc4 	addi	r17,r17,-1
 8009b18:	817ffd04 	addi	r5,r16,-12
 8009b1c:	b080052e 	bgeu	r22,r2,8009b34 <_fwalk_reent+0x7c>
 8009b20:	8080008f 	ldh	r2,2(r16)
 8009b24:	9809883a 	mov	r4,r19
 8009b28:	14800226 	beq	r2,r18,8009b34 <_fwalk_reent+0x7c>
 8009b2c:	a83ee83a 	callr	r21
 8009b30:	b8aeb03a 	or	r23,r23,r2
 8009b34:	84001a04 	addi	r16,r16,104
 8009b38:	8cbff51e 	bne	r17,r18,8009b10 <__alt_data_end+0xfc009b10>
 8009b3c:	a5000017 	ldw	r20,0(r20)
 8009b40:	a03fee1e 	bne	r20,zero,8009afc <__alt_data_end+0xfc009afc>
 8009b44:	b805883a 	mov	r2,r23
 8009b48:	dfc00817 	ldw	ra,32(sp)
 8009b4c:	ddc00717 	ldw	r23,28(sp)
 8009b50:	dd800617 	ldw	r22,24(sp)
 8009b54:	dd400517 	ldw	r21,20(sp)
 8009b58:	dd000417 	ldw	r20,16(sp)
 8009b5c:	dcc00317 	ldw	r19,12(sp)
 8009b60:	dc800217 	ldw	r18,8(sp)
 8009b64:	dc400117 	ldw	r17,4(sp)
 8009b68:	dc000017 	ldw	r16,0(sp)
 8009b6c:	dec00904 	addi	sp,sp,36
 8009b70:	f800283a 	ret
 8009b74:	002f883a 	mov	r23,zero
 8009b78:	003ff206 	br	8009b44 <__alt_data_end+0xfc009b44>

08009b7c <_setlocale_r>:
 8009b7c:	30001b26 	beq	r6,zero,8009bec <_setlocale_r+0x70>
 8009b80:	01420074 	movhi	r5,2049
 8009b84:	defffe04 	addi	sp,sp,-8
 8009b88:	295ef804 	addi	r5,r5,31712
 8009b8c:	3009883a 	mov	r4,r6
 8009b90:	dc000015 	stw	r16,0(sp)
 8009b94:	dfc00115 	stw	ra,4(sp)
 8009b98:	3021883a 	mov	r16,r6
 8009b9c:	800c2f00 	call	800c2f0 <strcmp>
 8009ba0:	1000061e 	bne	r2,zero,8009bbc <_setlocale_r+0x40>
 8009ba4:	00820074 	movhi	r2,2049
 8009ba8:	109ef704 	addi	r2,r2,31708
 8009bac:	dfc00117 	ldw	ra,4(sp)
 8009bb0:	dc000017 	ldw	r16,0(sp)
 8009bb4:	dec00204 	addi	sp,sp,8
 8009bb8:	f800283a 	ret
 8009bbc:	01420074 	movhi	r5,2049
 8009bc0:	295ef704 	addi	r5,r5,31708
 8009bc4:	8009883a 	mov	r4,r16
 8009bc8:	800c2f00 	call	800c2f0 <strcmp>
 8009bcc:	103ff526 	beq	r2,zero,8009ba4 <__alt_data_end+0xfc009ba4>
 8009bd0:	01420074 	movhi	r5,2049
 8009bd4:	295eda04 	addi	r5,r5,31592
 8009bd8:	8009883a 	mov	r4,r16
 8009bdc:	800c2f00 	call	800c2f0 <strcmp>
 8009be0:	103ff026 	beq	r2,zero,8009ba4 <__alt_data_end+0xfc009ba4>
 8009be4:	0005883a 	mov	r2,zero
 8009be8:	003ff006 	br	8009bac <__alt_data_end+0xfc009bac>
 8009bec:	00820074 	movhi	r2,2049
 8009bf0:	109ef704 	addi	r2,r2,31708
 8009bf4:	f800283a 	ret

08009bf8 <__locale_charset>:
 8009bf8:	008200b4 	movhi	r2,2050
 8009bfc:	10a19104 	addi	r2,r2,-31164
 8009c00:	f800283a 	ret

08009c04 <__locale_mb_cur_max>:
 8009c04:	008200b4 	movhi	r2,2050
 8009c08:	10a73e04 	addi	r2,r2,-25352
 8009c0c:	10800017 	ldw	r2,0(r2)
 8009c10:	f800283a 	ret

08009c14 <__locale_msgcharset>:
 8009c14:	008200b4 	movhi	r2,2050
 8009c18:	10a18904 	addi	r2,r2,-31196
 8009c1c:	f800283a 	ret

08009c20 <__locale_cjk_lang>:
 8009c20:	0005883a 	mov	r2,zero
 8009c24:	f800283a 	ret

08009c28 <_localeconv_r>:
 8009c28:	008200b4 	movhi	r2,2050
 8009c2c:	10a19904 	addi	r2,r2,-31132
 8009c30:	f800283a 	ret

08009c34 <setlocale>:
 8009c34:	008200b4 	movhi	r2,2050
 8009c38:	10a73d04 	addi	r2,r2,-25356
 8009c3c:	280d883a 	mov	r6,r5
 8009c40:	200b883a 	mov	r5,r4
 8009c44:	11000017 	ldw	r4,0(r2)
 8009c48:	8009b7c1 	jmpi	8009b7c <_setlocale_r>

08009c4c <localeconv>:
 8009c4c:	008200b4 	movhi	r2,2050
 8009c50:	10a19904 	addi	r2,r2,-31132
 8009c54:	f800283a 	ret

08009c58 <__smakebuf_r>:
 8009c58:	2880030b 	ldhu	r2,12(r5)
 8009c5c:	10c0008c 	andi	r3,r2,2
 8009c60:	1800411e 	bne	r3,zero,8009d68 <__smakebuf_r+0x110>
 8009c64:	deffec04 	addi	sp,sp,-80
 8009c68:	dc000f15 	stw	r16,60(sp)
 8009c6c:	2821883a 	mov	r16,r5
 8009c70:	2940038f 	ldh	r5,14(r5)
 8009c74:	dc401015 	stw	r17,64(sp)
 8009c78:	dfc01315 	stw	ra,76(sp)
 8009c7c:	dcc01215 	stw	r19,72(sp)
 8009c80:	dc801115 	stw	r18,68(sp)
 8009c84:	2023883a 	mov	r17,r4
 8009c88:	28001c16 	blt	r5,zero,8009cfc <__smakebuf_r+0xa4>
 8009c8c:	d80d883a 	mov	r6,sp
 8009c90:	800f4d00 	call	800f4d0 <_fstat_r>
 8009c94:	10001816 	blt	r2,zero,8009cf8 <__smakebuf_r+0xa0>
 8009c98:	d8800117 	ldw	r2,4(sp)
 8009c9c:	00e00014 	movui	r3,32768
 8009ca0:	10bc000c 	andi	r2,r2,61440
 8009ca4:	14c80020 	cmpeqi	r19,r2,8192
 8009ca8:	10c03726 	beq	r2,r3,8009d88 <__smakebuf_r+0x130>
 8009cac:	80c0030b 	ldhu	r3,12(r16)
 8009cb0:	18c20014 	ori	r3,r3,2048
 8009cb4:	80c0030d 	sth	r3,12(r16)
 8009cb8:	00c80004 	movi	r3,8192
 8009cbc:	10c0521e 	bne	r2,r3,8009e08 <__smakebuf_r+0x1b0>
 8009cc0:	8140038f 	ldh	r5,14(r16)
 8009cc4:	8809883a 	mov	r4,r17
 8009cc8:	800f52c0 	call	800f52c <_isatty_r>
 8009ccc:	10004c26 	beq	r2,zero,8009e00 <__smakebuf_r+0x1a8>
 8009cd0:	8080030b 	ldhu	r2,12(r16)
 8009cd4:	80c010c4 	addi	r3,r16,67
 8009cd8:	80c00015 	stw	r3,0(r16)
 8009cdc:	10800054 	ori	r2,r2,1
 8009ce0:	8080030d 	sth	r2,12(r16)
 8009ce4:	00800044 	movi	r2,1
 8009ce8:	80c00415 	stw	r3,16(r16)
 8009cec:	80800515 	stw	r2,20(r16)
 8009cf0:	04810004 	movi	r18,1024
 8009cf4:	00000706 	br	8009d14 <__smakebuf_r+0xbc>
 8009cf8:	8080030b 	ldhu	r2,12(r16)
 8009cfc:	10c0200c 	andi	r3,r2,128
 8009d00:	18001f1e 	bne	r3,zero,8009d80 <__smakebuf_r+0x128>
 8009d04:	04810004 	movi	r18,1024
 8009d08:	10820014 	ori	r2,r2,2048
 8009d0c:	8080030d 	sth	r2,12(r16)
 8009d10:	0027883a 	mov	r19,zero
 8009d14:	900b883a 	mov	r5,r18
 8009d18:	8809883a 	mov	r4,r17
 8009d1c:	8009e140 	call	8009e14 <_malloc_r>
 8009d20:	10002c26 	beq	r2,zero,8009dd4 <__smakebuf_r+0x17c>
 8009d24:	80c0030b 	ldhu	r3,12(r16)
 8009d28:	01020074 	movhi	r4,2049
 8009d2c:	21235404 	addi	r4,r4,-29360
 8009d30:	89000f15 	stw	r4,60(r17)
 8009d34:	18c02014 	ori	r3,r3,128
 8009d38:	80c0030d 	sth	r3,12(r16)
 8009d3c:	80800015 	stw	r2,0(r16)
 8009d40:	80800415 	stw	r2,16(r16)
 8009d44:	84800515 	stw	r18,20(r16)
 8009d48:	98001a1e 	bne	r19,zero,8009db4 <__smakebuf_r+0x15c>
 8009d4c:	dfc01317 	ldw	ra,76(sp)
 8009d50:	dcc01217 	ldw	r19,72(sp)
 8009d54:	dc801117 	ldw	r18,68(sp)
 8009d58:	dc401017 	ldw	r17,64(sp)
 8009d5c:	dc000f17 	ldw	r16,60(sp)
 8009d60:	dec01404 	addi	sp,sp,80
 8009d64:	f800283a 	ret
 8009d68:	288010c4 	addi	r2,r5,67
 8009d6c:	28800015 	stw	r2,0(r5)
 8009d70:	28800415 	stw	r2,16(r5)
 8009d74:	00800044 	movi	r2,1
 8009d78:	28800515 	stw	r2,20(r5)
 8009d7c:	f800283a 	ret
 8009d80:	04801004 	movi	r18,64
 8009d84:	003fe006 	br	8009d08 <__alt_data_end+0xfc009d08>
 8009d88:	81000a17 	ldw	r4,40(r16)
 8009d8c:	00c20074 	movhi	r3,2049
 8009d90:	18f0a304 	addi	r3,r3,-15732
 8009d94:	20ffc51e 	bne	r4,r3,8009cac <__alt_data_end+0xfc009cac>
 8009d98:	8080030b 	ldhu	r2,12(r16)
 8009d9c:	04810004 	movi	r18,1024
 8009da0:	84801315 	stw	r18,76(r16)
 8009da4:	1484b03a 	or	r2,r2,r18
 8009da8:	8080030d 	sth	r2,12(r16)
 8009dac:	0027883a 	mov	r19,zero
 8009db0:	003fd806 	br	8009d14 <__alt_data_end+0xfc009d14>
 8009db4:	8140038f 	ldh	r5,14(r16)
 8009db8:	8809883a 	mov	r4,r17
 8009dbc:	800f52c0 	call	800f52c <_isatty_r>
 8009dc0:	103fe226 	beq	r2,zero,8009d4c <__alt_data_end+0xfc009d4c>
 8009dc4:	8080030b 	ldhu	r2,12(r16)
 8009dc8:	10800054 	ori	r2,r2,1
 8009dcc:	8080030d 	sth	r2,12(r16)
 8009dd0:	003fde06 	br	8009d4c <__alt_data_end+0xfc009d4c>
 8009dd4:	8080030b 	ldhu	r2,12(r16)
 8009dd8:	10c0800c 	andi	r3,r2,512
 8009ddc:	183fdb1e 	bne	r3,zero,8009d4c <__alt_data_end+0xfc009d4c>
 8009de0:	10800094 	ori	r2,r2,2
 8009de4:	80c010c4 	addi	r3,r16,67
 8009de8:	8080030d 	sth	r2,12(r16)
 8009dec:	00800044 	movi	r2,1
 8009df0:	80c00015 	stw	r3,0(r16)
 8009df4:	80c00415 	stw	r3,16(r16)
 8009df8:	80800515 	stw	r2,20(r16)
 8009dfc:	003fd306 	br	8009d4c <__alt_data_end+0xfc009d4c>
 8009e00:	04810004 	movi	r18,1024
 8009e04:	003fc306 	br	8009d14 <__alt_data_end+0xfc009d14>
 8009e08:	0027883a 	mov	r19,zero
 8009e0c:	04810004 	movi	r18,1024
 8009e10:	003fc006 	br	8009d14 <__alt_data_end+0xfc009d14>

08009e14 <_malloc_r>:
 8009e14:	defff504 	addi	sp,sp,-44
 8009e18:	dc800315 	stw	r18,12(sp)
 8009e1c:	dfc00a15 	stw	ra,40(sp)
 8009e20:	df000915 	stw	fp,36(sp)
 8009e24:	ddc00815 	stw	r23,32(sp)
 8009e28:	dd800715 	stw	r22,28(sp)
 8009e2c:	dd400615 	stw	r21,24(sp)
 8009e30:	dd000515 	stw	r20,20(sp)
 8009e34:	dcc00415 	stw	r19,16(sp)
 8009e38:	dc400215 	stw	r17,8(sp)
 8009e3c:	dc000115 	stw	r16,4(sp)
 8009e40:	288002c4 	addi	r2,r5,11
 8009e44:	00c00584 	movi	r3,22
 8009e48:	2025883a 	mov	r18,r4
 8009e4c:	18807f2e 	bgeu	r3,r2,800a04c <_malloc_r+0x238>
 8009e50:	047ffe04 	movi	r17,-8
 8009e54:	1462703a 	and	r17,r2,r17
 8009e58:	8800a316 	blt	r17,zero,800a0e8 <_malloc_r+0x2d4>
 8009e5c:	8940a236 	bltu	r17,r5,800a0e8 <_malloc_r+0x2d4>
 8009e60:	80134280 	call	8013428 <__malloc_lock>
 8009e64:	00807dc4 	movi	r2,503
 8009e68:	1441e92e 	bgeu	r2,r17,800a610 <_malloc_r+0x7fc>
 8009e6c:	8804d27a 	srli	r2,r17,9
 8009e70:	1000a126 	beq	r2,zero,800a0f8 <_malloc_r+0x2e4>
 8009e74:	00c00104 	movi	r3,4
 8009e78:	18811e36 	bltu	r3,r2,800a2f4 <_malloc_r+0x4e0>
 8009e7c:	8804d1ba 	srli	r2,r17,6
 8009e80:	12000e44 	addi	r8,r2,57
 8009e84:	11c00e04 	addi	r7,r2,56
 8009e88:	4209883a 	add	r4,r8,r8
 8009e8c:	04c200b4 	movhi	r19,2050
 8009e90:	2109883a 	add	r4,r4,r4
 8009e94:	9ce1a704 	addi	r19,r19,-31076
 8009e98:	2109883a 	add	r4,r4,r4
 8009e9c:	9909883a 	add	r4,r19,r4
 8009ea0:	24000117 	ldw	r16,4(r4)
 8009ea4:	213ffe04 	addi	r4,r4,-8
 8009ea8:	24009726 	beq	r4,r16,800a108 <_malloc_r+0x2f4>
 8009eac:	80800117 	ldw	r2,4(r16)
 8009eb0:	01bfff04 	movi	r6,-4
 8009eb4:	014003c4 	movi	r5,15
 8009eb8:	1184703a 	and	r2,r2,r6
 8009ebc:	1447c83a 	sub	r3,r2,r17
 8009ec0:	28c00716 	blt	r5,r3,8009ee0 <_malloc_r+0xcc>
 8009ec4:	1800920e 	bge	r3,zero,800a110 <_malloc_r+0x2fc>
 8009ec8:	84000317 	ldw	r16,12(r16)
 8009ecc:	24008e26 	beq	r4,r16,800a108 <_malloc_r+0x2f4>
 8009ed0:	80800117 	ldw	r2,4(r16)
 8009ed4:	1184703a 	and	r2,r2,r6
 8009ed8:	1447c83a 	sub	r3,r2,r17
 8009edc:	28fff90e 	bge	r5,r3,8009ec4 <__alt_data_end+0xfc009ec4>
 8009ee0:	3809883a 	mov	r4,r7
 8009ee4:	018200b4 	movhi	r6,2050
 8009ee8:	9c000417 	ldw	r16,16(r19)
 8009eec:	31a1a704 	addi	r6,r6,-31076
 8009ef0:	32000204 	addi	r8,r6,8
 8009ef4:	82013426 	beq	r16,r8,800a3c8 <_malloc_r+0x5b4>
 8009ef8:	80c00117 	ldw	r3,4(r16)
 8009efc:	00bfff04 	movi	r2,-4
 8009f00:	188e703a 	and	r7,r3,r2
 8009f04:	3c45c83a 	sub	r2,r7,r17
 8009f08:	00c003c4 	movi	r3,15
 8009f0c:	18811f16 	blt	r3,r2,800a38c <_malloc_r+0x578>
 8009f10:	32000515 	stw	r8,20(r6)
 8009f14:	32000415 	stw	r8,16(r6)
 8009f18:	10007f0e 	bge	r2,zero,800a118 <_malloc_r+0x304>
 8009f1c:	00807fc4 	movi	r2,511
 8009f20:	11c0fd36 	bltu	r2,r7,800a318 <_malloc_r+0x504>
 8009f24:	3806d0fa 	srli	r3,r7,3
 8009f28:	01c00044 	movi	r7,1
 8009f2c:	30800117 	ldw	r2,4(r6)
 8009f30:	19400044 	addi	r5,r3,1
 8009f34:	294b883a 	add	r5,r5,r5
 8009f38:	1807d0ba 	srai	r3,r3,2
 8009f3c:	294b883a 	add	r5,r5,r5
 8009f40:	294b883a 	add	r5,r5,r5
 8009f44:	298b883a 	add	r5,r5,r6
 8009f48:	38c6983a 	sll	r3,r7,r3
 8009f4c:	29c00017 	ldw	r7,0(r5)
 8009f50:	2a7ffe04 	addi	r9,r5,-8
 8009f54:	1886b03a 	or	r3,r3,r2
 8009f58:	82400315 	stw	r9,12(r16)
 8009f5c:	81c00215 	stw	r7,8(r16)
 8009f60:	30c00115 	stw	r3,4(r6)
 8009f64:	2c000015 	stw	r16,0(r5)
 8009f68:	3c000315 	stw	r16,12(r7)
 8009f6c:	2005d0ba 	srai	r2,r4,2
 8009f70:	01400044 	movi	r5,1
 8009f74:	288a983a 	sll	r5,r5,r2
 8009f78:	19406f36 	bltu	r3,r5,800a138 <_malloc_r+0x324>
 8009f7c:	28c4703a 	and	r2,r5,r3
 8009f80:	10000a1e 	bne	r2,zero,8009fac <_malloc_r+0x198>
 8009f84:	00bfff04 	movi	r2,-4
 8009f88:	294b883a 	add	r5,r5,r5
 8009f8c:	2088703a 	and	r4,r4,r2
 8009f90:	28c4703a 	and	r2,r5,r3
 8009f94:	21000104 	addi	r4,r4,4
 8009f98:	1000041e 	bne	r2,zero,8009fac <_malloc_r+0x198>
 8009f9c:	294b883a 	add	r5,r5,r5
 8009fa0:	28c4703a 	and	r2,r5,r3
 8009fa4:	21000104 	addi	r4,r4,4
 8009fa8:	103ffc26 	beq	r2,zero,8009f9c <__alt_data_end+0xfc009f9c>
 8009fac:	02bfff04 	movi	r10,-4
 8009fb0:	024003c4 	movi	r9,15
 8009fb4:	21800044 	addi	r6,r4,1
 8009fb8:	318d883a 	add	r6,r6,r6
 8009fbc:	318d883a 	add	r6,r6,r6
 8009fc0:	318d883a 	add	r6,r6,r6
 8009fc4:	998d883a 	add	r6,r19,r6
 8009fc8:	333ffe04 	addi	r12,r6,-8
 8009fcc:	2017883a 	mov	r11,r4
 8009fd0:	31800104 	addi	r6,r6,4
 8009fd4:	34000017 	ldw	r16,0(r6)
 8009fd8:	31fffd04 	addi	r7,r6,-12
 8009fdc:	81c0041e 	bne	r16,r7,8009ff0 <_malloc_r+0x1dc>
 8009fe0:	0000fb06 	br	800a3d0 <_malloc_r+0x5bc>
 8009fe4:	1801030e 	bge	r3,zero,800a3f4 <_malloc_r+0x5e0>
 8009fe8:	84000317 	ldw	r16,12(r16)
 8009fec:	81c0f826 	beq	r16,r7,800a3d0 <_malloc_r+0x5bc>
 8009ff0:	80800117 	ldw	r2,4(r16)
 8009ff4:	1284703a 	and	r2,r2,r10
 8009ff8:	1447c83a 	sub	r3,r2,r17
 8009ffc:	48fff90e 	bge	r9,r3,8009fe4 <__alt_data_end+0xfc009fe4>
 800a000:	80800317 	ldw	r2,12(r16)
 800a004:	81000217 	ldw	r4,8(r16)
 800a008:	89400054 	ori	r5,r17,1
 800a00c:	81400115 	stw	r5,4(r16)
 800a010:	20800315 	stw	r2,12(r4)
 800a014:	11000215 	stw	r4,8(r2)
 800a018:	8463883a 	add	r17,r16,r17
 800a01c:	9c400515 	stw	r17,20(r19)
 800a020:	9c400415 	stw	r17,16(r19)
 800a024:	18800054 	ori	r2,r3,1
 800a028:	88800115 	stw	r2,4(r17)
 800a02c:	8a000315 	stw	r8,12(r17)
 800a030:	8a000215 	stw	r8,8(r17)
 800a034:	88e3883a 	add	r17,r17,r3
 800a038:	88c00015 	stw	r3,0(r17)
 800a03c:	9009883a 	mov	r4,r18
 800a040:	801344c0 	call	801344c <__malloc_unlock>
 800a044:	80800204 	addi	r2,r16,8
 800a048:	00001b06 	br	800a0b8 <_malloc_r+0x2a4>
 800a04c:	04400404 	movi	r17,16
 800a050:	89402536 	bltu	r17,r5,800a0e8 <_malloc_r+0x2d4>
 800a054:	80134280 	call	8013428 <__malloc_lock>
 800a058:	00800184 	movi	r2,6
 800a05c:	01000084 	movi	r4,2
 800a060:	04c200b4 	movhi	r19,2050
 800a064:	1085883a 	add	r2,r2,r2
 800a068:	9ce1a704 	addi	r19,r19,-31076
 800a06c:	1085883a 	add	r2,r2,r2
 800a070:	9885883a 	add	r2,r19,r2
 800a074:	14000117 	ldw	r16,4(r2)
 800a078:	10fffe04 	addi	r3,r2,-8
 800a07c:	80c0d926 	beq	r16,r3,800a3e4 <_malloc_r+0x5d0>
 800a080:	80c00117 	ldw	r3,4(r16)
 800a084:	81000317 	ldw	r4,12(r16)
 800a088:	00bfff04 	movi	r2,-4
 800a08c:	1884703a 	and	r2,r3,r2
 800a090:	81400217 	ldw	r5,8(r16)
 800a094:	8085883a 	add	r2,r16,r2
 800a098:	10c00117 	ldw	r3,4(r2)
 800a09c:	29000315 	stw	r4,12(r5)
 800a0a0:	21400215 	stw	r5,8(r4)
 800a0a4:	18c00054 	ori	r3,r3,1
 800a0a8:	10c00115 	stw	r3,4(r2)
 800a0ac:	9009883a 	mov	r4,r18
 800a0b0:	801344c0 	call	801344c <__malloc_unlock>
 800a0b4:	80800204 	addi	r2,r16,8
 800a0b8:	dfc00a17 	ldw	ra,40(sp)
 800a0bc:	df000917 	ldw	fp,36(sp)
 800a0c0:	ddc00817 	ldw	r23,32(sp)
 800a0c4:	dd800717 	ldw	r22,28(sp)
 800a0c8:	dd400617 	ldw	r21,24(sp)
 800a0cc:	dd000517 	ldw	r20,20(sp)
 800a0d0:	dcc00417 	ldw	r19,16(sp)
 800a0d4:	dc800317 	ldw	r18,12(sp)
 800a0d8:	dc400217 	ldw	r17,8(sp)
 800a0dc:	dc000117 	ldw	r16,4(sp)
 800a0e0:	dec00b04 	addi	sp,sp,44
 800a0e4:	f800283a 	ret
 800a0e8:	00800304 	movi	r2,12
 800a0ec:	90800015 	stw	r2,0(r18)
 800a0f0:	0005883a 	mov	r2,zero
 800a0f4:	003ff006 	br	800a0b8 <__alt_data_end+0xfc00a0b8>
 800a0f8:	01002004 	movi	r4,128
 800a0fc:	02001004 	movi	r8,64
 800a100:	01c00fc4 	movi	r7,63
 800a104:	003f6106 	br	8009e8c <__alt_data_end+0xfc009e8c>
 800a108:	4009883a 	mov	r4,r8
 800a10c:	003f7506 	br	8009ee4 <__alt_data_end+0xfc009ee4>
 800a110:	81000317 	ldw	r4,12(r16)
 800a114:	003fde06 	br	800a090 <__alt_data_end+0xfc00a090>
 800a118:	81c5883a 	add	r2,r16,r7
 800a11c:	11400117 	ldw	r5,4(r2)
 800a120:	9009883a 	mov	r4,r18
 800a124:	29400054 	ori	r5,r5,1
 800a128:	11400115 	stw	r5,4(r2)
 800a12c:	801344c0 	call	801344c <__malloc_unlock>
 800a130:	80800204 	addi	r2,r16,8
 800a134:	003fe006 	br	800a0b8 <__alt_data_end+0xfc00a0b8>
 800a138:	9c000217 	ldw	r16,8(r19)
 800a13c:	00bfff04 	movi	r2,-4
 800a140:	85800117 	ldw	r22,4(r16)
 800a144:	b0ac703a 	and	r22,r22,r2
 800a148:	b4400336 	bltu	r22,r17,800a158 <_malloc_r+0x344>
 800a14c:	b445c83a 	sub	r2,r22,r17
 800a150:	00c003c4 	movi	r3,15
 800a154:	18805d16 	blt	r3,r2,800a2cc <_malloc_r+0x4b8>
 800a158:	05c200b4 	movhi	r23,2050
 800a15c:	008200b4 	movhi	r2,2050
 800a160:	10af3504 	addi	r2,r2,-17196
 800a164:	bde73f04 	addi	r23,r23,-25348
 800a168:	15400017 	ldw	r21,0(r2)
 800a16c:	b8c00017 	ldw	r3,0(r23)
 800a170:	00bfffc4 	movi	r2,-1
 800a174:	858d883a 	add	r6,r16,r22
 800a178:	8d6b883a 	add	r21,r17,r21
 800a17c:	1880ea26 	beq	r3,r2,800a528 <_malloc_r+0x714>
 800a180:	ad4403c4 	addi	r21,r21,4111
 800a184:	00bc0004 	movi	r2,-4096
 800a188:	a8aa703a 	and	r21,r21,r2
 800a18c:	a80b883a 	mov	r5,r21
 800a190:	9009883a 	mov	r4,r18
 800a194:	d9800015 	stw	r6,0(sp)
 800a198:	800c1600 	call	800c160 <_sbrk_r>
 800a19c:	1029883a 	mov	r20,r2
 800a1a0:	00bfffc4 	movi	r2,-1
 800a1a4:	d9800017 	ldw	r6,0(sp)
 800a1a8:	a080e826 	beq	r20,r2,800a54c <_malloc_r+0x738>
 800a1ac:	a180a636 	bltu	r20,r6,800a448 <_malloc_r+0x634>
 800a1b0:	070200b4 	movhi	fp,2050
 800a1b4:	e72f3e04 	addi	fp,fp,-17160
 800a1b8:	e0800017 	ldw	r2,0(fp)
 800a1bc:	a887883a 	add	r3,r21,r2
 800a1c0:	e0c00015 	stw	r3,0(fp)
 800a1c4:	3500e626 	beq	r6,r20,800a560 <_malloc_r+0x74c>
 800a1c8:	b9000017 	ldw	r4,0(r23)
 800a1cc:	00bfffc4 	movi	r2,-1
 800a1d0:	2080ee26 	beq	r4,r2,800a58c <_malloc_r+0x778>
 800a1d4:	a185c83a 	sub	r2,r20,r6
 800a1d8:	10c5883a 	add	r2,r2,r3
 800a1dc:	e0800015 	stw	r2,0(fp)
 800a1e0:	a0c001cc 	andi	r3,r20,7
 800a1e4:	1800bc26 	beq	r3,zero,800a4d8 <_malloc_r+0x6c4>
 800a1e8:	a0e9c83a 	sub	r20,r20,r3
 800a1ec:	00840204 	movi	r2,4104
 800a1f0:	a5000204 	addi	r20,r20,8
 800a1f4:	10c7c83a 	sub	r3,r2,r3
 800a1f8:	a545883a 	add	r2,r20,r21
 800a1fc:	1083ffcc 	andi	r2,r2,4095
 800a200:	18abc83a 	sub	r21,r3,r2
 800a204:	a80b883a 	mov	r5,r21
 800a208:	9009883a 	mov	r4,r18
 800a20c:	800c1600 	call	800c160 <_sbrk_r>
 800a210:	00ffffc4 	movi	r3,-1
 800a214:	10c0e126 	beq	r2,r3,800a59c <_malloc_r+0x788>
 800a218:	1505c83a 	sub	r2,r2,r20
 800a21c:	1545883a 	add	r2,r2,r21
 800a220:	10800054 	ori	r2,r2,1
 800a224:	e0c00017 	ldw	r3,0(fp)
 800a228:	9d000215 	stw	r20,8(r19)
 800a22c:	a0800115 	stw	r2,4(r20)
 800a230:	a8c7883a 	add	r3,r21,r3
 800a234:	e0c00015 	stw	r3,0(fp)
 800a238:	84c00e26 	beq	r16,r19,800a274 <_malloc_r+0x460>
 800a23c:	018003c4 	movi	r6,15
 800a240:	3580a72e 	bgeu	r6,r22,800a4e0 <_malloc_r+0x6cc>
 800a244:	81400117 	ldw	r5,4(r16)
 800a248:	013ffe04 	movi	r4,-8
 800a24c:	b0bffd04 	addi	r2,r22,-12
 800a250:	1104703a 	and	r2,r2,r4
 800a254:	2900004c 	andi	r4,r5,1
 800a258:	2088b03a 	or	r4,r4,r2
 800a25c:	81000115 	stw	r4,4(r16)
 800a260:	01400144 	movi	r5,5
 800a264:	8089883a 	add	r4,r16,r2
 800a268:	21400115 	stw	r5,4(r4)
 800a26c:	21400215 	stw	r5,8(r4)
 800a270:	3080cd36 	bltu	r6,r2,800a5a8 <_malloc_r+0x794>
 800a274:	008200b4 	movhi	r2,2050
 800a278:	10af3404 	addi	r2,r2,-17200
 800a27c:	11000017 	ldw	r4,0(r2)
 800a280:	20c0012e 	bgeu	r4,r3,800a288 <_malloc_r+0x474>
 800a284:	10c00015 	stw	r3,0(r2)
 800a288:	008200b4 	movhi	r2,2050
 800a28c:	10af3304 	addi	r2,r2,-17204
 800a290:	11000017 	ldw	r4,0(r2)
 800a294:	9c000217 	ldw	r16,8(r19)
 800a298:	20c0012e 	bgeu	r4,r3,800a2a0 <_malloc_r+0x48c>
 800a29c:	10c00015 	stw	r3,0(r2)
 800a2a0:	80c00117 	ldw	r3,4(r16)
 800a2a4:	00bfff04 	movi	r2,-4
 800a2a8:	1886703a 	and	r3,r3,r2
 800a2ac:	1c45c83a 	sub	r2,r3,r17
 800a2b0:	1c400236 	bltu	r3,r17,800a2bc <_malloc_r+0x4a8>
 800a2b4:	00c003c4 	movi	r3,15
 800a2b8:	18800416 	blt	r3,r2,800a2cc <_malloc_r+0x4b8>
 800a2bc:	9009883a 	mov	r4,r18
 800a2c0:	801344c0 	call	801344c <__malloc_unlock>
 800a2c4:	0005883a 	mov	r2,zero
 800a2c8:	003f7b06 	br	800a0b8 <__alt_data_end+0xfc00a0b8>
 800a2cc:	88c00054 	ori	r3,r17,1
 800a2d0:	80c00115 	stw	r3,4(r16)
 800a2d4:	8463883a 	add	r17,r16,r17
 800a2d8:	10800054 	ori	r2,r2,1
 800a2dc:	9c400215 	stw	r17,8(r19)
 800a2e0:	88800115 	stw	r2,4(r17)
 800a2e4:	9009883a 	mov	r4,r18
 800a2e8:	801344c0 	call	801344c <__malloc_unlock>
 800a2ec:	80800204 	addi	r2,r16,8
 800a2f0:	003f7106 	br	800a0b8 <__alt_data_end+0xfc00a0b8>
 800a2f4:	00c00504 	movi	r3,20
 800a2f8:	18804a2e 	bgeu	r3,r2,800a424 <_malloc_r+0x610>
 800a2fc:	00c01504 	movi	r3,84
 800a300:	18806e36 	bltu	r3,r2,800a4bc <_malloc_r+0x6a8>
 800a304:	8804d33a 	srli	r2,r17,12
 800a308:	12001bc4 	addi	r8,r2,111
 800a30c:	11c01b84 	addi	r7,r2,110
 800a310:	4209883a 	add	r4,r8,r8
 800a314:	003edd06 	br	8009e8c <__alt_data_end+0xfc009e8c>
 800a318:	3804d27a 	srli	r2,r7,9
 800a31c:	00c00104 	movi	r3,4
 800a320:	1880442e 	bgeu	r3,r2,800a434 <_malloc_r+0x620>
 800a324:	00c00504 	movi	r3,20
 800a328:	18808136 	bltu	r3,r2,800a530 <_malloc_r+0x71c>
 800a32c:	11401704 	addi	r5,r2,92
 800a330:	10c016c4 	addi	r3,r2,91
 800a334:	294b883a 	add	r5,r5,r5
 800a338:	294b883a 	add	r5,r5,r5
 800a33c:	294b883a 	add	r5,r5,r5
 800a340:	994b883a 	add	r5,r19,r5
 800a344:	28800017 	ldw	r2,0(r5)
 800a348:	018200b4 	movhi	r6,2050
 800a34c:	297ffe04 	addi	r5,r5,-8
 800a350:	31a1a704 	addi	r6,r6,-31076
 800a354:	28806526 	beq	r5,r2,800a4ec <_malloc_r+0x6d8>
 800a358:	01bfff04 	movi	r6,-4
 800a35c:	10c00117 	ldw	r3,4(r2)
 800a360:	1986703a 	and	r3,r3,r6
 800a364:	38c0022e 	bgeu	r7,r3,800a370 <_malloc_r+0x55c>
 800a368:	10800217 	ldw	r2,8(r2)
 800a36c:	28bffb1e 	bne	r5,r2,800a35c <__alt_data_end+0xfc00a35c>
 800a370:	11400317 	ldw	r5,12(r2)
 800a374:	98c00117 	ldw	r3,4(r19)
 800a378:	81400315 	stw	r5,12(r16)
 800a37c:	80800215 	stw	r2,8(r16)
 800a380:	2c000215 	stw	r16,8(r5)
 800a384:	14000315 	stw	r16,12(r2)
 800a388:	003ef806 	br	8009f6c <__alt_data_end+0xfc009f6c>
 800a38c:	88c00054 	ori	r3,r17,1
 800a390:	80c00115 	stw	r3,4(r16)
 800a394:	8463883a 	add	r17,r16,r17
 800a398:	34400515 	stw	r17,20(r6)
 800a39c:	34400415 	stw	r17,16(r6)
 800a3a0:	10c00054 	ori	r3,r2,1
 800a3a4:	8a000315 	stw	r8,12(r17)
 800a3a8:	8a000215 	stw	r8,8(r17)
 800a3ac:	88c00115 	stw	r3,4(r17)
 800a3b0:	88a3883a 	add	r17,r17,r2
 800a3b4:	88800015 	stw	r2,0(r17)
 800a3b8:	9009883a 	mov	r4,r18
 800a3bc:	801344c0 	call	801344c <__malloc_unlock>
 800a3c0:	80800204 	addi	r2,r16,8
 800a3c4:	003f3c06 	br	800a0b8 <__alt_data_end+0xfc00a0b8>
 800a3c8:	30c00117 	ldw	r3,4(r6)
 800a3cc:	003ee706 	br	8009f6c <__alt_data_end+0xfc009f6c>
 800a3d0:	5ac00044 	addi	r11,r11,1
 800a3d4:	588000cc 	andi	r2,r11,3
 800a3d8:	31800204 	addi	r6,r6,8
 800a3dc:	103efd1e 	bne	r2,zero,8009fd4 <__alt_data_end+0xfc009fd4>
 800a3e0:	00002406 	br	800a474 <_malloc_r+0x660>
 800a3e4:	14000317 	ldw	r16,12(r2)
 800a3e8:	143f251e 	bne	r2,r16,800a080 <__alt_data_end+0xfc00a080>
 800a3ec:	21000084 	addi	r4,r4,2
 800a3f0:	003ebc06 	br	8009ee4 <__alt_data_end+0xfc009ee4>
 800a3f4:	8085883a 	add	r2,r16,r2
 800a3f8:	10c00117 	ldw	r3,4(r2)
 800a3fc:	81000317 	ldw	r4,12(r16)
 800a400:	81400217 	ldw	r5,8(r16)
 800a404:	18c00054 	ori	r3,r3,1
 800a408:	10c00115 	stw	r3,4(r2)
 800a40c:	29000315 	stw	r4,12(r5)
 800a410:	21400215 	stw	r5,8(r4)
 800a414:	9009883a 	mov	r4,r18
 800a418:	801344c0 	call	801344c <__malloc_unlock>
 800a41c:	80800204 	addi	r2,r16,8
 800a420:	003f2506 	br	800a0b8 <__alt_data_end+0xfc00a0b8>
 800a424:	12001704 	addi	r8,r2,92
 800a428:	11c016c4 	addi	r7,r2,91
 800a42c:	4209883a 	add	r4,r8,r8
 800a430:	003e9606 	br	8009e8c <__alt_data_end+0xfc009e8c>
 800a434:	3804d1ba 	srli	r2,r7,6
 800a438:	11400e44 	addi	r5,r2,57
 800a43c:	10c00e04 	addi	r3,r2,56
 800a440:	294b883a 	add	r5,r5,r5
 800a444:	003fbc06 	br	800a338 <__alt_data_end+0xfc00a338>
 800a448:	84ff5926 	beq	r16,r19,800a1b0 <__alt_data_end+0xfc00a1b0>
 800a44c:	008200b4 	movhi	r2,2050
 800a450:	10a1a704 	addi	r2,r2,-31076
 800a454:	14000217 	ldw	r16,8(r2)
 800a458:	00bfff04 	movi	r2,-4
 800a45c:	80c00117 	ldw	r3,4(r16)
 800a460:	1886703a 	and	r3,r3,r2
 800a464:	003f9106 	br	800a2ac <__alt_data_end+0xfc00a2ac>
 800a468:	60800217 	ldw	r2,8(r12)
 800a46c:	213fffc4 	addi	r4,r4,-1
 800a470:	1300651e 	bne	r2,r12,800a608 <_malloc_r+0x7f4>
 800a474:	208000cc 	andi	r2,r4,3
 800a478:	633ffe04 	addi	r12,r12,-8
 800a47c:	103ffa1e 	bne	r2,zero,800a468 <__alt_data_end+0xfc00a468>
 800a480:	98800117 	ldw	r2,4(r19)
 800a484:	0146303a 	nor	r3,zero,r5
 800a488:	1884703a 	and	r2,r3,r2
 800a48c:	98800115 	stw	r2,4(r19)
 800a490:	294b883a 	add	r5,r5,r5
 800a494:	117f2836 	bltu	r2,r5,800a138 <__alt_data_end+0xfc00a138>
 800a498:	283f2726 	beq	r5,zero,800a138 <__alt_data_end+0xfc00a138>
 800a49c:	2886703a 	and	r3,r5,r2
 800a4a0:	5809883a 	mov	r4,r11
 800a4a4:	183ec31e 	bne	r3,zero,8009fb4 <__alt_data_end+0xfc009fb4>
 800a4a8:	294b883a 	add	r5,r5,r5
 800a4ac:	2886703a 	and	r3,r5,r2
 800a4b0:	21000104 	addi	r4,r4,4
 800a4b4:	183ffc26 	beq	r3,zero,800a4a8 <__alt_data_end+0xfc00a4a8>
 800a4b8:	003ebe06 	br	8009fb4 <__alt_data_end+0xfc009fb4>
 800a4bc:	00c05504 	movi	r3,340
 800a4c0:	18801236 	bltu	r3,r2,800a50c <_malloc_r+0x6f8>
 800a4c4:	8804d3fa 	srli	r2,r17,15
 800a4c8:	12001e04 	addi	r8,r2,120
 800a4cc:	11c01dc4 	addi	r7,r2,119
 800a4d0:	4209883a 	add	r4,r8,r8
 800a4d4:	003e6d06 	br	8009e8c <__alt_data_end+0xfc009e8c>
 800a4d8:	00c40004 	movi	r3,4096
 800a4dc:	003f4606 	br	800a1f8 <__alt_data_end+0xfc00a1f8>
 800a4e0:	00800044 	movi	r2,1
 800a4e4:	a0800115 	stw	r2,4(r20)
 800a4e8:	003f7406 	br	800a2bc <__alt_data_end+0xfc00a2bc>
 800a4ec:	1805d0ba 	srai	r2,r3,2
 800a4f0:	01c00044 	movi	r7,1
 800a4f4:	30c00117 	ldw	r3,4(r6)
 800a4f8:	388e983a 	sll	r7,r7,r2
 800a4fc:	2805883a 	mov	r2,r5
 800a500:	38c6b03a 	or	r3,r7,r3
 800a504:	30c00115 	stw	r3,4(r6)
 800a508:	003f9b06 	br	800a378 <__alt_data_end+0xfc00a378>
 800a50c:	00c15504 	movi	r3,1364
 800a510:	18801a36 	bltu	r3,r2,800a57c <_malloc_r+0x768>
 800a514:	8804d4ba 	srli	r2,r17,18
 800a518:	12001f44 	addi	r8,r2,125
 800a51c:	11c01f04 	addi	r7,r2,124
 800a520:	4209883a 	add	r4,r8,r8
 800a524:	003e5906 	br	8009e8c <__alt_data_end+0xfc009e8c>
 800a528:	ad400404 	addi	r21,r21,16
 800a52c:	003f1706 	br	800a18c <__alt_data_end+0xfc00a18c>
 800a530:	00c01504 	movi	r3,84
 800a534:	18802336 	bltu	r3,r2,800a5c4 <_malloc_r+0x7b0>
 800a538:	3804d33a 	srli	r2,r7,12
 800a53c:	11401bc4 	addi	r5,r2,111
 800a540:	10c01b84 	addi	r3,r2,110
 800a544:	294b883a 	add	r5,r5,r5
 800a548:	003f7b06 	br	800a338 <__alt_data_end+0xfc00a338>
 800a54c:	9c000217 	ldw	r16,8(r19)
 800a550:	00bfff04 	movi	r2,-4
 800a554:	80c00117 	ldw	r3,4(r16)
 800a558:	1886703a 	and	r3,r3,r2
 800a55c:	003f5306 	br	800a2ac <__alt_data_end+0xfc00a2ac>
 800a560:	3083ffcc 	andi	r2,r6,4095
 800a564:	103f181e 	bne	r2,zero,800a1c8 <__alt_data_end+0xfc00a1c8>
 800a568:	99000217 	ldw	r4,8(r19)
 800a56c:	b545883a 	add	r2,r22,r21
 800a570:	10800054 	ori	r2,r2,1
 800a574:	20800115 	stw	r2,4(r4)
 800a578:	003f3e06 	br	800a274 <__alt_data_end+0xfc00a274>
 800a57c:	01003f84 	movi	r4,254
 800a580:	02001fc4 	movi	r8,127
 800a584:	01c01f84 	movi	r7,126
 800a588:	003e4006 	br	8009e8c <__alt_data_end+0xfc009e8c>
 800a58c:	008200b4 	movhi	r2,2050
 800a590:	10a73f04 	addi	r2,r2,-25348
 800a594:	15000015 	stw	r20,0(r2)
 800a598:	003f1106 	br	800a1e0 <__alt_data_end+0xfc00a1e0>
 800a59c:	00800044 	movi	r2,1
 800a5a0:	002b883a 	mov	r21,zero
 800a5a4:	003f1f06 	br	800a224 <__alt_data_end+0xfc00a224>
 800a5a8:	81400204 	addi	r5,r16,8
 800a5ac:	9009883a 	mov	r4,r18
 800a5b0:	800921c0 	call	800921c <_free_r>
 800a5b4:	008200b4 	movhi	r2,2050
 800a5b8:	10af3e04 	addi	r2,r2,-17160
 800a5bc:	10c00017 	ldw	r3,0(r2)
 800a5c0:	003f2c06 	br	800a274 <__alt_data_end+0xfc00a274>
 800a5c4:	00c05504 	movi	r3,340
 800a5c8:	18800536 	bltu	r3,r2,800a5e0 <_malloc_r+0x7cc>
 800a5cc:	3804d3fa 	srli	r2,r7,15
 800a5d0:	11401e04 	addi	r5,r2,120
 800a5d4:	10c01dc4 	addi	r3,r2,119
 800a5d8:	294b883a 	add	r5,r5,r5
 800a5dc:	003f5606 	br	800a338 <__alt_data_end+0xfc00a338>
 800a5e0:	00c15504 	movi	r3,1364
 800a5e4:	18800536 	bltu	r3,r2,800a5fc <_malloc_r+0x7e8>
 800a5e8:	3804d4ba 	srli	r2,r7,18
 800a5ec:	11401f44 	addi	r5,r2,125
 800a5f0:	10c01f04 	addi	r3,r2,124
 800a5f4:	294b883a 	add	r5,r5,r5
 800a5f8:	003f4f06 	br	800a338 <__alt_data_end+0xfc00a338>
 800a5fc:	01403f84 	movi	r5,254
 800a600:	00c01f84 	movi	r3,126
 800a604:	003f4c06 	br	800a338 <__alt_data_end+0xfc00a338>
 800a608:	98800117 	ldw	r2,4(r19)
 800a60c:	003fa006 	br	800a490 <__alt_data_end+0xfc00a490>
 800a610:	8808d0fa 	srli	r4,r17,3
 800a614:	20800044 	addi	r2,r4,1
 800a618:	1085883a 	add	r2,r2,r2
 800a61c:	003e9006 	br	800a060 <__alt_data_end+0xfc00a060>

0800a620 <memchr>:
 800a620:	208000cc 	andi	r2,r4,3
 800a624:	280f883a 	mov	r7,r5
 800a628:	10003426 	beq	r2,zero,800a6fc <memchr+0xdc>
 800a62c:	30bfffc4 	addi	r2,r6,-1
 800a630:	30001a26 	beq	r6,zero,800a69c <memchr+0x7c>
 800a634:	20c00003 	ldbu	r3,0(r4)
 800a638:	29803fcc 	andi	r6,r5,255
 800a63c:	30c0051e 	bne	r6,r3,800a654 <memchr+0x34>
 800a640:	00001806 	br	800a6a4 <memchr+0x84>
 800a644:	10001526 	beq	r2,zero,800a69c <memchr+0x7c>
 800a648:	20c00003 	ldbu	r3,0(r4)
 800a64c:	10bfffc4 	addi	r2,r2,-1
 800a650:	30c01426 	beq	r6,r3,800a6a4 <memchr+0x84>
 800a654:	21000044 	addi	r4,r4,1
 800a658:	20c000cc 	andi	r3,r4,3
 800a65c:	183ff91e 	bne	r3,zero,800a644 <__alt_data_end+0xfc00a644>
 800a660:	020000c4 	movi	r8,3
 800a664:	40801136 	bltu	r8,r2,800a6ac <memchr+0x8c>
 800a668:	10000c26 	beq	r2,zero,800a69c <memchr+0x7c>
 800a66c:	20c00003 	ldbu	r3,0(r4)
 800a670:	29403fcc 	andi	r5,r5,255
 800a674:	28c00b26 	beq	r5,r3,800a6a4 <memchr+0x84>
 800a678:	20c00044 	addi	r3,r4,1
 800a67c:	39803fcc 	andi	r6,r7,255
 800a680:	2089883a 	add	r4,r4,r2
 800a684:	00000306 	br	800a694 <memchr+0x74>
 800a688:	18c00044 	addi	r3,r3,1
 800a68c:	197fffc3 	ldbu	r5,-1(r3)
 800a690:	31400526 	beq	r6,r5,800a6a8 <memchr+0x88>
 800a694:	1805883a 	mov	r2,r3
 800a698:	20fffb1e 	bne	r4,r3,800a688 <__alt_data_end+0xfc00a688>
 800a69c:	0005883a 	mov	r2,zero
 800a6a0:	f800283a 	ret
 800a6a4:	2005883a 	mov	r2,r4
 800a6a8:	f800283a 	ret
 800a6ac:	28c03fcc 	andi	r3,r5,255
 800a6b0:	1812923a 	slli	r9,r3,8
 800a6b4:	02ffbff4 	movhi	r11,65279
 800a6b8:	02a02074 	movhi	r10,32897
 800a6bc:	48d2b03a 	or	r9,r9,r3
 800a6c0:	4806943a 	slli	r3,r9,16
 800a6c4:	5affbfc4 	addi	r11,r11,-257
 800a6c8:	52a02004 	addi	r10,r10,-32640
 800a6cc:	48d2b03a 	or	r9,r9,r3
 800a6d0:	20c00017 	ldw	r3,0(r4)
 800a6d4:	48c6f03a 	xor	r3,r9,r3
 800a6d8:	1acd883a 	add	r6,r3,r11
 800a6dc:	00c6303a 	nor	r3,zero,r3
 800a6e0:	30c6703a 	and	r3,r6,r3
 800a6e4:	1a86703a 	and	r3,r3,r10
 800a6e8:	183fe01e 	bne	r3,zero,800a66c <__alt_data_end+0xfc00a66c>
 800a6ec:	10bfff04 	addi	r2,r2,-4
 800a6f0:	21000104 	addi	r4,r4,4
 800a6f4:	40bff636 	bltu	r8,r2,800a6d0 <__alt_data_end+0xfc00a6d0>
 800a6f8:	003fdb06 	br	800a668 <__alt_data_end+0xfc00a668>
 800a6fc:	3005883a 	mov	r2,r6
 800a700:	003fd706 	br	800a660 <__alt_data_end+0xfc00a660>

0800a704 <memcpy>:
 800a704:	defffd04 	addi	sp,sp,-12
 800a708:	dfc00215 	stw	ra,8(sp)
 800a70c:	dc400115 	stw	r17,4(sp)
 800a710:	dc000015 	stw	r16,0(sp)
 800a714:	00c003c4 	movi	r3,15
 800a718:	2005883a 	mov	r2,r4
 800a71c:	1980452e 	bgeu	r3,r6,800a834 <memcpy+0x130>
 800a720:	2906b03a 	or	r3,r5,r4
 800a724:	18c000cc 	andi	r3,r3,3
 800a728:	1800441e 	bne	r3,zero,800a83c <memcpy+0x138>
 800a72c:	347ffc04 	addi	r17,r6,-16
 800a730:	8822d13a 	srli	r17,r17,4
 800a734:	28c00104 	addi	r3,r5,4
 800a738:	23400104 	addi	r13,r4,4
 800a73c:	8820913a 	slli	r16,r17,4
 800a740:	2b000204 	addi	r12,r5,8
 800a744:	22c00204 	addi	r11,r4,8
 800a748:	84000504 	addi	r16,r16,20
 800a74c:	2a800304 	addi	r10,r5,12
 800a750:	22400304 	addi	r9,r4,12
 800a754:	2c21883a 	add	r16,r5,r16
 800a758:	2811883a 	mov	r8,r5
 800a75c:	200f883a 	mov	r7,r4
 800a760:	41000017 	ldw	r4,0(r8)
 800a764:	1fc00017 	ldw	ra,0(r3)
 800a768:	63c00017 	ldw	r15,0(r12)
 800a76c:	39000015 	stw	r4,0(r7)
 800a770:	53800017 	ldw	r14,0(r10)
 800a774:	6fc00015 	stw	ra,0(r13)
 800a778:	5bc00015 	stw	r15,0(r11)
 800a77c:	4b800015 	stw	r14,0(r9)
 800a780:	18c00404 	addi	r3,r3,16
 800a784:	39c00404 	addi	r7,r7,16
 800a788:	42000404 	addi	r8,r8,16
 800a78c:	6b400404 	addi	r13,r13,16
 800a790:	63000404 	addi	r12,r12,16
 800a794:	5ac00404 	addi	r11,r11,16
 800a798:	52800404 	addi	r10,r10,16
 800a79c:	4a400404 	addi	r9,r9,16
 800a7a0:	1c3fef1e 	bne	r3,r16,800a760 <__alt_data_end+0xfc00a760>
 800a7a4:	89c00044 	addi	r7,r17,1
 800a7a8:	380e913a 	slli	r7,r7,4
 800a7ac:	310003cc 	andi	r4,r6,15
 800a7b0:	02c000c4 	movi	r11,3
 800a7b4:	11c7883a 	add	r3,r2,r7
 800a7b8:	29cb883a 	add	r5,r5,r7
 800a7bc:	5900212e 	bgeu	r11,r4,800a844 <memcpy+0x140>
 800a7c0:	1813883a 	mov	r9,r3
 800a7c4:	2811883a 	mov	r8,r5
 800a7c8:	200f883a 	mov	r7,r4
 800a7cc:	42800017 	ldw	r10,0(r8)
 800a7d0:	4a400104 	addi	r9,r9,4
 800a7d4:	39ffff04 	addi	r7,r7,-4
 800a7d8:	4abfff15 	stw	r10,-4(r9)
 800a7dc:	42000104 	addi	r8,r8,4
 800a7e0:	59fffa36 	bltu	r11,r7,800a7cc <__alt_data_end+0xfc00a7cc>
 800a7e4:	213fff04 	addi	r4,r4,-4
 800a7e8:	2008d0ba 	srli	r4,r4,2
 800a7ec:	318000cc 	andi	r6,r6,3
 800a7f0:	21000044 	addi	r4,r4,1
 800a7f4:	2109883a 	add	r4,r4,r4
 800a7f8:	2109883a 	add	r4,r4,r4
 800a7fc:	1907883a 	add	r3,r3,r4
 800a800:	290b883a 	add	r5,r5,r4
 800a804:	30000626 	beq	r6,zero,800a820 <memcpy+0x11c>
 800a808:	198d883a 	add	r6,r3,r6
 800a80c:	29c00003 	ldbu	r7,0(r5)
 800a810:	18c00044 	addi	r3,r3,1
 800a814:	29400044 	addi	r5,r5,1
 800a818:	19ffffc5 	stb	r7,-1(r3)
 800a81c:	19bffb1e 	bne	r3,r6,800a80c <__alt_data_end+0xfc00a80c>
 800a820:	dfc00217 	ldw	ra,8(sp)
 800a824:	dc400117 	ldw	r17,4(sp)
 800a828:	dc000017 	ldw	r16,0(sp)
 800a82c:	dec00304 	addi	sp,sp,12
 800a830:	f800283a 	ret
 800a834:	2007883a 	mov	r3,r4
 800a838:	003ff206 	br	800a804 <__alt_data_end+0xfc00a804>
 800a83c:	2007883a 	mov	r3,r4
 800a840:	003ff106 	br	800a808 <__alt_data_end+0xfc00a808>
 800a844:	200d883a 	mov	r6,r4
 800a848:	003fee06 	br	800a804 <__alt_data_end+0xfc00a804>

0800a84c <memmove>:
 800a84c:	2005883a 	mov	r2,r4
 800a850:	29000b2e 	bgeu	r5,r4,800a880 <memmove+0x34>
 800a854:	298f883a 	add	r7,r5,r6
 800a858:	21c0092e 	bgeu	r4,r7,800a880 <memmove+0x34>
 800a85c:	2187883a 	add	r3,r4,r6
 800a860:	198bc83a 	sub	r5,r3,r6
 800a864:	30004826 	beq	r6,zero,800a988 <memmove+0x13c>
 800a868:	39ffffc4 	addi	r7,r7,-1
 800a86c:	39000003 	ldbu	r4,0(r7)
 800a870:	18ffffc4 	addi	r3,r3,-1
 800a874:	19000005 	stb	r4,0(r3)
 800a878:	28fffb1e 	bne	r5,r3,800a868 <__alt_data_end+0xfc00a868>
 800a87c:	f800283a 	ret
 800a880:	00c003c4 	movi	r3,15
 800a884:	1980412e 	bgeu	r3,r6,800a98c <memmove+0x140>
 800a888:	2886b03a 	or	r3,r5,r2
 800a88c:	18c000cc 	andi	r3,r3,3
 800a890:	1800401e 	bne	r3,zero,800a994 <memmove+0x148>
 800a894:	33fffc04 	addi	r15,r6,-16
 800a898:	781ed13a 	srli	r15,r15,4
 800a89c:	28c00104 	addi	r3,r5,4
 800a8a0:	13400104 	addi	r13,r2,4
 800a8a4:	781c913a 	slli	r14,r15,4
 800a8a8:	2b000204 	addi	r12,r5,8
 800a8ac:	12c00204 	addi	r11,r2,8
 800a8b0:	73800504 	addi	r14,r14,20
 800a8b4:	2a800304 	addi	r10,r5,12
 800a8b8:	12400304 	addi	r9,r2,12
 800a8bc:	2b9d883a 	add	r14,r5,r14
 800a8c0:	2811883a 	mov	r8,r5
 800a8c4:	100f883a 	mov	r7,r2
 800a8c8:	41000017 	ldw	r4,0(r8)
 800a8cc:	39c00404 	addi	r7,r7,16
 800a8d0:	18c00404 	addi	r3,r3,16
 800a8d4:	393ffc15 	stw	r4,-16(r7)
 800a8d8:	193ffc17 	ldw	r4,-16(r3)
 800a8dc:	6b400404 	addi	r13,r13,16
 800a8e0:	5ac00404 	addi	r11,r11,16
 800a8e4:	693ffc15 	stw	r4,-16(r13)
 800a8e8:	61000017 	ldw	r4,0(r12)
 800a8ec:	4a400404 	addi	r9,r9,16
 800a8f0:	42000404 	addi	r8,r8,16
 800a8f4:	593ffc15 	stw	r4,-16(r11)
 800a8f8:	51000017 	ldw	r4,0(r10)
 800a8fc:	63000404 	addi	r12,r12,16
 800a900:	52800404 	addi	r10,r10,16
 800a904:	493ffc15 	stw	r4,-16(r9)
 800a908:	1bbfef1e 	bne	r3,r14,800a8c8 <__alt_data_end+0xfc00a8c8>
 800a90c:	79000044 	addi	r4,r15,1
 800a910:	2008913a 	slli	r4,r4,4
 800a914:	328003cc 	andi	r10,r6,15
 800a918:	02c000c4 	movi	r11,3
 800a91c:	1107883a 	add	r3,r2,r4
 800a920:	290b883a 	add	r5,r5,r4
 800a924:	5a801e2e 	bgeu	r11,r10,800a9a0 <memmove+0x154>
 800a928:	1813883a 	mov	r9,r3
 800a92c:	2811883a 	mov	r8,r5
 800a930:	500f883a 	mov	r7,r10
 800a934:	41000017 	ldw	r4,0(r8)
 800a938:	4a400104 	addi	r9,r9,4
 800a93c:	39ffff04 	addi	r7,r7,-4
 800a940:	493fff15 	stw	r4,-4(r9)
 800a944:	42000104 	addi	r8,r8,4
 800a948:	59fffa36 	bltu	r11,r7,800a934 <__alt_data_end+0xfc00a934>
 800a94c:	513fff04 	addi	r4,r10,-4
 800a950:	2008d0ba 	srli	r4,r4,2
 800a954:	318000cc 	andi	r6,r6,3
 800a958:	21000044 	addi	r4,r4,1
 800a95c:	2109883a 	add	r4,r4,r4
 800a960:	2109883a 	add	r4,r4,r4
 800a964:	1907883a 	add	r3,r3,r4
 800a968:	290b883a 	add	r5,r5,r4
 800a96c:	30000b26 	beq	r6,zero,800a99c <memmove+0x150>
 800a970:	198d883a 	add	r6,r3,r6
 800a974:	29c00003 	ldbu	r7,0(r5)
 800a978:	18c00044 	addi	r3,r3,1
 800a97c:	29400044 	addi	r5,r5,1
 800a980:	19ffffc5 	stb	r7,-1(r3)
 800a984:	19bffb1e 	bne	r3,r6,800a974 <__alt_data_end+0xfc00a974>
 800a988:	f800283a 	ret
 800a98c:	1007883a 	mov	r3,r2
 800a990:	003ff606 	br	800a96c <__alt_data_end+0xfc00a96c>
 800a994:	1007883a 	mov	r3,r2
 800a998:	003ff506 	br	800a970 <__alt_data_end+0xfc00a970>
 800a99c:	f800283a 	ret
 800a9a0:	500d883a 	mov	r6,r10
 800a9a4:	003ff106 	br	800a96c <__alt_data_end+0xfc00a96c>

0800a9a8 <memset>:
 800a9a8:	20c000cc 	andi	r3,r4,3
 800a9ac:	2005883a 	mov	r2,r4
 800a9b0:	18004426 	beq	r3,zero,800aac4 <memset+0x11c>
 800a9b4:	31ffffc4 	addi	r7,r6,-1
 800a9b8:	30004026 	beq	r6,zero,800aabc <memset+0x114>
 800a9bc:	2813883a 	mov	r9,r5
 800a9c0:	200d883a 	mov	r6,r4
 800a9c4:	2007883a 	mov	r3,r4
 800a9c8:	00000406 	br	800a9dc <memset+0x34>
 800a9cc:	3a3fffc4 	addi	r8,r7,-1
 800a9d0:	31800044 	addi	r6,r6,1
 800a9d4:	38003926 	beq	r7,zero,800aabc <memset+0x114>
 800a9d8:	400f883a 	mov	r7,r8
 800a9dc:	18c00044 	addi	r3,r3,1
 800a9e0:	32400005 	stb	r9,0(r6)
 800a9e4:	1a0000cc 	andi	r8,r3,3
 800a9e8:	403ff81e 	bne	r8,zero,800a9cc <__alt_data_end+0xfc00a9cc>
 800a9ec:	010000c4 	movi	r4,3
 800a9f0:	21c02d2e 	bgeu	r4,r7,800aaa8 <memset+0x100>
 800a9f4:	29003fcc 	andi	r4,r5,255
 800a9f8:	200c923a 	slli	r6,r4,8
 800a9fc:	3108b03a 	or	r4,r6,r4
 800aa00:	200c943a 	slli	r6,r4,16
 800aa04:	218cb03a 	or	r6,r4,r6
 800aa08:	010003c4 	movi	r4,15
 800aa0c:	21c0182e 	bgeu	r4,r7,800aa70 <memset+0xc8>
 800aa10:	3b3ffc04 	addi	r12,r7,-16
 800aa14:	6018d13a 	srli	r12,r12,4
 800aa18:	1a000104 	addi	r8,r3,4
 800aa1c:	1ac00204 	addi	r11,r3,8
 800aa20:	6008913a 	slli	r4,r12,4
 800aa24:	1a800304 	addi	r10,r3,12
 800aa28:	1813883a 	mov	r9,r3
 800aa2c:	21000504 	addi	r4,r4,20
 800aa30:	1909883a 	add	r4,r3,r4
 800aa34:	49800015 	stw	r6,0(r9)
 800aa38:	41800015 	stw	r6,0(r8)
 800aa3c:	59800015 	stw	r6,0(r11)
 800aa40:	51800015 	stw	r6,0(r10)
 800aa44:	42000404 	addi	r8,r8,16
 800aa48:	4a400404 	addi	r9,r9,16
 800aa4c:	5ac00404 	addi	r11,r11,16
 800aa50:	52800404 	addi	r10,r10,16
 800aa54:	413ff71e 	bne	r8,r4,800aa34 <__alt_data_end+0xfc00aa34>
 800aa58:	63000044 	addi	r12,r12,1
 800aa5c:	6018913a 	slli	r12,r12,4
 800aa60:	39c003cc 	andi	r7,r7,15
 800aa64:	010000c4 	movi	r4,3
 800aa68:	1b07883a 	add	r3,r3,r12
 800aa6c:	21c00e2e 	bgeu	r4,r7,800aaa8 <memset+0x100>
 800aa70:	1813883a 	mov	r9,r3
 800aa74:	3811883a 	mov	r8,r7
 800aa78:	010000c4 	movi	r4,3
 800aa7c:	49800015 	stw	r6,0(r9)
 800aa80:	423fff04 	addi	r8,r8,-4
 800aa84:	4a400104 	addi	r9,r9,4
 800aa88:	223ffc36 	bltu	r4,r8,800aa7c <__alt_data_end+0xfc00aa7c>
 800aa8c:	393fff04 	addi	r4,r7,-4
 800aa90:	2008d0ba 	srli	r4,r4,2
 800aa94:	39c000cc 	andi	r7,r7,3
 800aa98:	21000044 	addi	r4,r4,1
 800aa9c:	2109883a 	add	r4,r4,r4
 800aaa0:	2109883a 	add	r4,r4,r4
 800aaa4:	1907883a 	add	r3,r3,r4
 800aaa8:	38000526 	beq	r7,zero,800aac0 <memset+0x118>
 800aaac:	19cf883a 	add	r7,r3,r7
 800aab0:	19400005 	stb	r5,0(r3)
 800aab4:	18c00044 	addi	r3,r3,1
 800aab8:	38fffd1e 	bne	r7,r3,800aab0 <__alt_data_end+0xfc00aab0>
 800aabc:	f800283a 	ret
 800aac0:	f800283a 	ret
 800aac4:	2007883a 	mov	r3,r4
 800aac8:	300f883a 	mov	r7,r6
 800aacc:	003fc706 	br	800a9ec <__alt_data_end+0xfc00a9ec>

0800aad0 <_Balloc>:
 800aad0:	20801317 	ldw	r2,76(r4)
 800aad4:	defffc04 	addi	sp,sp,-16
 800aad8:	dc400115 	stw	r17,4(sp)
 800aadc:	dc000015 	stw	r16,0(sp)
 800aae0:	dfc00315 	stw	ra,12(sp)
 800aae4:	dc800215 	stw	r18,8(sp)
 800aae8:	2023883a 	mov	r17,r4
 800aaec:	2821883a 	mov	r16,r5
 800aaf0:	10000f26 	beq	r2,zero,800ab30 <_Balloc+0x60>
 800aaf4:	8407883a 	add	r3,r16,r16
 800aaf8:	18c7883a 	add	r3,r3,r3
 800aafc:	10c7883a 	add	r3,r2,r3
 800ab00:	18800017 	ldw	r2,0(r3)
 800ab04:	10001126 	beq	r2,zero,800ab4c <_Balloc+0x7c>
 800ab08:	11000017 	ldw	r4,0(r2)
 800ab0c:	19000015 	stw	r4,0(r3)
 800ab10:	10000415 	stw	zero,16(r2)
 800ab14:	10000315 	stw	zero,12(r2)
 800ab18:	dfc00317 	ldw	ra,12(sp)
 800ab1c:	dc800217 	ldw	r18,8(sp)
 800ab20:	dc400117 	ldw	r17,4(sp)
 800ab24:	dc000017 	ldw	r16,0(sp)
 800ab28:	dec00404 	addi	sp,sp,16
 800ab2c:	f800283a 	ret
 800ab30:	01800844 	movi	r6,33
 800ab34:	01400104 	movi	r5,4
 800ab38:	800f0e80 	call	800f0e8 <_calloc_r>
 800ab3c:	88801315 	stw	r2,76(r17)
 800ab40:	103fec1e 	bne	r2,zero,800aaf4 <__alt_data_end+0xfc00aaf4>
 800ab44:	0005883a 	mov	r2,zero
 800ab48:	003ff306 	br	800ab18 <__alt_data_end+0xfc00ab18>
 800ab4c:	01400044 	movi	r5,1
 800ab50:	2c24983a 	sll	r18,r5,r16
 800ab54:	8809883a 	mov	r4,r17
 800ab58:	91800144 	addi	r6,r18,5
 800ab5c:	318d883a 	add	r6,r6,r6
 800ab60:	318d883a 	add	r6,r6,r6
 800ab64:	800f0e80 	call	800f0e8 <_calloc_r>
 800ab68:	103ff626 	beq	r2,zero,800ab44 <__alt_data_end+0xfc00ab44>
 800ab6c:	14000115 	stw	r16,4(r2)
 800ab70:	14800215 	stw	r18,8(r2)
 800ab74:	003fe606 	br	800ab10 <__alt_data_end+0xfc00ab10>

0800ab78 <_Bfree>:
 800ab78:	28000826 	beq	r5,zero,800ab9c <_Bfree+0x24>
 800ab7c:	28c00117 	ldw	r3,4(r5)
 800ab80:	20801317 	ldw	r2,76(r4)
 800ab84:	18c7883a 	add	r3,r3,r3
 800ab88:	18c7883a 	add	r3,r3,r3
 800ab8c:	10c5883a 	add	r2,r2,r3
 800ab90:	10c00017 	ldw	r3,0(r2)
 800ab94:	28c00015 	stw	r3,0(r5)
 800ab98:	11400015 	stw	r5,0(r2)
 800ab9c:	f800283a 	ret

0800aba0 <__multadd>:
 800aba0:	defff704 	addi	sp,sp,-36
 800aba4:	dc800215 	stw	r18,8(sp)
 800aba8:	2c800417 	ldw	r18,16(r5)
 800abac:	dd800615 	stw	r22,24(sp)
 800abb0:	dd400515 	stw	r21,20(sp)
 800abb4:	dd000415 	stw	r20,16(sp)
 800abb8:	dcc00315 	stw	r19,12(sp)
 800abbc:	dc400115 	stw	r17,4(sp)
 800abc0:	dc000015 	stw	r16,0(sp)
 800abc4:	dfc00815 	stw	ra,32(sp)
 800abc8:	ddc00715 	stw	r23,28(sp)
 800abcc:	2827883a 	mov	r19,r5
 800abd0:	2029883a 	mov	r20,r4
 800abd4:	3023883a 	mov	r17,r6
 800abd8:	3821883a 	mov	r16,r7
 800abdc:	2d400504 	addi	r21,r5,20
 800abe0:	002d883a 	mov	r22,zero
 800abe4:	adc00017 	ldw	r23,0(r21)
 800abe8:	880b883a 	mov	r5,r17
 800abec:	ad400104 	addi	r21,r21,4
 800abf0:	b93fffcc 	andi	r4,r23,65535
 800abf4:	8001b580 	call	8001b58 <__mulsi3>
 800abf8:	b808d43a 	srli	r4,r23,16
 800abfc:	880b883a 	mov	r5,r17
 800ac00:	1421883a 	add	r16,r2,r16
 800ac04:	8001b580 	call	8001b58 <__mulsi3>
 800ac08:	800ed43a 	srli	r7,r16,16
 800ac0c:	80ffffcc 	andi	r3,r16,65535
 800ac10:	b5800044 	addi	r22,r22,1
 800ac14:	11c5883a 	add	r2,r2,r7
 800ac18:	100e943a 	slli	r7,r2,16
 800ac1c:	1020d43a 	srli	r16,r2,16
 800ac20:	38c7883a 	add	r3,r7,r3
 800ac24:	a8ffff15 	stw	r3,-4(r21)
 800ac28:	b4bfee16 	blt	r22,r18,800abe4 <__alt_data_end+0xfc00abe4>
 800ac2c:	80000926 	beq	r16,zero,800ac54 <__multadd+0xb4>
 800ac30:	98800217 	ldw	r2,8(r19)
 800ac34:	9080130e 	bge	r18,r2,800ac84 <__multadd+0xe4>
 800ac38:	90800144 	addi	r2,r18,5
 800ac3c:	1085883a 	add	r2,r2,r2
 800ac40:	1085883a 	add	r2,r2,r2
 800ac44:	9885883a 	add	r2,r19,r2
 800ac48:	14000015 	stw	r16,0(r2)
 800ac4c:	94800044 	addi	r18,r18,1
 800ac50:	9c800415 	stw	r18,16(r19)
 800ac54:	9805883a 	mov	r2,r19
 800ac58:	dfc00817 	ldw	ra,32(sp)
 800ac5c:	ddc00717 	ldw	r23,28(sp)
 800ac60:	dd800617 	ldw	r22,24(sp)
 800ac64:	dd400517 	ldw	r21,20(sp)
 800ac68:	dd000417 	ldw	r20,16(sp)
 800ac6c:	dcc00317 	ldw	r19,12(sp)
 800ac70:	dc800217 	ldw	r18,8(sp)
 800ac74:	dc400117 	ldw	r17,4(sp)
 800ac78:	dc000017 	ldw	r16,0(sp)
 800ac7c:	dec00904 	addi	sp,sp,36
 800ac80:	f800283a 	ret
 800ac84:	99400117 	ldw	r5,4(r19)
 800ac88:	a009883a 	mov	r4,r20
 800ac8c:	29400044 	addi	r5,r5,1
 800ac90:	800aad00 	call	800aad0 <_Balloc>
 800ac94:	99800417 	ldw	r6,16(r19)
 800ac98:	99400304 	addi	r5,r19,12
 800ac9c:	11000304 	addi	r4,r2,12
 800aca0:	31800084 	addi	r6,r6,2
 800aca4:	318d883a 	add	r6,r6,r6
 800aca8:	318d883a 	add	r6,r6,r6
 800acac:	1023883a 	mov	r17,r2
 800acb0:	800a7040 	call	800a704 <memcpy>
 800acb4:	98000a26 	beq	r19,zero,800ace0 <__multadd+0x140>
 800acb8:	98c00117 	ldw	r3,4(r19)
 800acbc:	a0801317 	ldw	r2,76(r20)
 800acc0:	18c7883a 	add	r3,r3,r3
 800acc4:	18c7883a 	add	r3,r3,r3
 800acc8:	10c5883a 	add	r2,r2,r3
 800accc:	10c00017 	ldw	r3,0(r2)
 800acd0:	98c00015 	stw	r3,0(r19)
 800acd4:	14c00015 	stw	r19,0(r2)
 800acd8:	8827883a 	mov	r19,r17
 800acdc:	003fd606 	br	800ac38 <__alt_data_end+0xfc00ac38>
 800ace0:	8827883a 	mov	r19,r17
 800ace4:	003fd406 	br	800ac38 <__alt_data_end+0xfc00ac38>

0800ace8 <__s2b>:
 800ace8:	defff904 	addi	sp,sp,-28
 800acec:	dc400115 	stw	r17,4(sp)
 800acf0:	dc000015 	stw	r16,0(sp)
 800acf4:	2023883a 	mov	r17,r4
 800acf8:	2821883a 	mov	r16,r5
 800acfc:	39000204 	addi	r4,r7,8
 800ad00:	01400244 	movi	r5,9
 800ad04:	dcc00315 	stw	r19,12(sp)
 800ad08:	dc800215 	stw	r18,8(sp)
 800ad0c:	dfc00615 	stw	ra,24(sp)
 800ad10:	dd400515 	stw	r21,20(sp)
 800ad14:	dd000415 	stw	r20,16(sp)
 800ad18:	3825883a 	mov	r18,r7
 800ad1c:	3027883a 	mov	r19,r6
 800ad20:	80019a40 	call	80019a4 <__divsi3>
 800ad24:	00c00044 	movi	r3,1
 800ad28:	000b883a 	mov	r5,zero
 800ad2c:	1880030e 	bge	r3,r2,800ad3c <__s2b+0x54>
 800ad30:	18c7883a 	add	r3,r3,r3
 800ad34:	29400044 	addi	r5,r5,1
 800ad38:	18bffd16 	blt	r3,r2,800ad30 <__alt_data_end+0xfc00ad30>
 800ad3c:	8809883a 	mov	r4,r17
 800ad40:	800aad00 	call	800aad0 <_Balloc>
 800ad44:	d8c00717 	ldw	r3,28(sp)
 800ad48:	10c00515 	stw	r3,20(r2)
 800ad4c:	00c00044 	movi	r3,1
 800ad50:	10c00415 	stw	r3,16(r2)
 800ad54:	00c00244 	movi	r3,9
 800ad58:	1cc0210e 	bge	r3,r19,800ade0 <__s2b+0xf8>
 800ad5c:	80eb883a 	add	r21,r16,r3
 800ad60:	a829883a 	mov	r20,r21
 800ad64:	84e1883a 	add	r16,r16,r19
 800ad68:	a1c00007 	ldb	r7,0(r20)
 800ad6c:	01800284 	movi	r6,10
 800ad70:	a5000044 	addi	r20,r20,1
 800ad74:	100b883a 	mov	r5,r2
 800ad78:	39fff404 	addi	r7,r7,-48
 800ad7c:	8809883a 	mov	r4,r17
 800ad80:	800aba00 	call	800aba0 <__multadd>
 800ad84:	a43ff81e 	bne	r20,r16,800ad68 <__alt_data_end+0xfc00ad68>
 800ad88:	ace1883a 	add	r16,r21,r19
 800ad8c:	843ffe04 	addi	r16,r16,-8
 800ad90:	9c800a0e 	bge	r19,r18,800adbc <__s2b+0xd4>
 800ad94:	94e5c83a 	sub	r18,r18,r19
 800ad98:	84a5883a 	add	r18,r16,r18
 800ad9c:	81c00007 	ldb	r7,0(r16)
 800ada0:	01800284 	movi	r6,10
 800ada4:	84000044 	addi	r16,r16,1
 800ada8:	100b883a 	mov	r5,r2
 800adac:	39fff404 	addi	r7,r7,-48
 800adb0:	8809883a 	mov	r4,r17
 800adb4:	800aba00 	call	800aba0 <__multadd>
 800adb8:	84bff81e 	bne	r16,r18,800ad9c <__alt_data_end+0xfc00ad9c>
 800adbc:	dfc00617 	ldw	ra,24(sp)
 800adc0:	dd400517 	ldw	r21,20(sp)
 800adc4:	dd000417 	ldw	r20,16(sp)
 800adc8:	dcc00317 	ldw	r19,12(sp)
 800adcc:	dc800217 	ldw	r18,8(sp)
 800add0:	dc400117 	ldw	r17,4(sp)
 800add4:	dc000017 	ldw	r16,0(sp)
 800add8:	dec00704 	addi	sp,sp,28
 800addc:	f800283a 	ret
 800ade0:	84000284 	addi	r16,r16,10
 800ade4:	1827883a 	mov	r19,r3
 800ade8:	003fe906 	br	800ad90 <__alt_data_end+0xfc00ad90>

0800adec <__hi0bits>:
 800adec:	20bfffec 	andhi	r2,r4,65535
 800adf0:	1000141e 	bne	r2,zero,800ae44 <__hi0bits+0x58>
 800adf4:	2008943a 	slli	r4,r4,16
 800adf8:	00800404 	movi	r2,16
 800adfc:	20ffc02c 	andhi	r3,r4,65280
 800ae00:	1800021e 	bne	r3,zero,800ae0c <__hi0bits+0x20>
 800ae04:	2008923a 	slli	r4,r4,8
 800ae08:	10800204 	addi	r2,r2,8
 800ae0c:	20fc002c 	andhi	r3,r4,61440
 800ae10:	1800021e 	bne	r3,zero,800ae1c <__hi0bits+0x30>
 800ae14:	2008913a 	slli	r4,r4,4
 800ae18:	10800104 	addi	r2,r2,4
 800ae1c:	20f0002c 	andhi	r3,r4,49152
 800ae20:	1800031e 	bne	r3,zero,800ae30 <__hi0bits+0x44>
 800ae24:	2109883a 	add	r4,r4,r4
 800ae28:	10800084 	addi	r2,r2,2
 800ae2c:	2109883a 	add	r4,r4,r4
 800ae30:	20000316 	blt	r4,zero,800ae40 <__hi0bits+0x54>
 800ae34:	2110002c 	andhi	r4,r4,16384
 800ae38:	2000041e 	bne	r4,zero,800ae4c <__hi0bits+0x60>
 800ae3c:	00800804 	movi	r2,32
 800ae40:	f800283a 	ret
 800ae44:	0005883a 	mov	r2,zero
 800ae48:	003fec06 	br	800adfc <__alt_data_end+0xfc00adfc>
 800ae4c:	10800044 	addi	r2,r2,1
 800ae50:	f800283a 	ret

0800ae54 <__lo0bits>:
 800ae54:	20c00017 	ldw	r3,0(r4)
 800ae58:	188001cc 	andi	r2,r3,7
 800ae5c:	10000826 	beq	r2,zero,800ae80 <__lo0bits+0x2c>
 800ae60:	1880004c 	andi	r2,r3,1
 800ae64:	1000211e 	bne	r2,zero,800aeec <__lo0bits+0x98>
 800ae68:	1880008c 	andi	r2,r3,2
 800ae6c:	1000211e 	bne	r2,zero,800aef4 <__lo0bits+0xa0>
 800ae70:	1806d0ba 	srli	r3,r3,2
 800ae74:	00800084 	movi	r2,2
 800ae78:	20c00015 	stw	r3,0(r4)
 800ae7c:	f800283a 	ret
 800ae80:	18bfffcc 	andi	r2,r3,65535
 800ae84:	10001326 	beq	r2,zero,800aed4 <__lo0bits+0x80>
 800ae88:	0005883a 	mov	r2,zero
 800ae8c:	19403fcc 	andi	r5,r3,255
 800ae90:	2800021e 	bne	r5,zero,800ae9c <__lo0bits+0x48>
 800ae94:	1806d23a 	srli	r3,r3,8
 800ae98:	10800204 	addi	r2,r2,8
 800ae9c:	194003cc 	andi	r5,r3,15
 800aea0:	2800021e 	bne	r5,zero,800aeac <__lo0bits+0x58>
 800aea4:	1806d13a 	srli	r3,r3,4
 800aea8:	10800104 	addi	r2,r2,4
 800aeac:	194000cc 	andi	r5,r3,3
 800aeb0:	2800021e 	bne	r5,zero,800aebc <__lo0bits+0x68>
 800aeb4:	1806d0ba 	srli	r3,r3,2
 800aeb8:	10800084 	addi	r2,r2,2
 800aebc:	1940004c 	andi	r5,r3,1
 800aec0:	2800081e 	bne	r5,zero,800aee4 <__lo0bits+0x90>
 800aec4:	1806d07a 	srli	r3,r3,1
 800aec8:	1800051e 	bne	r3,zero,800aee0 <__lo0bits+0x8c>
 800aecc:	00800804 	movi	r2,32
 800aed0:	f800283a 	ret
 800aed4:	1806d43a 	srli	r3,r3,16
 800aed8:	00800404 	movi	r2,16
 800aedc:	003feb06 	br	800ae8c <__alt_data_end+0xfc00ae8c>
 800aee0:	10800044 	addi	r2,r2,1
 800aee4:	20c00015 	stw	r3,0(r4)
 800aee8:	f800283a 	ret
 800aeec:	0005883a 	mov	r2,zero
 800aef0:	f800283a 	ret
 800aef4:	1806d07a 	srli	r3,r3,1
 800aef8:	00800044 	movi	r2,1
 800aefc:	20c00015 	stw	r3,0(r4)
 800af00:	f800283a 	ret

0800af04 <__i2b>:
 800af04:	defffd04 	addi	sp,sp,-12
 800af08:	dc000015 	stw	r16,0(sp)
 800af0c:	04000044 	movi	r16,1
 800af10:	dc400115 	stw	r17,4(sp)
 800af14:	2823883a 	mov	r17,r5
 800af18:	800b883a 	mov	r5,r16
 800af1c:	dfc00215 	stw	ra,8(sp)
 800af20:	800aad00 	call	800aad0 <_Balloc>
 800af24:	14400515 	stw	r17,20(r2)
 800af28:	14000415 	stw	r16,16(r2)
 800af2c:	dfc00217 	ldw	ra,8(sp)
 800af30:	dc400117 	ldw	r17,4(sp)
 800af34:	dc000017 	ldw	r16,0(sp)
 800af38:	dec00304 	addi	sp,sp,12
 800af3c:	f800283a 	ret

0800af40 <__multiply>:
 800af40:	deffef04 	addi	sp,sp,-68
 800af44:	dc400815 	stw	r17,32(sp)
 800af48:	dc000715 	stw	r16,28(sp)
 800af4c:	34400417 	ldw	r17,16(r6)
 800af50:	2c000417 	ldw	r16,16(r5)
 800af54:	dd800d15 	stw	r22,52(sp)
 800af58:	dc800915 	stw	r18,36(sp)
 800af5c:	dfc01015 	stw	ra,64(sp)
 800af60:	df000f15 	stw	fp,60(sp)
 800af64:	ddc00e15 	stw	r23,56(sp)
 800af68:	dd400c15 	stw	r21,48(sp)
 800af6c:	dd000b15 	stw	r20,44(sp)
 800af70:	dcc00a15 	stw	r19,40(sp)
 800af74:	2825883a 	mov	r18,r5
 800af78:	302d883a 	mov	r22,r6
 800af7c:	8440050e 	bge	r16,r17,800af94 <__multiply+0x54>
 800af80:	8007883a 	mov	r3,r16
 800af84:	3025883a 	mov	r18,r6
 800af88:	8821883a 	mov	r16,r17
 800af8c:	282d883a 	mov	r22,r5
 800af90:	1823883a 	mov	r17,r3
 800af94:	90800217 	ldw	r2,8(r18)
 800af98:	8447883a 	add	r3,r16,r17
 800af9c:	d8c00215 	stw	r3,8(sp)
 800afa0:	91400117 	ldw	r5,4(r18)
 800afa4:	10c0010e 	bge	r2,r3,800afac <__multiply+0x6c>
 800afa8:	29400044 	addi	r5,r5,1
 800afac:	800aad00 	call	800aad0 <_Balloc>
 800afb0:	d8c00217 	ldw	r3,8(sp)
 800afb4:	d8800615 	stw	r2,24(sp)
 800afb8:	18eb883a 	add	r21,r3,r3
 800afbc:	ad6b883a 	add	r21,r21,r21
 800afc0:	10c00504 	addi	r3,r2,20
 800afc4:	1d6b883a 	add	r21,r3,r21
 800afc8:	d8c00115 	stw	r3,4(sp)
 800afcc:	dd400315 	stw	r21,12(sp)
 800afd0:	1805883a 	mov	r2,r3
 800afd4:	1d40042e 	bgeu	r3,r21,800afe8 <__multiply+0xa8>
 800afd8:	d8c00317 	ldw	r3,12(sp)
 800afdc:	10000015 	stw	zero,0(r2)
 800afe0:	10800104 	addi	r2,r2,4
 800afe4:	10fffc36 	bltu	r2,r3,800afd8 <__alt_data_end+0xfc00afd8>
 800afe8:	8c63883a 	add	r17,r17,r17
 800afec:	b5800504 	addi	r22,r22,20
 800aff0:	8c63883a 	add	r17,r17,r17
 800aff4:	94800504 	addi	r18,r18,20
 800aff8:	8421883a 	add	r16,r16,r16
 800affc:	b463883a 	add	r17,r22,r17
 800b000:	8421883a 	add	r16,r16,r16
 800b004:	dd800015 	stw	r22,0(sp)
 800b008:	dc800415 	stw	r18,16(sp)
 800b00c:	dc400515 	stw	r17,20(sp)
 800b010:	9429883a 	add	r20,r18,r16
 800b014:	b4404f2e 	bgeu	r22,r17,800b154 <__multiply+0x214>
 800b018:	d8c00017 	ldw	r3,0(sp)
 800b01c:	1c800017 	ldw	r18,0(r3)
 800b020:	947fffcc 	andi	r17,r18,65535
 800b024:	88001e26 	beq	r17,zero,800b0a0 <__multiply+0x160>
 800b028:	dd800117 	ldw	r22,4(sp)
 800b02c:	dd400417 	ldw	r21,16(sp)
 800b030:	0027883a 	mov	r19,zero
 800b034:	ac800017 	ldw	r18,0(r21)
 800b038:	b4000017 	ldw	r16,0(r22)
 800b03c:	880b883a 	mov	r5,r17
 800b040:	913fffcc 	andi	r4,r18,65535
 800b044:	8001b580 	call	8001b58 <__mulsi3>
 800b048:	9008d43a 	srli	r4,r18,16
 800b04c:	84bfffcc 	andi	r18,r16,65535
 800b050:	1485883a 	add	r2,r2,r18
 800b054:	14e5883a 	add	r18,r2,r19
 800b058:	8020d43a 	srli	r16,r16,16
 800b05c:	9026d43a 	srli	r19,r18,16
 800b060:	880b883a 	mov	r5,r17
 800b064:	8001b580 	call	8001b58 <__mulsi3>
 800b068:	1405883a 	add	r2,r2,r16
 800b06c:	14e1883a 	add	r16,r2,r19
 800b070:	90ffffcc 	andi	r3,r18,65535
 800b074:	8024943a 	slli	r18,r16,16
 800b078:	ad400104 	addi	r21,r21,4
 800b07c:	b005883a 	mov	r2,r22
 800b080:	90c6b03a 	or	r3,r18,r3
 800b084:	b0c00015 	stw	r3,0(r22)
 800b088:	8026d43a 	srli	r19,r16,16
 800b08c:	b5800104 	addi	r22,r22,4
 800b090:	ad3fe836 	bltu	r21,r20,800b034 <__alt_data_end+0xfc00b034>
 800b094:	d8c00017 	ldw	r3,0(sp)
 800b098:	14c00115 	stw	r19,4(r2)
 800b09c:	1c800017 	ldw	r18,0(r3)
 800b0a0:	9024d43a 	srli	r18,r18,16
 800b0a4:	90002226 	beq	r18,zero,800b130 <__multiply+0x1f0>
 800b0a8:	d8c00117 	ldw	r3,4(sp)
 800b0ac:	dd800417 	ldw	r22,16(sp)
 800b0b0:	002f883a 	mov	r23,zero
 800b0b4:	1f000017 	ldw	fp,0(r3)
 800b0b8:	1823883a 	mov	r17,r3
 800b0bc:	182b883a 	mov	r21,r3
 800b0c0:	e021883a 	mov	r16,fp
 800b0c4:	00000106 	br	800b0cc <__multiply+0x18c>
 800b0c8:	982b883a 	mov	r21,r19
 800b0cc:	b100000b 	ldhu	r4,0(r22)
 800b0d0:	8020d43a 	srli	r16,r16,16
 800b0d4:	900b883a 	mov	r5,r18
 800b0d8:	8001b580 	call	8001b58 <__mulsi3>
 800b0dc:	1405883a 	add	r2,r2,r16
 800b0e0:	15ef883a 	add	r23,r2,r23
 800b0e4:	b804943a 	slli	r2,r23,16
 800b0e8:	e0ffffcc 	andi	r3,fp,65535
 800b0ec:	8c400104 	addi	r17,r17,4
 800b0f0:	10c6b03a 	or	r3,r2,r3
 800b0f4:	88ffff15 	stw	r3,-4(r17)
 800b0f8:	b5800104 	addi	r22,r22,4
 800b0fc:	b13fff17 	ldw	r4,-4(r22)
 800b100:	acc00104 	addi	r19,r21,4
 800b104:	900b883a 	mov	r5,r18
 800b108:	2008d43a 	srli	r4,r4,16
 800b10c:	9c000017 	ldw	r16,0(r19)
 800b110:	8001b580 	call	8001b58 <__mulsi3>
 800b114:	b806d43a 	srli	r3,r23,16
 800b118:	813fffcc 	andi	r4,r16,65535
 800b11c:	1105883a 	add	r2,r2,r4
 800b120:	10f9883a 	add	fp,r2,r3
 800b124:	e02ed43a 	srli	r23,fp,16
 800b128:	b53fe736 	bltu	r22,r20,800b0c8 <__alt_data_end+0xfc00b0c8>
 800b12c:	af000115 	stw	fp,4(r21)
 800b130:	d8c00017 	ldw	r3,0(sp)
 800b134:	d9000517 	ldw	r4,20(sp)
 800b138:	18c00104 	addi	r3,r3,4
 800b13c:	d8c00015 	stw	r3,0(sp)
 800b140:	d8c00117 	ldw	r3,4(sp)
 800b144:	18c00104 	addi	r3,r3,4
 800b148:	d8c00115 	stw	r3,4(sp)
 800b14c:	d8c00017 	ldw	r3,0(sp)
 800b150:	193fb136 	bltu	r3,r4,800b018 <__alt_data_end+0xfc00b018>
 800b154:	d8c00217 	ldw	r3,8(sp)
 800b158:	00c00c0e 	bge	zero,r3,800b18c <__multiply+0x24c>
 800b15c:	d8c00317 	ldw	r3,12(sp)
 800b160:	18bfff17 	ldw	r2,-4(r3)
 800b164:	1d7fff04 	addi	r21,r3,-4
 800b168:	10000326 	beq	r2,zero,800b178 <__multiply+0x238>
 800b16c:	00000706 	br	800b18c <__multiply+0x24c>
 800b170:	a8800017 	ldw	r2,0(r21)
 800b174:	1000051e 	bne	r2,zero,800b18c <__multiply+0x24c>
 800b178:	d8c00217 	ldw	r3,8(sp)
 800b17c:	ad7fff04 	addi	r21,r21,-4
 800b180:	18ffffc4 	addi	r3,r3,-1
 800b184:	d8c00215 	stw	r3,8(sp)
 800b188:	183ff91e 	bne	r3,zero,800b170 <__alt_data_end+0xfc00b170>
 800b18c:	d8c00617 	ldw	r3,24(sp)
 800b190:	d9000217 	ldw	r4,8(sp)
 800b194:	1805883a 	mov	r2,r3
 800b198:	19000415 	stw	r4,16(r3)
 800b19c:	dfc01017 	ldw	ra,64(sp)
 800b1a0:	df000f17 	ldw	fp,60(sp)
 800b1a4:	ddc00e17 	ldw	r23,56(sp)
 800b1a8:	dd800d17 	ldw	r22,52(sp)
 800b1ac:	dd400c17 	ldw	r21,48(sp)
 800b1b0:	dd000b17 	ldw	r20,44(sp)
 800b1b4:	dcc00a17 	ldw	r19,40(sp)
 800b1b8:	dc800917 	ldw	r18,36(sp)
 800b1bc:	dc400817 	ldw	r17,32(sp)
 800b1c0:	dc000717 	ldw	r16,28(sp)
 800b1c4:	dec01104 	addi	sp,sp,68
 800b1c8:	f800283a 	ret

0800b1cc <__pow5mult>:
 800b1cc:	defffa04 	addi	sp,sp,-24
 800b1d0:	dcc00315 	stw	r19,12(sp)
 800b1d4:	dc000015 	stw	r16,0(sp)
 800b1d8:	dfc00515 	stw	ra,20(sp)
 800b1dc:	dd000415 	stw	r20,16(sp)
 800b1e0:	dc800215 	stw	r18,8(sp)
 800b1e4:	dc400115 	stw	r17,4(sp)
 800b1e8:	308000cc 	andi	r2,r6,3
 800b1ec:	3021883a 	mov	r16,r6
 800b1f0:	2027883a 	mov	r19,r4
 800b1f4:	10002f1e 	bne	r2,zero,800b2b4 <__pow5mult+0xe8>
 800b1f8:	2825883a 	mov	r18,r5
 800b1fc:	8021d0ba 	srai	r16,r16,2
 800b200:	80001a26 	beq	r16,zero,800b26c <__pow5mult+0xa0>
 800b204:	9c401217 	ldw	r17,72(r19)
 800b208:	8800061e 	bne	r17,zero,800b224 <__pow5mult+0x58>
 800b20c:	00003406 	br	800b2e0 <__pow5mult+0x114>
 800b210:	8021d07a 	srai	r16,r16,1
 800b214:	80001526 	beq	r16,zero,800b26c <__pow5mult+0xa0>
 800b218:	88800017 	ldw	r2,0(r17)
 800b21c:	10001c26 	beq	r2,zero,800b290 <__pow5mult+0xc4>
 800b220:	1023883a 	mov	r17,r2
 800b224:	8080004c 	andi	r2,r16,1
 800b228:	103ff926 	beq	r2,zero,800b210 <__alt_data_end+0xfc00b210>
 800b22c:	880d883a 	mov	r6,r17
 800b230:	900b883a 	mov	r5,r18
 800b234:	9809883a 	mov	r4,r19
 800b238:	800af400 	call	800af40 <__multiply>
 800b23c:	90001b26 	beq	r18,zero,800b2ac <__pow5mult+0xe0>
 800b240:	91000117 	ldw	r4,4(r18)
 800b244:	98c01317 	ldw	r3,76(r19)
 800b248:	8021d07a 	srai	r16,r16,1
 800b24c:	2109883a 	add	r4,r4,r4
 800b250:	2109883a 	add	r4,r4,r4
 800b254:	1907883a 	add	r3,r3,r4
 800b258:	19000017 	ldw	r4,0(r3)
 800b25c:	91000015 	stw	r4,0(r18)
 800b260:	1c800015 	stw	r18,0(r3)
 800b264:	1025883a 	mov	r18,r2
 800b268:	803feb1e 	bne	r16,zero,800b218 <__alt_data_end+0xfc00b218>
 800b26c:	9005883a 	mov	r2,r18
 800b270:	dfc00517 	ldw	ra,20(sp)
 800b274:	dd000417 	ldw	r20,16(sp)
 800b278:	dcc00317 	ldw	r19,12(sp)
 800b27c:	dc800217 	ldw	r18,8(sp)
 800b280:	dc400117 	ldw	r17,4(sp)
 800b284:	dc000017 	ldw	r16,0(sp)
 800b288:	dec00604 	addi	sp,sp,24
 800b28c:	f800283a 	ret
 800b290:	880d883a 	mov	r6,r17
 800b294:	880b883a 	mov	r5,r17
 800b298:	9809883a 	mov	r4,r19
 800b29c:	800af400 	call	800af40 <__multiply>
 800b2a0:	88800015 	stw	r2,0(r17)
 800b2a4:	10000015 	stw	zero,0(r2)
 800b2a8:	003fdd06 	br	800b220 <__alt_data_end+0xfc00b220>
 800b2ac:	1025883a 	mov	r18,r2
 800b2b0:	003fd706 	br	800b210 <__alt_data_end+0xfc00b210>
 800b2b4:	10bfffc4 	addi	r2,r2,-1
 800b2b8:	1085883a 	add	r2,r2,r2
 800b2bc:	00c20074 	movhi	r3,2049
 800b2c0:	18defb04 	addi	r3,r3,31724
 800b2c4:	1085883a 	add	r2,r2,r2
 800b2c8:	1885883a 	add	r2,r3,r2
 800b2cc:	11800017 	ldw	r6,0(r2)
 800b2d0:	000f883a 	mov	r7,zero
 800b2d4:	800aba00 	call	800aba0 <__multadd>
 800b2d8:	1025883a 	mov	r18,r2
 800b2dc:	003fc706 	br	800b1fc <__alt_data_end+0xfc00b1fc>
 800b2e0:	05000044 	movi	r20,1
 800b2e4:	a00b883a 	mov	r5,r20
 800b2e8:	9809883a 	mov	r4,r19
 800b2ec:	800aad00 	call	800aad0 <_Balloc>
 800b2f0:	1023883a 	mov	r17,r2
 800b2f4:	00809c44 	movi	r2,625
 800b2f8:	88800515 	stw	r2,20(r17)
 800b2fc:	8d000415 	stw	r20,16(r17)
 800b300:	9c401215 	stw	r17,72(r19)
 800b304:	88000015 	stw	zero,0(r17)
 800b308:	003fc606 	br	800b224 <__alt_data_end+0xfc00b224>

0800b30c <__lshift>:
 800b30c:	defff904 	addi	sp,sp,-28
 800b310:	dd400515 	stw	r21,20(sp)
 800b314:	dcc00315 	stw	r19,12(sp)
 800b318:	302bd17a 	srai	r21,r6,5
 800b31c:	2cc00417 	ldw	r19,16(r5)
 800b320:	28800217 	ldw	r2,8(r5)
 800b324:	dd000415 	stw	r20,16(sp)
 800b328:	ace7883a 	add	r19,r21,r19
 800b32c:	dc800215 	stw	r18,8(sp)
 800b330:	dc400115 	stw	r17,4(sp)
 800b334:	dc000015 	stw	r16,0(sp)
 800b338:	dfc00615 	stw	ra,24(sp)
 800b33c:	9c000044 	addi	r16,r19,1
 800b340:	2823883a 	mov	r17,r5
 800b344:	3029883a 	mov	r20,r6
 800b348:	2025883a 	mov	r18,r4
 800b34c:	29400117 	ldw	r5,4(r5)
 800b350:	1400030e 	bge	r2,r16,800b360 <__lshift+0x54>
 800b354:	1085883a 	add	r2,r2,r2
 800b358:	29400044 	addi	r5,r5,1
 800b35c:	143ffd16 	blt	r2,r16,800b354 <__alt_data_end+0xfc00b354>
 800b360:	9009883a 	mov	r4,r18
 800b364:	800aad00 	call	800aad0 <_Balloc>
 800b368:	10c00504 	addi	r3,r2,20
 800b36c:	0540070e 	bge	zero,r21,800b38c <__lshift+0x80>
 800b370:	ad6b883a 	add	r21,r21,r21
 800b374:	ad6b883a 	add	r21,r21,r21
 800b378:	1809883a 	mov	r4,r3
 800b37c:	1d47883a 	add	r3,r3,r21
 800b380:	20000015 	stw	zero,0(r4)
 800b384:	21000104 	addi	r4,r4,4
 800b388:	193ffd1e 	bne	r3,r4,800b380 <__alt_data_end+0xfc00b380>
 800b38c:	8a000417 	ldw	r8,16(r17)
 800b390:	89000504 	addi	r4,r17,20
 800b394:	a18007cc 	andi	r6,r20,31
 800b398:	4211883a 	add	r8,r8,r8
 800b39c:	4211883a 	add	r8,r8,r8
 800b3a0:	2211883a 	add	r8,r4,r8
 800b3a4:	30002326 	beq	r6,zero,800b434 <__lshift+0x128>
 800b3a8:	02400804 	movi	r9,32
 800b3ac:	4993c83a 	sub	r9,r9,r6
 800b3b0:	000b883a 	mov	r5,zero
 800b3b4:	21c00017 	ldw	r7,0(r4)
 800b3b8:	1815883a 	mov	r10,r3
 800b3bc:	18c00104 	addi	r3,r3,4
 800b3c0:	398e983a 	sll	r7,r7,r6
 800b3c4:	21000104 	addi	r4,r4,4
 800b3c8:	394ab03a 	or	r5,r7,r5
 800b3cc:	197fff15 	stw	r5,-4(r3)
 800b3d0:	217fff17 	ldw	r5,-4(r4)
 800b3d4:	2a4ad83a 	srl	r5,r5,r9
 800b3d8:	223ff636 	bltu	r4,r8,800b3b4 <__alt_data_end+0xfc00b3b4>
 800b3dc:	51400115 	stw	r5,4(r10)
 800b3e0:	28001a1e 	bne	r5,zero,800b44c <__lshift+0x140>
 800b3e4:	843fffc4 	addi	r16,r16,-1
 800b3e8:	14000415 	stw	r16,16(r2)
 800b3ec:	88000826 	beq	r17,zero,800b410 <__lshift+0x104>
 800b3f0:	89000117 	ldw	r4,4(r17)
 800b3f4:	90c01317 	ldw	r3,76(r18)
 800b3f8:	2109883a 	add	r4,r4,r4
 800b3fc:	2109883a 	add	r4,r4,r4
 800b400:	1907883a 	add	r3,r3,r4
 800b404:	19000017 	ldw	r4,0(r3)
 800b408:	89000015 	stw	r4,0(r17)
 800b40c:	1c400015 	stw	r17,0(r3)
 800b410:	dfc00617 	ldw	ra,24(sp)
 800b414:	dd400517 	ldw	r21,20(sp)
 800b418:	dd000417 	ldw	r20,16(sp)
 800b41c:	dcc00317 	ldw	r19,12(sp)
 800b420:	dc800217 	ldw	r18,8(sp)
 800b424:	dc400117 	ldw	r17,4(sp)
 800b428:	dc000017 	ldw	r16,0(sp)
 800b42c:	dec00704 	addi	sp,sp,28
 800b430:	f800283a 	ret
 800b434:	21400017 	ldw	r5,0(r4)
 800b438:	18c00104 	addi	r3,r3,4
 800b43c:	21000104 	addi	r4,r4,4
 800b440:	197fff15 	stw	r5,-4(r3)
 800b444:	223ffb36 	bltu	r4,r8,800b434 <__alt_data_end+0xfc00b434>
 800b448:	003fe606 	br	800b3e4 <__alt_data_end+0xfc00b3e4>
 800b44c:	9c000084 	addi	r16,r19,2
 800b450:	003fe406 	br	800b3e4 <__alt_data_end+0xfc00b3e4>

0800b454 <__mcmp>:
 800b454:	20800417 	ldw	r2,16(r4)
 800b458:	28c00417 	ldw	r3,16(r5)
 800b45c:	10c5c83a 	sub	r2,r2,r3
 800b460:	1000111e 	bne	r2,zero,800b4a8 <__mcmp+0x54>
 800b464:	18c7883a 	add	r3,r3,r3
 800b468:	18c7883a 	add	r3,r3,r3
 800b46c:	21000504 	addi	r4,r4,20
 800b470:	29400504 	addi	r5,r5,20
 800b474:	20c5883a 	add	r2,r4,r3
 800b478:	28cb883a 	add	r5,r5,r3
 800b47c:	00000106 	br	800b484 <__mcmp+0x30>
 800b480:	20800a2e 	bgeu	r4,r2,800b4ac <__mcmp+0x58>
 800b484:	10bfff04 	addi	r2,r2,-4
 800b488:	297fff04 	addi	r5,r5,-4
 800b48c:	11800017 	ldw	r6,0(r2)
 800b490:	28c00017 	ldw	r3,0(r5)
 800b494:	30fffa26 	beq	r6,r3,800b480 <__alt_data_end+0xfc00b480>
 800b498:	30c00236 	bltu	r6,r3,800b4a4 <__mcmp+0x50>
 800b49c:	00800044 	movi	r2,1
 800b4a0:	f800283a 	ret
 800b4a4:	00bfffc4 	movi	r2,-1
 800b4a8:	f800283a 	ret
 800b4ac:	0005883a 	mov	r2,zero
 800b4b0:	f800283a 	ret

0800b4b4 <__mdiff>:
 800b4b4:	28c00417 	ldw	r3,16(r5)
 800b4b8:	30800417 	ldw	r2,16(r6)
 800b4bc:	defffa04 	addi	sp,sp,-24
 800b4c0:	dcc00315 	stw	r19,12(sp)
 800b4c4:	dc800215 	stw	r18,8(sp)
 800b4c8:	dfc00515 	stw	ra,20(sp)
 800b4cc:	dd000415 	stw	r20,16(sp)
 800b4d0:	dc400115 	stw	r17,4(sp)
 800b4d4:	dc000015 	stw	r16,0(sp)
 800b4d8:	1887c83a 	sub	r3,r3,r2
 800b4dc:	2825883a 	mov	r18,r5
 800b4e0:	3027883a 	mov	r19,r6
 800b4e4:	1800141e 	bne	r3,zero,800b538 <__mdiff+0x84>
 800b4e8:	1085883a 	add	r2,r2,r2
 800b4ec:	1085883a 	add	r2,r2,r2
 800b4f0:	2a000504 	addi	r8,r5,20
 800b4f4:	34000504 	addi	r16,r6,20
 800b4f8:	4087883a 	add	r3,r8,r2
 800b4fc:	8085883a 	add	r2,r16,r2
 800b500:	00000106 	br	800b508 <__mdiff+0x54>
 800b504:	40c0592e 	bgeu	r8,r3,800b66c <__mdiff+0x1b8>
 800b508:	18ffff04 	addi	r3,r3,-4
 800b50c:	10bfff04 	addi	r2,r2,-4
 800b510:	19c00017 	ldw	r7,0(r3)
 800b514:	11400017 	ldw	r5,0(r2)
 800b518:	397ffa26 	beq	r7,r5,800b504 <__alt_data_end+0xfc00b504>
 800b51c:	3940592e 	bgeu	r7,r5,800b684 <__mdiff+0x1d0>
 800b520:	9005883a 	mov	r2,r18
 800b524:	4023883a 	mov	r17,r8
 800b528:	9825883a 	mov	r18,r19
 800b52c:	05000044 	movi	r20,1
 800b530:	1027883a 	mov	r19,r2
 800b534:	00000406 	br	800b548 <__mdiff+0x94>
 800b538:	18005616 	blt	r3,zero,800b694 <__mdiff+0x1e0>
 800b53c:	34400504 	addi	r17,r6,20
 800b540:	2c000504 	addi	r16,r5,20
 800b544:	0029883a 	mov	r20,zero
 800b548:	91400117 	ldw	r5,4(r18)
 800b54c:	800aad00 	call	800aad0 <_Balloc>
 800b550:	92400417 	ldw	r9,16(r18)
 800b554:	9b000417 	ldw	r12,16(r19)
 800b558:	12c00504 	addi	r11,r2,20
 800b55c:	4a51883a 	add	r8,r9,r9
 800b560:	6319883a 	add	r12,r12,r12
 800b564:	4211883a 	add	r8,r8,r8
 800b568:	6319883a 	add	r12,r12,r12
 800b56c:	15000315 	stw	r20,12(r2)
 800b570:	8211883a 	add	r8,r16,r8
 800b574:	8b19883a 	add	r12,r17,r12
 800b578:	0007883a 	mov	r3,zero
 800b57c:	81400017 	ldw	r5,0(r16)
 800b580:	89c00017 	ldw	r7,0(r17)
 800b584:	59800104 	addi	r6,r11,4
 800b588:	293fffcc 	andi	r4,r5,65535
 800b58c:	20c7883a 	add	r3,r4,r3
 800b590:	393fffcc 	andi	r4,r7,65535
 800b594:	1909c83a 	sub	r4,r3,r4
 800b598:	280ad43a 	srli	r5,r5,16
 800b59c:	380ed43a 	srli	r7,r7,16
 800b5a0:	2007d43a 	srai	r3,r4,16
 800b5a4:	213fffcc 	andi	r4,r4,65535
 800b5a8:	29cbc83a 	sub	r5,r5,r7
 800b5ac:	28c7883a 	add	r3,r5,r3
 800b5b0:	180a943a 	slli	r5,r3,16
 800b5b4:	8c400104 	addi	r17,r17,4
 800b5b8:	84000104 	addi	r16,r16,4
 800b5bc:	2908b03a 	or	r4,r5,r4
 800b5c0:	59000015 	stw	r4,0(r11)
 800b5c4:	1807d43a 	srai	r3,r3,16
 800b5c8:	3015883a 	mov	r10,r6
 800b5cc:	3017883a 	mov	r11,r6
 800b5d0:	8b3fea36 	bltu	r17,r12,800b57c <__alt_data_end+0xfc00b57c>
 800b5d4:	8200162e 	bgeu	r16,r8,800b630 <__mdiff+0x17c>
 800b5d8:	8017883a 	mov	r11,r16
 800b5dc:	59400017 	ldw	r5,0(r11)
 800b5e0:	31800104 	addi	r6,r6,4
 800b5e4:	5ac00104 	addi	r11,r11,4
 800b5e8:	293fffcc 	andi	r4,r5,65535
 800b5ec:	20c7883a 	add	r3,r4,r3
 800b5f0:	280ed43a 	srli	r7,r5,16
 800b5f4:	180bd43a 	srai	r5,r3,16
 800b5f8:	193fffcc 	andi	r4,r3,65535
 800b5fc:	3947883a 	add	r3,r7,r5
 800b600:	180a943a 	slli	r5,r3,16
 800b604:	1807d43a 	srai	r3,r3,16
 800b608:	2908b03a 	or	r4,r5,r4
 800b60c:	313fff15 	stw	r4,-4(r6)
 800b610:	5a3ff236 	bltu	r11,r8,800b5dc <__alt_data_end+0xfc00b5dc>
 800b614:	0406303a 	nor	r3,zero,r16
 800b618:	1a07883a 	add	r3,r3,r8
 800b61c:	1806d0ba 	srli	r3,r3,2
 800b620:	18c00044 	addi	r3,r3,1
 800b624:	18c7883a 	add	r3,r3,r3
 800b628:	18c7883a 	add	r3,r3,r3
 800b62c:	50d5883a 	add	r10,r10,r3
 800b630:	50ffff04 	addi	r3,r10,-4
 800b634:	2000041e 	bne	r4,zero,800b648 <__mdiff+0x194>
 800b638:	18ffff04 	addi	r3,r3,-4
 800b63c:	19000017 	ldw	r4,0(r3)
 800b640:	4a7fffc4 	addi	r9,r9,-1
 800b644:	203ffc26 	beq	r4,zero,800b638 <__alt_data_end+0xfc00b638>
 800b648:	12400415 	stw	r9,16(r2)
 800b64c:	dfc00517 	ldw	ra,20(sp)
 800b650:	dd000417 	ldw	r20,16(sp)
 800b654:	dcc00317 	ldw	r19,12(sp)
 800b658:	dc800217 	ldw	r18,8(sp)
 800b65c:	dc400117 	ldw	r17,4(sp)
 800b660:	dc000017 	ldw	r16,0(sp)
 800b664:	dec00604 	addi	sp,sp,24
 800b668:	f800283a 	ret
 800b66c:	000b883a 	mov	r5,zero
 800b670:	800aad00 	call	800aad0 <_Balloc>
 800b674:	00c00044 	movi	r3,1
 800b678:	10c00415 	stw	r3,16(r2)
 800b67c:	10000515 	stw	zero,20(r2)
 800b680:	003ff206 	br	800b64c <__alt_data_end+0xfc00b64c>
 800b684:	8023883a 	mov	r17,r16
 800b688:	0029883a 	mov	r20,zero
 800b68c:	4021883a 	mov	r16,r8
 800b690:	003fad06 	br	800b548 <__alt_data_end+0xfc00b548>
 800b694:	9005883a 	mov	r2,r18
 800b698:	94400504 	addi	r17,r18,20
 800b69c:	9c000504 	addi	r16,r19,20
 800b6a0:	9825883a 	mov	r18,r19
 800b6a4:	05000044 	movi	r20,1
 800b6a8:	1027883a 	mov	r19,r2
 800b6ac:	003fa606 	br	800b548 <__alt_data_end+0xfc00b548>

0800b6b0 <__ulp>:
 800b6b0:	295ffc2c 	andhi	r5,r5,32752
 800b6b4:	00bf3034 	movhi	r2,64704
 800b6b8:	2887883a 	add	r3,r5,r2
 800b6bc:	00c0020e 	bge	zero,r3,800b6c8 <__ulp+0x18>
 800b6c0:	0005883a 	mov	r2,zero
 800b6c4:	f800283a 	ret
 800b6c8:	00c7c83a 	sub	r3,zero,r3
 800b6cc:	1807d53a 	srai	r3,r3,20
 800b6d0:	008004c4 	movi	r2,19
 800b6d4:	10c00b0e 	bge	r2,r3,800b704 <__ulp+0x54>
 800b6d8:	18bffb04 	addi	r2,r3,-20
 800b6dc:	01000784 	movi	r4,30
 800b6e0:	0007883a 	mov	r3,zero
 800b6e4:	20800516 	blt	r4,r2,800b6fc <__ulp+0x4c>
 800b6e8:	010007c4 	movi	r4,31
 800b6ec:	2089c83a 	sub	r4,r4,r2
 800b6f0:	00800044 	movi	r2,1
 800b6f4:	1104983a 	sll	r2,r2,r4
 800b6f8:	f800283a 	ret
 800b6fc:	00800044 	movi	r2,1
 800b700:	f800283a 	ret
 800b704:	01400234 	movhi	r5,8
 800b708:	28c7d83a 	sra	r3,r5,r3
 800b70c:	0005883a 	mov	r2,zero
 800b710:	f800283a 	ret

0800b714 <__b2d>:
 800b714:	defffa04 	addi	sp,sp,-24
 800b718:	dc000015 	stw	r16,0(sp)
 800b71c:	24000417 	ldw	r16,16(r4)
 800b720:	dc400115 	stw	r17,4(sp)
 800b724:	24400504 	addi	r17,r4,20
 800b728:	8421883a 	add	r16,r16,r16
 800b72c:	8421883a 	add	r16,r16,r16
 800b730:	8c21883a 	add	r16,r17,r16
 800b734:	dc800215 	stw	r18,8(sp)
 800b738:	84bfff17 	ldw	r18,-4(r16)
 800b73c:	dd000415 	stw	r20,16(sp)
 800b740:	dcc00315 	stw	r19,12(sp)
 800b744:	9009883a 	mov	r4,r18
 800b748:	2829883a 	mov	r20,r5
 800b74c:	dfc00515 	stw	ra,20(sp)
 800b750:	800adec0 	call	800adec <__hi0bits>
 800b754:	00c00804 	movi	r3,32
 800b758:	1889c83a 	sub	r4,r3,r2
 800b75c:	a1000015 	stw	r4,0(r20)
 800b760:	01000284 	movi	r4,10
 800b764:	84ffff04 	addi	r19,r16,-4
 800b768:	20801216 	blt	r4,r2,800b7b4 <__b2d+0xa0>
 800b76c:	018002c4 	movi	r6,11
 800b770:	308dc83a 	sub	r6,r6,r2
 800b774:	9186d83a 	srl	r3,r18,r6
 800b778:	18cffc34 	orhi	r3,r3,16368
 800b77c:	8cc0212e 	bgeu	r17,r19,800b804 <__b2d+0xf0>
 800b780:	813ffe17 	ldw	r4,-8(r16)
 800b784:	218cd83a 	srl	r6,r4,r6
 800b788:	10800544 	addi	r2,r2,21
 800b78c:	9084983a 	sll	r2,r18,r2
 800b790:	1184b03a 	or	r2,r2,r6
 800b794:	dfc00517 	ldw	ra,20(sp)
 800b798:	dd000417 	ldw	r20,16(sp)
 800b79c:	dcc00317 	ldw	r19,12(sp)
 800b7a0:	dc800217 	ldw	r18,8(sp)
 800b7a4:	dc400117 	ldw	r17,4(sp)
 800b7a8:	dc000017 	ldw	r16,0(sp)
 800b7ac:	dec00604 	addi	sp,sp,24
 800b7b0:	f800283a 	ret
 800b7b4:	8cc00f2e 	bgeu	r17,r19,800b7f4 <__b2d+0xe0>
 800b7b8:	117ffd44 	addi	r5,r2,-11
 800b7bc:	80bffe17 	ldw	r2,-8(r16)
 800b7c0:	28000e26 	beq	r5,zero,800b7fc <__b2d+0xe8>
 800b7c4:	1949c83a 	sub	r4,r3,r5
 800b7c8:	9164983a 	sll	r18,r18,r5
 800b7cc:	1106d83a 	srl	r3,r2,r4
 800b7d0:	81bffe04 	addi	r6,r16,-8
 800b7d4:	948ffc34 	orhi	r18,r18,16368
 800b7d8:	90c6b03a 	or	r3,r18,r3
 800b7dc:	89800e2e 	bgeu	r17,r6,800b818 <__b2d+0x104>
 800b7e0:	81bffd17 	ldw	r6,-12(r16)
 800b7e4:	1144983a 	sll	r2,r2,r5
 800b7e8:	310ad83a 	srl	r5,r6,r4
 800b7ec:	2884b03a 	or	r2,r5,r2
 800b7f0:	003fe806 	br	800b794 <__alt_data_end+0xfc00b794>
 800b7f4:	10bffd44 	addi	r2,r2,-11
 800b7f8:	1000041e 	bne	r2,zero,800b80c <__b2d+0xf8>
 800b7fc:	90cffc34 	orhi	r3,r18,16368
 800b800:	003fe406 	br	800b794 <__alt_data_end+0xfc00b794>
 800b804:	000d883a 	mov	r6,zero
 800b808:	003fdf06 	br	800b788 <__alt_data_end+0xfc00b788>
 800b80c:	90a4983a 	sll	r18,r18,r2
 800b810:	0005883a 	mov	r2,zero
 800b814:	003ff906 	br	800b7fc <__alt_data_end+0xfc00b7fc>
 800b818:	1144983a 	sll	r2,r2,r5
 800b81c:	003fdd06 	br	800b794 <__alt_data_end+0xfc00b794>

0800b820 <__d2b>:
 800b820:	defff804 	addi	sp,sp,-32
 800b824:	dc000215 	stw	r16,8(sp)
 800b828:	3021883a 	mov	r16,r6
 800b82c:	dc400315 	stw	r17,12(sp)
 800b830:	8022907a 	slli	r17,r16,1
 800b834:	dd000615 	stw	r20,24(sp)
 800b838:	2829883a 	mov	r20,r5
 800b83c:	01400044 	movi	r5,1
 800b840:	dcc00515 	stw	r19,20(sp)
 800b844:	dc800415 	stw	r18,16(sp)
 800b848:	dfc00715 	stw	ra,28(sp)
 800b84c:	3825883a 	mov	r18,r7
 800b850:	8822d57a 	srli	r17,r17,21
 800b854:	800aad00 	call	800aad0 <_Balloc>
 800b858:	1027883a 	mov	r19,r2
 800b85c:	00800434 	movhi	r2,16
 800b860:	10bfffc4 	addi	r2,r2,-1
 800b864:	808c703a 	and	r6,r16,r2
 800b868:	88000126 	beq	r17,zero,800b870 <__d2b+0x50>
 800b86c:	31800434 	orhi	r6,r6,16
 800b870:	d9800015 	stw	r6,0(sp)
 800b874:	a0002426 	beq	r20,zero,800b908 <__d2b+0xe8>
 800b878:	d9000104 	addi	r4,sp,4
 800b87c:	dd000115 	stw	r20,4(sp)
 800b880:	800ae540 	call	800ae54 <__lo0bits>
 800b884:	d8c00017 	ldw	r3,0(sp)
 800b888:	10002f1e 	bne	r2,zero,800b948 <__d2b+0x128>
 800b88c:	d9000117 	ldw	r4,4(sp)
 800b890:	99000515 	stw	r4,20(r19)
 800b894:	1821003a 	cmpeq	r16,r3,zero
 800b898:	01000084 	movi	r4,2
 800b89c:	2421c83a 	sub	r16,r4,r16
 800b8a0:	98c00615 	stw	r3,24(r19)
 800b8a4:	9c000415 	stw	r16,16(r19)
 800b8a8:	88001f1e 	bne	r17,zero,800b928 <__d2b+0x108>
 800b8ac:	10bef384 	addi	r2,r2,-1074
 800b8b0:	90800015 	stw	r2,0(r18)
 800b8b4:	00900034 	movhi	r2,16384
 800b8b8:	10bfffc4 	addi	r2,r2,-1
 800b8bc:	8085883a 	add	r2,r16,r2
 800b8c0:	1085883a 	add	r2,r2,r2
 800b8c4:	1085883a 	add	r2,r2,r2
 800b8c8:	9885883a 	add	r2,r19,r2
 800b8cc:	11000517 	ldw	r4,20(r2)
 800b8d0:	8020917a 	slli	r16,r16,5
 800b8d4:	800adec0 	call	800adec <__hi0bits>
 800b8d8:	d8c00817 	ldw	r3,32(sp)
 800b8dc:	8085c83a 	sub	r2,r16,r2
 800b8e0:	18800015 	stw	r2,0(r3)
 800b8e4:	9805883a 	mov	r2,r19
 800b8e8:	dfc00717 	ldw	ra,28(sp)
 800b8ec:	dd000617 	ldw	r20,24(sp)
 800b8f0:	dcc00517 	ldw	r19,20(sp)
 800b8f4:	dc800417 	ldw	r18,16(sp)
 800b8f8:	dc400317 	ldw	r17,12(sp)
 800b8fc:	dc000217 	ldw	r16,8(sp)
 800b900:	dec00804 	addi	sp,sp,32
 800b904:	f800283a 	ret
 800b908:	d809883a 	mov	r4,sp
 800b90c:	800ae540 	call	800ae54 <__lo0bits>
 800b910:	d8c00017 	ldw	r3,0(sp)
 800b914:	04000044 	movi	r16,1
 800b918:	9c000415 	stw	r16,16(r19)
 800b91c:	98c00515 	stw	r3,20(r19)
 800b920:	10800804 	addi	r2,r2,32
 800b924:	883fe126 	beq	r17,zero,800b8ac <__alt_data_end+0xfc00b8ac>
 800b928:	00c00d44 	movi	r3,53
 800b92c:	8c7ef344 	addi	r17,r17,-1075
 800b930:	88a3883a 	add	r17,r17,r2
 800b934:	1885c83a 	sub	r2,r3,r2
 800b938:	d8c00817 	ldw	r3,32(sp)
 800b93c:	94400015 	stw	r17,0(r18)
 800b940:	18800015 	stw	r2,0(r3)
 800b944:	003fe706 	br	800b8e4 <__alt_data_end+0xfc00b8e4>
 800b948:	01000804 	movi	r4,32
 800b94c:	2089c83a 	sub	r4,r4,r2
 800b950:	1908983a 	sll	r4,r3,r4
 800b954:	d9400117 	ldw	r5,4(sp)
 800b958:	1886d83a 	srl	r3,r3,r2
 800b95c:	2148b03a 	or	r4,r4,r5
 800b960:	99000515 	stw	r4,20(r19)
 800b964:	d8c00015 	stw	r3,0(sp)
 800b968:	003fca06 	br	800b894 <__alt_data_end+0xfc00b894>

0800b96c <__ratio>:
 800b96c:	defff904 	addi	sp,sp,-28
 800b970:	dc400315 	stw	r17,12(sp)
 800b974:	2823883a 	mov	r17,r5
 800b978:	d9400104 	addi	r5,sp,4
 800b97c:	dfc00615 	stw	ra,24(sp)
 800b980:	dcc00515 	stw	r19,20(sp)
 800b984:	dc800415 	stw	r18,16(sp)
 800b988:	2027883a 	mov	r19,r4
 800b98c:	dc000215 	stw	r16,8(sp)
 800b990:	800b7140 	call	800b714 <__b2d>
 800b994:	d80b883a 	mov	r5,sp
 800b998:	8809883a 	mov	r4,r17
 800b99c:	1025883a 	mov	r18,r2
 800b9a0:	1821883a 	mov	r16,r3
 800b9a4:	800b7140 	call	800b714 <__b2d>
 800b9a8:	8a000417 	ldw	r8,16(r17)
 800b9ac:	99000417 	ldw	r4,16(r19)
 800b9b0:	d9400117 	ldw	r5,4(sp)
 800b9b4:	2209c83a 	sub	r4,r4,r8
 800b9b8:	2010917a 	slli	r8,r4,5
 800b9bc:	d9000017 	ldw	r4,0(sp)
 800b9c0:	2909c83a 	sub	r4,r5,r4
 800b9c4:	4109883a 	add	r4,r8,r4
 800b9c8:	01000e0e 	bge	zero,r4,800ba04 <__ratio+0x98>
 800b9cc:	2008953a 	slli	r4,r4,20
 800b9d0:	2421883a 	add	r16,r4,r16
 800b9d4:	100d883a 	mov	r6,r2
 800b9d8:	180f883a 	mov	r7,r3
 800b9dc:	9009883a 	mov	r4,r18
 800b9e0:	800b883a 	mov	r5,r16
 800b9e4:	8010ef80 	call	8010ef8 <__divdf3>
 800b9e8:	dfc00617 	ldw	ra,24(sp)
 800b9ec:	dcc00517 	ldw	r19,20(sp)
 800b9f0:	dc800417 	ldw	r18,16(sp)
 800b9f4:	dc400317 	ldw	r17,12(sp)
 800b9f8:	dc000217 	ldw	r16,8(sp)
 800b9fc:	dec00704 	addi	sp,sp,28
 800ba00:	f800283a 	ret
 800ba04:	2008953a 	slli	r4,r4,20
 800ba08:	1907c83a 	sub	r3,r3,r4
 800ba0c:	003ff106 	br	800b9d4 <__alt_data_end+0xfc00b9d4>

0800ba10 <_mprec_log10>:
 800ba10:	defffe04 	addi	sp,sp,-8
 800ba14:	dc000015 	stw	r16,0(sp)
 800ba18:	dfc00115 	stw	ra,4(sp)
 800ba1c:	008005c4 	movi	r2,23
 800ba20:	2021883a 	mov	r16,r4
 800ba24:	11000d0e 	bge	r2,r4,800ba5c <_mprec_log10+0x4c>
 800ba28:	0005883a 	mov	r2,zero
 800ba2c:	00cffc34 	movhi	r3,16368
 800ba30:	843fffc4 	addi	r16,r16,-1
 800ba34:	000d883a 	mov	r6,zero
 800ba38:	01d00934 	movhi	r7,16420
 800ba3c:	1009883a 	mov	r4,r2
 800ba40:	180b883a 	mov	r5,r3
 800ba44:	8011b200 	call	8011b20 <__muldf3>
 800ba48:	803ff91e 	bne	r16,zero,800ba30 <__alt_data_end+0xfc00ba30>
 800ba4c:	dfc00117 	ldw	ra,4(sp)
 800ba50:	dc000017 	ldw	r16,0(sp)
 800ba54:	dec00204 	addi	sp,sp,8
 800ba58:	f800283a 	ret
 800ba5c:	202090fa 	slli	r16,r4,3
 800ba60:	00820074 	movhi	r2,2049
 800ba64:	109f1204 	addi	r2,r2,31816
 800ba68:	1421883a 	add	r16,r2,r16
 800ba6c:	80800017 	ldw	r2,0(r16)
 800ba70:	80c00117 	ldw	r3,4(r16)
 800ba74:	dfc00117 	ldw	ra,4(sp)
 800ba78:	dc000017 	ldw	r16,0(sp)
 800ba7c:	dec00204 	addi	sp,sp,8
 800ba80:	f800283a 	ret

0800ba84 <__copybits>:
 800ba84:	297fffc4 	addi	r5,r5,-1
 800ba88:	280fd17a 	srai	r7,r5,5
 800ba8c:	30c00417 	ldw	r3,16(r6)
 800ba90:	30800504 	addi	r2,r6,20
 800ba94:	39c00044 	addi	r7,r7,1
 800ba98:	18c7883a 	add	r3,r3,r3
 800ba9c:	39cf883a 	add	r7,r7,r7
 800baa0:	18c7883a 	add	r3,r3,r3
 800baa4:	39cf883a 	add	r7,r7,r7
 800baa8:	10c7883a 	add	r3,r2,r3
 800baac:	21cf883a 	add	r7,r4,r7
 800bab0:	10c00d2e 	bgeu	r2,r3,800bae8 <__copybits+0x64>
 800bab4:	200b883a 	mov	r5,r4
 800bab8:	12000017 	ldw	r8,0(r2)
 800babc:	29400104 	addi	r5,r5,4
 800bac0:	10800104 	addi	r2,r2,4
 800bac4:	2a3fff15 	stw	r8,-4(r5)
 800bac8:	10fffb36 	bltu	r2,r3,800bab8 <__alt_data_end+0xfc00bab8>
 800bacc:	1985c83a 	sub	r2,r3,r6
 800bad0:	10bffac4 	addi	r2,r2,-21
 800bad4:	1004d0ba 	srli	r2,r2,2
 800bad8:	10800044 	addi	r2,r2,1
 800badc:	1085883a 	add	r2,r2,r2
 800bae0:	1085883a 	add	r2,r2,r2
 800bae4:	2089883a 	add	r4,r4,r2
 800bae8:	21c0032e 	bgeu	r4,r7,800baf8 <__copybits+0x74>
 800baec:	20000015 	stw	zero,0(r4)
 800baf0:	21000104 	addi	r4,r4,4
 800baf4:	21fffd36 	bltu	r4,r7,800baec <__alt_data_end+0xfc00baec>
 800baf8:	f800283a 	ret

0800bafc <__any_on>:
 800bafc:	20c00417 	ldw	r3,16(r4)
 800bb00:	2805d17a 	srai	r2,r5,5
 800bb04:	21000504 	addi	r4,r4,20
 800bb08:	18800d0e 	bge	r3,r2,800bb40 <__any_on+0x44>
 800bb0c:	18c7883a 	add	r3,r3,r3
 800bb10:	18c7883a 	add	r3,r3,r3
 800bb14:	20c7883a 	add	r3,r4,r3
 800bb18:	20c0192e 	bgeu	r4,r3,800bb80 <__any_on+0x84>
 800bb1c:	18bfff17 	ldw	r2,-4(r3)
 800bb20:	18ffff04 	addi	r3,r3,-4
 800bb24:	1000041e 	bne	r2,zero,800bb38 <__any_on+0x3c>
 800bb28:	20c0142e 	bgeu	r4,r3,800bb7c <__any_on+0x80>
 800bb2c:	18ffff04 	addi	r3,r3,-4
 800bb30:	19400017 	ldw	r5,0(r3)
 800bb34:	283ffc26 	beq	r5,zero,800bb28 <__alt_data_end+0xfc00bb28>
 800bb38:	00800044 	movi	r2,1
 800bb3c:	f800283a 	ret
 800bb40:	10c00a0e 	bge	r2,r3,800bb6c <__any_on+0x70>
 800bb44:	1085883a 	add	r2,r2,r2
 800bb48:	1085883a 	add	r2,r2,r2
 800bb4c:	294007cc 	andi	r5,r5,31
 800bb50:	2087883a 	add	r3,r4,r2
 800bb54:	283ff026 	beq	r5,zero,800bb18 <__alt_data_end+0xfc00bb18>
 800bb58:	19800017 	ldw	r6,0(r3)
 800bb5c:	3144d83a 	srl	r2,r6,r5
 800bb60:	114a983a 	sll	r5,r2,r5
 800bb64:	317ff41e 	bne	r6,r5,800bb38 <__alt_data_end+0xfc00bb38>
 800bb68:	003feb06 	br	800bb18 <__alt_data_end+0xfc00bb18>
 800bb6c:	1085883a 	add	r2,r2,r2
 800bb70:	1085883a 	add	r2,r2,r2
 800bb74:	2087883a 	add	r3,r4,r2
 800bb78:	003fe706 	br	800bb18 <__alt_data_end+0xfc00bb18>
 800bb7c:	f800283a 	ret
 800bb80:	0005883a 	mov	r2,zero
 800bb84:	f800283a 	ret

0800bb88 <_realloc_r>:
 800bb88:	defff604 	addi	sp,sp,-40
 800bb8c:	dc800215 	stw	r18,8(sp)
 800bb90:	dfc00915 	stw	ra,36(sp)
 800bb94:	df000815 	stw	fp,32(sp)
 800bb98:	ddc00715 	stw	r23,28(sp)
 800bb9c:	dd800615 	stw	r22,24(sp)
 800bba0:	dd400515 	stw	r21,20(sp)
 800bba4:	dd000415 	stw	r20,16(sp)
 800bba8:	dcc00315 	stw	r19,12(sp)
 800bbac:	dc400115 	stw	r17,4(sp)
 800bbb0:	dc000015 	stw	r16,0(sp)
 800bbb4:	3025883a 	mov	r18,r6
 800bbb8:	2800b726 	beq	r5,zero,800be98 <_realloc_r+0x310>
 800bbbc:	282b883a 	mov	r21,r5
 800bbc0:	2029883a 	mov	r20,r4
 800bbc4:	80134280 	call	8013428 <__malloc_lock>
 800bbc8:	a8bfff17 	ldw	r2,-4(r21)
 800bbcc:	043fff04 	movi	r16,-4
 800bbd0:	90c002c4 	addi	r3,r18,11
 800bbd4:	01000584 	movi	r4,22
 800bbd8:	acfffe04 	addi	r19,r21,-8
 800bbdc:	1420703a 	and	r16,r2,r16
 800bbe0:	20c0332e 	bgeu	r4,r3,800bcb0 <_realloc_r+0x128>
 800bbe4:	047ffe04 	movi	r17,-8
 800bbe8:	1c62703a 	and	r17,r3,r17
 800bbec:	8807883a 	mov	r3,r17
 800bbf0:	88005816 	blt	r17,zero,800bd54 <_realloc_r+0x1cc>
 800bbf4:	8c805736 	bltu	r17,r18,800bd54 <_realloc_r+0x1cc>
 800bbf8:	80c0300e 	bge	r16,r3,800bcbc <_realloc_r+0x134>
 800bbfc:	070200b4 	movhi	fp,2050
 800bc00:	e721a704 	addi	fp,fp,-31076
 800bc04:	e1c00217 	ldw	r7,8(fp)
 800bc08:	9c09883a 	add	r4,r19,r16
 800bc0c:	22000117 	ldw	r8,4(r4)
 800bc10:	21c06326 	beq	r4,r7,800bda0 <_realloc_r+0x218>
 800bc14:	017fff84 	movi	r5,-2
 800bc18:	414a703a 	and	r5,r8,r5
 800bc1c:	214b883a 	add	r5,r4,r5
 800bc20:	29800117 	ldw	r6,4(r5)
 800bc24:	3180004c 	andi	r6,r6,1
 800bc28:	30003f26 	beq	r6,zero,800bd28 <_realloc_r+0x1a0>
 800bc2c:	1080004c 	andi	r2,r2,1
 800bc30:	10008326 	beq	r2,zero,800be40 <_realloc_r+0x2b8>
 800bc34:	900b883a 	mov	r5,r18
 800bc38:	a009883a 	mov	r4,r20
 800bc3c:	8009e140 	call	8009e14 <_malloc_r>
 800bc40:	1025883a 	mov	r18,r2
 800bc44:	10011e26 	beq	r2,zero,800c0c0 <_realloc_r+0x538>
 800bc48:	a93fff17 	ldw	r4,-4(r21)
 800bc4c:	10fffe04 	addi	r3,r2,-8
 800bc50:	00bfff84 	movi	r2,-2
 800bc54:	2084703a 	and	r2,r4,r2
 800bc58:	9885883a 	add	r2,r19,r2
 800bc5c:	1880ee26 	beq	r3,r2,800c018 <_realloc_r+0x490>
 800bc60:	81bfff04 	addi	r6,r16,-4
 800bc64:	00800904 	movi	r2,36
 800bc68:	1180b836 	bltu	r2,r6,800bf4c <_realloc_r+0x3c4>
 800bc6c:	00c004c4 	movi	r3,19
 800bc70:	19809636 	bltu	r3,r6,800becc <_realloc_r+0x344>
 800bc74:	9005883a 	mov	r2,r18
 800bc78:	a807883a 	mov	r3,r21
 800bc7c:	19000017 	ldw	r4,0(r3)
 800bc80:	11000015 	stw	r4,0(r2)
 800bc84:	19000117 	ldw	r4,4(r3)
 800bc88:	11000115 	stw	r4,4(r2)
 800bc8c:	18c00217 	ldw	r3,8(r3)
 800bc90:	10c00215 	stw	r3,8(r2)
 800bc94:	a80b883a 	mov	r5,r21
 800bc98:	a009883a 	mov	r4,r20
 800bc9c:	800921c0 	call	800921c <_free_r>
 800bca0:	a009883a 	mov	r4,r20
 800bca4:	801344c0 	call	801344c <__malloc_unlock>
 800bca8:	9005883a 	mov	r2,r18
 800bcac:	00001206 	br	800bcf8 <_realloc_r+0x170>
 800bcb0:	00c00404 	movi	r3,16
 800bcb4:	1823883a 	mov	r17,r3
 800bcb8:	003fce06 	br	800bbf4 <__alt_data_end+0xfc00bbf4>
 800bcbc:	a825883a 	mov	r18,r21
 800bcc0:	8445c83a 	sub	r2,r16,r17
 800bcc4:	00c003c4 	movi	r3,15
 800bcc8:	18802636 	bltu	r3,r2,800bd64 <_realloc_r+0x1dc>
 800bccc:	99800117 	ldw	r6,4(r19)
 800bcd0:	9c07883a 	add	r3,r19,r16
 800bcd4:	3180004c 	andi	r6,r6,1
 800bcd8:	3420b03a 	or	r16,r6,r16
 800bcdc:	9c000115 	stw	r16,4(r19)
 800bce0:	18800117 	ldw	r2,4(r3)
 800bce4:	10800054 	ori	r2,r2,1
 800bce8:	18800115 	stw	r2,4(r3)
 800bcec:	a009883a 	mov	r4,r20
 800bcf0:	801344c0 	call	801344c <__malloc_unlock>
 800bcf4:	9005883a 	mov	r2,r18
 800bcf8:	dfc00917 	ldw	ra,36(sp)
 800bcfc:	df000817 	ldw	fp,32(sp)
 800bd00:	ddc00717 	ldw	r23,28(sp)
 800bd04:	dd800617 	ldw	r22,24(sp)
 800bd08:	dd400517 	ldw	r21,20(sp)
 800bd0c:	dd000417 	ldw	r20,16(sp)
 800bd10:	dcc00317 	ldw	r19,12(sp)
 800bd14:	dc800217 	ldw	r18,8(sp)
 800bd18:	dc400117 	ldw	r17,4(sp)
 800bd1c:	dc000017 	ldw	r16,0(sp)
 800bd20:	dec00a04 	addi	sp,sp,40
 800bd24:	f800283a 	ret
 800bd28:	017fff04 	movi	r5,-4
 800bd2c:	414a703a 	and	r5,r8,r5
 800bd30:	814d883a 	add	r6,r16,r5
 800bd34:	30c01f16 	blt	r6,r3,800bdb4 <_realloc_r+0x22c>
 800bd38:	20800317 	ldw	r2,12(r4)
 800bd3c:	20c00217 	ldw	r3,8(r4)
 800bd40:	a825883a 	mov	r18,r21
 800bd44:	3021883a 	mov	r16,r6
 800bd48:	18800315 	stw	r2,12(r3)
 800bd4c:	10c00215 	stw	r3,8(r2)
 800bd50:	003fdb06 	br	800bcc0 <__alt_data_end+0xfc00bcc0>
 800bd54:	00800304 	movi	r2,12
 800bd58:	a0800015 	stw	r2,0(r20)
 800bd5c:	0005883a 	mov	r2,zero
 800bd60:	003fe506 	br	800bcf8 <__alt_data_end+0xfc00bcf8>
 800bd64:	98c00117 	ldw	r3,4(r19)
 800bd68:	9c4b883a 	add	r5,r19,r17
 800bd6c:	11000054 	ori	r4,r2,1
 800bd70:	18c0004c 	andi	r3,r3,1
 800bd74:	1c62b03a 	or	r17,r3,r17
 800bd78:	9c400115 	stw	r17,4(r19)
 800bd7c:	29000115 	stw	r4,4(r5)
 800bd80:	2885883a 	add	r2,r5,r2
 800bd84:	10c00117 	ldw	r3,4(r2)
 800bd88:	29400204 	addi	r5,r5,8
 800bd8c:	a009883a 	mov	r4,r20
 800bd90:	18c00054 	ori	r3,r3,1
 800bd94:	10c00115 	stw	r3,4(r2)
 800bd98:	800921c0 	call	800921c <_free_r>
 800bd9c:	003fd306 	br	800bcec <__alt_data_end+0xfc00bcec>
 800bda0:	017fff04 	movi	r5,-4
 800bda4:	414a703a 	and	r5,r8,r5
 800bda8:	89800404 	addi	r6,r17,16
 800bdac:	8151883a 	add	r8,r16,r5
 800bdb0:	4180590e 	bge	r8,r6,800bf18 <_realloc_r+0x390>
 800bdb4:	1080004c 	andi	r2,r2,1
 800bdb8:	103f9e1e 	bne	r2,zero,800bc34 <__alt_data_end+0xfc00bc34>
 800bdbc:	adbffe17 	ldw	r22,-8(r21)
 800bdc0:	00bfff04 	movi	r2,-4
 800bdc4:	9dadc83a 	sub	r22,r19,r22
 800bdc8:	b1800117 	ldw	r6,4(r22)
 800bdcc:	3084703a 	and	r2,r6,r2
 800bdd0:	20002026 	beq	r4,zero,800be54 <_realloc_r+0x2cc>
 800bdd4:	80af883a 	add	r23,r16,r2
 800bdd8:	b96f883a 	add	r23,r23,r5
 800bddc:	21c05f26 	beq	r4,r7,800bf5c <_realloc_r+0x3d4>
 800bde0:	b8c01c16 	blt	r23,r3,800be54 <_realloc_r+0x2cc>
 800bde4:	20800317 	ldw	r2,12(r4)
 800bde8:	20c00217 	ldw	r3,8(r4)
 800bdec:	81bfff04 	addi	r6,r16,-4
 800bdf0:	01000904 	movi	r4,36
 800bdf4:	18800315 	stw	r2,12(r3)
 800bdf8:	10c00215 	stw	r3,8(r2)
 800bdfc:	b0c00217 	ldw	r3,8(r22)
 800be00:	b0800317 	ldw	r2,12(r22)
 800be04:	b4800204 	addi	r18,r22,8
 800be08:	18800315 	stw	r2,12(r3)
 800be0c:	10c00215 	stw	r3,8(r2)
 800be10:	21801b36 	bltu	r4,r6,800be80 <_realloc_r+0x2f8>
 800be14:	008004c4 	movi	r2,19
 800be18:	1180352e 	bgeu	r2,r6,800bef0 <_realloc_r+0x368>
 800be1c:	a8800017 	ldw	r2,0(r21)
 800be20:	b0800215 	stw	r2,8(r22)
 800be24:	a8800117 	ldw	r2,4(r21)
 800be28:	b0800315 	stw	r2,12(r22)
 800be2c:	008006c4 	movi	r2,27
 800be30:	11807f36 	bltu	r2,r6,800c030 <_realloc_r+0x4a8>
 800be34:	b0800404 	addi	r2,r22,16
 800be38:	ad400204 	addi	r21,r21,8
 800be3c:	00002d06 	br	800bef4 <_realloc_r+0x36c>
 800be40:	adbffe17 	ldw	r22,-8(r21)
 800be44:	00bfff04 	movi	r2,-4
 800be48:	9dadc83a 	sub	r22,r19,r22
 800be4c:	b1000117 	ldw	r4,4(r22)
 800be50:	2084703a 	and	r2,r4,r2
 800be54:	b03f7726 	beq	r22,zero,800bc34 <__alt_data_end+0xfc00bc34>
 800be58:	80af883a 	add	r23,r16,r2
 800be5c:	b8ff7516 	blt	r23,r3,800bc34 <__alt_data_end+0xfc00bc34>
 800be60:	b0800317 	ldw	r2,12(r22)
 800be64:	b0c00217 	ldw	r3,8(r22)
 800be68:	81bfff04 	addi	r6,r16,-4
 800be6c:	01000904 	movi	r4,36
 800be70:	18800315 	stw	r2,12(r3)
 800be74:	10c00215 	stw	r3,8(r2)
 800be78:	b4800204 	addi	r18,r22,8
 800be7c:	21bfe52e 	bgeu	r4,r6,800be14 <__alt_data_end+0xfc00be14>
 800be80:	a80b883a 	mov	r5,r21
 800be84:	9009883a 	mov	r4,r18
 800be88:	800a84c0 	call	800a84c <memmove>
 800be8c:	b821883a 	mov	r16,r23
 800be90:	b027883a 	mov	r19,r22
 800be94:	003f8a06 	br	800bcc0 <__alt_data_end+0xfc00bcc0>
 800be98:	300b883a 	mov	r5,r6
 800be9c:	dfc00917 	ldw	ra,36(sp)
 800bea0:	df000817 	ldw	fp,32(sp)
 800bea4:	ddc00717 	ldw	r23,28(sp)
 800bea8:	dd800617 	ldw	r22,24(sp)
 800beac:	dd400517 	ldw	r21,20(sp)
 800beb0:	dd000417 	ldw	r20,16(sp)
 800beb4:	dcc00317 	ldw	r19,12(sp)
 800beb8:	dc800217 	ldw	r18,8(sp)
 800bebc:	dc400117 	ldw	r17,4(sp)
 800bec0:	dc000017 	ldw	r16,0(sp)
 800bec4:	dec00a04 	addi	sp,sp,40
 800bec8:	8009e141 	jmpi	8009e14 <_malloc_r>
 800becc:	a8c00017 	ldw	r3,0(r21)
 800bed0:	90c00015 	stw	r3,0(r18)
 800bed4:	a8c00117 	ldw	r3,4(r21)
 800bed8:	90c00115 	stw	r3,4(r18)
 800bedc:	00c006c4 	movi	r3,27
 800bee0:	19804536 	bltu	r3,r6,800bff8 <_realloc_r+0x470>
 800bee4:	90800204 	addi	r2,r18,8
 800bee8:	a8c00204 	addi	r3,r21,8
 800beec:	003f6306 	br	800bc7c <__alt_data_end+0xfc00bc7c>
 800bef0:	9005883a 	mov	r2,r18
 800bef4:	a8c00017 	ldw	r3,0(r21)
 800bef8:	b821883a 	mov	r16,r23
 800befc:	b027883a 	mov	r19,r22
 800bf00:	10c00015 	stw	r3,0(r2)
 800bf04:	a8c00117 	ldw	r3,4(r21)
 800bf08:	10c00115 	stw	r3,4(r2)
 800bf0c:	a8c00217 	ldw	r3,8(r21)
 800bf10:	10c00215 	stw	r3,8(r2)
 800bf14:	003f6a06 	br	800bcc0 <__alt_data_end+0xfc00bcc0>
 800bf18:	9c67883a 	add	r19,r19,r17
 800bf1c:	4445c83a 	sub	r2,r8,r17
 800bf20:	e4c00215 	stw	r19,8(fp)
 800bf24:	10800054 	ori	r2,r2,1
 800bf28:	98800115 	stw	r2,4(r19)
 800bf2c:	a8bfff17 	ldw	r2,-4(r21)
 800bf30:	a009883a 	mov	r4,r20
 800bf34:	1080004c 	andi	r2,r2,1
 800bf38:	1462b03a 	or	r17,r2,r17
 800bf3c:	ac7fff15 	stw	r17,-4(r21)
 800bf40:	801344c0 	call	801344c <__malloc_unlock>
 800bf44:	a805883a 	mov	r2,r21
 800bf48:	003f6b06 	br	800bcf8 <__alt_data_end+0xfc00bcf8>
 800bf4c:	a80b883a 	mov	r5,r21
 800bf50:	9009883a 	mov	r4,r18
 800bf54:	800a84c0 	call	800a84c <memmove>
 800bf58:	003f4e06 	br	800bc94 <__alt_data_end+0xfc00bc94>
 800bf5c:	89000404 	addi	r4,r17,16
 800bf60:	b93fbc16 	blt	r23,r4,800be54 <__alt_data_end+0xfc00be54>
 800bf64:	b0800317 	ldw	r2,12(r22)
 800bf68:	b0c00217 	ldw	r3,8(r22)
 800bf6c:	81bfff04 	addi	r6,r16,-4
 800bf70:	01000904 	movi	r4,36
 800bf74:	18800315 	stw	r2,12(r3)
 800bf78:	10c00215 	stw	r3,8(r2)
 800bf7c:	b4800204 	addi	r18,r22,8
 800bf80:	21804336 	bltu	r4,r6,800c090 <_realloc_r+0x508>
 800bf84:	008004c4 	movi	r2,19
 800bf88:	11803f2e 	bgeu	r2,r6,800c088 <_realloc_r+0x500>
 800bf8c:	a8800017 	ldw	r2,0(r21)
 800bf90:	b0800215 	stw	r2,8(r22)
 800bf94:	a8800117 	ldw	r2,4(r21)
 800bf98:	b0800315 	stw	r2,12(r22)
 800bf9c:	008006c4 	movi	r2,27
 800bfa0:	11803f36 	bltu	r2,r6,800c0a0 <_realloc_r+0x518>
 800bfa4:	b0800404 	addi	r2,r22,16
 800bfa8:	ad400204 	addi	r21,r21,8
 800bfac:	a8c00017 	ldw	r3,0(r21)
 800bfb0:	10c00015 	stw	r3,0(r2)
 800bfb4:	a8c00117 	ldw	r3,4(r21)
 800bfb8:	10c00115 	stw	r3,4(r2)
 800bfbc:	a8c00217 	ldw	r3,8(r21)
 800bfc0:	10c00215 	stw	r3,8(r2)
 800bfc4:	b447883a 	add	r3,r22,r17
 800bfc8:	bc45c83a 	sub	r2,r23,r17
 800bfcc:	e0c00215 	stw	r3,8(fp)
 800bfd0:	10800054 	ori	r2,r2,1
 800bfd4:	18800115 	stw	r2,4(r3)
 800bfd8:	b0800117 	ldw	r2,4(r22)
 800bfdc:	a009883a 	mov	r4,r20
 800bfe0:	1080004c 	andi	r2,r2,1
 800bfe4:	1462b03a 	or	r17,r2,r17
 800bfe8:	b4400115 	stw	r17,4(r22)
 800bfec:	801344c0 	call	801344c <__malloc_unlock>
 800bff0:	9005883a 	mov	r2,r18
 800bff4:	003f4006 	br	800bcf8 <__alt_data_end+0xfc00bcf8>
 800bff8:	a8c00217 	ldw	r3,8(r21)
 800bffc:	90c00215 	stw	r3,8(r18)
 800c000:	a8c00317 	ldw	r3,12(r21)
 800c004:	90c00315 	stw	r3,12(r18)
 800c008:	30801126 	beq	r6,r2,800c050 <_realloc_r+0x4c8>
 800c00c:	90800404 	addi	r2,r18,16
 800c010:	a8c00404 	addi	r3,r21,16
 800c014:	003f1906 	br	800bc7c <__alt_data_end+0xfc00bc7c>
 800c018:	90ffff17 	ldw	r3,-4(r18)
 800c01c:	00bfff04 	movi	r2,-4
 800c020:	a825883a 	mov	r18,r21
 800c024:	1884703a 	and	r2,r3,r2
 800c028:	80a1883a 	add	r16,r16,r2
 800c02c:	003f2406 	br	800bcc0 <__alt_data_end+0xfc00bcc0>
 800c030:	a8800217 	ldw	r2,8(r21)
 800c034:	b0800415 	stw	r2,16(r22)
 800c038:	a8800317 	ldw	r2,12(r21)
 800c03c:	b0800515 	stw	r2,20(r22)
 800c040:	31000a26 	beq	r6,r4,800c06c <_realloc_r+0x4e4>
 800c044:	b0800604 	addi	r2,r22,24
 800c048:	ad400404 	addi	r21,r21,16
 800c04c:	003fa906 	br	800bef4 <__alt_data_end+0xfc00bef4>
 800c050:	a9000417 	ldw	r4,16(r21)
 800c054:	90800604 	addi	r2,r18,24
 800c058:	a8c00604 	addi	r3,r21,24
 800c05c:	91000415 	stw	r4,16(r18)
 800c060:	a9000517 	ldw	r4,20(r21)
 800c064:	91000515 	stw	r4,20(r18)
 800c068:	003f0406 	br	800bc7c <__alt_data_end+0xfc00bc7c>
 800c06c:	a8c00417 	ldw	r3,16(r21)
 800c070:	ad400604 	addi	r21,r21,24
 800c074:	b0800804 	addi	r2,r22,32
 800c078:	b0c00615 	stw	r3,24(r22)
 800c07c:	a8ffff17 	ldw	r3,-4(r21)
 800c080:	b0c00715 	stw	r3,28(r22)
 800c084:	003f9b06 	br	800bef4 <__alt_data_end+0xfc00bef4>
 800c088:	9005883a 	mov	r2,r18
 800c08c:	003fc706 	br	800bfac <__alt_data_end+0xfc00bfac>
 800c090:	a80b883a 	mov	r5,r21
 800c094:	9009883a 	mov	r4,r18
 800c098:	800a84c0 	call	800a84c <memmove>
 800c09c:	003fc906 	br	800bfc4 <__alt_data_end+0xfc00bfc4>
 800c0a0:	a8800217 	ldw	r2,8(r21)
 800c0a4:	b0800415 	stw	r2,16(r22)
 800c0a8:	a8800317 	ldw	r2,12(r21)
 800c0ac:	b0800515 	stw	r2,20(r22)
 800c0b0:	31000726 	beq	r6,r4,800c0d0 <_realloc_r+0x548>
 800c0b4:	b0800604 	addi	r2,r22,24
 800c0b8:	ad400404 	addi	r21,r21,16
 800c0bc:	003fbb06 	br	800bfac <__alt_data_end+0xfc00bfac>
 800c0c0:	a009883a 	mov	r4,r20
 800c0c4:	801344c0 	call	801344c <__malloc_unlock>
 800c0c8:	0005883a 	mov	r2,zero
 800c0cc:	003f0a06 	br	800bcf8 <__alt_data_end+0xfc00bcf8>
 800c0d0:	a8c00417 	ldw	r3,16(r21)
 800c0d4:	ad400604 	addi	r21,r21,24
 800c0d8:	b0800804 	addi	r2,r22,32
 800c0dc:	b0c00615 	stw	r3,24(r22)
 800c0e0:	a8ffff17 	ldw	r3,-4(r21)
 800c0e4:	b0c00715 	stw	r3,28(r22)
 800c0e8:	003fb006 	br	800bfac <__alt_data_end+0xfc00bfac>

0800c0ec <__fpclassifyd>:
 800c0ec:	00a00034 	movhi	r2,32768
 800c0f0:	10bfffc4 	addi	r2,r2,-1
 800c0f4:	2884703a 	and	r2,r5,r2
 800c0f8:	10000726 	beq	r2,zero,800c118 <__fpclassifyd+0x2c>
 800c0fc:	00fffc34 	movhi	r3,65520
 800c100:	019ff834 	movhi	r6,32736
 800c104:	28c7883a 	add	r3,r5,r3
 800c108:	31bfffc4 	addi	r6,r6,-1
 800c10c:	30c00536 	bltu	r6,r3,800c124 <__fpclassifyd+0x38>
 800c110:	00800104 	movi	r2,4
 800c114:	f800283a 	ret
 800c118:	2000021e 	bne	r4,zero,800c124 <__fpclassifyd+0x38>
 800c11c:	00800084 	movi	r2,2
 800c120:	f800283a 	ret
 800c124:	00dffc34 	movhi	r3,32752
 800c128:	019ff834 	movhi	r6,32736
 800c12c:	28cb883a 	add	r5,r5,r3
 800c130:	31bfffc4 	addi	r6,r6,-1
 800c134:	317ff62e 	bgeu	r6,r5,800c110 <__alt_data_end+0xfc00c110>
 800c138:	01400434 	movhi	r5,16
 800c13c:	297fffc4 	addi	r5,r5,-1
 800c140:	28800236 	bltu	r5,r2,800c14c <__fpclassifyd+0x60>
 800c144:	008000c4 	movi	r2,3
 800c148:	f800283a 	ret
 800c14c:	10c00226 	beq	r2,r3,800c158 <__fpclassifyd+0x6c>
 800c150:	0005883a 	mov	r2,zero
 800c154:	f800283a 	ret
 800c158:	2005003a 	cmpeq	r2,r4,zero
 800c15c:	f800283a 	ret

0800c160 <_sbrk_r>:
 800c160:	defffd04 	addi	sp,sp,-12
 800c164:	dc000015 	stw	r16,0(sp)
 800c168:	040200b4 	movhi	r16,2050
 800c16c:	dc400115 	stw	r17,4(sp)
 800c170:	842f3604 	addi	r16,r16,-17192
 800c174:	2023883a 	mov	r17,r4
 800c178:	2809883a 	mov	r4,r5
 800c17c:	dfc00215 	stw	ra,8(sp)
 800c180:	80000015 	stw	zero,0(r16)
 800c184:	80136340 	call	8013634 <sbrk>
 800c188:	00ffffc4 	movi	r3,-1
 800c18c:	10c00526 	beq	r2,r3,800c1a4 <_sbrk_r+0x44>
 800c190:	dfc00217 	ldw	ra,8(sp)
 800c194:	dc400117 	ldw	r17,4(sp)
 800c198:	dc000017 	ldw	r16,0(sp)
 800c19c:	dec00304 	addi	sp,sp,12
 800c1a0:	f800283a 	ret
 800c1a4:	80c00017 	ldw	r3,0(r16)
 800c1a8:	183ff926 	beq	r3,zero,800c190 <__alt_data_end+0xfc00c190>
 800c1ac:	88c00015 	stw	r3,0(r17)
 800c1b0:	003ff706 	br	800c190 <__alt_data_end+0xfc00c190>

0800c1b4 <__sread>:
 800c1b4:	defffe04 	addi	sp,sp,-8
 800c1b8:	dc000015 	stw	r16,0(sp)
 800c1bc:	2821883a 	mov	r16,r5
 800c1c0:	2940038f 	ldh	r5,14(r5)
 800c1c4:	dfc00115 	stw	ra,4(sp)
 800c1c8:	800f5e00 	call	800f5e0 <_read_r>
 800c1cc:	10000716 	blt	r2,zero,800c1ec <__sread+0x38>
 800c1d0:	80c01417 	ldw	r3,80(r16)
 800c1d4:	1887883a 	add	r3,r3,r2
 800c1d8:	80c01415 	stw	r3,80(r16)
 800c1dc:	dfc00117 	ldw	ra,4(sp)
 800c1e0:	dc000017 	ldw	r16,0(sp)
 800c1e4:	dec00204 	addi	sp,sp,8
 800c1e8:	f800283a 	ret
 800c1ec:	80c0030b 	ldhu	r3,12(r16)
 800c1f0:	18fbffcc 	andi	r3,r3,61439
 800c1f4:	80c0030d 	sth	r3,12(r16)
 800c1f8:	dfc00117 	ldw	ra,4(sp)
 800c1fc:	dc000017 	ldw	r16,0(sp)
 800c200:	dec00204 	addi	sp,sp,8
 800c204:	f800283a 	ret

0800c208 <__seofread>:
 800c208:	0005883a 	mov	r2,zero
 800c20c:	f800283a 	ret

0800c210 <__swrite>:
 800c210:	2880030b 	ldhu	r2,12(r5)
 800c214:	defffb04 	addi	sp,sp,-20
 800c218:	dcc00315 	stw	r19,12(sp)
 800c21c:	dc800215 	stw	r18,8(sp)
 800c220:	dc400115 	stw	r17,4(sp)
 800c224:	dc000015 	stw	r16,0(sp)
 800c228:	dfc00415 	stw	ra,16(sp)
 800c22c:	10c0400c 	andi	r3,r2,256
 800c230:	2821883a 	mov	r16,r5
 800c234:	2023883a 	mov	r17,r4
 800c238:	3025883a 	mov	r18,r6
 800c23c:	3827883a 	mov	r19,r7
 800c240:	18000526 	beq	r3,zero,800c258 <__swrite+0x48>
 800c244:	2940038f 	ldh	r5,14(r5)
 800c248:	01c00084 	movi	r7,2
 800c24c:	000d883a 	mov	r6,zero
 800c250:	800f5800 	call	800f580 <_lseek_r>
 800c254:	8080030b 	ldhu	r2,12(r16)
 800c258:	8140038f 	ldh	r5,14(r16)
 800c25c:	10bbffcc 	andi	r2,r2,61439
 800c260:	980f883a 	mov	r7,r19
 800c264:	900d883a 	mov	r6,r18
 800c268:	8809883a 	mov	r4,r17
 800c26c:	8080030d 	sth	r2,12(r16)
 800c270:	dfc00417 	ldw	ra,16(sp)
 800c274:	dcc00317 	ldw	r19,12(sp)
 800c278:	dc800217 	ldw	r18,8(sp)
 800c27c:	dc400117 	ldw	r17,4(sp)
 800c280:	dc000017 	ldw	r16,0(sp)
 800c284:	dec00504 	addi	sp,sp,20
 800c288:	800f0341 	jmpi	800f034 <_write_r>

0800c28c <__sseek>:
 800c28c:	defffe04 	addi	sp,sp,-8
 800c290:	dc000015 	stw	r16,0(sp)
 800c294:	2821883a 	mov	r16,r5
 800c298:	2940038f 	ldh	r5,14(r5)
 800c29c:	dfc00115 	stw	ra,4(sp)
 800c2a0:	800f5800 	call	800f580 <_lseek_r>
 800c2a4:	00ffffc4 	movi	r3,-1
 800c2a8:	10c00826 	beq	r2,r3,800c2cc <__sseek+0x40>
 800c2ac:	80c0030b 	ldhu	r3,12(r16)
 800c2b0:	80801415 	stw	r2,80(r16)
 800c2b4:	18c40014 	ori	r3,r3,4096
 800c2b8:	80c0030d 	sth	r3,12(r16)
 800c2bc:	dfc00117 	ldw	ra,4(sp)
 800c2c0:	dc000017 	ldw	r16,0(sp)
 800c2c4:	dec00204 	addi	sp,sp,8
 800c2c8:	f800283a 	ret
 800c2cc:	80c0030b 	ldhu	r3,12(r16)
 800c2d0:	18fbffcc 	andi	r3,r3,61439
 800c2d4:	80c0030d 	sth	r3,12(r16)
 800c2d8:	dfc00117 	ldw	ra,4(sp)
 800c2dc:	dc000017 	ldw	r16,0(sp)
 800c2e0:	dec00204 	addi	sp,sp,8
 800c2e4:	f800283a 	ret

0800c2e8 <__sclose>:
 800c2e8:	2940038f 	ldh	r5,14(r5)
 800c2ec:	800f0941 	jmpi	800f094 <_close_r>

0800c2f0 <strcmp>:
 800c2f0:	2144b03a 	or	r2,r4,r5
 800c2f4:	108000cc 	andi	r2,r2,3
 800c2f8:	1000171e 	bne	r2,zero,800c358 <strcmp+0x68>
 800c2fc:	20800017 	ldw	r2,0(r4)
 800c300:	28c00017 	ldw	r3,0(r5)
 800c304:	10c0141e 	bne	r2,r3,800c358 <strcmp+0x68>
 800c308:	027fbff4 	movhi	r9,65279
 800c30c:	4a7fbfc4 	addi	r9,r9,-257
 800c310:	0086303a 	nor	r3,zero,r2
 800c314:	02202074 	movhi	r8,32897
 800c318:	1245883a 	add	r2,r2,r9
 800c31c:	42202004 	addi	r8,r8,-32640
 800c320:	10c4703a 	and	r2,r2,r3
 800c324:	1204703a 	and	r2,r2,r8
 800c328:	10000226 	beq	r2,zero,800c334 <strcmp+0x44>
 800c32c:	00002306 	br	800c3bc <strcmp+0xcc>
 800c330:	1000221e 	bne	r2,zero,800c3bc <strcmp+0xcc>
 800c334:	21000104 	addi	r4,r4,4
 800c338:	20c00017 	ldw	r3,0(r4)
 800c33c:	29400104 	addi	r5,r5,4
 800c340:	29800017 	ldw	r6,0(r5)
 800c344:	1a4f883a 	add	r7,r3,r9
 800c348:	00c4303a 	nor	r2,zero,r3
 800c34c:	3884703a 	and	r2,r7,r2
 800c350:	1204703a 	and	r2,r2,r8
 800c354:	19bff626 	beq	r3,r6,800c330 <__alt_data_end+0xfc00c330>
 800c358:	20800003 	ldbu	r2,0(r4)
 800c35c:	10c03fcc 	andi	r3,r2,255
 800c360:	18c0201c 	xori	r3,r3,128
 800c364:	18ffe004 	addi	r3,r3,-128
 800c368:	18000c26 	beq	r3,zero,800c39c <strcmp+0xac>
 800c36c:	29800007 	ldb	r6,0(r5)
 800c370:	19800326 	beq	r3,r6,800c380 <strcmp+0x90>
 800c374:	00001306 	br	800c3c4 <strcmp+0xd4>
 800c378:	29800007 	ldb	r6,0(r5)
 800c37c:	11800b1e 	bne	r2,r6,800c3ac <strcmp+0xbc>
 800c380:	21000044 	addi	r4,r4,1
 800c384:	20c00003 	ldbu	r3,0(r4)
 800c388:	29400044 	addi	r5,r5,1
 800c38c:	18803fcc 	andi	r2,r3,255
 800c390:	1080201c 	xori	r2,r2,128
 800c394:	10bfe004 	addi	r2,r2,-128
 800c398:	103ff71e 	bne	r2,zero,800c378 <__alt_data_end+0xfc00c378>
 800c39c:	0007883a 	mov	r3,zero
 800c3a0:	28800003 	ldbu	r2,0(r5)
 800c3a4:	1885c83a 	sub	r2,r3,r2
 800c3a8:	f800283a 	ret
 800c3ac:	28800003 	ldbu	r2,0(r5)
 800c3b0:	18c03fcc 	andi	r3,r3,255
 800c3b4:	1885c83a 	sub	r2,r3,r2
 800c3b8:	f800283a 	ret
 800c3bc:	0005883a 	mov	r2,zero
 800c3c0:	f800283a 	ret
 800c3c4:	10c03fcc 	andi	r3,r2,255
 800c3c8:	003ff506 	br	800c3a0 <__alt_data_end+0xfc00c3a0>

0800c3cc <__ssprint_r>:
 800c3cc:	30800217 	ldw	r2,8(r6)
 800c3d0:	defff604 	addi	sp,sp,-40
 800c3d4:	dc800215 	stw	r18,8(sp)
 800c3d8:	dfc00915 	stw	ra,36(sp)
 800c3dc:	df000815 	stw	fp,32(sp)
 800c3e0:	ddc00715 	stw	r23,28(sp)
 800c3e4:	dd800615 	stw	r22,24(sp)
 800c3e8:	dd400515 	stw	r21,20(sp)
 800c3ec:	dd000415 	stw	r20,16(sp)
 800c3f0:	dcc00315 	stw	r19,12(sp)
 800c3f4:	dc400115 	stw	r17,4(sp)
 800c3f8:	dc000015 	stw	r16,0(sp)
 800c3fc:	3025883a 	mov	r18,r6
 800c400:	10005826 	beq	r2,zero,800c564 <__ssprint_r+0x198>
 800c404:	2027883a 	mov	r19,r4
 800c408:	35c00017 	ldw	r23,0(r6)
 800c40c:	29000017 	ldw	r4,0(r5)
 800c410:	28800217 	ldw	r2,8(r5)
 800c414:	2823883a 	mov	r17,r5
 800c418:	0039883a 	mov	fp,zero
 800c41c:	0021883a 	mov	r16,zero
 800c420:	80003926 	beq	r16,zero,800c508 <__ssprint_r+0x13c>
 800c424:	102b883a 	mov	r21,r2
 800c428:	102d883a 	mov	r22,r2
 800c42c:	80803a36 	bltu	r16,r2,800c518 <__ssprint_r+0x14c>
 800c430:	88c0030b 	ldhu	r3,12(r17)
 800c434:	1881200c 	andi	r2,r3,1152
 800c438:	10002626 	beq	r2,zero,800c4d4 <__ssprint_r+0x108>
 800c43c:	88800517 	ldw	r2,20(r17)
 800c440:	89400417 	ldw	r5,16(r17)
 800c444:	81800044 	addi	r6,r16,1
 800c448:	108f883a 	add	r7,r2,r2
 800c44c:	3885883a 	add	r2,r7,r2
 800c450:	100ed7fa 	srli	r7,r2,31
 800c454:	216dc83a 	sub	r22,r4,r5
 800c458:	3589883a 	add	r4,r6,r22
 800c45c:	3885883a 	add	r2,r7,r2
 800c460:	102bd07a 	srai	r21,r2,1
 800c464:	a80d883a 	mov	r6,r21
 800c468:	a900022e 	bgeu	r21,r4,800c474 <__ssprint_r+0xa8>
 800c46c:	202b883a 	mov	r21,r4
 800c470:	200d883a 	mov	r6,r4
 800c474:	18c1000c 	andi	r3,r3,1024
 800c478:	18002a26 	beq	r3,zero,800c524 <__ssprint_r+0x158>
 800c47c:	300b883a 	mov	r5,r6
 800c480:	9809883a 	mov	r4,r19
 800c484:	8009e140 	call	8009e14 <_malloc_r>
 800c488:	1029883a 	mov	r20,r2
 800c48c:	10002c26 	beq	r2,zero,800c540 <__ssprint_r+0x174>
 800c490:	89400417 	ldw	r5,16(r17)
 800c494:	b00d883a 	mov	r6,r22
 800c498:	1009883a 	mov	r4,r2
 800c49c:	800a7040 	call	800a704 <memcpy>
 800c4a0:	8880030b 	ldhu	r2,12(r17)
 800c4a4:	00fedfc4 	movi	r3,-1153
 800c4a8:	10c4703a 	and	r2,r2,r3
 800c4ac:	10802014 	ori	r2,r2,128
 800c4b0:	8880030d 	sth	r2,12(r17)
 800c4b4:	a589883a 	add	r4,r20,r22
 800c4b8:	adadc83a 	sub	r22,r21,r22
 800c4bc:	8d400515 	stw	r21,20(r17)
 800c4c0:	8d800215 	stw	r22,8(r17)
 800c4c4:	8d000415 	stw	r20,16(r17)
 800c4c8:	89000015 	stw	r4,0(r17)
 800c4cc:	802b883a 	mov	r21,r16
 800c4d0:	802d883a 	mov	r22,r16
 800c4d4:	b00d883a 	mov	r6,r22
 800c4d8:	e00b883a 	mov	r5,fp
 800c4dc:	800a84c0 	call	800a84c <memmove>
 800c4e0:	88800217 	ldw	r2,8(r17)
 800c4e4:	89000017 	ldw	r4,0(r17)
 800c4e8:	90c00217 	ldw	r3,8(r18)
 800c4ec:	1545c83a 	sub	r2,r2,r21
 800c4f0:	2589883a 	add	r4,r4,r22
 800c4f4:	88800215 	stw	r2,8(r17)
 800c4f8:	89000015 	stw	r4,0(r17)
 800c4fc:	1c21c83a 	sub	r16,r3,r16
 800c500:	94000215 	stw	r16,8(r18)
 800c504:	80001726 	beq	r16,zero,800c564 <__ssprint_r+0x198>
 800c508:	bf000017 	ldw	fp,0(r23)
 800c50c:	bc000117 	ldw	r16,4(r23)
 800c510:	bdc00204 	addi	r23,r23,8
 800c514:	003fc206 	br	800c420 <__alt_data_end+0xfc00c420>
 800c518:	802b883a 	mov	r21,r16
 800c51c:	802d883a 	mov	r22,r16
 800c520:	003fec06 	br	800c4d4 <__alt_data_end+0xfc00c4d4>
 800c524:	9809883a 	mov	r4,r19
 800c528:	800bb880 	call	800bb88 <_realloc_r>
 800c52c:	1029883a 	mov	r20,r2
 800c530:	103fe01e 	bne	r2,zero,800c4b4 <__alt_data_end+0xfc00c4b4>
 800c534:	89400417 	ldw	r5,16(r17)
 800c538:	9809883a 	mov	r4,r19
 800c53c:	800921c0 	call	800921c <_free_r>
 800c540:	88c0030b 	ldhu	r3,12(r17)
 800c544:	00800304 	movi	r2,12
 800c548:	98800015 	stw	r2,0(r19)
 800c54c:	18c01014 	ori	r3,r3,64
 800c550:	88c0030d 	sth	r3,12(r17)
 800c554:	00bfffc4 	movi	r2,-1
 800c558:	90000215 	stw	zero,8(r18)
 800c55c:	90000115 	stw	zero,4(r18)
 800c560:	00000206 	br	800c56c <__ssprint_r+0x1a0>
 800c564:	90000115 	stw	zero,4(r18)
 800c568:	0005883a 	mov	r2,zero
 800c56c:	dfc00917 	ldw	ra,36(sp)
 800c570:	df000817 	ldw	fp,32(sp)
 800c574:	ddc00717 	ldw	r23,28(sp)
 800c578:	dd800617 	ldw	r22,24(sp)
 800c57c:	dd400517 	ldw	r21,20(sp)
 800c580:	dd000417 	ldw	r20,16(sp)
 800c584:	dcc00317 	ldw	r19,12(sp)
 800c588:	dc800217 	ldw	r18,8(sp)
 800c58c:	dc400117 	ldw	r17,4(sp)
 800c590:	dc000017 	ldw	r16,0(sp)
 800c594:	dec00a04 	addi	sp,sp,40
 800c598:	f800283a 	ret

0800c59c <___svfiprintf_internal_r>:
 800c59c:	2880030b 	ldhu	r2,12(r5)
 800c5a0:	deffc804 	addi	sp,sp,-224
 800c5a4:	dcc03115 	stw	r19,196(sp)
 800c5a8:	dfc03715 	stw	ra,220(sp)
 800c5ac:	df003615 	stw	fp,216(sp)
 800c5b0:	ddc03515 	stw	r23,212(sp)
 800c5b4:	dd803415 	stw	r22,208(sp)
 800c5b8:	dd403315 	stw	r21,204(sp)
 800c5bc:	dd003215 	stw	r20,200(sp)
 800c5c0:	dc803015 	stw	r18,192(sp)
 800c5c4:	dc402f15 	stw	r17,188(sp)
 800c5c8:	dc002e15 	stw	r16,184(sp)
 800c5cc:	d9402315 	stw	r5,140(sp)
 800c5d0:	d9002715 	stw	r4,156(sp)
 800c5d4:	1080200c 	andi	r2,r2,128
 800c5d8:	d9c02415 	stw	r7,144(sp)
 800c5dc:	3027883a 	mov	r19,r6
 800c5e0:	10000226 	beq	r2,zero,800c5ec <___svfiprintf_internal_r+0x50>
 800c5e4:	28800417 	ldw	r2,16(r5)
 800c5e8:	10046d26 	beq	r2,zero,800d7a0 <___svfiprintf_internal_r+0x1204>
 800c5ec:	d8801a04 	addi	r2,sp,104
 800c5f0:	d8c019c4 	addi	r3,sp,103
 800c5f4:	05820074 	movhi	r22,2049
 800c5f8:	10c9c83a 	sub	r4,r2,r3
 800c5fc:	b59f4404 	addi	r22,r22,32016
 800c600:	d8801e15 	stw	r2,120(sp)
 800c604:	d8c01f15 	stw	r3,124(sp)
 800c608:	dec01a15 	stw	sp,104(sp)
 800c60c:	d8001c15 	stw	zero,112(sp)
 800c610:	d8001b15 	stw	zero,108(sp)
 800c614:	d811883a 	mov	r8,sp
 800c618:	d8002915 	stw	zero,164(sp)
 800c61c:	d8002615 	stw	zero,152(sp)
 800c620:	d9002c15 	stw	r4,176(sp)
 800c624:	98800007 	ldb	r2,0(r19)
 800c628:	10031426 	beq	r2,zero,800d27c <___svfiprintf_internal_r+0xce0>
 800c62c:	00c00944 	movi	r3,37
 800c630:	9825883a 	mov	r18,r19
 800c634:	10c0021e 	bne	r2,r3,800c640 <___svfiprintf_internal_r+0xa4>
 800c638:	00001406 	br	800c68c <___svfiprintf_internal_r+0xf0>
 800c63c:	10c00326 	beq	r2,r3,800c64c <___svfiprintf_internal_r+0xb0>
 800c640:	94800044 	addi	r18,r18,1
 800c644:	90800007 	ldb	r2,0(r18)
 800c648:	103ffc1e 	bne	r2,zero,800c63c <__alt_data_end+0xfc00c63c>
 800c64c:	94e1c83a 	sub	r16,r18,r19
 800c650:	80000e26 	beq	r16,zero,800c68c <___svfiprintf_internal_r+0xf0>
 800c654:	d8c01c17 	ldw	r3,112(sp)
 800c658:	d8801b17 	ldw	r2,108(sp)
 800c65c:	44c00015 	stw	r19,0(r8)
 800c660:	1c07883a 	add	r3,r3,r16
 800c664:	10800044 	addi	r2,r2,1
 800c668:	d8c01c15 	stw	r3,112(sp)
 800c66c:	44000115 	stw	r16,4(r8)
 800c670:	d8801b15 	stw	r2,108(sp)
 800c674:	00c001c4 	movi	r3,7
 800c678:	18835c16 	blt	r3,r2,800d3ec <___svfiprintf_internal_r+0xe50>
 800c67c:	42000204 	addi	r8,r8,8
 800c680:	d9402617 	ldw	r5,152(sp)
 800c684:	2c0b883a 	add	r5,r5,r16
 800c688:	d9402615 	stw	r5,152(sp)
 800c68c:	90800007 	ldb	r2,0(r18)
 800c690:	1002fc26 	beq	r2,zero,800d284 <___svfiprintf_internal_r+0xce8>
 800c694:	0023883a 	mov	r17,zero
 800c698:	00bfffc4 	movi	r2,-1
 800c69c:	0021883a 	mov	r16,zero
 800c6a0:	94c00044 	addi	r19,r18,1
 800c6a4:	90c00047 	ldb	r3,1(r18)
 800c6a8:	dc402105 	stb	r17,132(sp)
 800c6ac:	d8001d85 	stb	zero,118(sp)
 800c6b0:	002b883a 	mov	r21,zero
 800c6b4:	d8802015 	stw	r2,128(sp)
 800c6b8:	d8002515 	stw	zero,148(sp)
 800c6bc:	04801604 	movi	r18,88
 800c6c0:	05000244 	movi	r20,9
 800c6c4:	402f883a 	mov	r23,r8
 800c6c8:	8023883a 	mov	r17,r16
 800c6cc:	9cc00044 	addi	r19,r19,1
 800c6d0:	18bff804 	addi	r2,r3,-32
 800c6d4:	9081fb36 	bltu	r18,r2,800cec4 <___svfiprintf_internal_r+0x928>
 800c6d8:	100490ba 	slli	r2,r2,2
 800c6dc:	01020074 	movhi	r4,2049
 800c6e0:	2131bc04 	addi	r4,r4,-14608
 800c6e4:	1105883a 	add	r2,r2,r4
 800c6e8:	10800017 	ldw	r2,0(r2)
 800c6ec:	1000683a 	jmp	r2
 800c6f0:	0800c8f0 	cmpltui	zero,at,803
 800c6f4:	0800cec4 	addi	zero,at,827
 800c6f8:	0800cec4 	addi	zero,at,827
 800c6fc:	0800c8e4 	muli	zero,at,803
 800c700:	0800cec4 	addi	zero,at,827
 800c704:	0800cec4 	addi	zero,at,827
 800c708:	0800cec4 	addi	zero,at,827
 800c70c:	0800cec4 	addi	zero,at,827
 800c710:	0800cec4 	addi	zero,at,827
 800c714:	0800cec4 	addi	zero,at,827
 800c718:	0800c854 	ori	zero,at,801
 800c71c:	0800ca50 	cmplti	zero,at,809
 800c720:	0800cec4 	addi	zero,at,827
 800c724:	0800c87c 	xorhi	zero,at,801
 800c728:	0800cf00 	call	800cf0 <__alt_mem_onchip_memory2_0+0x800cf0>
 800c72c:	0800cec4 	addi	zero,at,827
 800c730:	0800cef4 	orhi	zero,at,827
 800c734:	0800ce88 	cmpgei	zero,at,826
 800c738:	0800ce88 	cmpgei	zero,at,826
 800c73c:	0800ce88 	cmpgei	zero,at,826
 800c740:	0800ce88 	cmpgei	zero,at,826
 800c744:	0800ce88 	cmpgei	zero,at,826
 800c748:	0800ce88 	cmpgei	zero,at,826
 800c74c:	0800ce88 	cmpgei	zero,at,826
 800c750:	0800ce88 	cmpgei	zero,at,826
 800c754:	0800ce88 	cmpgei	zero,at,826
 800c758:	0800cec4 	addi	zero,at,827
 800c75c:	0800cec4 	addi	zero,at,827
 800c760:	0800cec4 	addi	zero,at,827
 800c764:	0800cec4 	addi	zero,at,827
 800c768:	0800cec4 	addi	zero,at,827
 800c76c:	0800cec4 	addi	zero,at,827
 800c770:	0800cec4 	addi	zero,at,827
 800c774:	0800cec4 	addi	zero,at,827
 800c778:	0800cec4 	addi	zero,at,827
 800c77c:	0800cec4 	addi	zero,at,827
 800c780:	0800ce0c 	andi	zero,at,824
 800c784:	0800cec4 	addi	zero,at,827
 800c788:	0800cec4 	addi	zero,at,827
 800c78c:	0800cec4 	addi	zero,at,827
 800c790:	0800cec4 	addi	zero,at,827
 800c794:	0800cec4 	addi	zero,at,827
 800c798:	0800cec4 	addi	zero,at,827
 800c79c:	0800cec4 	addi	zero,at,827
 800c7a0:	0800cec4 	addi	zero,at,827
 800c7a4:	0800cec4 	addi	zero,at,827
 800c7a8:	0800cec4 	addi	zero,at,827
 800c7ac:	0800cfbc 	xorhi	zero,at,830
 800c7b0:	0800cec4 	addi	zero,at,827
 800c7b4:	0800cec4 	addi	zero,at,827
 800c7b8:	0800cec4 	addi	zero,at,827
 800c7bc:	0800cec4 	addi	zero,at,827
 800c7c0:	0800cec4 	addi	zero,at,827
 800c7c4:	0800cf48 	cmpgei	zero,at,829
 800c7c8:	0800cec4 	addi	zero,at,827
 800c7cc:	0800cec4 	addi	zero,at,827
 800c7d0:	0800cc48 	cmpgei	zero,at,817
 800c7d4:	0800cec4 	addi	zero,at,827
 800c7d8:	0800cec4 	addi	zero,at,827
 800c7dc:	0800cec4 	addi	zero,at,827
 800c7e0:	0800cec4 	addi	zero,at,827
 800c7e4:	0800cec4 	addi	zero,at,827
 800c7e8:	0800cec4 	addi	zero,at,827
 800c7ec:	0800cec4 	addi	zero,at,827
 800c7f0:	0800cec4 	addi	zero,at,827
 800c7f4:	0800cec4 	addi	zero,at,827
 800c7f8:	0800cec4 	addi	zero,at,827
 800c7fc:	0800cb14 	ori	zero,at,812
 800c800:	0800ccf8 	rdprs	zero,at,819
 800c804:	0800cec4 	addi	zero,at,827
 800c808:	0800cec4 	addi	zero,at,827
 800c80c:	0800cec4 	addi	zero,at,827
 800c810:	0800ccec 	andhi	zero,at,819
 800c814:	0800ccf8 	rdprs	zero,at,819
 800c818:	0800cec4 	addi	zero,at,827
 800c81c:	0800cec4 	addi	zero,at,827
 800c820:	0800ccd8 	cmpnei	zero,at,819
 800c824:	0800cec4 	addi	zero,at,827
 800c828:	0800cc98 	cmpnei	zero,at,818
 800c82c:	0800ca64 	muli	zero,at,809
 800c830:	0800c888 	cmpgei	zero,at,802
 800c834:	0800ce00 	call	800ce0 <__alt_mem_onchip_memory2_0+0x800ce0>
 800c838:	0800cec4 	addi	zero,at,827
 800c83c:	0800cdac 	andhi	zero,at,822
 800c840:	0800cec4 	addi	zero,at,827
 800c844:	0800c9c8 	cmpgei	zero,at,807
 800c848:	0800cec4 	addi	zero,at,827
 800c84c:	0800cec4 	addi	zero,at,827
 800c850:	0800c914 	ori	zero,at,804
 800c854:	d9002417 	ldw	r4,144(sp)
 800c858:	d9402417 	ldw	r5,144(sp)
 800c85c:	21000017 	ldw	r4,0(r4)
 800c860:	28800104 	addi	r2,r5,4
 800c864:	d9002515 	stw	r4,148(sp)
 800c868:	20032b0e 	bge	r4,zero,800d518 <___svfiprintf_internal_r+0xf7c>
 800c86c:	d8c02517 	ldw	r3,148(sp)
 800c870:	d8802415 	stw	r2,144(sp)
 800c874:	00c7c83a 	sub	r3,zero,r3
 800c878:	d8c02515 	stw	r3,148(sp)
 800c87c:	8c400114 	ori	r17,r17,4
 800c880:	98c00007 	ldb	r3,0(r19)
 800c884:	003f9106 	br	800c6cc <__alt_data_end+0xfc00c6cc>
 800c888:	00800c04 	movi	r2,48
 800c88c:	d9402417 	ldw	r5,144(sp)
 800c890:	d9002017 	ldw	r4,128(sp)
 800c894:	d8801d05 	stb	r2,116(sp)
 800c898:	00801e04 	movi	r2,120
 800c89c:	d8801d45 	stb	r2,117(sp)
 800c8a0:	d8001d85 	stb	zero,118(sp)
 800c8a4:	b811883a 	mov	r8,r23
 800c8a8:	28c00104 	addi	r3,r5,4
 800c8ac:	2c800017 	ldw	r18,0(r5)
 800c8b0:	0029883a 	mov	r20,zero
 800c8b4:	88800094 	ori	r2,r17,2
 800c8b8:	20036316 	blt	r4,zero,800d648 <___svfiprintf_internal_r+0x10ac>
 800c8bc:	00bfdfc4 	movi	r2,-129
 800c8c0:	88a0703a 	and	r16,r17,r2
 800c8c4:	d8c02415 	stw	r3,144(sp)
 800c8c8:	84000094 	ori	r16,r16,2
 800c8cc:	90031c26 	beq	r18,zero,800d540 <___svfiprintf_internal_r+0xfa4>
 800c8d0:	01420074 	movhi	r5,2049
 800c8d4:	295edb04 	addi	r5,r5,31596
 800c8d8:	002b883a 	mov	r21,zero
 800c8dc:	d9402915 	stw	r5,164(sp)
 800c8e0:	00002906 	br	800c988 <___svfiprintf_internal_r+0x3ec>
 800c8e4:	8c400054 	ori	r17,r17,1
 800c8e8:	98c00007 	ldb	r3,0(r19)
 800c8ec:	003f7706 	br	800c6cc <__alt_data_end+0xfc00c6cc>
 800c8f0:	a8803fcc 	andi	r2,r21,255
 800c8f4:	1080201c 	xori	r2,r2,128
 800c8f8:	10bfe004 	addi	r2,r2,-128
 800c8fc:	10032a1e 	bne	r2,zero,800d5a8 <___svfiprintf_internal_r+0x100c>
 800c900:	00c00044 	movi	r3,1
 800c904:	d8c02105 	stb	r3,132(sp)
 800c908:	05400804 	movi	r21,32
 800c90c:	98c00007 	ldb	r3,0(r19)
 800c910:	003f6e06 	br	800c6cc <__alt_data_end+0xfc00c6cc>
 800c914:	8821883a 	mov	r16,r17
 800c918:	dc402103 	ldbu	r17,132(sp)
 800c91c:	b811883a 	mov	r8,r23
 800c920:	8c403fcc 	andi	r17,r17,255
 800c924:	8803f01e 	bne	r17,zero,800d8e8 <___svfiprintf_internal_r+0x134c>
 800c928:	00820074 	movhi	r2,2049
 800c92c:	109edb04 	addi	r2,r2,31596
 800c930:	d8802915 	stw	r2,164(sp)
 800c934:	8080080c 	andi	r2,r16,32
 800c938:	1000cd26 	beq	r2,zero,800cc70 <___svfiprintf_internal_r+0x6d4>
 800c93c:	d9002417 	ldw	r4,144(sp)
 800c940:	24800017 	ldw	r18,0(r4)
 800c944:	25000117 	ldw	r20,4(r4)
 800c948:	21000204 	addi	r4,r4,8
 800c94c:	d9002415 	stw	r4,144(sp)
 800c950:	8080004c 	andi	r2,r16,1
 800c954:	1002c726 	beq	r2,zero,800d474 <___svfiprintf_internal_r+0xed8>
 800c958:	9504b03a 	or	r2,r18,r20
 800c95c:	1003061e 	bne	r2,zero,800d578 <___svfiprintf_internal_r+0xfdc>
 800c960:	d9002017 	ldw	r4,128(sp)
 800c964:	d8001d85 	stb	zero,118(sp)
 800c968:	20033e16 	blt	r4,zero,800d664 <___svfiprintf_internal_r+0x10c8>
 800c96c:	00bfdfc4 	movi	r2,-129
 800c970:	80a0703a 	and	r16,r16,r2
 800c974:	d9402017 	ldw	r5,128(sp)
 800c978:	002b883a 	mov	r21,zero
 800c97c:	28002826 	beq	r5,zero,800ca20 <___svfiprintf_internal_r+0x484>
 800c980:	0025883a 	mov	r18,zero
 800c984:	0029883a 	mov	r20,zero
 800c988:	d9002917 	ldw	r4,164(sp)
 800c98c:	dc401a04 	addi	r17,sp,104
 800c990:	908003cc 	andi	r2,r18,15
 800c994:	a006973a 	slli	r3,r20,28
 800c998:	2085883a 	add	r2,r4,r2
 800c99c:	9024d13a 	srli	r18,r18,4
 800c9a0:	10800003 	ldbu	r2,0(r2)
 800c9a4:	a028d13a 	srli	r20,r20,4
 800c9a8:	8c7fffc4 	addi	r17,r17,-1
 800c9ac:	1ca4b03a 	or	r18,r3,r18
 800c9b0:	88800005 	stb	r2,0(r17)
 800c9b4:	9504b03a 	or	r2,r18,r20
 800c9b8:	103ff51e 	bne	r2,zero,800c990 <__alt_data_end+0xfc00c990>
 800c9bc:	d8801e17 	ldw	r2,120(sp)
 800c9c0:	1469c83a 	sub	r20,r2,r17
 800c9c4:	00001906 	br	800ca2c <___svfiprintf_internal_r+0x490>
 800c9c8:	8821883a 	mov	r16,r17
 800c9cc:	dc402103 	ldbu	r17,132(sp)
 800c9d0:	b811883a 	mov	r8,r23
 800c9d4:	8c403fcc 	andi	r17,r17,255
 800c9d8:	8803d01e 	bne	r17,zero,800d91c <___svfiprintf_internal_r+0x1380>
 800c9dc:	8080080c 	andi	r2,r16,32
 800c9e0:	10016126 	beq	r2,zero,800cf68 <___svfiprintf_internal_r+0x9cc>
 800c9e4:	d9002417 	ldw	r4,144(sp)
 800c9e8:	d9402017 	ldw	r5,128(sp)
 800c9ec:	d8001d85 	stb	zero,118(sp)
 800c9f0:	20c00204 	addi	r3,r4,8
 800c9f4:	24800017 	ldw	r18,0(r4)
 800c9f8:	25000117 	ldw	r20,4(r4)
 800c9fc:	28030f16 	blt	r5,zero,800d63c <___svfiprintf_internal_r+0x10a0>
 800ca00:	013fdfc4 	movi	r4,-129
 800ca04:	9504b03a 	or	r2,r18,r20
 800ca08:	d8c02415 	stw	r3,144(sp)
 800ca0c:	8120703a 	and	r16,r16,r4
 800ca10:	002b883a 	mov	r21,zero
 800ca14:	1000cd1e 	bne	r2,zero,800cd4c <___svfiprintf_internal_r+0x7b0>
 800ca18:	d8c02017 	ldw	r3,128(sp)
 800ca1c:	1803141e 	bne	r3,zero,800d670 <___svfiprintf_internal_r+0x10d4>
 800ca20:	d8002015 	stw	zero,128(sp)
 800ca24:	0029883a 	mov	r20,zero
 800ca28:	dc401a04 	addi	r17,sp,104
 800ca2c:	dc802017 	ldw	r18,128(sp)
 800ca30:	9500010e 	bge	r18,r20,800ca38 <___svfiprintf_internal_r+0x49c>
 800ca34:	a025883a 	mov	r18,r20
 800ca38:	ad403fcc 	andi	r21,r21,255
 800ca3c:	ad40201c 	xori	r21,r21,128
 800ca40:	ad7fe004 	addi	r21,r21,-128
 800ca44:	a8003f26 	beq	r21,zero,800cb44 <___svfiprintf_internal_r+0x5a8>
 800ca48:	94800044 	addi	r18,r18,1
 800ca4c:	00003d06 	br	800cb44 <___svfiprintf_internal_r+0x5a8>
 800ca50:	00c00044 	movi	r3,1
 800ca54:	d8c02105 	stb	r3,132(sp)
 800ca58:	05400ac4 	movi	r21,43
 800ca5c:	98c00007 	ldb	r3,0(r19)
 800ca60:	003f1a06 	br	800c6cc <__alt_data_end+0xfc00c6cc>
 800ca64:	8821883a 	mov	r16,r17
 800ca68:	dc402103 	ldbu	r17,132(sp)
 800ca6c:	b811883a 	mov	r8,r23
 800ca70:	8c403fcc 	andi	r17,r17,255
 800ca74:	8803a71e 	bne	r17,zero,800d914 <___svfiprintf_internal_r+0x1378>
 800ca78:	8080080c 	andi	r2,r16,32
 800ca7c:	10015726 	beq	r2,zero,800cfdc <___svfiprintf_internal_r+0xa40>
 800ca80:	d8c02417 	ldw	r3,144(sp)
 800ca84:	d9002017 	ldw	r4,128(sp)
 800ca88:	d8001d85 	stb	zero,118(sp)
 800ca8c:	18800204 	addi	r2,r3,8
 800ca90:	1c800017 	ldw	r18,0(r3)
 800ca94:	1d000117 	ldw	r20,4(r3)
 800ca98:	2002db16 	blt	r4,zero,800d608 <___svfiprintf_internal_r+0x106c>
 800ca9c:	013fdfc4 	movi	r4,-129
 800caa0:	9506b03a 	or	r3,r18,r20
 800caa4:	d8802415 	stw	r2,144(sp)
 800caa8:	8120703a 	and	r16,r16,r4
 800caac:	18015826 	beq	r3,zero,800d010 <___svfiprintf_internal_r+0xa74>
 800cab0:	002b883a 	mov	r21,zero
 800cab4:	dc401a04 	addi	r17,sp,104
 800cab8:	9006d0fa 	srli	r3,r18,3
 800cabc:	a008977a 	slli	r4,r20,29
 800cac0:	a028d0fa 	srli	r20,r20,3
 800cac4:	948001cc 	andi	r18,r18,7
 800cac8:	90800c04 	addi	r2,r18,48
 800cacc:	8c7fffc4 	addi	r17,r17,-1
 800cad0:	20e4b03a 	or	r18,r4,r3
 800cad4:	88800005 	stb	r2,0(r17)
 800cad8:	9506b03a 	or	r3,r18,r20
 800cadc:	183ff61e 	bne	r3,zero,800cab8 <__alt_data_end+0xfc00cab8>
 800cae0:	80c0004c 	andi	r3,r16,1
 800cae4:	18028926 	beq	r3,zero,800d50c <___svfiprintf_internal_r+0xf70>
 800cae8:	10803fcc 	andi	r2,r2,255
 800caec:	1080201c 	xori	r2,r2,128
 800caf0:	10bfe004 	addi	r2,r2,-128
 800caf4:	00c00c04 	movi	r3,48
 800caf8:	10ffb026 	beq	r2,r3,800c9bc <__alt_data_end+0xfc00c9bc>
 800cafc:	88ffffc5 	stb	r3,-1(r17)
 800cb00:	d8c01e17 	ldw	r3,120(sp)
 800cb04:	88bfffc4 	addi	r2,r17,-1
 800cb08:	1023883a 	mov	r17,r2
 800cb0c:	18a9c83a 	sub	r20,r3,r2
 800cb10:	003fc606 	br	800ca2c <__alt_data_end+0xfc00ca2c>
 800cb14:	d8c02417 	ldw	r3,144(sp)
 800cb18:	04800044 	movi	r18,1
 800cb1c:	8821883a 	mov	r16,r17
 800cb20:	18800017 	ldw	r2,0(r3)
 800cb24:	18c00104 	addi	r3,r3,4
 800cb28:	b811883a 	mov	r8,r23
 800cb2c:	d8001d85 	stb	zero,118(sp)
 800cb30:	d8801005 	stb	r2,64(sp)
 800cb34:	d8c02415 	stw	r3,144(sp)
 800cb38:	9029883a 	mov	r20,r18
 800cb3c:	dc401004 	addi	r17,sp,64
 800cb40:	d8002015 	stw	zero,128(sp)
 800cb44:	80c0008c 	andi	r3,r16,2
 800cb48:	d8c02115 	stw	r3,132(sp)
 800cb4c:	18000126 	beq	r3,zero,800cb54 <___svfiprintf_internal_r+0x5b8>
 800cb50:	94800084 	addi	r18,r18,2
 800cb54:	80c0210c 	andi	r3,r16,132
 800cb58:	d8c02215 	stw	r3,136(sp)
 800cb5c:	1801321e 	bne	r3,zero,800d028 <___svfiprintf_internal_r+0xa8c>
 800cb60:	d9002517 	ldw	r4,148(sp)
 800cb64:	24b9c83a 	sub	fp,r4,r18
 800cb68:	07012f0e 	bge	zero,fp,800d028 <___svfiprintf_internal_r+0xa8c>
 800cb6c:	02400404 	movi	r9,16
 800cb70:	d8c01c17 	ldw	r3,112(sp)
 800cb74:	d8801b17 	ldw	r2,108(sp)
 800cb78:	4f03250e 	bge	r9,fp,800d810 <___svfiprintf_internal_r+0x1274>
 800cb7c:	01020074 	movhi	r4,2049
 800cb80:	211f4804 	addi	r4,r4,32032
 800cb84:	dc002a15 	stw	r16,168(sp)
 800cb88:	dc402b15 	stw	r17,172(sp)
 800cb8c:	d9002815 	stw	r4,160(sp)
 800cb90:	e023883a 	mov	r17,fp
 800cb94:	482f883a 	mov	r23,r9
 800cb98:	9839883a 	mov	fp,r19
 800cb9c:	054001c4 	movi	r21,7
 800cba0:	9027883a 	mov	r19,r18
 800cba4:	dc002717 	ldw	r16,156(sp)
 800cba8:	dc802317 	ldw	r18,140(sp)
 800cbac:	00000306 	br	800cbbc <___svfiprintf_internal_r+0x620>
 800cbb0:	8c7ffc04 	addi	r17,r17,-16
 800cbb4:	42000204 	addi	r8,r8,8
 800cbb8:	bc40130e 	bge	r23,r17,800cc08 <___svfiprintf_internal_r+0x66c>
 800cbbc:	01420074 	movhi	r5,2049
 800cbc0:	18c00404 	addi	r3,r3,16
 800cbc4:	10800044 	addi	r2,r2,1
 800cbc8:	295f4804 	addi	r5,r5,32032
 800cbcc:	41400015 	stw	r5,0(r8)
 800cbd0:	45c00115 	stw	r23,4(r8)
 800cbd4:	d8c01c15 	stw	r3,112(sp)
 800cbd8:	d8801b15 	stw	r2,108(sp)
 800cbdc:	a8bff40e 	bge	r21,r2,800cbb0 <__alt_data_end+0xfc00cbb0>
 800cbe0:	d9801a04 	addi	r6,sp,104
 800cbe4:	900b883a 	mov	r5,r18
 800cbe8:	8009883a 	mov	r4,r16
 800cbec:	800c3cc0 	call	800c3cc <__ssprint_r>
 800cbf0:	1001aa1e 	bne	r2,zero,800d29c <___svfiprintf_internal_r+0xd00>
 800cbf4:	8c7ffc04 	addi	r17,r17,-16
 800cbf8:	d8c01c17 	ldw	r3,112(sp)
 800cbfc:	d8801b17 	ldw	r2,108(sp)
 800cc00:	d811883a 	mov	r8,sp
 800cc04:	bc7fed16 	blt	r23,r17,800cbbc <__alt_data_end+0xfc00cbbc>
 800cc08:	9825883a 	mov	r18,r19
 800cc0c:	dc002a17 	ldw	r16,168(sp)
 800cc10:	e027883a 	mov	r19,fp
 800cc14:	8839883a 	mov	fp,r17
 800cc18:	dc402b17 	ldw	r17,172(sp)
 800cc1c:	d9002817 	ldw	r4,160(sp)
 800cc20:	e0c7883a 	add	r3,fp,r3
 800cc24:	10800044 	addi	r2,r2,1
 800cc28:	41000015 	stw	r4,0(r8)
 800cc2c:	47000115 	stw	fp,4(r8)
 800cc30:	d8c01c15 	stw	r3,112(sp)
 800cc34:	d8801b15 	stw	r2,108(sp)
 800cc38:	010001c4 	movi	r4,7
 800cc3c:	20821616 	blt	r4,r2,800d498 <___svfiprintf_internal_r+0xefc>
 800cc40:	42000204 	addi	r8,r8,8
 800cc44:	0000fa06 	br	800d030 <___svfiprintf_internal_r+0xa94>
 800cc48:	8821883a 	mov	r16,r17
 800cc4c:	dc402103 	ldbu	r17,132(sp)
 800cc50:	b811883a 	mov	r8,r23
 800cc54:	8c403fcc 	andi	r17,r17,255
 800cc58:	8803361e 	bne	r17,zero,800d934 <___svfiprintf_internal_r+0x1398>
 800cc5c:	01420074 	movhi	r5,2049
 800cc60:	295ed604 	addi	r5,r5,31576
 800cc64:	d9402915 	stw	r5,164(sp)
 800cc68:	8080080c 	andi	r2,r16,32
 800cc6c:	103f331e 	bne	r2,zero,800c93c <__alt_data_end+0xfc00c93c>
 800cc70:	8080040c 	andi	r2,r16,16
 800cc74:	1002551e 	bne	r2,zero,800d5cc <___svfiprintf_internal_r+0x1030>
 800cc78:	8080100c 	andi	r2,r16,64
 800cc7c:	1002a626 	beq	r2,zero,800d718 <___svfiprintf_internal_r+0x117c>
 800cc80:	d8802417 	ldw	r2,144(sp)
 800cc84:	0029883a 	mov	r20,zero
 800cc88:	1480000b 	ldhu	r18,0(r2)
 800cc8c:	10800104 	addi	r2,r2,4
 800cc90:	d8802415 	stw	r2,144(sp)
 800cc94:	003f2e06 	br	800c950 <__alt_data_end+0xfc00c950>
 800cc98:	8821883a 	mov	r16,r17
 800cc9c:	dc402103 	ldbu	r17,132(sp)
 800cca0:	b811883a 	mov	r8,r23
 800cca4:	8c403fcc 	andi	r17,r17,255
 800cca8:	88030b1e 	bne	r17,zero,800d8d8 <___svfiprintf_internal_r+0x133c>
 800ccac:	8080080c 	andi	r2,r16,32
 800ccb0:	1002271e 	bne	r2,zero,800d550 <___svfiprintf_internal_r+0xfb4>
 800ccb4:	8080040c 	andi	r2,r16,16
 800ccb8:	10028e26 	beq	r2,zero,800d6f4 <___svfiprintf_internal_r+0x1158>
 800ccbc:	d8c02417 	ldw	r3,144(sp)
 800ccc0:	d9002617 	ldw	r4,152(sp)
 800ccc4:	18800017 	ldw	r2,0(r3)
 800ccc8:	18c00104 	addi	r3,r3,4
 800cccc:	d8c02415 	stw	r3,144(sp)
 800ccd0:	11000015 	stw	r4,0(r2)
 800ccd4:	003e5306 	br	800c624 <__alt_data_end+0xfc00c624>
 800ccd8:	98c00007 	ldb	r3,0(r19)
 800ccdc:	01401b04 	movi	r5,108
 800cce0:	19424f26 	beq	r3,r5,800d620 <___svfiprintf_internal_r+0x1084>
 800cce4:	8c400414 	ori	r17,r17,16
 800cce8:	003e7806 	br	800c6cc <__alt_data_end+0xfc00c6cc>
 800ccec:	8c401014 	ori	r17,r17,64
 800ccf0:	98c00007 	ldb	r3,0(r19)
 800ccf4:	003e7506 	br	800c6cc <__alt_data_end+0xfc00c6cc>
 800ccf8:	8821883a 	mov	r16,r17
 800ccfc:	dc402103 	ldbu	r17,132(sp)
 800cd00:	b811883a 	mov	r8,r23
 800cd04:	8c403fcc 	andi	r17,r17,255
 800cd08:	8802fe1e 	bne	r17,zero,800d904 <___svfiprintf_internal_r+0x1368>
 800cd0c:	8080080c 	andi	r2,r16,32
 800cd10:	10004626 	beq	r2,zero,800ce2c <___svfiprintf_internal_r+0x890>
 800cd14:	d9002417 	ldw	r4,144(sp)
 800cd18:	20800117 	ldw	r2,4(r4)
 800cd1c:	24800017 	ldw	r18,0(r4)
 800cd20:	21000204 	addi	r4,r4,8
 800cd24:	d9002415 	stw	r4,144(sp)
 800cd28:	1029883a 	mov	r20,r2
 800cd2c:	10004a16 	blt	r2,zero,800ce58 <___svfiprintf_internal_r+0x8bc>
 800cd30:	d9002017 	ldw	r4,128(sp)
 800cd34:	dd401d83 	ldbu	r21,118(sp)
 800cd38:	2001eb16 	blt	r4,zero,800d4e8 <___svfiprintf_internal_r+0xf4c>
 800cd3c:	00ffdfc4 	movi	r3,-129
 800cd40:	9504b03a 	or	r2,r18,r20
 800cd44:	80e0703a 	and	r16,r16,r3
 800cd48:	103f3326 	beq	r2,zero,800ca18 <__alt_data_end+0xfc00ca18>
 800cd4c:	a0009426 	beq	r20,zero,800cfa0 <___svfiprintf_internal_r+0xa04>
 800cd50:	dc401a04 	addi	r17,sp,104
 800cd54:	402f883a 	mov	r23,r8
 800cd58:	9009883a 	mov	r4,r18
 800cd5c:	a00b883a 	mov	r5,r20
 800cd60:	01800284 	movi	r6,10
 800cd64:	000f883a 	mov	r7,zero
 800cd68:	80100880 	call	8010088 <__umoddi3>
 800cd6c:	10800c04 	addi	r2,r2,48
 800cd70:	8c7fffc4 	addi	r17,r17,-1
 800cd74:	9009883a 	mov	r4,r18
 800cd78:	a00b883a 	mov	r5,r20
 800cd7c:	88800005 	stb	r2,0(r17)
 800cd80:	01800284 	movi	r6,10
 800cd84:	000f883a 	mov	r7,zero
 800cd88:	800fa8c0 	call	800fa8c <__udivdi3>
 800cd8c:	1025883a 	mov	r18,r2
 800cd90:	10c4b03a 	or	r2,r2,r3
 800cd94:	1829883a 	mov	r20,r3
 800cd98:	103fef1e 	bne	r2,zero,800cd58 <__alt_data_end+0xfc00cd58>
 800cd9c:	d9001e17 	ldw	r4,120(sp)
 800cda0:	b811883a 	mov	r8,r23
 800cda4:	2469c83a 	sub	r20,r4,r17
 800cda8:	003f2006 	br	800ca2c <__alt_data_end+0xfc00ca2c>
 800cdac:	d8802417 	ldw	r2,144(sp)
 800cdb0:	8821883a 	mov	r16,r17
 800cdb4:	d8001d85 	stb	zero,118(sp)
 800cdb8:	14400017 	ldw	r17,0(r2)
 800cdbc:	b811883a 	mov	r8,r23
 800cdc0:	15c00104 	addi	r23,r2,4
 800cdc4:	88026c26 	beq	r17,zero,800d778 <___svfiprintf_internal_r+0x11dc>
 800cdc8:	d8c02017 	ldw	r3,128(sp)
 800cdcc:	18025f16 	blt	r3,zero,800d74c <___svfiprintf_internal_r+0x11b0>
 800cdd0:	180d883a 	mov	r6,r3
 800cdd4:	000b883a 	mov	r5,zero
 800cdd8:	8809883a 	mov	r4,r17
 800cddc:	da002d15 	stw	r8,180(sp)
 800cde0:	800a6200 	call	800a620 <memchr>
 800cde4:	da002d17 	ldw	r8,180(sp)
 800cde8:	1002a526 	beq	r2,zero,800d880 <___svfiprintf_internal_r+0x12e4>
 800cdec:	1469c83a 	sub	r20,r2,r17
 800cdf0:	dd401d83 	ldbu	r21,118(sp)
 800cdf4:	ddc02415 	stw	r23,144(sp)
 800cdf8:	d8002015 	stw	zero,128(sp)
 800cdfc:	003f0b06 	br	800ca2c <__alt_data_end+0xfc00ca2c>
 800ce00:	8c400814 	ori	r17,r17,32
 800ce04:	98c00007 	ldb	r3,0(r19)
 800ce08:	003e3006 	br	800c6cc <__alt_data_end+0xfc00c6cc>
 800ce0c:	8821883a 	mov	r16,r17
 800ce10:	dc402103 	ldbu	r17,132(sp)
 800ce14:	b811883a 	mov	r8,r23
 800ce18:	8c403fcc 	andi	r17,r17,255
 800ce1c:	8802b01e 	bne	r17,zero,800d8e0 <___svfiprintf_internal_r+0x1344>
 800ce20:	84000414 	ori	r16,r16,16
 800ce24:	8080080c 	andi	r2,r16,32
 800ce28:	103fba1e 	bne	r2,zero,800cd14 <__alt_data_end+0xfc00cd14>
 800ce2c:	8080040c 	andi	r2,r16,16
 800ce30:	1001df1e 	bne	r2,zero,800d5b0 <___svfiprintf_internal_r+0x1014>
 800ce34:	8080100c 	andi	r2,r16,64
 800ce38:	10023d26 	beq	r2,zero,800d730 <___svfiprintf_internal_r+0x1194>
 800ce3c:	d8802417 	ldw	r2,144(sp)
 800ce40:	1480000f 	ldh	r18,0(r2)
 800ce44:	10800104 	addi	r2,r2,4
 800ce48:	d8802415 	stw	r2,144(sp)
 800ce4c:	9029d7fa 	srai	r20,r18,31
 800ce50:	a005883a 	mov	r2,r20
 800ce54:	103fb60e 	bge	r2,zero,800cd30 <__alt_data_end+0xfc00cd30>
 800ce58:	d9402017 	ldw	r5,128(sp)
 800ce5c:	04a5c83a 	sub	r18,zero,r18
 800ce60:	05400b44 	movi	r21,45
 800ce64:	9004c03a 	cmpne	r2,r18,zero
 800ce68:	0529c83a 	sub	r20,zero,r20
 800ce6c:	dd401d85 	stb	r21,118(sp)
 800ce70:	a0a9c83a 	sub	r20,r20,r2
 800ce74:	28026c16 	blt	r5,zero,800d828 <___svfiprintf_internal_r+0x128c>
 800ce78:	00bfdfc4 	movi	r2,-129
 800ce7c:	80a0703a 	and	r16,r16,r2
 800ce80:	a03fb31e 	bne	r20,zero,800cd50 <__alt_data_end+0xfc00cd50>
 800ce84:	00004606 	br	800cfa0 <___svfiprintf_internal_r+0xa04>
 800ce88:	9839883a 	mov	fp,r19
 800ce8c:	d8002515 	stw	zero,148(sp)
 800ce90:	1c3ff404 	addi	r16,r3,-48
 800ce94:	0009883a 	mov	r4,zero
 800ce98:	01400284 	movi	r5,10
 800ce9c:	8001b580 	call	8001b58 <__mulsi3>
 800cea0:	e0c00007 	ldb	r3,0(fp)
 800cea4:	8089883a 	add	r4,r16,r2
 800cea8:	9cc00044 	addi	r19,r19,1
 800ceac:	1c3ff404 	addi	r16,r3,-48
 800ceb0:	9839883a 	mov	fp,r19
 800ceb4:	a43ff82e 	bgeu	r20,r16,800ce98 <__alt_data_end+0xfc00ce98>
 800ceb8:	d9002515 	stw	r4,148(sp)
 800cebc:	18bff804 	addi	r2,r3,-32
 800cec0:	90be052e 	bgeu	r18,r2,800c6d8 <__alt_data_end+0xfc00c6d8>
 800cec4:	8821883a 	mov	r16,r17
 800cec8:	dc402103 	ldbu	r17,132(sp)
 800cecc:	b811883a 	mov	r8,r23
 800ced0:	8c403fcc 	andi	r17,r17,255
 800ced4:	88028d1e 	bne	r17,zero,800d90c <___svfiprintf_internal_r+0x1370>
 800ced8:	1800ea26 	beq	r3,zero,800d284 <___svfiprintf_internal_r+0xce8>
 800cedc:	04800044 	movi	r18,1
 800cee0:	d8c01005 	stb	r3,64(sp)
 800cee4:	d8001d85 	stb	zero,118(sp)
 800cee8:	9029883a 	mov	r20,r18
 800ceec:	dc401004 	addi	r17,sp,64
 800cef0:	003f1306 	br	800cb40 <__alt_data_end+0xfc00cb40>
 800cef4:	8c402014 	ori	r17,r17,128
 800cef8:	98c00007 	ldb	r3,0(r19)
 800cefc:	003df306 	br	800c6cc <__alt_data_end+0xfc00c6cc>
 800cf00:	98c00007 	ldb	r3,0(r19)
 800cf04:	01000a84 	movi	r4,42
 800cf08:	9f000044 	addi	fp,r19,1
 800cf0c:	19026326 	beq	r3,r4,800d89c <___svfiprintf_internal_r+0x1300>
 800cf10:	1c3ff404 	addi	r16,r3,-48
 800cf14:	0009883a 	mov	r4,zero
 800cf18:	a4025636 	bltu	r20,r16,800d874 <___svfiprintf_internal_r+0x12d8>
 800cf1c:	01400284 	movi	r5,10
 800cf20:	8001b580 	call	8001b58 <__mulsi3>
 800cf24:	e0c00007 	ldb	r3,0(fp)
 800cf28:	1409883a 	add	r4,r2,r16
 800cf2c:	e4c00044 	addi	r19,fp,1
 800cf30:	1c3ff404 	addi	r16,r3,-48
 800cf34:	9839883a 	mov	fp,r19
 800cf38:	a43ff82e 	bgeu	r20,r16,800cf1c <__alt_data_end+0xfc00cf1c>
 800cf3c:	20020c16 	blt	r4,zero,800d770 <___svfiprintf_internal_r+0x11d4>
 800cf40:	d9002015 	stw	r4,128(sp)
 800cf44:	003de206 	br	800c6d0 <__alt_data_end+0xfc00c6d0>
 800cf48:	8821883a 	mov	r16,r17
 800cf4c:	dc402103 	ldbu	r17,132(sp)
 800cf50:	b811883a 	mov	r8,r23
 800cf54:	8c403fcc 	andi	r17,r17,255
 800cf58:	8802721e 	bne	r17,zero,800d924 <___svfiprintf_internal_r+0x1388>
 800cf5c:	84000414 	ori	r16,r16,16
 800cf60:	8080080c 	andi	r2,r16,32
 800cf64:	103e9f1e 	bne	r2,zero,800c9e4 <__alt_data_end+0xfc00c9e4>
 800cf68:	8080040c 	andi	r2,r16,16
 800cf6c:	10015326 	beq	r2,zero,800d4bc <___svfiprintf_internal_r+0xf20>
 800cf70:	d8c02417 	ldw	r3,144(sp)
 800cf74:	d9002017 	ldw	r4,128(sp)
 800cf78:	d8001d85 	stb	zero,118(sp)
 800cf7c:	18800104 	addi	r2,r3,4
 800cf80:	1c800017 	ldw	r18,0(r3)
 800cf84:	0029883a 	mov	r20,zero
 800cf88:	20015516 	blt	r4,zero,800d4e0 <___svfiprintf_internal_r+0xf44>
 800cf8c:	00ffdfc4 	movi	r3,-129
 800cf90:	d8802415 	stw	r2,144(sp)
 800cf94:	80e0703a 	and	r16,r16,r3
 800cf98:	002b883a 	mov	r21,zero
 800cf9c:	903e9e26 	beq	r18,zero,800ca18 <__alt_data_end+0xfc00ca18>
 800cfa0:	00800244 	movi	r2,9
 800cfa4:	14bf6a36 	bltu	r2,r18,800cd50 <__alt_data_end+0xfc00cd50>
 800cfa8:	94800c04 	addi	r18,r18,48
 800cfac:	dc8019c5 	stb	r18,103(sp)
 800cfb0:	dd002c17 	ldw	r20,176(sp)
 800cfb4:	dc4019c4 	addi	r17,sp,103
 800cfb8:	003e9c06 	br	800ca2c <__alt_data_end+0xfc00ca2c>
 800cfbc:	8821883a 	mov	r16,r17
 800cfc0:	dc402103 	ldbu	r17,132(sp)
 800cfc4:	b811883a 	mov	r8,r23
 800cfc8:	8c403fcc 	andi	r17,r17,255
 800cfcc:	8802571e 	bne	r17,zero,800d92c <___svfiprintf_internal_r+0x1390>
 800cfd0:	84000414 	ori	r16,r16,16
 800cfd4:	8080080c 	andi	r2,r16,32
 800cfd8:	103ea91e 	bne	r2,zero,800ca80 <__alt_data_end+0xfc00ca80>
 800cfdc:	8080040c 	andi	r2,r16,16
 800cfe0:	10018026 	beq	r2,zero,800d5e4 <___svfiprintf_internal_r+0x1048>
 800cfe4:	d9402417 	ldw	r5,144(sp)
 800cfe8:	d8c02017 	ldw	r3,128(sp)
 800cfec:	d8001d85 	stb	zero,118(sp)
 800cff0:	28800104 	addi	r2,r5,4
 800cff4:	2c800017 	ldw	r18,0(r5)
 800cff8:	0029883a 	mov	r20,zero
 800cffc:	18018216 	blt	r3,zero,800d608 <___svfiprintf_internal_r+0x106c>
 800d000:	00ffdfc4 	movi	r3,-129
 800d004:	d8802415 	stw	r2,144(sp)
 800d008:	80e0703a 	and	r16,r16,r3
 800d00c:	903ea81e 	bne	r18,zero,800cab0 <__alt_data_end+0xfc00cab0>
 800d010:	d8802017 	ldw	r2,128(sp)
 800d014:	002b883a 	mov	r21,zero
 800d018:	1001f226 	beq	r2,zero,800d7e4 <___svfiprintf_internal_r+0x1248>
 800d01c:	0025883a 	mov	r18,zero
 800d020:	0029883a 	mov	r20,zero
 800d024:	003ea306 	br	800cab4 <__alt_data_end+0xfc00cab4>
 800d028:	d8c01c17 	ldw	r3,112(sp)
 800d02c:	d8801b17 	ldw	r2,108(sp)
 800d030:	d9001d87 	ldb	r4,118(sp)
 800d034:	20000b26 	beq	r4,zero,800d064 <___svfiprintf_internal_r+0xac8>
 800d038:	d9001d84 	addi	r4,sp,118
 800d03c:	18c00044 	addi	r3,r3,1
 800d040:	10800044 	addi	r2,r2,1
 800d044:	41000015 	stw	r4,0(r8)
 800d048:	01000044 	movi	r4,1
 800d04c:	41000115 	stw	r4,4(r8)
 800d050:	d8c01c15 	stw	r3,112(sp)
 800d054:	d8801b15 	stw	r2,108(sp)
 800d058:	010001c4 	movi	r4,7
 800d05c:	2080f316 	blt	r4,r2,800d42c <___svfiprintf_internal_r+0xe90>
 800d060:	42000204 	addi	r8,r8,8
 800d064:	d9402117 	ldw	r5,132(sp)
 800d068:	28000b26 	beq	r5,zero,800d098 <___svfiprintf_internal_r+0xafc>
 800d06c:	d9001d04 	addi	r4,sp,116
 800d070:	18c00084 	addi	r3,r3,2
 800d074:	10800044 	addi	r2,r2,1
 800d078:	41000015 	stw	r4,0(r8)
 800d07c:	01000084 	movi	r4,2
 800d080:	41000115 	stw	r4,4(r8)
 800d084:	d8c01c15 	stw	r3,112(sp)
 800d088:	d8801b15 	stw	r2,108(sp)
 800d08c:	010001c4 	movi	r4,7
 800d090:	2080ef16 	blt	r4,r2,800d450 <___svfiprintf_internal_r+0xeb4>
 800d094:	42000204 	addi	r8,r8,8
 800d098:	d9402217 	ldw	r5,136(sp)
 800d09c:	01002004 	movi	r4,128
 800d0a0:	29008f26 	beq	r5,r4,800d2e0 <___svfiprintf_internal_r+0xd44>
 800d0a4:	d9002017 	ldw	r4,128(sp)
 800d0a8:	252fc83a 	sub	r23,r4,r20
 800d0ac:	05c0310e 	bge	zero,r23,800d174 <___svfiprintf_internal_r+0xbd8>
 800d0b0:	07000404 	movi	fp,16
 800d0b4:	e5c17d0e 	bge	fp,r23,800d6ac <___svfiprintf_internal_r+0x1110>
 800d0b8:	01020074 	movhi	r4,2049
 800d0bc:	211f4404 	addi	r4,r4,32016
 800d0c0:	dc002015 	stw	r16,128(sp)
 800d0c4:	dc402215 	stw	r17,136(sp)
 800d0c8:	d9002115 	stw	r4,132(sp)
 800d0cc:	b823883a 	mov	r17,r23
 800d0d0:	054001c4 	movi	r21,7
 800d0d4:	982f883a 	mov	r23,r19
 800d0d8:	dc002717 	ldw	r16,156(sp)
 800d0dc:	9027883a 	mov	r19,r18
 800d0e0:	dc802317 	ldw	r18,140(sp)
 800d0e4:	00000306 	br	800d0f4 <___svfiprintf_internal_r+0xb58>
 800d0e8:	8c7ffc04 	addi	r17,r17,-16
 800d0ec:	42000204 	addi	r8,r8,8
 800d0f0:	e440110e 	bge	fp,r17,800d138 <___svfiprintf_internal_r+0xb9c>
 800d0f4:	18c00404 	addi	r3,r3,16
 800d0f8:	10800044 	addi	r2,r2,1
 800d0fc:	45800015 	stw	r22,0(r8)
 800d100:	47000115 	stw	fp,4(r8)
 800d104:	d8c01c15 	stw	r3,112(sp)
 800d108:	d8801b15 	stw	r2,108(sp)
 800d10c:	a8bff60e 	bge	r21,r2,800d0e8 <__alt_data_end+0xfc00d0e8>
 800d110:	d9801a04 	addi	r6,sp,104
 800d114:	900b883a 	mov	r5,r18
 800d118:	8009883a 	mov	r4,r16
 800d11c:	800c3cc0 	call	800c3cc <__ssprint_r>
 800d120:	10005e1e 	bne	r2,zero,800d29c <___svfiprintf_internal_r+0xd00>
 800d124:	8c7ffc04 	addi	r17,r17,-16
 800d128:	d8c01c17 	ldw	r3,112(sp)
 800d12c:	d8801b17 	ldw	r2,108(sp)
 800d130:	d811883a 	mov	r8,sp
 800d134:	e47fef16 	blt	fp,r17,800d0f4 <__alt_data_end+0xfc00d0f4>
 800d138:	9825883a 	mov	r18,r19
 800d13c:	dc002017 	ldw	r16,128(sp)
 800d140:	b827883a 	mov	r19,r23
 800d144:	882f883a 	mov	r23,r17
 800d148:	dc402217 	ldw	r17,136(sp)
 800d14c:	d9402117 	ldw	r5,132(sp)
 800d150:	1dc7883a 	add	r3,r3,r23
 800d154:	10800044 	addi	r2,r2,1
 800d158:	41400015 	stw	r5,0(r8)
 800d15c:	45c00115 	stw	r23,4(r8)
 800d160:	d8c01c15 	stw	r3,112(sp)
 800d164:	d8801b15 	stw	r2,108(sp)
 800d168:	010001c4 	movi	r4,7
 800d16c:	2080a616 	blt	r4,r2,800d408 <___svfiprintf_internal_r+0xe6c>
 800d170:	42000204 	addi	r8,r8,8
 800d174:	a0c7883a 	add	r3,r20,r3
 800d178:	10800044 	addi	r2,r2,1
 800d17c:	44400015 	stw	r17,0(r8)
 800d180:	45000115 	stw	r20,4(r8)
 800d184:	d8c01c15 	stw	r3,112(sp)
 800d188:	d8801b15 	stw	r2,108(sp)
 800d18c:	010001c4 	movi	r4,7
 800d190:	20808816 	blt	r4,r2,800d3b4 <___svfiprintf_internal_r+0xe18>
 800d194:	42000204 	addi	r8,r8,8
 800d198:	8400010c 	andi	r16,r16,4
 800d19c:	80002c26 	beq	r16,zero,800d250 <___svfiprintf_internal_r+0xcb4>
 800d1a0:	d8802517 	ldw	r2,148(sp)
 800d1a4:	14a1c83a 	sub	r16,r2,r18
 800d1a8:	0400290e 	bge	zero,r16,800d250 <___svfiprintf_internal_r+0xcb4>
 800d1ac:	04400404 	movi	r17,16
 800d1b0:	d8801b17 	ldw	r2,108(sp)
 800d1b4:	8c01a70e 	bge	r17,r16,800d854 <___svfiprintf_internal_r+0x12b8>
 800d1b8:	01420074 	movhi	r5,2049
 800d1bc:	295f4804 	addi	r5,r5,32032
 800d1c0:	d9402815 	stw	r5,160(sp)
 800d1c4:	050001c4 	movi	r20,7
 800d1c8:	dd402717 	ldw	r21,156(sp)
 800d1cc:	ddc02317 	ldw	r23,140(sp)
 800d1d0:	00000306 	br	800d1e0 <___svfiprintf_internal_r+0xc44>
 800d1d4:	843ffc04 	addi	r16,r16,-16
 800d1d8:	42000204 	addi	r8,r8,8
 800d1dc:	8c00130e 	bge	r17,r16,800d22c <___svfiprintf_internal_r+0xc90>
 800d1e0:	01020074 	movhi	r4,2049
 800d1e4:	18c00404 	addi	r3,r3,16
 800d1e8:	10800044 	addi	r2,r2,1
 800d1ec:	211f4804 	addi	r4,r4,32032
 800d1f0:	41000015 	stw	r4,0(r8)
 800d1f4:	44400115 	stw	r17,4(r8)
 800d1f8:	d8c01c15 	stw	r3,112(sp)
 800d1fc:	d8801b15 	stw	r2,108(sp)
 800d200:	a0bff40e 	bge	r20,r2,800d1d4 <__alt_data_end+0xfc00d1d4>
 800d204:	d9801a04 	addi	r6,sp,104
 800d208:	b80b883a 	mov	r5,r23
 800d20c:	a809883a 	mov	r4,r21
 800d210:	800c3cc0 	call	800c3cc <__ssprint_r>
 800d214:	1000211e 	bne	r2,zero,800d29c <___svfiprintf_internal_r+0xd00>
 800d218:	843ffc04 	addi	r16,r16,-16
 800d21c:	d8c01c17 	ldw	r3,112(sp)
 800d220:	d8801b17 	ldw	r2,108(sp)
 800d224:	d811883a 	mov	r8,sp
 800d228:	8c3fed16 	blt	r17,r16,800d1e0 <__alt_data_end+0xfc00d1e0>
 800d22c:	d9402817 	ldw	r5,160(sp)
 800d230:	1c07883a 	add	r3,r3,r16
 800d234:	10800044 	addi	r2,r2,1
 800d238:	41400015 	stw	r5,0(r8)
 800d23c:	44000115 	stw	r16,4(r8)
 800d240:	d8c01c15 	stw	r3,112(sp)
 800d244:	d8801b15 	stw	r2,108(sp)
 800d248:	010001c4 	movi	r4,7
 800d24c:	2080b516 	blt	r4,r2,800d524 <___svfiprintf_internal_r+0xf88>
 800d250:	d8802517 	ldw	r2,148(sp)
 800d254:	1480010e 	bge	r2,r18,800d25c <___svfiprintf_internal_r+0xcc0>
 800d258:	9005883a 	mov	r2,r18
 800d25c:	d9002617 	ldw	r4,152(sp)
 800d260:	2089883a 	add	r4,r4,r2
 800d264:	d9002615 	stw	r4,152(sp)
 800d268:	18005a1e 	bne	r3,zero,800d3d4 <___svfiprintf_internal_r+0xe38>
 800d26c:	98800007 	ldb	r2,0(r19)
 800d270:	d8001b15 	stw	zero,108(sp)
 800d274:	d811883a 	mov	r8,sp
 800d278:	103cec1e 	bne	r2,zero,800c62c <__alt_data_end+0xfc00c62c>
 800d27c:	9825883a 	mov	r18,r19
 800d280:	003d0206 	br	800c68c <__alt_data_end+0xfc00c68c>
 800d284:	d8801c17 	ldw	r2,112(sp)
 800d288:	10000426 	beq	r2,zero,800d29c <___svfiprintf_internal_r+0xd00>
 800d28c:	d9402317 	ldw	r5,140(sp)
 800d290:	d9002717 	ldw	r4,156(sp)
 800d294:	d9801a04 	addi	r6,sp,104
 800d298:	800c3cc0 	call	800c3cc <__ssprint_r>
 800d29c:	d9402317 	ldw	r5,140(sp)
 800d2a0:	d8802617 	ldw	r2,152(sp)
 800d2a4:	28c0030b 	ldhu	r3,12(r5)
 800d2a8:	18c0100c 	andi	r3,r3,64
 800d2ac:	18015c1e 	bne	r3,zero,800d820 <___svfiprintf_internal_r+0x1284>
 800d2b0:	dfc03717 	ldw	ra,220(sp)
 800d2b4:	df003617 	ldw	fp,216(sp)
 800d2b8:	ddc03517 	ldw	r23,212(sp)
 800d2bc:	dd803417 	ldw	r22,208(sp)
 800d2c0:	dd403317 	ldw	r21,204(sp)
 800d2c4:	dd003217 	ldw	r20,200(sp)
 800d2c8:	dcc03117 	ldw	r19,196(sp)
 800d2cc:	dc803017 	ldw	r18,192(sp)
 800d2d0:	dc402f17 	ldw	r17,188(sp)
 800d2d4:	dc002e17 	ldw	r16,184(sp)
 800d2d8:	dec03804 	addi	sp,sp,224
 800d2dc:	f800283a 	ret
 800d2e0:	d9002517 	ldw	r4,148(sp)
 800d2e4:	24afc83a 	sub	r23,r4,r18
 800d2e8:	05ff6e0e 	bge	zero,r23,800d0a4 <__alt_data_end+0xfc00d0a4>
 800d2ec:	07000404 	movi	fp,16
 800d2f0:	e5c15c0e 	bge	fp,r23,800d864 <___svfiprintf_internal_r+0x12c8>
 800d2f4:	01020074 	movhi	r4,2049
 800d2f8:	211f4404 	addi	r4,r4,32016
 800d2fc:	dc002215 	stw	r16,136(sp)
 800d300:	dc402815 	stw	r17,160(sp)
 800d304:	d9002115 	stw	r4,132(sp)
 800d308:	b823883a 	mov	r17,r23
 800d30c:	054001c4 	movi	r21,7
 800d310:	982f883a 	mov	r23,r19
 800d314:	dc002717 	ldw	r16,156(sp)
 800d318:	9027883a 	mov	r19,r18
 800d31c:	dc802317 	ldw	r18,140(sp)
 800d320:	00000306 	br	800d330 <___svfiprintf_internal_r+0xd94>
 800d324:	8c7ffc04 	addi	r17,r17,-16
 800d328:	42000204 	addi	r8,r8,8
 800d32c:	e440110e 	bge	fp,r17,800d374 <___svfiprintf_internal_r+0xdd8>
 800d330:	18c00404 	addi	r3,r3,16
 800d334:	10800044 	addi	r2,r2,1
 800d338:	45800015 	stw	r22,0(r8)
 800d33c:	47000115 	stw	fp,4(r8)
 800d340:	d8c01c15 	stw	r3,112(sp)
 800d344:	d8801b15 	stw	r2,108(sp)
 800d348:	a8bff60e 	bge	r21,r2,800d324 <__alt_data_end+0xfc00d324>
 800d34c:	d9801a04 	addi	r6,sp,104
 800d350:	900b883a 	mov	r5,r18
 800d354:	8009883a 	mov	r4,r16
 800d358:	800c3cc0 	call	800c3cc <__ssprint_r>
 800d35c:	103fcf1e 	bne	r2,zero,800d29c <__alt_data_end+0xfc00d29c>
 800d360:	8c7ffc04 	addi	r17,r17,-16
 800d364:	d8c01c17 	ldw	r3,112(sp)
 800d368:	d8801b17 	ldw	r2,108(sp)
 800d36c:	d811883a 	mov	r8,sp
 800d370:	e47fef16 	blt	fp,r17,800d330 <__alt_data_end+0xfc00d330>
 800d374:	9825883a 	mov	r18,r19
 800d378:	dc002217 	ldw	r16,136(sp)
 800d37c:	b827883a 	mov	r19,r23
 800d380:	882f883a 	mov	r23,r17
 800d384:	dc402817 	ldw	r17,160(sp)
 800d388:	d9402117 	ldw	r5,132(sp)
 800d38c:	1dc7883a 	add	r3,r3,r23
 800d390:	10800044 	addi	r2,r2,1
 800d394:	41400015 	stw	r5,0(r8)
 800d398:	45c00115 	stw	r23,4(r8)
 800d39c:	d8c01c15 	stw	r3,112(sp)
 800d3a0:	d8801b15 	stw	r2,108(sp)
 800d3a4:	010001c4 	movi	r4,7
 800d3a8:	2080b716 	blt	r4,r2,800d688 <___svfiprintf_internal_r+0x10ec>
 800d3ac:	42000204 	addi	r8,r8,8
 800d3b0:	003f3c06 	br	800d0a4 <__alt_data_end+0xfc00d0a4>
 800d3b4:	d9402317 	ldw	r5,140(sp)
 800d3b8:	d9002717 	ldw	r4,156(sp)
 800d3bc:	d9801a04 	addi	r6,sp,104
 800d3c0:	800c3cc0 	call	800c3cc <__ssprint_r>
 800d3c4:	103fb51e 	bne	r2,zero,800d29c <__alt_data_end+0xfc00d29c>
 800d3c8:	d8c01c17 	ldw	r3,112(sp)
 800d3cc:	d811883a 	mov	r8,sp
 800d3d0:	003f7106 	br	800d198 <__alt_data_end+0xfc00d198>
 800d3d4:	d9402317 	ldw	r5,140(sp)
 800d3d8:	d9002717 	ldw	r4,156(sp)
 800d3dc:	d9801a04 	addi	r6,sp,104
 800d3e0:	800c3cc0 	call	800c3cc <__ssprint_r>
 800d3e4:	103fa126 	beq	r2,zero,800d26c <__alt_data_end+0xfc00d26c>
 800d3e8:	003fac06 	br	800d29c <__alt_data_end+0xfc00d29c>
 800d3ec:	d9402317 	ldw	r5,140(sp)
 800d3f0:	d9002717 	ldw	r4,156(sp)
 800d3f4:	d9801a04 	addi	r6,sp,104
 800d3f8:	800c3cc0 	call	800c3cc <__ssprint_r>
 800d3fc:	103fa71e 	bne	r2,zero,800d29c <__alt_data_end+0xfc00d29c>
 800d400:	d811883a 	mov	r8,sp
 800d404:	003c9e06 	br	800c680 <__alt_data_end+0xfc00c680>
 800d408:	d9402317 	ldw	r5,140(sp)
 800d40c:	d9002717 	ldw	r4,156(sp)
 800d410:	d9801a04 	addi	r6,sp,104
 800d414:	800c3cc0 	call	800c3cc <__ssprint_r>
 800d418:	103fa01e 	bne	r2,zero,800d29c <__alt_data_end+0xfc00d29c>
 800d41c:	d8c01c17 	ldw	r3,112(sp)
 800d420:	d8801b17 	ldw	r2,108(sp)
 800d424:	d811883a 	mov	r8,sp
 800d428:	003f5206 	br	800d174 <__alt_data_end+0xfc00d174>
 800d42c:	d9402317 	ldw	r5,140(sp)
 800d430:	d9002717 	ldw	r4,156(sp)
 800d434:	d9801a04 	addi	r6,sp,104
 800d438:	800c3cc0 	call	800c3cc <__ssprint_r>
 800d43c:	103f971e 	bne	r2,zero,800d29c <__alt_data_end+0xfc00d29c>
 800d440:	d8c01c17 	ldw	r3,112(sp)
 800d444:	d8801b17 	ldw	r2,108(sp)
 800d448:	d811883a 	mov	r8,sp
 800d44c:	003f0506 	br	800d064 <__alt_data_end+0xfc00d064>
 800d450:	d9402317 	ldw	r5,140(sp)
 800d454:	d9002717 	ldw	r4,156(sp)
 800d458:	d9801a04 	addi	r6,sp,104
 800d45c:	800c3cc0 	call	800c3cc <__ssprint_r>
 800d460:	103f8e1e 	bne	r2,zero,800d29c <__alt_data_end+0xfc00d29c>
 800d464:	d8c01c17 	ldw	r3,112(sp)
 800d468:	d8801b17 	ldw	r2,108(sp)
 800d46c:	d811883a 	mov	r8,sp
 800d470:	003f0906 	br	800d098 <__alt_data_end+0xfc00d098>
 800d474:	d9402017 	ldw	r5,128(sp)
 800d478:	d8001d85 	stb	zero,118(sp)
 800d47c:	28007716 	blt	r5,zero,800d65c <___svfiprintf_internal_r+0x10c0>
 800d480:	00ffdfc4 	movi	r3,-129
 800d484:	9504b03a 	or	r2,r18,r20
 800d488:	80e0703a 	and	r16,r16,r3
 800d48c:	103d3926 	beq	r2,zero,800c974 <__alt_data_end+0xfc00c974>
 800d490:	002b883a 	mov	r21,zero
 800d494:	003d3c06 	br	800c988 <__alt_data_end+0xfc00c988>
 800d498:	d9402317 	ldw	r5,140(sp)
 800d49c:	d9002717 	ldw	r4,156(sp)
 800d4a0:	d9801a04 	addi	r6,sp,104
 800d4a4:	800c3cc0 	call	800c3cc <__ssprint_r>
 800d4a8:	103f7c1e 	bne	r2,zero,800d29c <__alt_data_end+0xfc00d29c>
 800d4ac:	d8c01c17 	ldw	r3,112(sp)
 800d4b0:	d8801b17 	ldw	r2,108(sp)
 800d4b4:	d811883a 	mov	r8,sp
 800d4b8:	003edd06 	br	800d030 <__alt_data_end+0xfc00d030>
 800d4bc:	8080100c 	andi	r2,r16,64
 800d4c0:	d8001d85 	stb	zero,118(sp)
 800d4c4:	10008426 	beq	r2,zero,800d6d8 <___svfiprintf_internal_r+0x113c>
 800d4c8:	d9402417 	ldw	r5,144(sp)
 800d4cc:	d8c02017 	ldw	r3,128(sp)
 800d4d0:	0029883a 	mov	r20,zero
 800d4d4:	28800104 	addi	r2,r5,4
 800d4d8:	2c80000b 	ldhu	r18,0(r5)
 800d4dc:	183eab0e 	bge	r3,zero,800cf8c <__alt_data_end+0xfc00cf8c>
 800d4e0:	d8802415 	stw	r2,144(sp)
 800d4e4:	002b883a 	mov	r21,zero
 800d4e8:	9504b03a 	or	r2,r18,r20
 800d4ec:	103e171e 	bne	r2,zero,800cd4c <__alt_data_end+0xfc00cd4c>
 800d4f0:	00800044 	movi	r2,1
 800d4f4:	10803fcc 	andi	r2,r2,255
 800d4f8:	00c00044 	movi	r3,1
 800d4fc:	10c05c26 	beq	r2,r3,800d670 <___svfiprintf_internal_r+0x10d4>
 800d500:	00c00084 	movi	r3,2
 800d504:	10fd1e26 	beq	r2,r3,800c980 <__alt_data_end+0xfc00c980>
 800d508:	003ec406 	br	800d01c <__alt_data_end+0xfc00d01c>
 800d50c:	d9401e17 	ldw	r5,120(sp)
 800d510:	2c69c83a 	sub	r20,r5,r17
 800d514:	003d4506 	br	800ca2c <__alt_data_end+0xfc00ca2c>
 800d518:	d8802415 	stw	r2,144(sp)
 800d51c:	98c00007 	ldb	r3,0(r19)
 800d520:	003c6a06 	br	800c6cc <__alt_data_end+0xfc00c6cc>
 800d524:	d9402317 	ldw	r5,140(sp)
 800d528:	d9002717 	ldw	r4,156(sp)
 800d52c:	d9801a04 	addi	r6,sp,104
 800d530:	800c3cc0 	call	800c3cc <__ssprint_r>
 800d534:	103f591e 	bne	r2,zero,800d29c <__alt_data_end+0xfc00d29c>
 800d538:	d8c01c17 	ldw	r3,112(sp)
 800d53c:	003f4406 	br	800d250 <__alt_data_end+0xfc00d250>
 800d540:	01420074 	movhi	r5,2049
 800d544:	295edb04 	addi	r5,r5,31596
 800d548:	d9402915 	stw	r5,164(sp)
 800d54c:	003d0906 	br	800c974 <__alt_data_end+0xfc00c974>
 800d550:	d8c02417 	ldw	r3,144(sp)
 800d554:	d9002617 	ldw	r4,152(sp)
 800d558:	d9402417 	ldw	r5,144(sp)
 800d55c:	18800017 	ldw	r2,0(r3)
 800d560:	2007d7fa 	srai	r3,r4,31
 800d564:	29400104 	addi	r5,r5,4
 800d568:	d9402415 	stw	r5,144(sp)
 800d56c:	11000015 	stw	r4,0(r2)
 800d570:	10c00115 	stw	r3,4(r2)
 800d574:	003c2b06 	br	800c624 <__alt_data_end+0xfc00c624>
 800d578:	d8c01d45 	stb	r3,117(sp)
 800d57c:	d8c02017 	ldw	r3,128(sp)
 800d580:	00800c04 	movi	r2,48
 800d584:	d8801d05 	stb	r2,116(sp)
 800d588:	d8001d85 	stb	zero,118(sp)
 800d58c:	80800094 	ori	r2,r16,2
 800d590:	1800ac16 	blt	r3,zero,800d844 <___svfiprintf_internal_r+0x12a8>
 800d594:	00bfdfc4 	movi	r2,-129
 800d598:	80a0703a 	and	r16,r16,r2
 800d59c:	84000094 	ori	r16,r16,2
 800d5a0:	002b883a 	mov	r21,zero
 800d5a4:	003cf806 	br	800c988 <__alt_data_end+0xfc00c988>
 800d5a8:	98c00007 	ldb	r3,0(r19)
 800d5ac:	003c4706 	br	800c6cc <__alt_data_end+0xfc00c6cc>
 800d5b0:	d9402417 	ldw	r5,144(sp)
 800d5b4:	2c800017 	ldw	r18,0(r5)
 800d5b8:	29400104 	addi	r5,r5,4
 800d5bc:	d9402415 	stw	r5,144(sp)
 800d5c0:	9029d7fa 	srai	r20,r18,31
 800d5c4:	a005883a 	mov	r2,r20
 800d5c8:	003dd806 	br	800cd2c <__alt_data_end+0xfc00cd2c>
 800d5cc:	d9402417 	ldw	r5,144(sp)
 800d5d0:	0029883a 	mov	r20,zero
 800d5d4:	2c800017 	ldw	r18,0(r5)
 800d5d8:	29400104 	addi	r5,r5,4
 800d5dc:	d9402415 	stw	r5,144(sp)
 800d5e0:	003cdb06 	br	800c950 <__alt_data_end+0xfc00c950>
 800d5e4:	8080100c 	andi	r2,r16,64
 800d5e8:	d8001d85 	stb	zero,118(sp)
 800d5ec:	10003326 	beq	r2,zero,800d6bc <___svfiprintf_internal_r+0x1120>
 800d5f0:	d9002417 	ldw	r4,144(sp)
 800d5f4:	d9402017 	ldw	r5,128(sp)
 800d5f8:	0029883a 	mov	r20,zero
 800d5fc:	20800104 	addi	r2,r4,4
 800d600:	2480000b 	ldhu	r18,0(r4)
 800d604:	283e7e0e 	bge	r5,zero,800d000 <__alt_data_end+0xfc00d000>
 800d608:	9506b03a 	or	r3,r18,r20
 800d60c:	d8802415 	stw	r2,144(sp)
 800d610:	183d271e 	bne	r3,zero,800cab0 <__alt_data_end+0xfc00cab0>
 800d614:	002b883a 	mov	r21,zero
 800d618:	0005883a 	mov	r2,zero
 800d61c:	003fb506 	br	800d4f4 <__alt_data_end+0xfc00d4f4>
 800d620:	98c00043 	ldbu	r3,1(r19)
 800d624:	8c400814 	ori	r17,r17,32
 800d628:	9cc00044 	addi	r19,r19,1
 800d62c:	18c03fcc 	andi	r3,r3,255
 800d630:	18c0201c 	xori	r3,r3,128
 800d634:	18ffe004 	addi	r3,r3,-128
 800d638:	003c2406 	br	800c6cc <__alt_data_end+0xfc00c6cc>
 800d63c:	d8c02415 	stw	r3,144(sp)
 800d640:	002b883a 	mov	r21,zero
 800d644:	003fa806 	br	800d4e8 <__alt_data_end+0xfc00d4e8>
 800d648:	01020074 	movhi	r4,2049
 800d64c:	211edb04 	addi	r4,r4,31596
 800d650:	d9002915 	stw	r4,164(sp)
 800d654:	d8c02415 	stw	r3,144(sp)
 800d658:	1021883a 	mov	r16,r2
 800d65c:	9504b03a 	or	r2,r18,r20
 800d660:	103f8b1e 	bne	r2,zero,800d490 <__alt_data_end+0xfc00d490>
 800d664:	002b883a 	mov	r21,zero
 800d668:	00800084 	movi	r2,2
 800d66c:	003fa106 	br	800d4f4 <__alt_data_end+0xfc00d4f4>
 800d670:	0025883a 	mov	r18,zero
 800d674:	94800c04 	addi	r18,r18,48
 800d678:	dc8019c5 	stb	r18,103(sp)
 800d67c:	dd002c17 	ldw	r20,176(sp)
 800d680:	dc4019c4 	addi	r17,sp,103
 800d684:	003ce906 	br	800ca2c <__alt_data_end+0xfc00ca2c>
 800d688:	d9402317 	ldw	r5,140(sp)
 800d68c:	d9002717 	ldw	r4,156(sp)
 800d690:	d9801a04 	addi	r6,sp,104
 800d694:	800c3cc0 	call	800c3cc <__ssprint_r>
 800d698:	103f001e 	bne	r2,zero,800d29c <__alt_data_end+0xfc00d29c>
 800d69c:	d8c01c17 	ldw	r3,112(sp)
 800d6a0:	d8801b17 	ldw	r2,108(sp)
 800d6a4:	d811883a 	mov	r8,sp
 800d6a8:	003e7e06 	br	800d0a4 <__alt_data_end+0xfc00d0a4>
 800d6ac:	01420074 	movhi	r5,2049
 800d6b0:	295f4404 	addi	r5,r5,32016
 800d6b4:	d9402115 	stw	r5,132(sp)
 800d6b8:	003ea406 	br	800d14c <__alt_data_end+0xfc00d14c>
 800d6bc:	d8c02417 	ldw	r3,144(sp)
 800d6c0:	d9002017 	ldw	r4,128(sp)
 800d6c4:	0029883a 	mov	r20,zero
 800d6c8:	18800104 	addi	r2,r3,4
 800d6cc:	1c800017 	ldw	r18,0(r3)
 800d6d0:	203e4b0e 	bge	r4,zero,800d000 <__alt_data_end+0xfc00d000>
 800d6d4:	003fcc06 	br	800d608 <__alt_data_end+0xfc00d608>
 800d6d8:	d9002417 	ldw	r4,144(sp)
 800d6dc:	d9402017 	ldw	r5,128(sp)
 800d6e0:	0029883a 	mov	r20,zero
 800d6e4:	20800104 	addi	r2,r4,4
 800d6e8:	24800017 	ldw	r18,0(r4)
 800d6ec:	283e270e 	bge	r5,zero,800cf8c <__alt_data_end+0xfc00cf8c>
 800d6f0:	003f7b06 	br	800d4e0 <__alt_data_end+0xfc00d4e0>
 800d6f4:	8400100c 	andi	r16,r16,64
 800d6f8:	80003326 	beq	r16,zero,800d7c8 <___svfiprintf_internal_r+0x122c>
 800d6fc:	d9402417 	ldw	r5,144(sp)
 800d700:	d8c02617 	ldw	r3,152(sp)
 800d704:	28800017 	ldw	r2,0(r5)
 800d708:	29400104 	addi	r5,r5,4
 800d70c:	d9402415 	stw	r5,144(sp)
 800d710:	10c0000d 	sth	r3,0(r2)
 800d714:	003bc306 	br	800c624 <__alt_data_end+0xfc00c624>
 800d718:	d9002417 	ldw	r4,144(sp)
 800d71c:	0029883a 	mov	r20,zero
 800d720:	24800017 	ldw	r18,0(r4)
 800d724:	21000104 	addi	r4,r4,4
 800d728:	d9002415 	stw	r4,144(sp)
 800d72c:	003c8806 	br	800c950 <__alt_data_end+0xfc00c950>
 800d730:	d8c02417 	ldw	r3,144(sp)
 800d734:	1c800017 	ldw	r18,0(r3)
 800d738:	18c00104 	addi	r3,r3,4
 800d73c:	d8c02415 	stw	r3,144(sp)
 800d740:	9029d7fa 	srai	r20,r18,31
 800d744:	a005883a 	mov	r2,r20
 800d748:	003d7806 	br	800cd2c <__alt_data_end+0xfc00cd2c>
 800d74c:	8809883a 	mov	r4,r17
 800d750:	da002d15 	stw	r8,180(sp)
 800d754:	80029940 	call	8002994 <strlen>
 800d758:	1029883a 	mov	r20,r2
 800d75c:	dd401d83 	ldbu	r21,118(sp)
 800d760:	ddc02415 	stw	r23,144(sp)
 800d764:	d8002015 	stw	zero,128(sp)
 800d768:	da002d17 	ldw	r8,180(sp)
 800d76c:	003caf06 	br	800ca2c <__alt_data_end+0xfc00ca2c>
 800d770:	013fffc4 	movi	r4,-1
 800d774:	003df206 	br	800cf40 <__alt_data_end+0xfc00cf40>
 800d778:	dd002017 	ldw	r20,128(sp)
 800d77c:	00800184 	movi	r2,6
 800d780:	1500012e 	bgeu	r2,r20,800d788 <___svfiprintf_internal_r+0x11ec>
 800d784:	1029883a 	mov	r20,r2
 800d788:	a025883a 	mov	r18,r20
 800d78c:	a0004116 	blt	r20,zero,800d894 <___svfiprintf_internal_r+0x12f8>
 800d790:	04420074 	movhi	r17,2049
 800d794:	ddc02415 	stw	r23,144(sp)
 800d798:	8c5ee004 	addi	r17,r17,31616
 800d79c:	003ce806 	br	800cb40 <__alt_data_end+0xfc00cb40>
 800d7a0:	04001004 	movi	r16,64
 800d7a4:	800b883a 	mov	r5,r16
 800d7a8:	8009e140 	call	8009e14 <_malloc_r>
 800d7ac:	d8c02317 	ldw	r3,140(sp)
 800d7b0:	18800015 	stw	r2,0(r3)
 800d7b4:	18800415 	stw	r2,16(r3)
 800d7b8:	10004d26 	beq	r2,zero,800d8f0 <___svfiprintf_internal_r+0x1354>
 800d7bc:	d9402317 	ldw	r5,140(sp)
 800d7c0:	2c000515 	stw	r16,20(r5)
 800d7c4:	003b8906 	br	800c5ec <__alt_data_end+0xfc00c5ec>
 800d7c8:	d9002417 	ldw	r4,144(sp)
 800d7cc:	d9402617 	ldw	r5,152(sp)
 800d7d0:	20800017 	ldw	r2,0(r4)
 800d7d4:	21000104 	addi	r4,r4,4
 800d7d8:	d9002415 	stw	r4,144(sp)
 800d7dc:	11400015 	stw	r5,0(r2)
 800d7e0:	003b9006 	br	800c624 <__alt_data_end+0xfc00c624>
 800d7e4:	8080004c 	andi	r2,r16,1
 800d7e8:	002b883a 	mov	r21,zero
 800d7ec:	10000526 	beq	r2,zero,800d804 <___svfiprintf_internal_r+0x1268>
 800d7f0:	00800c04 	movi	r2,48
 800d7f4:	d88019c5 	stb	r2,103(sp)
 800d7f8:	dd002c17 	ldw	r20,176(sp)
 800d7fc:	dc4019c4 	addi	r17,sp,103
 800d800:	003c8a06 	br	800ca2c <__alt_data_end+0xfc00ca2c>
 800d804:	0029883a 	mov	r20,zero
 800d808:	dc401a04 	addi	r17,sp,104
 800d80c:	003c8706 	br	800ca2c <__alt_data_end+0xfc00ca2c>
 800d810:	01420074 	movhi	r5,2049
 800d814:	295f4804 	addi	r5,r5,32032
 800d818:	d9402815 	stw	r5,160(sp)
 800d81c:	003cff06 	br	800cc1c <__alt_data_end+0xfc00cc1c>
 800d820:	00bfffc4 	movi	r2,-1
 800d824:	003ea206 	br	800d2b0 <__alt_data_end+0xfc00d2b0>
 800d828:	00800044 	movi	r2,1
 800d82c:	10803fcc 	andi	r2,r2,255
 800d830:	00c00044 	movi	r3,1
 800d834:	10fd4526 	beq	r2,r3,800cd4c <__alt_data_end+0xfc00cd4c>
 800d838:	00c00084 	movi	r3,2
 800d83c:	10fc5226 	beq	r2,r3,800c988 <__alt_data_end+0xfc00c988>
 800d840:	003c9c06 	br	800cab4 <__alt_data_end+0xfc00cab4>
 800d844:	1021883a 	mov	r16,r2
 800d848:	002b883a 	mov	r21,zero
 800d84c:	00800084 	movi	r2,2
 800d850:	003ff606 	br	800d82c <__alt_data_end+0xfc00d82c>
 800d854:	01020074 	movhi	r4,2049
 800d858:	211f4804 	addi	r4,r4,32032
 800d85c:	d9002815 	stw	r4,160(sp)
 800d860:	003e7206 	br	800d22c <__alt_data_end+0xfc00d22c>
 800d864:	01420074 	movhi	r5,2049
 800d868:	295f4404 	addi	r5,r5,32016
 800d86c:	d9402115 	stw	r5,132(sp)
 800d870:	003ec506 	br	800d388 <__alt_data_end+0xfc00d388>
 800d874:	e027883a 	mov	r19,fp
 800d878:	d8002015 	stw	zero,128(sp)
 800d87c:	003b9406 	br	800c6d0 <__alt_data_end+0xfc00c6d0>
 800d880:	dd002017 	ldw	r20,128(sp)
 800d884:	dd401d83 	ldbu	r21,118(sp)
 800d888:	ddc02415 	stw	r23,144(sp)
 800d88c:	d8002015 	stw	zero,128(sp)
 800d890:	003c6606 	br	800ca2c <__alt_data_end+0xfc00ca2c>
 800d894:	0025883a 	mov	r18,zero
 800d898:	003fbd06 	br	800d790 <__alt_data_end+0xfc00d790>
 800d89c:	d9402417 	ldw	r5,144(sp)
 800d8a0:	d8c02417 	ldw	r3,144(sp)
 800d8a4:	29400017 	ldw	r5,0(r5)
 800d8a8:	19000104 	addi	r4,r3,4
 800d8ac:	d9002415 	stw	r4,144(sp)
 800d8b0:	d9402015 	stw	r5,128(sp)
 800d8b4:	98c00043 	ldbu	r3,1(r19)
 800d8b8:	e027883a 	mov	r19,fp
 800d8bc:	283f5b0e 	bge	r5,zero,800d62c <__alt_data_end+0xfc00d62c>
 800d8c0:	18c03fcc 	andi	r3,r3,255
 800d8c4:	013fffc4 	movi	r4,-1
 800d8c8:	18c0201c 	xori	r3,r3,128
 800d8cc:	d9002015 	stw	r4,128(sp)
 800d8d0:	18ffe004 	addi	r3,r3,-128
 800d8d4:	003b7d06 	br	800c6cc <__alt_data_end+0xfc00c6cc>
 800d8d8:	dd401d85 	stb	r21,118(sp)
 800d8dc:	003cf306 	br	800ccac <__alt_data_end+0xfc00ccac>
 800d8e0:	dd401d85 	stb	r21,118(sp)
 800d8e4:	003d4e06 	br	800ce20 <__alt_data_end+0xfc00ce20>
 800d8e8:	dd401d85 	stb	r21,118(sp)
 800d8ec:	003c0e06 	br	800c928 <__alt_data_end+0xfc00c928>
 800d8f0:	d9002717 	ldw	r4,156(sp)
 800d8f4:	00800304 	movi	r2,12
 800d8f8:	20800015 	stw	r2,0(r4)
 800d8fc:	00bfffc4 	movi	r2,-1
 800d900:	003e6b06 	br	800d2b0 <__alt_data_end+0xfc00d2b0>
 800d904:	dd401d85 	stb	r21,118(sp)
 800d908:	003d0006 	br	800cd0c <__alt_data_end+0xfc00cd0c>
 800d90c:	dd401d85 	stb	r21,118(sp)
 800d910:	003d7106 	br	800ced8 <__alt_data_end+0xfc00ced8>
 800d914:	dd401d85 	stb	r21,118(sp)
 800d918:	003c5706 	br	800ca78 <__alt_data_end+0xfc00ca78>
 800d91c:	dd401d85 	stb	r21,118(sp)
 800d920:	003c2e06 	br	800c9dc <__alt_data_end+0xfc00c9dc>
 800d924:	dd401d85 	stb	r21,118(sp)
 800d928:	003d8c06 	br	800cf5c <__alt_data_end+0xfc00cf5c>
 800d92c:	dd401d85 	stb	r21,118(sp)
 800d930:	003da706 	br	800cfd0 <__alt_data_end+0xfc00cfd0>
 800d934:	dd401d85 	stb	r21,118(sp)
 800d938:	003cc806 	br	800cc5c <__alt_data_end+0xfc00cc5c>

0800d93c <__sprint_r.part.0>:
 800d93c:	28801917 	ldw	r2,100(r5)
 800d940:	defff604 	addi	sp,sp,-40
 800d944:	dd400515 	stw	r21,20(sp)
 800d948:	dfc00915 	stw	ra,36(sp)
 800d94c:	df000815 	stw	fp,32(sp)
 800d950:	ddc00715 	stw	r23,28(sp)
 800d954:	dd800615 	stw	r22,24(sp)
 800d958:	dd000415 	stw	r20,16(sp)
 800d95c:	dcc00315 	stw	r19,12(sp)
 800d960:	dc800215 	stw	r18,8(sp)
 800d964:	dc400115 	stw	r17,4(sp)
 800d968:	dc000015 	stw	r16,0(sp)
 800d96c:	1088000c 	andi	r2,r2,8192
 800d970:	302b883a 	mov	r21,r6
 800d974:	10002e26 	beq	r2,zero,800da30 <__sprint_r.part.0+0xf4>
 800d978:	30800217 	ldw	r2,8(r6)
 800d97c:	35800017 	ldw	r22,0(r6)
 800d980:	10002926 	beq	r2,zero,800da28 <__sprint_r.part.0+0xec>
 800d984:	2827883a 	mov	r19,r5
 800d988:	2029883a 	mov	r20,r4
 800d98c:	b5c00104 	addi	r23,r22,4
 800d990:	04bfffc4 	movi	r18,-1
 800d994:	bc400017 	ldw	r17,0(r23)
 800d998:	b4000017 	ldw	r16,0(r22)
 800d99c:	0039883a 	mov	fp,zero
 800d9a0:	8822d0ba 	srli	r17,r17,2
 800d9a4:	8800031e 	bne	r17,zero,800d9b4 <__sprint_r.part.0+0x78>
 800d9a8:	00001806 	br	800da0c <__sprint_r.part.0+0xd0>
 800d9ac:	84000104 	addi	r16,r16,4
 800d9b0:	8f001526 	beq	r17,fp,800da08 <__sprint_r.part.0+0xcc>
 800d9b4:	81400017 	ldw	r5,0(r16)
 800d9b8:	980d883a 	mov	r6,r19
 800d9bc:	a009883a 	mov	r4,r20
 800d9c0:	800f42c0 	call	800f42c <_fputwc_r>
 800d9c4:	e7000044 	addi	fp,fp,1
 800d9c8:	14bff81e 	bne	r2,r18,800d9ac <__alt_data_end+0xfc00d9ac>
 800d9cc:	9005883a 	mov	r2,r18
 800d9d0:	a8000215 	stw	zero,8(r21)
 800d9d4:	a8000115 	stw	zero,4(r21)
 800d9d8:	dfc00917 	ldw	ra,36(sp)
 800d9dc:	df000817 	ldw	fp,32(sp)
 800d9e0:	ddc00717 	ldw	r23,28(sp)
 800d9e4:	dd800617 	ldw	r22,24(sp)
 800d9e8:	dd400517 	ldw	r21,20(sp)
 800d9ec:	dd000417 	ldw	r20,16(sp)
 800d9f0:	dcc00317 	ldw	r19,12(sp)
 800d9f4:	dc800217 	ldw	r18,8(sp)
 800d9f8:	dc400117 	ldw	r17,4(sp)
 800d9fc:	dc000017 	ldw	r16,0(sp)
 800da00:	dec00a04 	addi	sp,sp,40
 800da04:	f800283a 	ret
 800da08:	a8800217 	ldw	r2,8(r21)
 800da0c:	8c63883a 	add	r17,r17,r17
 800da10:	8c63883a 	add	r17,r17,r17
 800da14:	1445c83a 	sub	r2,r2,r17
 800da18:	a8800215 	stw	r2,8(r21)
 800da1c:	b5800204 	addi	r22,r22,8
 800da20:	bdc00204 	addi	r23,r23,8
 800da24:	103fdb1e 	bne	r2,zero,800d994 <__alt_data_end+0xfc00d994>
 800da28:	0005883a 	mov	r2,zero
 800da2c:	003fe806 	br	800d9d0 <__alt_data_end+0xfc00d9d0>
 800da30:	800952c0 	call	800952c <__sfvwrite_r>
 800da34:	003fe606 	br	800d9d0 <__alt_data_end+0xfc00d9d0>

0800da38 <__sprint_r>:
 800da38:	30c00217 	ldw	r3,8(r6)
 800da3c:	18000126 	beq	r3,zero,800da44 <__sprint_r+0xc>
 800da40:	800d93c1 	jmpi	800d93c <__sprint_r.part.0>
 800da44:	30000115 	stw	zero,4(r6)
 800da48:	0005883a 	mov	r2,zero
 800da4c:	f800283a 	ret

0800da50 <___vfiprintf_internal_r>:
 800da50:	deffca04 	addi	sp,sp,-216
 800da54:	dd403115 	stw	r21,196(sp)
 800da58:	dfc03515 	stw	ra,212(sp)
 800da5c:	df003415 	stw	fp,208(sp)
 800da60:	ddc03315 	stw	r23,204(sp)
 800da64:	dd803215 	stw	r22,200(sp)
 800da68:	dd003015 	stw	r20,192(sp)
 800da6c:	dcc02f15 	stw	r19,188(sp)
 800da70:	dc802e15 	stw	r18,184(sp)
 800da74:	dc402d15 	stw	r17,180(sp)
 800da78:	dc002c15 	stw	r16,176(sp)
 800da7c:	d9002115 	stw	r4,132(sp)
 800da80:	d9402015 	stw	r5,128(sp)
 800da84:	d9c02215 	stw	r7,136(sp)
 800da88:	302b883a 	mov	r21,r6
 800da8c:	20000226 	beq	r4,zero,800da98 <___vfiprintf_internal_r+0x48>
 800da90:	20800e17 	ldw	r2,56(r4)
 800da94:	1000cf26 	beq	r2,zero,800ddd4 <___vfiprintf_internal_r+0x384>
 800da98:	d8c02017 	ldw	r3,128(sp)
 800da9c:	1880030b 	ldhu	r2,12(r3)
 800daa0:	10c8000c 	andi	r3,r2,8192
 800daa4:	1800071e 	bne	r3,zero,800dac4 <___vfiprintf_internal_r+0x74>
 800daa8:	d9402017 	ldw	r5,128(sp)
 800daac:	00f7ffc4 	movi	r3,-8193
 800dab0:	10880014 	ori	r2,r2,8192
 800dab4:	29001917 	ldw	r4,100(r5)
 800dab8:	2880030d 	sth	r2,12(r5)
 800dabc:	20c6703a 	and	r3,r4,r3
 800dac0:	28c01915 	stw	r3,100(r5)
 800dac4:	10c0020c 	andi	r3,r2,8
 800dac8:	1800a526 	beq	r3,zero,800dd60 <___vfiprintf_internal_r+0x310>
 800dacc:	d9002017 	ldw	r4,128(sp)
 800dad0:	20c00417 	ldw	r3,16(r4)
 800dad4:	1800a226 	beq	r3,zero,800dd60 <___vfiprintf_internal_r+0x310>
 800dad8:	1080068c 	andi	r2,r2,26
 800dadc:	00c00284 	movi	r3,10
 800dae0:	10c0a826 	beq	r2,r3,800dd84 <___vfiprintf_internal_r+0x334>
 800dae4:	d9001a04 	addi	r4,sp,104
 800dae8:	d94019c4 	addi	r5,sp,103
 800daec:	04820074 	movhi	r18,2049
 800daf0:	2145c83a 	sub	r2,r4,r5
 800daf4:	949f4c04 	addi	r18,r18,32048
 800daf8:	d9001e15 	stw	r4,120(sp)
 800dafc:	d9401f15 	stw	r5,124(sp)
 800db00:	dec01a15 	stw	sp,104(sp)
 800db04:	d8001c15 	stw	zero,112(sp)
 800db08:	d8001b15 	stw	zero,108(sp)
 800db0c:	d811883a 	mov	r8,sp
 800db10:	d8002615 	stw	zero,152(sp)
 800db14:	d8002415 	stw	zero,144(sp)
 800db18:	d8802815 	stw	r2,160(sp)
 800db1c:	a82d883a 	mov	r22,r21
 800db20:	b0800007 	ldb	r2,0(r22)
 800db24:	10040d26 	beq	r2,zero,800eb5c <___vfiprintf_internal_r+0x110c>
 800db28:	00c00944 	movi	r3,37
 800db2c:	b029883a 	mov	r20,r22
 800db30:	10c0021e 	bne	r2,r3,800db3c <___vfiprintf_internal_r+0xec>
 800db34:	00001606 	br	800db90 <___vfiprintf_internal_r+0x140>
 800db38:	10c00326 	beq	r2,r3,800db48 <___vfiprintf_internal_r+0xf8>
 800db3c:	a5000044 	addi	r20,r20,1
 800db40:	a0800007 	ldb	r2,0(r20)
 800db44:	103ffc1e 	bne	r2,zero,800db38 <__alt_data_end+0xfc00db38>
 800db48:	a5a1c83a 	sub	r16,r20,r22
 800db4c:	80001026 	beq	r16,zero,800db90 <___vfiprintf_internal_r+0x140>
 800db50:	d8c01c17 	ldw	r3,112(sp)
 800db54:	d8801b17 	ldw	r2,108(sp)
 800db58:	45800015 	stw	r22,0(r8)
 800db5c:	80c7883a 	add	r3,r16,r3
 800db60:	10800044 	addi	r2,r2,1
 800db64:	44000115 	stw	r16,4(r8)
 800db68:	d8c01c15 	stw	r3,112(sp)
 800db6c:	d8801b15 	stw	r2,108(sp)
 800db70:	010001c4 	movi	r4,7
 800db74:	2080750e 	bge	r4,r2,800dd4c <___vfiprintf_internal_r+0x2fc>
 800db78:	1803951e 	bne	r3,zero,800e9d0 <___vfiprintf_internal_r+0xf80>
 800db7c:	d8c02417 	ldw	r3,144(sp)
 800db80:	d8001b15 	stw	zero,108(sp)
 800db84:	d811883a 	mov	r8,sp
 800db88:	1c07883a 	add	r3,r3,r16
 800db8c:	d8c02415 	stw	r3,144(sp)
 800db90:	a0800007 	ldb	r2,0(r20)
 800db94:	1002e026 	beq	r2,zero,800e718 <___vfiprintf_internal_r+0xcc8>
 800db98:	a5800044 	addi	r22,r20,1
 800db9c:	a0c00047 	ldb	r3,1(r20)
 800dba0:	d8001d85 	stb	zero,118(sp)
 800dba4:	0027883a 	mov	r19,zero
 800dba8:	d8002305 	stb	zero,140(sp)
 800dbac:	043fffc4 	movi	r16,-1
 800dbb0:	d8002515 	stw	zero,148(sp)
 800dbb4:	0023883a 	mov	r17,zero
 800dbb8:	05001604 	movi	r20,88
 800dbbc:	05400244 	movi	r21,9
 800dbc0:	402f883a 	mov	r23,r8
 800dbc4:	b5800044 	addi	r22,r22,1
 800dbc8:	18bff804 	addi	r2,r3,-32
 800dbcc:	a0827736 	bltu	r20,r2,800e5ac <___vfiprintf_internal_r+0xb5c>
 800dbd0:	100490ba 	slli	r2,r2,2
 800dbd4:	01020074 	movhi	r4,2049
 800dbd8:	2136fa04 	addi	r4,r4,-9240
 800dbdc:	1105883a 	add	r2,r2,r4
 800dbe0:	10800017 	ldw	r2,0(r2)
 800dbe4:	1000683a 	jmp	r2
 800dbe8:	0800e2ac 	andhi	zero,at,906
 800dbec:	0800e5ac 	andhi	zero,at,918
 800dbf0:	0800e5ac 	andhi	zero,at,918
 800dbf4:	0800e2c8 	cmpgei	zero,at,907
 800dbf8:	0800e5ac 	andhi	zero,at,918
 800dbfc:	0800e5ac 	andhi	zero,at,918
 800dc00:	0800e5ac 	andhi	zero,at,918
 800dc04:	0800e5ac 	andhi	zero,at,918
 800dc08:	0800e5ac 	andhi	zero,at,918
 800dc0c:	0800e5ac 	andhi	zero,at,918
 800dc10:	0800e4d0 	cmplti	zero,at,915
 800dc14:	0800e4f4 	orhi	zero,at,915
 800dc18:	0800e5ac 	andhi	zero,at,918
 800dc1c:	0800ddec 	andhi	zero,at,887
 800dc20:	0800e508 	cmpgei	zero,at,916
 800dc24:	0800e5ac 	andhi	zero,at,918
 800dc28:	0800e2d4 	ori	zero,at,907
 800dc2c:	0800e2e0 	cmpeqi	zero,at,907
 800dc30:	0800e2e0 	cmpeqi	zero,at,907
 800dc34:	0800e2e0 	cmpeqi	zero,at,907
 800dc38:	0800e2e0 	cmpeqi	zero,at,907
 800dc3c:	0800e2e0 	cmpeqi	zero,at,907
 800dc40:	0800e2e0 	cmpeqi	zero,at,907
 800dc44:	0800e2e0 	cmpeqi	zero,at,907
 800dc48:	0800e2e0 	cmpeqi	zero,at,907
 800dc4c:	0800e2e0 	cmpeqi	zero,at,907
 800dc50:	0800e5ac 	andhi	zero,at,918
 800dc54:	0800e5ac 	andhi	zero,at,918
 800dc58:	0800e5ac 	andhi	zero,at,918
 800dc5c:	0800e5ac 	andhi	zero,at,918
 800dc60:	0800e5ac 	andhi	zero,at,918
 800dc64:	0800e5ac 	andhi	zero,at,918
 800dc68:	0800e5ac 	andhi	zero,at,918
 800dc6c:	0800e5ac 	andhi	zero,at,918
 800dc70:	0800e5ac 	andhi	zero,at,918
 800dc74:	0800e5ac 	andhi	zero,at,918
 800dc78:	0800e320 	cmpeqi	zero,at,908
 800dc7c:	0800e5ac 	andhi	zero,at,918
 800dc80:	0800e5ac 	andhi	zero,at,918
 800dc84:	0800e5ac 	andhi	zero,at,918
 800dc88:	0800e5ac 	andhi	zero,at,918
 800dc8c:	0800e5ac 	andhi	zero,at,918
 800dc90:	0800e5ac 	andhi	zero,at,918
 800dc94:	0800e5ac 	andhi	zero,at,918
 800dc98:	0800e5ac 	andhi	zero,at,918
 800dc9c:	0800e5ac 	andhi	zero,at,918
 800dca0:	0800e5ac 	andhi	zero,at,918
 800dca4:	0800e35c 	xori	zero,at,909
 800dca8:	0800e5ac 	andhi	zero,at,918
 800dcac:	0800e5ac 	andhi	zero,at,918
 800dcb0:	0800e5ac 	andhi	zero,at,918
 800dcb4:	0800e5ac 	andhi	zero,at,918
 800dcb8:	0800e5ac 	andhi	zero,at,918
 800dcbc:	0800e3b8 	rdprs	zero,at,910
 800dcc0:	0800e5ac 	andhi	zero,at,918
 800dcc4:	0800e5ac 	andhi	zero,at,918
 800dcc8:	0800e42c 	andhi	zero,at,912
 800dccc:	0800e5ac 	andhi	zero,at,918
 800dcd0:	0800e5ac 	andhi	zero,at,918
 800dcd4:	0800e5ac 	andhi	zero,at,918
 800dcd8:	0800e5ac 	andhi	zero,at,918
 800dcdc:	0800e5ac 	andhi	zero,at,918
 800dce0:	0800e5ac 	andhi	zero,at,918
 800dce4:	0800e5ac 	andhi	zero,at,918
 800dce8:	0800e5ac 	andhi	zero,at,918
 800dcec:	0800e5ac 	andhi	zero,at,918
 800dcf0:	0800e5ac 	andhi	zero,at,918
 800dcf4:	0800e1d4 	ori	zero,at,903
 800dcf8:	0800e204 	addi	zero,at,904
 800dcfc:	0800e5ac 	andhi	zero,at,918
 800dd00:	0800e5ac 	andhi	zero,at,918
 800dd04:	0800e5ac 	andhi	zero,at,918
 800dd08:	0800e554 	ori	zero,at,917
 800dd0c:	0800e204 	addi	zero,at,904
 800dd10:	0800e5ac 	andhi	zero,at,918
 800dd14:	0800e5ac 	andhi	zero,at,918
 800dd18:	0800e0ac 	andhi	zero,at,898
 800dd1c:	0800e5ac 	andhi	zero,at,918
 800dd20:	0800e0c0 	call	800e0c <__alt_mem_onchip_memory2_0+0x800e0c>
 800dd24:	0800e0f8 	rdprs	zero,at,899
 800dd28:	0800ddf8 	rdprs	zero,at,887
 800dd2c:	0800e0a0 	cmpeqi	zero,at,898
 800dd30:	0800e5ac 	andhi	zero,at,918
 800dd34:	0800e46c 	andhi	zero,at,913
 800dd38:	0800e5ac 	andhi	zero,at,918
 800dd3c:	0800e4b8 	rdprs	zero,at,914
 800dd40:	0800e5ac 	andhi	zero,at,918
 800dd44:	0800e5ac 	andhi	zero,at,918
 800dd48:	0800e17c 	xorhi	zero,at,901
 800dd4c:	42000204 	addi	r8,r8,8
 800dd50:	d8c02417 	ldw	r3,144(sp)
 800dd54:	1c07883a 	add	r3,r3,r16
 800dd58:	d8c02415 	stw	r3,144(sp)
 800dd5c:	003f8c06 	br	800db90 <__alt_data_end+0xfc00db90>
 800dd60:	d9402017 	ldw	r5,128(sp)
 800dd64:	d9002117 	ldw	r4,132(sp)
 800dd68:	800709c0 	call	800709c <__swsetup_r>
 800dd6c:	1003c11e 	bne	r2,zero,800ec74 <___vfiprintf_internal_r+0x1224>
 800dd70:	d9402017 	ldw	r5,128(sp)
 800dd74:	00c00284 	movi	r3,10
 800dd78:	2880030b 	ldhu	r2,12(r5)
 800dd7c:	1080068c 	andi	r2,r2,26
 800dd80:	10ff581e 	bne	r2,r3,800dae4 <__alt_data_end+0xfc00dae4>
 800dd84:	d8c02017 	ldw	r3,128(sp)
 800dd88:	1880038f 	ldh	r2,14(r3)
 800dd8c:	103f5516 	blt	r2,zero,800dae4 <__alt_data_end+0xfc00dae4>
 800dd90:	d9c02217 	ldw	r7,136(sp)
 800dd94:	d9002117 	ldw	r4,132(sp)
 800dd98:	a80d883a 	mov	r6,r21
 800dd9c:	180b883a 	mov	r5,r3
 800dda0:	800ef780 	call	800ef78 <__sbprintf>
 800dda4:	dfc03517 	ldw	ra,212(sp)
 800dda8:	df003417 	ldw	fp,208(sp)
 800ddac:	ddc03317 	ldw	r23,204(sp)
 800ddb0:	dd803217 	ldw	r22,200(sp)
 800ddb4:	dd403117 	ldw	r21,196(sp)
 800ddb8:	dd003017 	ldw	r20,192(sp)
 800ddbc:	dcc02f17 	ldw	r19,188(sp)
 800ddc0:	dc802e17 	ldw	r18,184(sp)
 800ddc4:	dc402d17 	ldw	r17,180(sp)
 800ddc8:	dc002c17 	ldw	r16,176(sp)
 800ddcc:	dec03604 	addi	sp,sp,216
 800ddd0:	f800283a 	ret
 800ddd4:	80090a80 	call	80090a8 <__sinit>
 800ddd8:	003f2f06 	br	800da98 <__alt_data_end+0xfc00da98>
 800dddc:	d8c02517 	ldw	r3,148(sp)
 800dde0:	d8802215 	stw	r2,136(sp)
 800dde4:	00c7c83a 	sub	r3,zero,r3
 800dde8:	d8c02515 	stw	r3,148(sp)
 800ddec:	8c400114 	ori	r17,r17,4
 800ddf0:	b0c00007 	ldb	r3,0(r22)
 800ddf4:	003f7306 	br	800dbc4 <__alt_data_end+0xfc00dbc4>
 800ddf8:	00800c04 	movi	r2,48
 800ddfc:	d9402217 	ldw	r5,136(sp)
 800de00:	d8801d05 	stb	r2,116(sp)
 800de04:	00801e04 	movi	r2,120
 800de08:	d8801d45 	stb	r2,117(sp)
 800de0c:	d8001d85 	stb	zero,118(sp)
 800de10:	b811883a 	mov	r8,r23
 800de14:	28c00104 	addi	r3,r5,4
 800de18:	2cc00017 	ldw	r19,0(r5)
 800de1c:	0029883a 	mov	r20,zero
 800de20:	88800094 	ori	r2,r17,2
 800de24:	80032516 	blt	r16,zero,800eabc <___vfiprintf_internal_r+0x106c>
 800de28:	00bfdfc4 	movi	r2,-129
 800de2c:	88a2703a 	and	r17,r17,r2
 800de30:	d8c02215 	stw	r3,136(sp)
 800de34:	8c400094 	ori	r17,r17,2
 800de38:	98032a1e 	bne	r19,zero,800eae4 <___vfiprintf_internal_r+0x1094>
 800de3c:	00820074 	movhi	r2,2049
 800de40:	109edb04 	addi	r2,r2,31596
 800de44:	d8802615 	stw	r2,152(sp)
 800de48:	002b883a 	mov	r21,zero
 800de4c:	8001741e 	bne	r16,zero,800e420 <___vfiprintf_internal_r+0x9d0>
 800de50:	0021883a 	mov	r16,zero
 800de54:	0029883a 	mov	r20,zero
 800de58:	ddc01a04 	addi	r23,sp,104
 800de5c:	8027883a 	mov	r19,r16
 800de60:	8500010e 	bge	r16,r20,800de68 <___vfiprintf_internal_r+0x418>
 800de64:	a027883a 	mov	r19,r20
 800de68:	ad403fcc 	andi	r21,r21,255
 800de6c:	ad40201c 	xori	r21,r21,128
 800de70:	ad7fe004 	addi	r21,r21,-128
 800de74:	a8000126 	beq	r21,zero,800de7c <___vfiprintf_internal_r+0x42c>
 800de78:	9cc00044 	addi	r19,r19,1
 800de7c:	89c0008c 	andi	r7,r17,2
 800de80:	38000126 	beq	r7,zero,800de88 <___vfiprintf_internal_r+0x438>
 800de84:	9cc00084 	addi	r19,r19,2
 800de88:	88c0210c 	andi	r3,r17,132
 800de8c:	1801dd1e 	bne	r3,zero,800e604 <___vfiprintf_internal_r+0xbb4>
 800de90:	d9402517 	ldw	r5,148(sp)
 800de94:	2cebc83a 	sub	r21,r5,r19
 800de98:	0541da0e 	bge	zero,r21,800e604 <___vfiprintf_internal_r+0xbb4>
 800de9c:	07000404 	movi	fp,16
 800dea0:	d8801c17 	ldw	r2,112(sp)
 800dea4:	e543be0e 	bge	fp,r21,800eda0 <___vfiprintf_internal_r+0x1350>
 800dea8:	01420074 	movhi	r5,2049
 800deac:	295f5004 	addi	r5,r5,32064
 800deb0:	dc002715 	stw	r16,156(sp)
 800deb4:	d9801b17 	ldw	r6,108(sp)
 800deb8:	a821883a 	mov	r16,r21
 800debc:	d9402315 	stw	r5,140(sp)
 800dec0:	028001c4 	movi	r10,7
 800dec4:	d9c02915 	stw	r7,164(sp)
 800dec8:	182b883a 	mov	r21,r3
 800decc:	00000506 	br	800dee4 <___vfiprintf_internal_r+0x494>
 800ded0:	31000084 	addi	r4,r6,2
 800ded4:	42000204 	addi	r8,r8,8
 800ded8:	180d883a 	mov	r6,r3
 800dedc:	843ffc04 	addi	r16,r16,-16
 800dee0:	e4000f0e 	bge	fp,r16,800df20 <___vfiprintf_internal_r+0x4d0>
 800dee4:	01020074 	movhi	r4,2049
 800dee8:	10800404 	addi	r2,r2,16
 800deec:	30c00044 	addi	r3,r6,1
 800def0:	211f5004 	addi	r4,r4,32064
 800def4:	41000015 	stw	r4,0(r8)
 800def8:	47000115 	stw	fp,4(r8)
 800defc:	d8801c15 	stw	r2,112(sp)
 800df00:	d8c01b15 	stw	r3,108(sp)
 800df04:	50fff20e 	bge	r10,r3,800ded0 <__alt_data_end+0xfc00ded0>
 800df08:	1001b21e 	bne	r2,zero,800e5d4 <___vfiprintf_internal_r+0xb84>
 800df0c:	843ffc04 	addi	r16,r16,-16
 800df10:	000d883a 	mov	r6,zero
 800df14:	01000044 	movi	r4,1
 800df18:	d811883a 	mov	r8,sp
 800df1c:	e43ff116 	blt	fp,r16,800dee4 <__alt_data_end+0xfc00dee4>
 800df20:	a807883a 	mov	r3,r21
 800df24:	d9c02917 	ldw	r7,164(sp)
 800df28:	802b883a 	mov	r21,r16
 800df2c:	dc002717 	ldw	r16,156(sp)
 800df30:	d9402317 	ldw	r5,140(sp)
 800df34:	a885883a 	add	r2,r21,r2
 800df38:	45400115 	stw	r21,4(r8)
 800df3c:	41400015 	stw	r5,0(r8)
 800df40:	d8801c15 	stw	r2,112(sp)
 800df44:	d9001b15 	stw	r4,108(sp)
 800df48:	014001c4 	movi	r5,7
 800df4c:	29026216 	blt	r5,r4,800e8d8 <___vfiprintf_internal_r+0xe88>
 800df50:	d9801d87 	ldb	r6,118(sp)
 800df54:	42000204 	addi	r8,r8,8
 800df58:	21400044 	addi	r5,r4,1
 800df5c:	3001ae1e 	bne	r6,zero,800e618 <___vfiprintf_internal_r+0xbc8>
 800df60:	3801bb26 	beq	r7,zero,800e650 <___vfiprintf_internal_r+0xc00>
 800df64:	d9001d04 	addi	r4,sp,116
 800df68:	10800084 	addi	r2,r2,2
 800df6c:	41000015 	stw	r4,0(r8)
 800df70:	01000084 	movi	r4,2
 800df74:	41000115 	stw	r4,4(r8)
 800df78:	d8801c15 	stw	r2,112(sp)
 800df7c:	d9401b15 	stw	r5,108(sp)
 800df80:	010001c4 	movi	r4,7
 800df84:	2142680e 	bge	r4,r5,800e928 <___vfiprintf_internal_r+0xed8>
 800df88:	1002b11e 	bne	r2,zero,800ea50 <___vfiprintf_internal_r+0x1000>
 800df8c:	01802004 	movi	r6,128
 800df90:	01400044 	movi	r5,1
 800df94:	0009883a 	mov	r4,zero
 800df98:	d811883a 	mov	r8,sp
 800df9c:	1981ae1e 	bne	r3,r6,800e658 <___vfiprintf_internal_r+0xc08>
 800dfa0:	d8c02517 	ldw	r3,148(sp)
 800dfa4:	1cf9c83a 	sub	fp,r3,r19
 800dfa8:	0701ab0e 	bge	zero,fp,800e658 <___vfiprintf_internal_r+0xc08>
 800dfac:	05400404 	movi	r21,16
 800dfb0:	af03a90e 	bge	r21,fp,800ee58 <___vfiprintf_internal_r+0x1408>
 800dfb4:	01420074 	movhi	r5,2049
 800dfb8:	295f4c04 	addi	r5,r5,32048
 800dfbc:	d9402315 	stw	r5,140(sp)
 800dfc0:	01c001c4 	movi	r7,7
 800dfc4:	00000506 	br	800dfdc <___vfiprintf_internal_r+0x58c>
 800dfc8:	21800084 	addi	r6,r4,2
 800dfcc:	42000204 	addi	r8,r8,8
 800dfd0:	1809883a 	mov	r4,r3
 800dfd4:	e73ffc04 	addi	fp,fp,-16
 800dfd8:	af000d0e 	bge	r21,fp,800e010 <___vfiprintf_internal_r+0x5c0>
 800dfdc:	10800404 	addi	r2,r2,16
 800dfe0:	20c00044 	addi	r3,r4,1
 800dfe4:	44800015 	stw	r18,0(r8)
 800dfe8:	45400115 	stw	r21,4(r8)
 800dfec:	d8801c15 	stw	r2,112(sp)
 800dff0:	d8c01b15 	stw	r3,108(sp)
 800dff4:	38fff40e 	bge	r7,r3,800dfc8 <__alt_data_end+0xfc00dfc8>
 800dff8:	10022b1e 	bne	r2,zero,800e8a8 <___vfiprintf_internal_r+0xe58>
 800dffc:	e73ffc04 	addi	fp,fp,-16
 800e000:	01800044 	movi	r6,1
 800e004:	0009883a 	mov	r4,zero
 800e008:	d811883a 	mov	r8,sp
 800e00c:	af3ff316 	blt	r21,fp,800dfdc <__alt_data_end+0xfc00dfdc>
 800e010:	d8c02317 	ldw	r3,140(sp)
 800e014:	1705883a 	add	r2,r2,fp
 800e018:	47000115 	stw	fp,4(r8)
 800e01c:	40c00015 	stw	r3,0(r8)
 800e020:	d8801c15 	stw	r2,112(sp)
 800e024:	d9801b15 	stw	r6,108(sp)
 800e028:	00c001c4 	movi	r3,7
 800e02c:	19829416 	blt	r3,r6,800ea80 <___vfiprintf_internal_r+0x1030>
 800e030:	8521c83a 	sub	r16,r16,r20
 800e034:	42000204 	addi	r8,r8,8
 800e038:	31400044 	addi	r5,r6,1
 800e03c:	3009883a 	mov	r4,r6
 800e040:	04018716 	blt	zero,r16,800e660 <___vfiprintf_internal_r+0xc10>
 800e044:	a085883a 	add	r2,r20,r2
 800e048:	45c00015 	stw	r23,0(r8)
 800e04c:	45000115 	stw	r20,4(r8)
 800e050:	d8801c15 	stw	r2,112(sp)
 800e054:	d9401b15 	stw	r5,108(sp)
 800e058:	00c001c4 	movi	r3,7
 800e05c:	1941c20e 	bge	r3,r5,800e768 <___vfiprintf_internal_r+0xd18>
 800e060:	1002531e 	bne	r2,zero,800e9b0 <___vfiprintf_internal_r+0xf60>
 800e064:	d8001b15 	stw	zero,108(sp)
 800e068:	8c40010c 	andi	r17,r17,4
 800e06c:	88023226 	beq	r17,zero,800e938 <___vfiprintf_internal_r+0xee8>
 800e070:	d9002517 	ldw	r4,148(sp)
 800e074:	24e3c83a 	sub	r17,r4,r19
 800e078:	04432916 	blt	zero,r17,800ed20 <___vfiprintf_internal_r+0x12d0>
 800e07c:	d8802517 	ldw	r2,148(sp)
 800e080:	14c0010e 	bge	r2,r19,800e088 <___vfiprintf_internal_r+0x638>
 800e084:	9805883a 	mov	r2,r19
 800e088:	d8c02417 	ldw	r3,144(sp)
 800e08c:	1887883a 	add	r3,r3,r2
 800e090:	d8c02415 	stw	r3,144(sp)
 800e094:	d8001b15 	stw	zero,108(sp)
 800e098:	d811883a 	mov	r8,sp
 800e09c:	003ea006 	br	800db20 <__alt_data_end+0xfc00db20>
 800e0a0:	8c400814 	ori	r17,r17,32
 800e0a4:	b0c00007 	ldb	r3,0(r22)
 800e0a8:	003ec606 	br	800dbc4 <__alt_data_end+0xfc00dbc4>
 800e0ac:	b0c00007 	ldb	r3,0(r22)
 800e0b0:	00801b04 	movi	r2,108
 800e0b4:	18832026 	beq	r3,r2,800ed38 <___vfiprintf_internal_r+0x12e8>
 800e0b8:	8c400414 	ori	r17,r17,16
 800e0bc:	003ec106 	br	800dbc4 <__alt_data_end+0xfc00dbc4>
 800e0c0:	9cc03fcc 	andi	r19,r19,255
 800e0c4:	b811883a 	mov	r8,r23
 800e0c8:	9803981e 	bne	r19,zero,800ef2c <___vfiprintf_internal_r+0x14dc>
 800e0cc:	8880080c 	andi	r2,r17,32
 800e0d0:	1002be26 	beq	r2,zero,800ebcc <___vfiprintf_internal_r+0x117c>
 800e0d4:	d9002217 	ldw	r4,136(sp)
 800e0d8:	d9402417 	ldw	r5,144(sp)
 800e0dc:	20800017 	ldw	r2,0(r4)
 800e0e0:	2807d7fa 	srai	r3,r5,31
 800e0e4:	21000104 	addi	r4,r4,4
 800e0e8:	d9002215 	stw	r4,136(sp)
 800e0ec:	11400015 	stw	r5,0(r2)
 800e0f0:	10c00115 	stw	r3,4(r2)
 800e0f4:	003e8a06 	br	800db20 <__alt_data_end+0xfc00db20>
 800e0f8:	9cc03fcc 	andi	r19,r19,255
 800e0fc:	b811883a 	mov	r8,r23
 800e100:	9803871e 	bne	r19,zero,800ef20 <___vfiprintf_internal_r+0x14d0>
 800e104:	8880080c 	andi	r2,r17,32
 800e108:	10009a26 	beq	r2,zero,800e374 <___vfiprintf_internal_r+0x924>
 800e10c:	d9002217 	ldw	r4,136(sp)
 800e110:	d8001d85 	stb	zero,118(sp)
 800e114:	20800204 	addi	r2,r4,8
 800e118:	24c00017 	ldw	r19,0(r4)
 800e11c:	25000117 	ldw	r20,4(r4)
 800e120:	8002a416 	blt	r16,zero,800ebb4 <___vfiprintf_internal_r+0x1164>
 800e124:	013fdfc4 	movi	r4,-129
 800e128:	9d06b03a 	or	r3,r19,r20
 800e12c:	d8802215 	stw	r2,136(sp)
 800e130:	8922703a 	and	r17,r17,r4
 800e134:	18009b26 	beq	r3,zero,800e3a4 <___vfiprintf_internal_r+0x954>
 800e138:	002b883a 	mov	r21,zero
 800e13c:	ddc01a04 	addi	r23,sp,104
 800e140:	9806d0fa 	srli	r3,r19,3
 800e144:	a008977a 	slli	r4,r20,29
 800e148:	a028d0fa 	srli	r20,r20,3
 800e14c:	9cc001cc 	andi	r19,r19,7
 800e150:	98800c04 	addi	r2,r19,48
 800e154:	bdffffc4 	addi	r23,r23,-1
 800e158:	20e6b03a 	or	r19,r4,r3
 800e15c:	b8800005 	stb	r2,0(r23)
 800e160:	9d06b03a 	or	r3,r19,r20
 800e164:	183ff61e 	bne	r3,zero,800e140 <__alt_data_end+0xfc00e140>
 800e168:	88c0004c 	andi	r3,r17,1
 800e16c:	18021f1e 	bne	r3,zero,800e9ec <___vfiprintf_internal_r+0xf9c>
 800e170:	d9401e17 	ldw	r5,120(sp)
 800e174:	2de9c83a 	sub	r20,r5,r23
 800e178:	003f3806 	br	800de5c <__alt_data_end+0xfc00de5c>
 800e17c:	9cc03fcc 	andi	r19,r19,255
 800e180:	b811883a 	mov	r8,r23
 800e184:	98034f1e 	bne	r19,zero,800eec4 <___vfiprintf_internal_r+0x1474>
 800e188:	00820074 	movhi	r2,2049
 800e18c:	109edb04 	addi	r2,r2,31596
 800e190:	d8802615 	stw	r2,152(sp)
 800e194:	8880080c 	andi	r2,r17,32
 800e198:	1000ac26 	beq	r2,zero,800e44c <___vfiprintf_internal_r+0x9fc>
 800e19c:	d9002217 	ldw	r4,136(sp)
 800e1a0:	24c00017 	ldw	r19,0(r4)
 800e1a4:	25000117 	ldw	r20,4(r4)
 800e1a8:	21000204 	addi	r4,r4,8
 800e1ac:	d9002215 	stw	r4,136(sp)
 800e1b0:	8880004c 	andi	r2,r17,1
 800e1b4:	1001e726 	beq	r2,zero,800e954 <___vfiprintf_internal_r+0xf04>
 800e1b8:	9d04b03a 	or	r2,r19,r20
 800e1bc:	10025c1e 	bne	r2,zero,800eb30 <___vfiprintf_internal_r+0x10e0>
 800e1c0:	d8001d85 	stb	zero,118(sp)
 800e1c4:	80024416 	blt	r16,zero,800ead8 <___vfiprintf_internal_r+0x1088>
 800e1c8:	00bfdfc4 	movi	r2,-129
 800e1cc:	88a2703a 	and	r17,r17,r2
 800e1d0:	003f1d06 	br	800de48 <__alt_data_end+0xfc00de48>
 800e1d4:	d8c02217 	ldw	r3,136(sp)
 800e1d8:	04c00044 	movi	r19,1
 800e1dc:	b811883a 	mov	r8,r23
 800e1e0:	18800017 	ldw	r2,0(r3)
 800e1e4:	18c00104 	addi	r3,r3,4
 800e1e8:	d8001d85 	stb	zero,118(sp)
 800e1ec:	d8801005 	stb	r2,64(sp)
 800e1f0:	d8c02215 	stw	r3,136(sp)
 800e1f4:	9829883a 	mov	r20,r19
 800e1f8:	ddc01004 	addi	r23,sp,64
 800e1fc:	0021883a 	mov	r16,zero
 800e200:	003f1e06 	br	800de7c <__alt_data_end+0xfc00de7c>
 800e204:	9cc03fcc 	andi	r19,r19,255
 800e208:	b811883a 	mov	r8,r23
 800e20c:	9803331e 	bne	r19,zero,800eedc <___vfiprintf_internal_r+0x148c>
 800e210:	8880080c 	andi	r2,r17,32
 800e214:	10004826 	beq	r2,zero,800e338 <___vfiprintf_internal_r+0x8e8>
 800e218:	d9002217 	ldw	r4,136(sp)
 800e21c:	20800117 	ldw	r2,4(r4)
 800e220:	24c00017 	ldw	r19,0(r4)
 800e224:	21000204 	addi	r4,r4,8
 800e228:	d9002215 	stw	r4,136(sp)
 800e22c:	1029883a 	mov	r20,r2
 800e230:	10024c16 	blt	r2,zero,800eb64 <___vfiprintf_internal_r+0x1114>
 800e234:	dd401d83 	ldbu	r21,118(sp)
 800e238:	80007116 	blt	r16,zero,800e400 <___vfiprintf_internal_r+0x9b0>
 800e23c:	00ffdfc4 	movi	r3,-129
 800e240:	9d04b03a 	or	r2,r19,r20
 800e244:	88e2703a 	and	r17,r17,r3
 800e248:	1000d126 	beq	r2,zero,800e590 <___vfiprintf_internal_r+0xb40>
 800e24c:	a0023526 	beq	r20,zero,800eb24 <___vfiprintf_internal_r+0x10d4>
 800e250:	ddc01a04 	addi	r23,sp,104
 800e254:	4039883a 	mov	fp,r8
 800e258:	9809883a 	mov	r4,r19
 800e25c:	a00b883a 	mov	r5,r20
 800e260:	01800284 	movi	r6,10
 800e264:	000f883a 	mov	r7,zero
 800e268:	80100880 	call	8010088 <__umoddi3>
 800e26c:	10800c04 	addi	r2,r2,48
 800e270:	bdffffc4 	addi	r23,r23,-1
 800e274:	9809883a 	mov	r4,r19
 800e278:	a00b883a 	mov	r5,r20
 800e27c:	b8800005 	stb	r2,0(r23)
 800e280:	01800284 	movi	r6,10
 800e284:	000f883a 	mov	r7,zero
 800e288:	800fa8c0 	call	800fa8c <__udivdi3>
 800e28c:	1027883a 	mov	r19,r2
 800e290:	10c4b03a 	or	r2,r2,r3
 800e294:	1829883a 	mov	r20,r3
 800e298:	103fef1e 	bne	r2,zero,800e258 <__alt_data_end+0xfc00e258>
 800e29c:	d9001e17 	ldw	r4,120(sp)
 800e2a0:	e011883a 	mov	r8,fp
 800e2a4:	25e9c83a 	sub	r20,r4,r23
 800e2a8:	003eec06 	br	800de5c <__alt_data_end+0xfc00de5c>
 800e2ac:	d8802307 	ldb	r2,140(sp)
 800e2b0:	1002361e 	bne	r2,zero,800eb8c <___vfiprintf_internal_r+0x113c>
 800e2b4:	00c00804 	movi	r3,32
 800e2b8:	d8c02305 	stb	r3,140(sp)
 800e2bc:	04c00044 	movi	r19,1
 800e2c0:	b0c00007 	ldb	r3,0(r22)
 800e2c4:	003e3f06 	br	800dbc4 <__alt_data_end+0xfc00dbc4>
 800e2c8:	8c400054 	ori	r17,r17,1
 800e2cc:	b0c00007 	ldb	r3,0(r22)
 800e2d0:	003e3c06 	br	800dbc4 <__alt_data_end+0xfc00dbc4>
 800e2d4:	8c402014 	ori	r17,r17,128
 800e2d8:	b0c00007 	ldb	r3,0(r22)
 800e2dc:	003e3906 	br	800dbc4 <__alt_data_end+0xfc00dbc4>
 800e2e0:	dc002715 	stw	r16,156(sp)
 800e2e4:	d8002515 	stw	zero,148(sp)
 800e2e8:	1f3ff404 	addi	fp,r3,-48
 800e2ec:	0009883a 	mov	r4,zero
 800e2f0:	b021883a 	mov	r16,r22
 800e2f4:	01400284 	movi	r5,10
 800e2f8:	8001b580 	call	8001b58 <__mulsi3>
 800e2fc:	80c00007 	ldb	r3,0(r16)
 800e300:	e089883a 	add	r4,fp,r2
 800e304:	b5800044 	addi	r22,r22,1
 800e308:	1f3ff404 	addi	fp,r3,-48
 800e30c:	b021883a 	mov	r16,r22
 800e310:	af3ff82e 	bgeu	r21,fp,800e2f4 <__alt_data_end+0xfc00e2f4>
 800e314:	d9002515 	stw	r4,148(sp)
 800e318:	dc002717 	ldw	r16,156(sp)
 800e31c:	003e2a06 	br	800dbc8 <__alt_data_end+0xfc00dbc8>
 800e320:	9cc03fcc 	andi	r19,r19,255
 800e324:	b811883a 	mov	r8,r23
 800e328:	9802e91e 	bne	r19,zero,800eed0 <___vfiprintf_internal_r+0x1480>
 800e32c:	8c400414 	ori	r17,r17,16
 800e330:	8880080c 	andi	r2,r17,32
 800e334:	103fb81e 	bne	r2,zero,800e218 <__alt_data_end+0xfc00e218>
 800e338:	8880040c 	andi	r2,r17,16
 800e33c:	10022e26 	beq	r2,zero,800ebf8 <___vfiprintf_internal_r+0x11a8>
 800e340:	d9402217 	ldw	r5,136(sp)
 800e344:	2cc00017 	ldw	r19,0(r5)
 800e348:	29400104 	addi	r5,r5,4
 800e34c:	d9402215 	stw	r5,136(sp)
 800e350:	9829d7fa 	srai	r20,r19,31
 800e354:	a005883a 	mov	r2,r20
 800e358:	003fb506 	br	800e230 <__alt_data_end+0xfc00e230>
 800e35c:	9cc03fcc 	andi	r19,r19,255
 800e360:	b811883a 	mov	r8,r23
 800e364:	9802fa1e 	bne	r19,zero,800ef50 <___vfiprintf_internal_r+0x1500>
 800e368:	8c400414 	ori	r17,r17,16
 800e36c:	8880080c 	andi	r2,r17,32
 800e370:	103f661e 	bne	r2,zero,800e10c <__alt_data_end+0xfc00e10c>
 800e374:	8880040c 	andi	r2,r17,16
 800e378:	10020626 	beq	r2,zero,800eb94 <___vfiprintf_internal_r+0x1144>
 800e37c:	d9402217 	ldw	r5,136(sp)
 800e380:	d8001d85 	stb	zero,118(sp)
 800e384:	0029883a 	mov	r20,zero
 800e388:	28800104 	addi	r2,r5,4
 800e38c:	2cc00017 	ldw	r19,0(r5)
 800e390:	80020816 	blt	r16,zero,800ebb4 <___vfiprintf_internal_r+0x1164>
 800e394:	00ffdfc4 	movi	r3,-129
 800e398:	d8802215 	stw	r2,136(sp)
 800e39c:	88e2703a 	and	r17,r17,r3
 800e3a0:	983f651e 	bne	r19,zero,800e138 <__alt_data_end+0xfc00e138>
 800e3a4:	002b883a 	mov	r21,zero
 800e3a8:	8002cf26 	beq	r16,zero,800eee8 <___vfiprintf_internal_r+0x1498>
 800e3ac:	0027883a 	mov	r19,zero
 800e3b0:	0029883a 	mov	r20,zero
 800e3b4:	003f6106 	br	800e13c <__alt_data_end+0xfc00e13c>
 800e3b8:	9cc03fcc 	andi	r19,r19,255
 800e3bc:	b811883a 	mov	r8,r23
 800e3c0:	9802e01e 	bne	r19,zero,800ef44 <___vfiprintf_internal_r+0x14f4>
 800e3c4:	8c400414 	ori	r17,r17,16
 800e3c8:	8880080c 	andi	r2,r17,32
 800e3cc:	1000641e 	bne	r2,zero,800e560 <___vfiprintf_internal_r+0xb10>
 800e3d0:	8880040c 	andi	r2,r17,16
 800e3d4:	1001c81e 	bne	r2,zero,800eaf8 <___vfiprintf_internal_r+0x10a8>
 800e3d8:	8880100c 	andi	r2,r17,64
 800e3dc:	d8001d85 	stb	zero,118(sp)
 800e3e0:	1002281e 	bne	r2,zero,800ec84 <___vfiprintf_internal_r+0x1234>
 800e3e4:	d9002217 	ldw	r4,136(sp)
 800e3e8:	0029883a 	mov	r20,zero
 800e3ec:	20800104 	addi	r2,r4,4
 800e3f0:	24c00017 	ldw	r19,0(r4)
 800e3f4:	8001c60e 	bge	r16,zero,800eb10 <___vfiprintf_internal_r+0x10c0>
 800e3f8:	d8802215 	stw	r2,136(sp)
 800e3fc:	002b883a 	mov	r21,zero
 800e400:	9d04b03a 	or	r2,r19,r20
 800e404:	103f911e 	bne	r2,zero,800e24c <__alt_data_end+0xfc00e24c>
 800e408:	00800044 	movi	r2,1
 800e40c:	10803fcc 	andi	r2,r2,255
 800e410:	00c00044 	movi	r3,1
 800e414:	10c05f26 	beq	r2,r3,800e594 <___vfiprintf_internal_r+0xb44>
 800e418:	00c00084 	movi	r3,2
 800e41c:	10ffe31e 	bne	r2,r3,800e3ac <__alt_data_end+0xfc00e3ac>
 800e420:	0027883a 	mov	r19,zero
 800e424:	0029883a 	mov	r20,zero
 800e428:	00015106 	br	800e970 <___vfiprintf_internal_r+0xf20>
 800e42c:	9cc03fcc 	andi	r19,r19,255
 800e430:	b811883a 	mov	r8,r23
 800e434:	9802c01e 	bne	r19,zero,800ef38 <___vfiprintf_internal_r+0x14e8>
 800e438:	01420074 	movhi	r5,2049
 800e43c:	295ed604 	addi	r5,r5,31576
 800e440:	d9402615 	stw	r5,152(sp)
 800e444:	8880080c 	andi	r2,r17,32
 800e448:	103f541e 	bne	r2,zero,800e19c <__alt_data_end+0xfc00e19c>
 800e44c:	8880040c 	andi	r2,r17,16
 800e450:	1001f226 	beq	r2,zero,800ec1c <___vfiprintf_internal_r+0x11cc>
 800e454:	d9402217 	ldw	r5,136(sp)
 800e458:	0029883a 	mov	r20,zero
 800e45c:	2cc00017 	ldw	r19,0(r5)
 800e460:	29400104 	addi	r5,r5,4
 800e464:	d9402215 	stw	r5,136(sp)
 800e468:	003f5106 	br	800e1b0 <__alt_data_end+0xfc00e1b0>
 800e46c:	d8c02217 	ldw	r3,136(sp)
 800e470:	b811883a 	mov	r8,r23
 800e474:	d8001d85 	stb	zero,118(sp)
 800e478:	1dc00017 	ldw	r23,0(r3)
 800e47c:	1f000104 	addi	fp,r3,4
 800e480:	b8025926 	beq	r23,zero,800ede8 <___vfiprintf_internal_r+0x1398>
 800e484:	80023316 	blt	r16,zero,800ed54 <___vfiprintf_internal_r+0x1304>
 800e488:	800d883a 	mov	r6,r16
 800e48c:	000b883a 	mov	r5,zero
 800e490:	b809883a 	mov	r4,r23
 800e494:	da002a15 	stw	r8,168(sp)
 800e498:	800a6200 	call	800a620 <memchr>
 800e49c:	da002a17 	ldw	r8,168(sp)
 800e4a0:	10026826 	beq	r2,zero,800ee44 <___vfiprintf_internal_r+0x13f4>
 800e4a4:	15e9c83a 	sub	r20,r2,r23
 800e4a8:	dd401d83 	ldbu	r21,118(sp)
 800e4ac:	df002215 	stw	fp,136(sp)
 800e4b0:	0021883a 	mov	r16,zero
 800e4b4:	003e6906 	br	800de5c <__alt_data_end+0xfc00de5c>
 800e4b8:	9cc03fcc 	andi	r19,r19,255
 800e4bc:	b811883a 	mov	r8,r23
 800e4c0:	983fc126 	beq	r19,zero,800e3c8 <__alt_data_end+0xfc00e3c8>
 800e4c4:	d8c02303 	ldbu	r3,140(sp)
 800e4c8:	d8c01d85 	stb	r3,118(sp)
 800e4cc:	003fbe06 	br	800e3c8 <__alt_data_end+0xfc00e3c8>
 800e4d0:	d9002217 	ldw	r4,136(sp)
 800e4d4:	d9402217 	ldw	r5,136(sp)
 800e4d8:	21000017 	ldw	r4,0(r4)
 800e4dc:	28800104 	addi	r2,r5,4
 800e4e0:	d9002515 	stw	r4,148(sp)
 800e4e4:	203e3d16 	blt	r4,zero,800dddc <__alt_data_end+0xfc00dddc>
 800e4e8:	d8802215 	stw	r2,136(sp)
 800e4ec:	b0c00007 	ldb	r3,0(r22)
 800e4f0:	003db406 	br	800dbc4 <__alt_data_end+0xfc00dbc4>
 800e4f4:	00c00ac4 	movi	r3,43
 800e4f8:	d8c02305 	stb	r3,140(sp)
 800e4fc:	04c00044 	movi	r19,1
 800e500:	b0c00007 	ldb	r3,0(r22)
 800e504:	003daf06 	br	800dbc4 <__alt_data_end+0xfc00dbc4>
 800e508:	b0c00007 	ldb	r3,0(r22)
 800e50c:	01000a84 	movi	r4,42
 800e510:	b4000044 	addi	r16,r22,1
 800e514:	19025e26 	beq	r3,r4,800ee90 <___vfiprintf_internal_r+0x1440>
 800e518:	1f3ff404 	addi	fp,r3,-48
 800e51c:	0009883a 	mov	r4,zero
 800e520:	af025236 	bltu	r21,fp,800ee6c <___vfiprintf_internal_r+0x141c>
 800e524:	01400284 	movi	r5,10
 800e528:	8001b580 	call	8001b58 <__mulsi3>
 800e52c:	80c00007 	ldb	r3,0(r16)
 800e530:	1709883a 	add	r4,r2,fp
 800e534:	85800044 	addi	r22,r16,1
 800e538:	1f3ff404 	addi	fp,r3,-48
 800e53c:	b021883a 	mov	r16,r22
 800e540:	af3ff82e 	bgeu	r21,fp,800e524 <__alt_data_end+0xfc00e524>
 800e544:	2021883a 	mov	r16,r4
 800e548:	203d9f0e 	bge	r4,zero,800dbc8 <__alt_data_end+0xfc00dbc8>
 800e54c:	043fffc4 	movi	r16,-1
 800e550:	003d9d06 	br	800dbc8 <__alt_data_end+0xfc00dbc8>
 800e554:	8c401014 	ori	r17,r17,64
 800e558:	b0c00007 	ldb	r3,0(r22)
 800e55c:	003d9906 	br	800dbc4 <__alt_data_end+0xfc00dbc4>
 800e560:	d9002217 	ldw	r4,136(sp)
 800e564:	d8001d85 	stb	zero,118(sp)
 800e568:	20c00204 	addi	r3,r4,8
 800e56c:	24c00017 	ldw	r19,0(r4)
 800e570:	25000117 	ldw	r20,4(r4)
 800e574:	8001e716 	blt	r16,zero,800ed14 <___vfiprintf_internal_r+0x12c4>
 800e578:	013fdfc4 	movi	r4,-129
 800e57c:	9d04b03a 	or	r2,r19,r20
 800e580:	d8c02215 	stw	r3,136(sp)
 800e584:	8922703a 	and	r17,r17,r4
 800e588:	002b883a 	mov	r21,zero
 800e58c:	103f2f1e 	bne	r2,zero,800e24c <__alt_data_end+0xfc00e24c>
 800e590:	803e2f26 	beq	r16,zero,800de50 <__alt_data_end+0xfc00de50>
 800e594:	0027883a 	mov	r19,zero
 800e598:	9cc00c04 	addi	r19,r19,48
 800e59c:	dcc019c5 	stb	r19,103(sp)
 800e5a0:	dd002817 	ldw	r20,160(sp)
 800e5a4:	ddc019c4 	addi	r23,sp,103
 800e5a8:	003e2c06 	br	800de5c <__alt_data_end+0xfc00de5c>
 800e5ac:	9cc03fcc 	andi	r19,r19,255
 800e5b0:	b811883a 	mov	r8,r23
 800e5b4:	9802571e 	bne	r19,zero,800ef14 <___vfiprintf_internal_r+0x14c4>
 800e5b8:	18005726 	beq	r3,zero,800e718 <___vfiprintf_internal_r+0xcc8>
 800e5bc:	04c00044 	movi	r19,1
 800e5c0:	d8c01005 	stb	r3,64(sp)
 800e5c4:	d8001d85 	stb	zero,118(sp)
 800e5c8:	9829883a 	mov	r20,r19
 800e5cc:	ddc01004 	addi	r23,sp,64
 800e5d0:	003f0a06 	br	800e1fc <__alt_data_end+0xfc00e1fc>
 800e5d4:	d9402017 	ldw	r5,128(sp)
 800e5d8:	d9002117 	ldw	r4,132(sp)
 800e5dc:	d9801a04 	addi	r6,sp,104
 800e5e0:	da802a15 	stw	r10,168(sp)
 800e5e4:	800d93c0 	call	800d93c <__sprint_r.part.0>
 800e5e8:	da802a17 	ldw	r10,168(sp)
 800e5ec:	1000501e 	bne	r2,zero,800e730 <___vfiprintf_internal_r+0xce0>
 800e5f0:	d9801b17 	ldw	r6,108(sp)
 800e5f4:	d8801c17 	ldw	r2,112(sp)
 800e5f8:	d811883a 	mov	r8,sp
 800e5fc:	31000044 	addi	r4,r6,1
 800e600:	003e3606 	br	800dedc <__alt_data_end+0xfc00dedc>
 800e604:	d9001b17 	ldw	r4,108(sp)
 800e608:	d8801c17 	ldw	r2,112(sp)
 800e60c:	21400044 	addi	r5,r4,1
 800e610:	d9801d87 	ldb	r6,118(sp)
 800e614:	303e5226 	beq	r6,zero,800df60 <__alt_data_end+0xfc00df60>
 800e618:	01800044 	movi	r6,1
 800e61c:	d9001d84 	addi	r4,sp,118
 800e620:	1185883a 	add	r2,r2,r6
 800e624:	41000015 	stw	r4,0(r8)
 800e628:	41800115 	stw	r6,4(r8)
 800e62c:	d8801c15 	stw	r2,112(sp)
 800e630:	d9401b15 	stw	r5,108(sp)
 800e634:	010001c4 	movi	r4,7
 800e638:	2140b00e 	bge	r4,r5,800e8fc <___vfiprintf_internal_r+0xeac>
 800e63c:	1000f61e 	bne	r2,zero,800ea18 <___vfiprintf_internal_r+0xfc8>
 800e640:	3800b31e 	bne	r7,zero,800e910 <___vfiprintf_internal_r+0xec0>
 800e644:	0009883a 	mov	r4,zero
 800e648:	300b883a 	mov	r5,r6
 800e64c:	d811883a 	mov	r8,sp
 800e650:	01802004 	movi	r6,128
 800e654:	19be5226 	beq	r3,r6,800dfa0 <__alt_data_end+0xfc00dfa0>
 800e658:	8521c83a 	sub	r16,r16,r20
 800e65c:	043e790e 	bge	zero,r16,800e044 <__alt_data_end+0xfc00e044>
 800e660:	05400404 	movi	r21,16
 800e664:	ac01b00e 	bge	r21,r16,800ed28 <___vfiprintf_internal_r+0x12d8>
 800e668:	01420074 	movhi	r5,2049
 800e66c:	295f4c04 	addi	r5,r5,32048
 800e670:	d9402315 	stw	r5,140(sp)
 800e674:	070001c4 	movi	fp,7
 800e678:	00000506 	br	800e690 <___vfiprintf_internal_r+0xc40>
 800e67c:	21400084 	addi	r5,r4,2
 800e680:	42000204 	addi	r8,r8,8
 800e684:	1809883a 	mov	r4,r3
 800e688:	843ffc04 	addi	r16,r16,-16
 800e68c:	ac000d0e 	bge	r21,r16,800e6c4 <___vfiprintf_internal_r+0xc74>
 800e690:	10800404 	addi	r2,r2,16
 800e694:	20c00044 	addi	r3,r4,1
 800e698:	44800015 	stw	r18,0(r8)
 800e69c:	45400115 	stw	r21,4(r8)
 800e6a0:	d8801c15 	stw	r2,112(sp)
 800e6a4:	d8c01b15 	stw	r3,108(sp)
 800e6a8:	e0fff40e 	bge	fp,r3,800e67c <__alt_data_end+0xfc00e67c>
 800e6ac:	1000101e 	bne	r2,zero,800e6f0 <___vfiprintf_internal_r+0xca0>
 800e6b0:	843ffc04 	addi	r16,r16,-16
 800e6b4:	01400044 	movi	r5,1
 800e6b8:	0009883a 	mov	r4,zero
 800e6bc:	d811883a 	mov	r8,sp
 800e6c0:	ac3ff316 	blt	r21,r16,800e690 <__alt_data_end+0xfc00e690>
 800e6c4:	d8c02317 	ldw	r3,140(sp)
 800e6c8:	1405883a 	add	r2,r2,r16
 800e6cc:	44000115 	stw	r16,4(r8)
 800e6d0:	40c00015 	stw	r3,0(r8)
 800e6d4:	d8801c15 	stw	r2,112(sp)
 800e6d8:	d9401b15 	stw	r5,108(sp)
 800e6dc:	00c001c4 	movi	r3,7
 800e6e0:	19401916 	blt	r3,r5,800e748 <___vfiprintf_internal_r+0xcf8>
 800e6e4:	42000204 	addi	r8,r8,8
 800e6e8:	29400044 	addi	r5,r5,1
 800e6ec:	003e5506 	br	800e044 <__alt_data_end+0xfc00e044>
 800e6f0:	d9402017 	ldw	r5,128(sp)
 800e6f4:	d9002117 	ldw	r4,132(sp)
 800e6f8:	d9801a04 	addi	r6,sp,104
 800e6fc:	800d93c0 	call	800d93c <__sprint_r.part.0>
 800e700:	10000b1e 	bne	r2,zero,800e730 <___vfiprintf_internal_r+0xce0>
 800e704:	d9001b17 	ldw	r4,108(sp)
 800e708:	d8801c17 	ldw	r2,112(sp)
 800e70c:	d811883a 	mov	r8,sp
 800e710:	21400044 	addi	r5,r4,1
 800e714:	003fdc06 	br	800e688 <__alt_data_end+0xfc00e688>
 800e718:	d8801c17 	ldw	r2,112(sp)
 800e71c:	10000426 	beq	r2,zero,800e730 <___vfiprintf_internal_r+0xce0>
 800e720:	d9402017 	ldw	r5,128(sp)
 800e724:	d9002117 	ldw	r4,132(sp)
 800e728:	d9801a04 	addi	r6,sp,104
 800e72c:	800d93c0 	call	800d93c <__sprint_r.part.0>
 800e730:	d9402017 	ldw	r5,128(sp)
 800e734:	2880030b 	ldhu	r2,12(r5)
 800e738:	1080100c 	andi	r2,r2,64
 800e73c:	10014d1e 	bne	r2,zero,800ec74 <___vfiprintf_internal_r+0x1224>
 800e740:	d8802417 	ldw	r2,144(sp)
 800e744:	003d9706 	br	800dda4 <__alt_data_end+0xfc00dda4>
 800e748:	1000d21e 	bne	r2,zero,800ea94 <___vfiprintf_internal_r+0x1044>
 800e74c:	00c00044 	movi	r3,1
 800e750:	a005883a 	mov	r2,r20
 800e754:	ddc00015 	stw	r23,0(sp)
 800e758:	dd000115 	stw	r20,4(sp)
 800e75c:	dd001c15 	stw	r20,112(sp)
 800e760:	d8c01b15 	stw	r3,108(sp)
 800e764:	d811883a 	mov	r8,sp
 800e768:	42000204 	addi	r8,r8,8
 800e76c:	8c40010c 	andi	r17,r17,4
 800e770:	88004026 	beq	r17,zero,800e874 <___vfiprintf_internal_r+0xe24>
 800e774:	d9002517 	ldw	r4,148(sp)
 800e778:	24e3c83a 	sub	r17,r4,r19
 800e77c:	04403d0e 	bge	zero,r17,800e874 <___vfiprintf_internal_r+0xe24>
 800e780:	04000404 	movi	r16,16
 800e784:	8441a90e 	bge	r16,r17,800ee2c <___vfiprintf_internal_r+0x13dc>
 800e788:	00c20074 	movhi	r3,2049
 800e78c:	18df5004 	addi	r3,r3,32064
 800e790:	d9001b17 	ldw	r4,108(sp)
 800e794:	d8c02315 	stw	r3,140(sp)
 800e798:	050001c4 	movi	r20,7
 800e79c:	dd402117 	ldw	r21,132(sp)
 800e7a0:	ddc02017 	ldw	r23,128(sp)
 800e7a4:	00000506 	br	800e7bc <___vfiprintf_internal_r+0xd6c>
 800e7a8:	21400084 	addi	r5,r4,2
 800e7ac:	42000204 	addi	r8,r8,8
 800e7b0:	1809883a 	mov	r4,r3
 800e7b4:	8c7ffc04 	addi	r17,r17,-16
 800e7b8:	84400f0e 	bge	r16,r17,800e7f8 <___vfiprintf_internal_r+0xda8>
 800e7bc:	01420074 	movhi	r5,2049
 800e7c0:	10800404 	addi	r2,r2,16
 800e7c4:	20c00044 	addi	r3,r4,1
 800e7c8:	295f5004 	addi	r5,r5,32064
 800e7cc:	41400015 	stw	r5,0(r8)
 800e7d0:	44000115 	stw	r16,4(r8)
 800e7d4:	d8801c15 	stw	r2,112(sp)
 800e7d8:	d8c01b15 	stw	r3,108(sp)
 800e7dc:	a0fff20e 	bge	r20,r3,800e7a8 <__alt_data_end+0xfc00e7a8>
 800e7e0:	1000141e 	bne	r2,zero,800e834 <___vfiprintf_internal_r+0xde4>
 800e7e4:	8c7ffc04 	addi	r17,r17,-16
 800e7e8:	01400044 	movi	r5,1
 800e7ec:	0009883a 	mov	r4,zero
 800e7f0:	d811883a 	mov	r8,sp
 800e7f4:	847ff116 	blt	r16,r17,800e7bc <__alt_data_end+0xfc00e7bc>
 800e7f8:	d8c02317 	ldw	r3,140(sp)
 800e7fc:	1445883a 	add	r2,r2,r17
 800e800:	44400115 	stw	r17,4(r8)
 800e804:	40c00015 	stw	r3,0(r8)
 800e808:	d8801c15 	stw	r2,112(sp)
 800e80c:	d9401b15 	stw	r5,108(sp)
 800e810:	00c001c4 	movi	r3,7
 800e814:	1940170e 	bge	r3,r5,800e874 <___vfiprintf_internal_r+0xe24>
 800e818:	1000101e 	bne	r2,zero,800e85c <___vfiprintf_internal_r+0xe0c>
 800e81c:	d8802517 	ldw	r2,148(sp)
 800e820:	14c11616 	blt	r2,r19,800ec7c <___vfiprintf_internal_r+0x122c>
 800e824:	d9002417 	ldw	r4,144(sp)
 800e828:	2089883a 	add	r4,r4,r2
 800e82c:	d9002415 	stw	r4,144(sp)
 800e830:	003e1806 	br	800e094 <__alt_data_end+0xfc00e094>
 800e834:	d9801a04 	addi	r6,sp,104
 800e838:	b80b883a 	mov	r5,r23
 800e83c:	a809883a 	mov	r4,r21
 800e840:	800d93c0 	call	800d93c <__sprint_r.part.0>
 800e844:	103fba1e 	bne	r2,zero,800e730 <__alt_data_end+0xfc00e730>
 800e848:	d9001b17 	ldw	r4,108(sp)
 800e84c:	d8801c17 	ldw	r2,112(sp)
 800e850:	d811883a 	mov	r8,sp
 800e854:	21400044 	addi	r5,r4,1
 800e858:	003fd606 	br	800e7b4 <__alt_data_end+0xfc00e7b4>
 800e85c:	d9402017 	ldw	r5,128(sp)
 800e860:	d9002117 	ldw	r4,132(sp)
 800e864:	d9801a04 	addi	r6,sp,104
 800e868:	800d93c0 	call	800d93c <__sprint_r.part.0>
 800e86c:	103fb01e 	bne	r2,zero,800e730 <__alt_data_end+0xfc00e730>
 800e870:	d8801c17 	ldw	r2,112(sp)
 800e874:	d8c02517 	ldw	r3,148(sp)
 800e878:	1cc0010e 	bge	r3,r19,800e880 <___vfiprintf_internal_r+0xe30>
 800e87c:	9807883a 	mov	r3,r19
 800e880:	d9002417 	ldw	r4,144(sp)
 800e884:	20c9883a 	add	r4,r4,r3
 800e888:	d9002415 	stw	r4,144(sp)
 800e88c:	103e0126 	beq	r2,zero,800e094 <__alt_data_end+0xfc00e094>
 800e890:	d9402017 	ldw	r5,128(sp)
 800e894:	d9002117 	ldw	r4,132(sp)
 800e898:	d9801a04 	addi	r6,sp,104
 800e89c:	800d93c0 	call	800d93c <__sprint_r.part.0>
 800e8a0:	103dfc26 	beq	r2,zero,800e094 <__alt_data_end+0xfc00e094>
 800e8a4:	003fa206 	br	800e730 <__alt_data_end+0xfc00e730>
 800e8a8:	d9402017 	ldw	r5,128(sp)
 800e8ac:	d9002117 	ldw	r4,132(sp)
 800e8b0:	d9801a04 	addi	r6,sp,104
 800e8b4:	d9c02b15 	stw	r7,172(sp)
 800e8b8:	800d93c0 	call	800d93c <__sprint_r.part.0>
 800e8bc:	d9c02b17 	ldw	r7,172(sp)
 800e8c0:	103f9b1e 	bne	r2,zero,800e730 <__alt_data_end+0xfc00e730>
 800e8c4:	d9001b17 	ldw	r4,108(sp)
 800e8c8:	d8801c17 	ldw	r2,112(sp)
 800e8cc:	d811883a 	mov	r8,sp
 800e8d0:	21800044 	addi	r6,r4,1
 800e8d4:	003dbf06 	br	800dfd4 <__alt_data_end+0xfc00dfd4>
 800e8d8:	1000d81e 	bne	r2,zero,800ec3c <___vfiprintf_internal_r+0x11ec>
 800e8dc:	d9001d87 	ldb	r4,118(sp)
 800e8e0:	20000a26 	beq	r4,zero,800e90c <___vfiprintf_internal_r+0xebc>
 800e8e4:	00800044 	movi	r2,1
 800e8e8:	d9001d84 	addi	r4,sp,118
 800e8ec:	100b883a 	mov	r5,r2
 800e8f0:	d9000015 	stw	r4,0(sp)
 800e8f4:	d8800115 	stw	r2,4(sp)
 800e8f8:	d811883a 	mov	r8,sp
 800e8fc:	2809883a 	mov	r4,r5
 800e900:	42000204 	addi	r8,r8,8
 800e904:	29400044 	addi	r5,r5,1
 800e908:	003d9506 	br	800df60 <__alt_data_end+0xfc00df60>
 800e90c:	3800fd26 	beq	r7,zero,800ed04 <___vfiprintf_internal_r+0x12b4>
 800e910:	00800084 	movi	r2,2
 800e914:	d9001d04 	addi	r4,sp,116
 800e918:	d9000015 	stw	r4,0(sp)
 800e91c:	d8800115 	stw	r2,4(sp)
 800e920:	01400044 	movi	r5,1
 800e924:	d811883a 	mov	r8,sp
 800e928:	2809883a 	mov	r4,r5
 800e92c:	42000204 	addi	r8,r8,8
 800e930:	29400044 	addi	r5,r5,1
 800e934:	003f4606 	br	800e650 <__alt_data_end+0xfc00e650>
 800e938:	d8802517 	ldw	r2,148(sp)
 800e93c:	14c0010e 	bge	r2,r19,800e944 <___vfiprintf_internal_r+0xef4>
 800e940:	9805883a 	mov	r2,r19
 800e944:	d9402417 	ldw	r5,144(sp)
 800e948:	288b883a 	add	r5,r5,r2
 800e94c:	d9402415 	stw	r5,144(sp)
 800e950:	003dd006 	br	800e094 <__alt_data_end+0xfc00e094>
 800e954:	d8001d85 	stb	zero,118(sp)
 800e958:	80005d16 	blt	r16,zero,800ead0 <___vfiprintf_internal_r+0x1080>
 800e95c:	00ffdfc4 	movi	r3,-129
 800e960:	9d04b03a 	or	r2,r19,r20
 800e964:	88e2703a 	and	r17,r17,r3
 800e968:	103d3726 	beq	r2,zero,800de48 <__alt_data_end+0xfc00de48>
 800e96c:	002b883a 	mov	r21,zero
 800e970:	d9002617 	ldw	r4,152(sp)
 800e974:	ddc01a04 	addi	r23,sp,104
 800e978:	988003cc 	andi	r2,r19,15
 800e97c:	a006973a 	slli	r3,r20,28
 800e980:	2085883a 	add	r2,r4,r2
 800e984:	9826d13a 	srli	r19,r19,4
 800e988:	10800003 	ldbu	r2,0(r2)
 800e98c:	a028d13a 	srli	r20,r20,4
 800e990:	bdffffc4 	addi	r23,r23,-1
 800e994:	1ce6b03a 	or	r19,r3,r19
 800e998:	b8800005 	stb	r2,0(r23)
 800e99c:	9d04b03a 	or	r2,r19,r20
 800e9a0:	103ff51e 	bne	r2,zero,800e978 <__alt_data_end+0xfc00e978>
 800e9a4:	d8801e17 	ldw	r2,120(sp)
 800e9a8:	15e9c83a 	sub	r20,r2,r23
 800e9ac:	003d2b06 	br	800de5c <__alt_data_end+0xfc00de5c>
 800e9b0:	d9402017 	ldw	r5,128(sp)
 800e9b4:	d9002117 	ldw	r4,132(sp)
 800e9b8:	d9801a04 	addi	r6,sp,104
 800e9bc:	800d93c0 	call	800d93c <__sprint_r.part.0>
 800e9c0:	103f5b1e 	bne	r2,zero,800e730 <__alt_data_end+0xfc00e730>
 800e9c4:	d8801c17 	ldw	r2,112(sp)
 800e9c8:	d811883a 	mov	r8,sp
 800e9cc:	003f6706 	br	800e76c <__alt_data_end+0xfc00e76c>
 800e9d0:	d9402017 	ldw	r5,128(sp)
 800e9d4:	d9002117 	ldw	r4,132(sp)
 800e9d8:	d9801a04 	addi	r6,sp,104
 800e9dc:	800d93c0 	call	800d93c <__sprint_r.part.0>
 800e9e0:	103f531e 	bne	r2,zero,800e730 <__alt_data_end+0xfc00e730>
 800e9e4:	d811883a 	mov	r8,sp
 800e9e8:	003cd906 	br	800dd50 <__alt_data_end+0xfc00dd50>
 800e9ec:	10803fcc 	andi	r2,r2,255
 800e9f0:	1080201c 	xori	r2,r2,128
 800e9f4:	10bfe004 	addi	r2,r2,-128
 800e9f8:	00c00c04 	movi	r3,48
 800e9fc:	10ffe926 	beq	r2,r3,800e9a4 <__alt_data_end+0xfc00e9a4>
 800ea00:	b8ffffc5 	stb	r3,-1(r23)
 800ea04:	d8c01e17 	ldw	r3,120(sp)
 800ea08:	b8bfffc4 	addi	r2,r23,-1
 800ea0c:	102f883a 	mov	r23,r2
 800ea10:	18a9c83a 	sub	r20,r3,r2
 800ea14:	003d1106 	br	800de5c <__alt_data_end+0xfc00de5c>
 800ea18:	d9402017 	ldw	r5,128(sp)
 800ea1c:	d9002117 	ldw	r4,132(sp)
 800ea20:	d9801a04 	addi	r6,sp,104
 800ea24:	d8c02a15 	stw	r3,168(sp)
 800ea28:	d9c02b15 	stw	r7,172(sp)
 800ea2c:	800d93c0 	call	800d93c <__sprint_r.part.0>
 800ea30:	d8c02a17 	ldw	r3,168(sp)
 800ea34:	d9c02b17 	ldw	r7,172(sp)
 800ea38:	103f3d1e 	bne	r2,zero,800e730 <__alt_data_end+0xfc00e730>
 800ea3c:	d9001b17 	ldw	r4,108(sp)
 800ea40:	d8801c17 	ldw	r2,112(sp)
 800ea44:	d811883a 	mov	r8,sp
 800ea48:	21400044 	addi	r5,r4,1
 800ea4c:	003d4406 	br	800df60 <__alt_data_end+0xfc00df60>
 800ea50:	d9402017 	ldw	r5,128(sp)
 800ea54:	d9002117 	ldw	r4,132(sp)
 800ea58:	d9801a04 	addi	r6,sp,104
 800ea5c:	d8c02a15 	stw	r3,168(sp)
 800ea60:	800d93c0 	call	800d93c <__sprint_r.part.0>
 800ea64:	d8c02a17 	ldw	r3,168(sp)
 800ea68:	103f311e 	bne	r2,zero,800e730 <__alt_data_end+0xfc00e730>
 800ea6c:	d9001b17 	ldw	r4,108(sp)
 800ea70:	d8801c17 	ldw	r2,112(sp)
 800ea74:	d811883a 	mov	r8,sp
 800ea78:	21400044 	addi	r5,r4,1
 800ea7c:	003ef406 	br	800e650 <__alt_data_end+0xfc00e650>
 800ea80:	1000bd1e 	bne	r2,zero,800ed78 <___vfiprintf_internal_r+0x1328>
 800ea84:	01400044 	movi	r5,1
 800ea88:	0009883a 	mov	r4,zero
 800ea8c:	d811883a 	mov	r8,sp
 800ea90:	003ef106 	br	800e658 <__alt_data_end+0xfc00e658>
 800ea94:	d9402017 	ldw	r5,128(sp)
 800ea98:	d9002117 	ldw	r4,132(sp)
 800ea9c:	d9801a04 	addi	r6,sp,104
 800eaa0:	800d93c0 	call	800d93c <__sprint_r.part.0>
 800eaa4:	103f221e 	bne	r2,zero,800e730 <__alt_data_end+0xfc00e730>
 800eaa8:	d9401b17 	ldw	r5,108(sp)
 800eaac:	d8801c17 	ldw	r2,112(sp)
 800eab0:	d811883a 	mov	r8,sp
 800eab4:	29400044 	addi	r5,r5,1
 800eab8:	003d6206 	br	800e044 <__alt_data_end+0xfc00e044>
 800eabc:	01420074 	movhi	r5,2049
 800eac0:	295edb04 	addi	r5,r5,31596
 800eac4:	d9402615 	stw	r5,152(sp)
 800eac8:	d8c02215 	stw	r3,136(sp)
 800eacc:	1023883a 	mov	r17,r2
 800ead0:	9d04b03a 	or	r2,r19,r20
 800ead4:	103fa51e 	bne	r2,zero,800e96c <__alt_data_end+0xfc00e96c>
 800ead8:	002b883a 	mov	r21,zero
 800eadc:	00800084 	movi	r2,2
 800eae0:	003e4a06 	br	800e40c <__alt_data_end+0xfc00e40c>
 800eae4:	01420074 	movhi	r5,2049
 800eae8:	295edb04 	addi	r5,r5,31596
 800eaec:	002b883a 	mov	r21,zero
 800eaf0:	d9402615 	stw	r5,152(sp)
 800eaf4:	003f9e06 	br	800e970 <__alt_data_end+0xfc00e970>
 800eaf8:	d9402217 	ldw	r5,136(sp)
 800eafc:	d8001d85 	stb	zero,118(sp)
 800eb00:	0029883a 	mov	r20,zero
 800eb04:	28800104 	addi	r2,r5,4
 800eb08:	2cc00017 	ldw	r19,0(r5)
 800eb0c:	803e3a16 	blt	r16,zero,800e3f8 <__alt_data_end+0xfc00e3f8>
 800eb10:	00ffdfc4 	movi	r3,-129
 800eb14:	d8802215 	stw	r2,136(sp)
 800eb18:	88e2703a 	and	r17,r17,r3
 800eb1c:	002b883a 	mov	r21,zero
 800eb20:	983e9b26 	beq	r19,zero,800e590 <__alt_data_end+0xfc00e590>
 800eb24:	00800244 	movi	r2,9
 800eb28:	14fdc936 	bltu	r2,r19,800e250 <__alt_data_end+0xfc00e250>
 800eb2c:	003e9a06 	br	800e598 <__alt_data_end+0xfc00e598>
 800eb30:	00800c04 	movi	r2,48
 800eb34:	d8c01d45 	stb	r3,117(sp)
 800eb38:	d8801d05 	stb	r2,116(sp)
 800eb3c:	d8001d85 	stb	zero,118(sp)
 800eb40:	88c00094 	ori	r3,r17,2
 800eb44:	80009c16 	blt	r16,zero,800edb8 <___vfiprintf_internal_r+0x1368>
 800eb48:	00bfdfc4 	movi	r2,-129
 800eb4c:	88a2703a 	and	r17,r17,r2
 800eb50:	8c400094 	ori	r17,r17,2
 800eb54:	002b883a 	mov	r21,zero
 800eb58:	003f8506 	br	800e970 <__alt_data_end+0xfc00e970>
 800eb5c:	b029883a 	mov	r20,r22
 800eb60:	003c0b06 	br	800db90 <__alt_data_end+0xfc00db90>
 800eb64:	04e7c83a 	sub	r19,zero,r19
 800eb68:	05400b44 	movi	r21,45
 800eb6c:	9804c03a 	cmpne	r2,r19,zero
 800eb70:	0529c83a 	sub	r20,zero,r20
 800eb74:	dd401d85 	stb	r21,118(sp)
 800eb78:	a0a9c83a 	sub	r20,r20,r2
 800eb7c:	80009716 	blt	r16,zero,800eddc <___vfiprintf_internal_r+0x138c>
 800eb80:	00bfdfc4 	movi	r2,-129
 800eb84:	88a2703a 	and	r17,r17,r2
 800eb88:	003db006 	br	800e24c <__alt_data_end+0xfc00e24c>
 800eb8c:	b0c00007 	ldb	r3,0(r22)
 800eb90:	003c0c06 	br	800dbc4 <__alt_data_end+0xfc00dbc4>
 800eb94:	8880100c 	andi	r2,r17,64
 800eb98:	d8001d85 	stb	zero,118(sp)
 800eb9c:	1000461e 	bne	r2,zero,800ecb8 <___vfiprintf_internal_r+0x1268>
 800eba0:	d9002217 	ldw	r4,136(sp)
 800eba4:	0029883a 	mov	r20,zero
 800eba8:	20800104 	addi	r2,r4,4
 800ebac:	24c00017 	ldw	r19,0(r4)
 800ebb0:	803df80e 	bge	r16,zero,800e394 <__alt_data_end+0xfc00e394>
 800ebb4:	9d06b03a 	or	r3,r19,r20
 800ebb8:	d8802215 	stw	r2,136(sp)
 800ebbc:	183d5e1e 	bne	r3,zero,800e138 <__alt_data_end+0xfc00e138>
 800ebc0:	002b883a 	mov	r21,zero
 800ebc4:	0005883a 	mov	r2,zero
 800ebc8:	003e1006 	br	800e40c <__alt_data_end+0xfc00e40c>
 800ebcc:	8880040c 	andi	r2,r17,16
 800ebd0:	1000321e 	bne	r2,zero,800ec9c <___vfiprintf_internal_r+0x124c>
 800ebd4:	8c40100c 	andi	r17,r17,64
 800ebd8:	88008d26 	beq	r17,zero,800ee10 <___vfiprintf_internal_r+0x13c0>
 800ebdc:	d9402217 	ldw	r5,136(sp)
 800ebe0:	d8c02417 	ldw	r3,144(sp)
 800ebe4:	28800017 	ldw	r2,0(r5)
 800ebe8:	29400104 	addi	r5,r5,4
 800ebec:	d9402215 	stw	r5,136(sp)
 800ebf0:	10c0000d 	sth	r3,0(r2)
 800ebf4:	003bca06 	br	800db20 <__alt_data_end+0xfc00db20>
 800ebf8:	8880100c 	andi	r2,r17,64
 800ebfc:	10003a26 	beq	r2,zero,800ece8 <___vfiprintf_internal_r+0x1298>
 800ec00:	d8802217 	ldw	r2,136(sp)
 800ec04:	14c0000f 	ldh	r19,0(r2)
 800ec08:	10800104 	addi	r2,r2,4
 800ec0c:	d8802215 	stw	r2,136(sp)
 800ec10:	9829d7fa 	srai	r20,r19,31
 800ec14:	a005883a 	mov	r2,r20
 800ec18:	003d8506 	br	800e230 <__alt_data_end+0xfc00e230>
 800ec1c:	8880100c 	andi	r2,r17,64
 800ec20:	10002b26 	beq	r2,zero,800ecd0 <___vfiprintf_internal_r+0x1280>
 800ec24:	d8802217 	ldw	r2,136(sp)
 800ec28:	0029883a 	mov	r20,zero
 800ec2c:	14c0000b 	ldhu	r19,0(r2)
 800ec30:	10800104 	addi	r2,r2,4
 800ec34:	d8802215 	stw	r2,136(sp)
 800ec38:	003d5d06 	br	800e1b0 <__alt_data_end+0xfc00e1b0>
 800ec3c:	d9402017 	ldw	r5,128(sp)
 800ec40:	d9002117 	ldw	r4,132(sp)
 800ec44:	d9801a04 	addi	r6,sp,104
 800ec48:	d8c02a15 	stw	r3,168(sp)
 800ec4c:	d9c02b15 	stw	r7,172(sp)
 800ec50:	800d93c0 	call	800d93c <__sprint_r.part.0>
 800ec54:	d8c02a17 	ldw	r3,168(sp)
 800ec58:	d9c02b17 	ldw	r7,172(sp)
 800ec5c:	103eb41e 	bne	r2,zero,800e730 <__alt_data_end+0xfc00e730>
 800ec60:	d9001b17 	ldw	r4,108(sp)
 800ec64:	d8801c17 	ldw	r2,112(sp)
 800ec68:	d811883a 	mov	r8,sp
 800ec6c:	21400044 	addi	r5,r4,1
 800ec70:	003e6706 	br	800e610 <__alt_data_end+0xfc00e610>
 800ec74:	00bfffc4 	movi	r2,-1
 800ec78:	003c4a06 	br	800dda4 <__alt_data_end+0xfc00dda4>
 800ec7c:	9805883a 	mov	r2,r19
 800ec80:	003ee806 	br	800e824 <__alt_data_end+0xfc00e824>
 800ec84:	d8c02217 	ldw	r3,136(sp)
 800ec88:	0029883a 	mov	r20,zero
 800ec8c:	18800104 	addi	r2,r3,4
 800ec90:	1cc0000b 	ldhu	r19,0(r3)
 800ec94:	803f9e0e 	bge	r16,zero,800eb10 <__alt_data_end+0xfc00eb10>
 800ec98:	003dd706 	br	800e3f8 <__alt_data_end+0xfc00e3f8>
 800ec9c:	d8c02217 	ldw	r3,136(sp)
 800eca0:	d9002417 	ldw	r4,144(sp)
 800eca4:	18800017 	ldw	r2,0(r3)
 800eca8:	18c00104 	addi	r3,r3,4
 800ecac:	d8c02215 	stw	r3,136(sp)
 800ecb0:	11000015 	stw	r4,0(r2)
 800ecb4:	003b9a06 	br	800db20 <__alt_data_end+0xfc00db20>
 800ecb8:	d8c02217 	ldw	r3,136(sp)
 800ecbc:	0029883a 	mov	r20,zero
 800ecc0:	18800104 	addi	r2,r3,4
 800ecc4:	1cc0000b 	ldhu	r19,0(r3)
 800ecc8:	803db20e 	bge	r16,zero,800e394 <__alt_data_end+0xfc00e394>
 800eccc:	003fb906 	br	800ebb4 <__alt_data_end+0xfc00ebb4>
 800ecd0:	d9002217 	ldw	r4,136(sp)
 800ecd4:	0029883a 	mov	r20,zero
 800ecd8:	24c00017 	ldw	r19,0(r4)
 800ecdc:	21000104 	addi	r4,r4,4
 800ece0:	d9002215 	stw	r4,136(sp)
 800ece4:	003d3206 	br	800e1b0 <__alt_data_end+0xfc00e1b0>
 800ece8:	d8c02217 	ldw	r3,136(sp)
 800ecec:	1cc00017 	ldw	r19,0(r3)
 800ecf0:	18c00104 	addi	r3,r3,4
 800ecf4:	d8c02215 	stw	r3,136(sp)
 800ecf8:	9829d7fa 	srai	r20,r19,31
 800ecfc:	a005883a 	mov	r2,r20
 800ed00:	003d4b06 	br	800e230 <__alt_data_end+0xfc00e230>
 800ed04:	0009883a 	mov	r4,zero
 800ed08:	01400044 	movi	r5,1
 800ed0c:	d811883a 	mov	r8,sp
 800ed10:	003e4f06 	br	800e650 <__alt_data_end+0xfc00e650>
 800ed14:	d8c02215 	stw	r3,136(sp)
 800ed18:	002b883a 	mov	r21,zero
 800ed1c:	003db806 	br	800e400 <__alt_data_end+0xfc00e400>
 800ed20:	d811883a 	mov	r8,sp
 800ed24:	003e9606 	br	800e780 <__alt_data_end+0xfc00e780>
 800ed28:	01020074 	movhi	r4,2049
 800ed2c:	211f4c04 	addi	r4,r4,32048
 800ed30:	d9002315 	stw	r4,140(sp)
 800ed34:	003e6306 	br	800e6c4 <__alt_data_end+0xfc00e6c4>
 800ed38:	b0c00043 	ldbu	r3,1(r22)
 800ed3c:	8c400814 	ori	r17,r17,32
 800ed40:	b5800044 	addi	r22,r22,1
 800ed44:	18c03fcc 	andi	r3,r3,255
 800ed48:	18c0201c 	xori	r3,r3,128
 800ed4c:	18ffe004 	addi	r3,r3,-128
 800ed50:	003b9c06 	br	800dbc4 <__alt_data_end+0xfc00dbc4>
 800ed54:	b809883a 	mov	r4,r23
 800ed58:	da002a15 	stw	r8,168(sp)
 800ed5c:	80029940 	call	8002994 <strlen>
 800ed60:	1029883a 	mov	r20,r2
 800ed64:	dd401d83 	ldbu	r21,118(sp)
 800ed68:	df002215 	stw	fp,136(sp)
 800ed6c:	0021883a 	mov	r16,zero
 800ed70:	da002a17 	ldw	r8,168(sp)
 800ed74:	003c3906 	br	800de5c <__alt_data_end+0xfc00de5c>
 800ed78:	d9402017 	ldw	r5,128(sp)
 800ed7c:	d9002117 	ldw	r4,132(sp)
 800ed80:	d9801a04 	addi	r6,sp,104
 800ed84:	800d93c0 	call	800d93c <__sprint_r.part.0>
 800ed88:	103e691e 	bne	r2,zero,800e730 <__alt_data_end+0xfc00e730>
 800ed8c:	d9001b17 	ldw	r4,108(sp)
 800ed90:	d8801c17 	ldw	r2,112(sp)
 800ed94:	d811883a 	mov	r8,sp
 800ed98:	21400044 	addi	r5,r4,1
 800ed9c:	003e2e06 	br	800e658 <__alt_data_end+0xfc00e658>
 800eda0:	01020074 	movhi	r4,2049
 800eda4:	211f5004 	addi	r4,r4,32064
 800eda8:	d9002315 	stw	r4,140(sp)
 800edac:	d9001b17 	ldw	r4,108(sp)
 800edb0:	21000044 	addi	r4,r4,1
 800edb4:	003c5e06 	br	800df30 <__alt_data_end+0xfc00df30>
 800edb8:	002b883a 	mov	r21,zero
 800edbc:	00800084 	movi	r2,2
 800edc0:	10803fcc 	andi	r2,r2,255
 800edc4:	01000044 	movi	r4,1
 800edc8:	11002b26 	beq	r2,r4,800ee78 <___vfiprintf_internal_r+0x1428>
 800edcc:	01000084 	movi	r4,2
 800edd0:	11002b1e 	bne	r2,r4,800ee80 <___vfiprintf_internal_r+0x1430>
 800edd4:	1823883a 	mov	r17,r3
 800edd8:	003ee506 	br	800e970 <__alt_data_end+0xfc00e970>
 800eddc:	8807883a 	mov	r3,r17
 800ede0:	00800044 	movi	r2,1
 800ede4:	003ff606 	br	800edc0 <__alt_data_end+0xfc00edc0>
 800ede8:	00800184 	movi	r2,6
 800edec:	1400012e 	bgeu	r2,r16,800edf4 <___vfiprintf_internal_r+0x13a4>
 800edf0:	1021883a 	mov	r16,r2
 800edf4:	8029883a 	mov	r20,r16
 800edf8:	8027883a 	mov	r19,r16
 800edfc:	80002216 	blt	r16,zero,800ee88 <___vfiprintf_internal_r+0x1438>
 800ee00:	05c20074 	movhi	r23,2049
 800ee04:	df002215 	stw	fp,136(sp)
 800ee08:	bddee004 	addi	r23,r23,31616
 800ee0c:	003cfb06 	br	800e1fc <__alt_data_end+0xfc00e1fc>
 800ee10:	d9002217 	ldw	r4,136(sp)
 800ee14:	d9402417 	ldw	r5,144(sp)
 800ee18:	20800017 	ldw	r2,0(r4)
 800ee1c:	21000104 	addi	r4,r4,4
 800ee20:	d9002215 	stw	r4,136(sp)
 800ee24:	11400015 	stw	r5,0(r2)
 800ee28:	003b3d06 	br	800db20 <__alt_data_end+0xfc00db20>
 800ee2c:	01420074 	movhi	r5,2049
 800ee30:	295f5004 	addi	r5,r5,32064
 800ee34:	d9402315 	stw	r5,140(sp)
 800ee38:	d9401b17 	ldw	r5,108(sp)
 800ee3c:	29400044 	addi	r5,r5,1
 800ee40:	003e6d06 	br	800e7f8 <__alt_data_end+0xfc00e7f8>
 800ee44:	8029883a 	mov	r20,r16
 800ee48:	dd401d83 	ldbu	r21,118(sp)
 800ee4c:	df002215 	stw	fp,136(sp)
 800ee50:	0021883a 	mov	r16,zero
 800ee54:	003c0106 	br	800de5c <__alt_data_end+0xfc00de5c>
 800ee58:	00c20074 	movhi	r3,2049
 800ee5c:	18df4c04 	addi	r3,r3,32048
 800ee60:	d8c02315 	stw	r3,140(sp)
 800ee64:	280d883a 	mov	r6,r5
 800ee68:	003c6906 	br	800e010 <__alt_data_end+0xfc00e010>
 800ee6c:	802d883a 	mov	r22,r16
 800ee70:	0021883a 	mov	r16,zero
 800ee74:	003b5406 	br	800dbc8 <__alt_data_end+0xfc00dbc8>
 800ee78:	1823883a 	mov	r17,r3
 800ee7c:	003cf306 	br	800e24c <__alt_data_end+0xfc00e24c>
 800ee80:	1823883a 	mov	r17,r3
 800ee84:	003cad06 	br	800e13c <__alt_data_end+0xfc00e13c>
 800ee88:	0027883a 	mov	r19,zero
 800ee8c:	003fdc06 	br	800ee00 <__alt_data_end+0xfc00ee00>
 800ee90:	d9402217 	ldw	r5,136(sp)
 800ee94:	8005883a 	mov	r2,r16
 800ee98:	b0c00043 	ldbu	r3,1(r22)
 800ee9c:	2c000017 	ldw	r16,0(r5)
 800eea0:	29000104 	addi	r4,r5,4
 800eea4:	d9002215 	stw	r4,136(sp)
 800eea8:	102d883a 	mov	r22,r2
 800eeac:	803fa50e 	bge	r16,zero,800ed44 <__alt_data_end+0xfc00ed44>
 800eeb0:	18c03fcc 	andi	r3,r3,255
 800eeb4:	18c0201c 	xori	r3,r3,128
 800eeb8:	043fffc4 	movi	r16,-1
 800eebc:	18ffe004 	addi	r3,r3,-128
 800eec0:	003b4006 	br	800dbc4 <__alt_data_end+0xfc00dbc4>
 800eec4:	d9402303 	ldbu	r5,140(sp)
 800eec8:	d9401d85 	stb	r5,118(sp)
 800eecc:	003cae06 	br	800e188 <__alt_data_end+0xfc00e188>
 800eed0:	d8c02303 	ldbu	r3,140(sp)
 800eed4:	d8c01d85 	stb	r3,118(sp)
 800eed8:	003d1406 	br	800e32c <__alt_data_end+0xfc00e32c>
 800eedc:	d8c02303 	ldbu	r3,140(sp)
 800eee0:	d8c01d85 	stb	r3,118(sp)
 800eee4:	003cca06 	br	800e210 <__alt_data_end+0xfc00e210>
 800eee8:	8880004c 	andi	r2,r17,1
 800eeec:	002b883a 	mov	r21,zero
 800eef0:	10000526 	beq	r2,zero,800ef08 <___vfiprintf_internal_r+0x14b8>
 800eef4:	00800c04 	movi	r2,48
 800eef8:	d88019c5 	stb	r2,103(sp)
 800eefc:	dd002817 	ldw	r20,160(sp)
 800ef00:	ddc019c4 	addi	r23,sp,103
 800ef04:	003bd506 	br	800de5c <__alt_data_end+0xfc00de5c>
 800ef08:	0029883a 	mov	r20,zero
 800ef0c:	ddc01a04 	addi	r23,sp,104
 800ef10:	003bd206 	br	800de5c <__alt_data_end+0xfc00de5c>
 800ef14:	d9002303 	ldbu	r4,140(sp)
 800ef18:	d9001d85 	stb	r4,118(sp)
 800ef1c:	003da606 	br	800e5b8 <__alt_data_end+0xfc00e5b8>
 800ef20:	d8c02303 	ldbu	r3,140(sp)
 800ef24:	d8c01d85 	stb	r3,118(sp)
 800ef28:	003c7606 	br	800e104 <__alt_data_end+0xfc00e104>
 800ef2c:	d8c02303 	ldbu	r3,140(sp)
 800ef30:	d8c01d85 	stb	r3,118(sp)
 800ef34:	003c6506 	br	800e0cc <__alt_data_end+0xfc00e0cc>
 800ef38:	d9002303 	ldbu	r4,140(sp)
 800ef3c:	d9001d85 	stb	r4,118(sp)
 800ef40:	003d3d06 	br	800e438 <__alt_data_end+0xfc00e438>
 800ef44:	d8c02303 	ldbu	r3,140(sp)
 800ef48:	d8c01d85 	stb	r3,118(sp)
 800ef4c:	003d1d06 	br	800e3c4 <__alt_data_end+0xfc00e3c4>
 800ef50:	d8c02303 	ldbu	r3,140(sp)
 800ef54:	d8c01d85 	stb	r3,118(sp)
 800ef58:	003d0306 	br	800e368 <__alt_data_end+0xfc00e368>

0800ef5c <__vfiprintf_internal>:
 800ef5c:	008200b4 	movhi	r2,2050
 800ef60:	10a73d04 	addi	r2,r2,-25356
 800ef64:	300f883a 	mov	r7,r6
 800ef68:	280d883a 	mov	r6,r5
 800ef6c:	200b883a 	mov	r5,r4
 800ef70:	11000017 	ldw	r4,0(r2)
 800ef74:	800da501 	jmpi	800da50 <___vfiprintf_internal_r>

0800ef78 <__sbprintf>:
 800ef78:	2880030b 	ldhu	r2,12(r5)
 800ef7c:	2ac01917 	ldw	r11,100(r5)
 800ef80:	2a80038b 	ldhu	r10,14(r5)
 800ef84:	2a400717 	ldw	r9,28(r5)
 800ef88:	2a000917 	ldw	r8,36(r5)
 800ef8c:	defee204 	addi	sp,sp,-1144
 800ef90:	00c10004 	movi	r3,1024
 800ef94:	dc011a15 	stw	r16,1128(sp)
 800ef98:	10bfff4c 	andi	r2,r2,65533
 800ef9c:	2821883a 	mov	r16,r5
 800efa0:	d8cb883a 	add	r5,sp,r3
 800efa4:	dc811c15 	stw	r18,1136(sp)
 800efa8:	dc411b15 	stw	r17,1132(sp)
 800efac:	dfc11d15 	stw	ra,1140(sp)
 800efb0:	2025883a 	mov	r18,r4
 800efb4:	d881030d 	sth	r2,1036(sp)
 800efb8:	dac11915 	stw	r11,1124(sp)
 800efbc:	da81038d 	sth	r10,1038(sp)
 800efc0:	da410715 	stw	r9,1052(sp)
 800efc4:	da010915 	stw	r8,1060(sp)
 800efc8:	dec10015 	stw	sp,1024(sp)
 800efcc:	dec10415 	stw	sp,1040(sp)
 800efd0:	d8c10215 	stw	r3,1032(sp)
 800efd4:	d8c10515 	stw	r3,1044(sp)
 800efd8:	d8010615 	stw	zero,1048(sp)
 800efdc:	800da500 	call	800da50 <___vfiprintf_internal_r>
 800efe0:	1023883a 	mov	r17,r2
 800efe4:	10000416 	blt	r2,zero,800eff8 <__sbprintf+0x80>
 800efe8:	d9410004 	addi	r5,sp,1024
 800efec:	9009883a 	mov	r4,r18
 800eff0:	8008cbc0 	call	8008cbc <_fflush_r>
 800eff4:	10000d1e 	bne	r2,zero,800f02c <__sbprintf+0xb4>
 800eff8:	d881030b 	ldhu	r2,1036(sp)
 800effc:	1080100c 	andi	r2,r2,64
 800f000:	10000326 	beq	r2,zero,800f010 <__sbprintf+0x98>
 800f004:	8080030b 	ldhu	r2,12(r16)
 800f008:	10801014 	ori	r2,r2,64
 800f00c:	8080030d 	sth	r2,12(r16)
 800f010:	8805883a 	mov	r2,r17
 800f014:	dfc11d17 	ldw	ra,1140(sp)
 800f018:	dc811c17 	ldw	r18,1136(sp)
 800f01c:	dc411b17 	ldw	r17,1132(sp)
 800f020:	dc011a17 	ldw	r16,1128(sp)
 800f024:	dec11e04 	addi	sp,sp,1144
 800f028:	f800283a 	ret
 800f02c:	047fffc4 	movi	r17,-1
 800f030:	003ff106 	br	800eff8 <__alt_data_end+0xfc00eff8>

0800f034 <_write_r>:
 800f034:	defffd04 	addi	sp,sp,-12
 800f038:	2805883a 	mov	r2,r5
 800f03c:	dc000015 	stw	r16,0(sp)
 800f040:	040200b4 	movhi	r16,2050
 800f044:	dc400115 	stw	r17,4(sp)
 800f048:	300b883a 	mov	r5,r6
 800f04c:	842f3604 	addi	r16,r16,-17192
 800f050:	2023883a 	mov	r17,r4
 800f054:	380d883a 	mov	r6,r7
 800f058:	1009883a 	mov	r4,r2
 800f05c:	dfc00215 	stw	ra,8(sp)
 800f060:	80000015 	stw	zero,0(r16)
 800f064:	80137500 	call	8013750 <write>
 800f068:	00ffffc4 	movi	r3,-1
 800f06c:	10c00526 	beq	r2,r3,800f084 <_write_r+0x50>
 800f070:	dfc00217 	ldw	ra,8(sp)
 800f074:	dc400117 	ldw	r17,4(sp)
 800f078:	dc000017 	ldw	r16,0(sp)
 800f07c:	dec00304 	addi	sp,sp,12
 800f080:	f800283a 	ret
 800f084:	80c00017 	ldw	r3,0(r16)
 800f088:	183ff926 	beq	r3,zero,800f070 <__alt_data_end+0xfc00f070>
 800f08c:	88c00015 	stw	r3,0(r17)
 800f090:	003ff706 	br	800f070 <__alt_data_end+0xfc00f070>

0800f094 <_close_r>:
 800f094:	defffd04 	addi	sp,sp,-12
 800f098:	dc000015 	stw	r16,0(sp)
 800f09c:	040200b4 	movhi	r16,2050
 800f0a0:	dc400115 	stw	r17,4(sp)
 800f0a4:	842f3604 	addi	r16,r16,-17192
 800f0a8:	2023883a 	mov	r17,r4
 800f0ac:	2809883a 	mov	r4,r5
 800f0b0:	dfc00215 	stw	ra,8(sp)
 800f0b4:	80000015 	stw	zero,0(r16)
 800f0b8:	8012ec80 	call	8012ec8 <close>
 800f0bc:	00ffffc4 	movi	r3,-1
 800f0c0:	10c00526 	beq	r2,r3,800f0d8 <_close_r+0x44>
 800f0c4:	dfc00217 	ldw	ra,8(sp)
 800f0c8:	dc400117 	ldw	r17,4(sp)
 800f0cc:	dc000017 	ldw	r16,0(sp)
 800f0d0:	dec00304 	addi	sp,sp,12
 800f0d4:	f800283a 	ret
 800f0d8:	80c00017 	ldw	r3,0(r16)
 800f0dc:	183ff926 	beq	r3,zero,800f0c4 <__alt_data_end+0xfc00f0c4>
 800f0e0:	88c00015 	stw	r3,0(r17)
 800f0e4:	003ff706 	br	800f0c4 <__alt_data_end+0xfc00f0c4>

0800f0e8 <_calloc_r>:
 800f0e8:	defffe04 	addi	sp,sp,-8
 800f0ec:	2805883a 	mov	r2,r5
 800f0f0:	dc000015 	stw	r16,0(sp)
 800f0f4:	300b883a 	mov	r5,r6
 800f0f8:	2021883a 	mov	r16,r4
 800f0fc:	1009883a 	mov	r4,r2
 800f100:	dfc00115 	stw	ra,4(sp)
 800f104:	8001b580 	call	8001b58 <__mulsi3>
 800f108:	100b883a 	mov	r5,r2
 800f10c:	8009883a 	mov	r4,r16
 800f110:	8009e140 	call	8009e14 <_malloc_r>
 800f114:	10002926 	beq	r2,zero,800f1bc <_calloc_r+0xd4>
 800f118:	11bfff17 	ldw	r6,-4(r2)
 800f11c:	1021883a 	mov	r16,r2
 800f120:	00bfff04 	movi	r2,-4
 800f124:	308c703a 	and	r6,r6,r2
 800f128:	00c00904 	movi	r3,36
 800f12c:	308d883a 	add	r6,r6,r2
 800f130:	19801636 	bltu	r3,r6,800f18c <_calloc_r+0xa4>
 800f134:	008004c4 	movi	r2,19
 800f138:	11800b2e 	bgeu	r2,r6,800f168 <_calloc_r+0x80>
 800f13c:	80000015 	stw	zero,0(r16)
 800f140:	80000115 	stw	zero,4(r16)
 800f144:	008006c4 	movi	r2,27
 800f148:	11801a2e 	bgeu	r2,r6,800f1b4 <_calloc_r+0xcc>
 800f14c:	80000215 	stw	zero,8(r16)
 800f150:	80000315 	stw	zero,12(r16)
 800f154:	30c0151e 	bne	r6,r3,800f1ac <_calloc_r+0xc4>
 800f158:	80000415 	stw	zero,16(r16)
 800f15c:	80800604 	addi	r2,r16,24
 800f160:	80000515 	stw	zero,20(r16)
 800f164:	00000106 	br	800f16c <_calloc_r+0x84>
 800f168:	8005883a 	mov	r2,r16
 800f16c:	10000015 	stw	zero,0(r2)
 800f170:	10000115 	stw	zero,4(r2)
 800f174:	10000215 	stw	zero,8(r2)
 800f178:	8005883a 	mov	r2,r16
 800f17c:	dfc00117 	ldw	ra,4(sp)
 800f180:	dc000017 	ldw	r16,0(sp)
 800f184:	dec00204 	addi	sp,sp,8
 800f188:	f800283a 	ret
 800f18c:	000b883a 	mov	r5,zero
 800f190:	8009883a 	mov	r4,r16
 800f194:	800a9a80 	call	800a9a8 <memset>
 800f198:	8005883a 	mov	r2,r16
 800f19c:	dfc00117 	ldw	ra,4(sp)
 800f1a0:	dc000017 	ldw	r16,0(sp)
 800f1a4:	dec00204 	addi	sp,sp,8
 800f1a8:	f800283a 	ret
 800f1ac:	80800404 	addi	r2,r16,16
 800f1b0:	003fee06 	br	800f16c <__alt_data_end+0xfc00f16c>
 800f1b4:	80800204 	addi	r2,r16,8
 800f1b8:	003fec06 	br	800f16c <__alt_data_end+0xfc00f16c>
 800f1bc:	0005883a 	mov	r2,zero
 800f1c0:	003fee06 	br	800f17c <__alt_data_end+0xfc00f17c>

0800f1c4 <_fclose_r>:
 800f1c4:	28003926 	beq	r5,zero,800f2ac <_fclose_r+0xe8>
 800f1c8:	defffc04 	addi	sp,sp,-16
 800f1cc:	dc400115 	stw	r17,4(sp)
 800f1d0:	dc000015 	stw	r16,0(sp)
 800f1d4:	dfc00315 	stw	ra,12(sp)
 800f1d8:	dc800215 	stw	r18,8(sp)
 800f1dc:	2023883a 	mov	r17,r4
 800f1e0:	2821883a 	mov	r16,r5
 800f1e4:	20000226 	beq	r4,zero,800f1f0 <_fclose_r+0x2c>
 800f1e8:	20800e17 	ldw	r2,56(r4)
 800f1ec:	10002726 	beq	r2,zero,800f28c <_fclose_r+0xc8>
 800f1f0:	8080030f 	ldh	r2,12(r16)
 800f1f4:	1000071e 	bne	r2,zero,800f214 <_fclose_r+0x50>
 800f1f8:	0005883a 	mov	r2,zero
 800f1fc:	dfc00317 	ldw	ra,12(sp)
 800f200:	dc800217 	ldw	r18,8(sp)
 800f204:	dc400117 	ldw	r17,4(sp)
 800f208:	dc000017 	ldw	r16,0(sp)
 800f20c:	dec00404 	addi	sp,sp,16
 800f210:	f800283a 	ret
 800f214:	800b883a 	mov	r5,r16
 800f218:	8809883a 	mov	r4,r17
 800f21c:	8008aa00 	call	8008aa0 <__sflush_r>
 800f220:	1025883a 	mov	r18,r2
 800f224:	80800b17 	ldw	r2,44(r16)
 800f228:	10000426 	beq	r2,zero,800f23c <_fclose_r+0x78>
 800f22c:	81400717 	ldw	r5,28(r16)
 800f230:	8809883a 	mov	r4,r17
 800f234:	103ee83a 	callr	r2
 800f238:	10001616 	blt	r2,zero,800f294 <_fclose_r+0xd0>
 800f23c:	8080030b 	ldhu	r2,12(r16)
 800f240:	1080200c 	andi	r2,r2,128
 800f244:	1000151e 	bne	r2,zero,800f29c <_fclose_r+0xd8>
 800f248:	81400c17 	ldw	r5,48(r16)
 800f24c:	28000526 	beq	r5,zero,800f264 <_fclose_r+0xa0>
 800f250:	80801004 	addi	r2,r16,64
 800f254:	28800226 	beq	r5,r2,800f260 <_fclose_r+0x9c>
 800f258:	8809883a 	mov	r4,r17
 800f25c:	800921c0 	call	800921c <_free_r>
 800f260:	80000c15 	stw	zero,48(r16)
 800f264:	81401117 	ldw	r5,68(r16)
 800f268:	28000326 	beq	r5,zero,800f278 <_fclose_r+0xb4>
 800f26c:	8809883a 	mov	r4,r17
 800f270:	800921c0 	call	800921c <_free_r>
 800f274:	80001115 	stw	zero,68(r16)
 800f278:	80090b80 	call	80090b8 <__sfp_lock_acquire>
 800f27c:	8000030d 	sth	zero,12(r16)
 800f280:	80090bc0 	call	80090bc <__sfp_lock_release>
 800f284:	9005883a 	mov	r2,r18
 800f288:	003fdc06 	br	800f1fc <__alt_data_end+0xfc00f1fc>
 800f28c:	80090a80 	call	80090a8 <__sinit>
 800f290:	003fd706 	br	800f1f0 <__alt_data_end+0xfc00f1f0>
 800f294:	04bfffc4 	movi	r18,-1
 800f298:	003fe806 	br	800f23c <__alt_data_end+0xfc00f23c>
 800f29c:	81400417 	ldw	r5,16(r16)
 800f2a0:	8809883a 	mov	r4,r17
 800f2a4:	800921c0 	call	800921c <_free_r>
 800f2a8:	003fe706 	br	800f248 <__alt_data_end+0xfc00f248>
 800f2ac:	0005883a 	mov	r2,zero
 800f2b0:	f800283a 	ret

0800f2b4 <fclose>:
 800f2b4:	008200b4 	movhi	r2,2050
 800f2b8:	10a73d04 	addi	r2,r2,-25356
 800f2bc:	200b883a 	mov	r5,r4
 800f2c0:	11000017 	ldw	r4,0(r2)
 800f2c4:	800f1c41 	jmpi	800f1c4 <_fclose_r>

0800f2c8 <__fputwc>:
 800f2c8:	defff804 	addi	sp,sp,-32
 800f2cc:	dcc00415 	stw	r19,16(sp)
 800f2d0:	dc800315 	stw	r18,12(sp)
 800f2d4:	dc000115 	stw	r16,4(sp)
 800f2d8:	dfc00715 	stw	ra,28(sp)
 800f2dc:	dd400615 	stw	r21,24(sp)
 800f2e0:	dd000515 	stw	r20,20(sp)
 800f2e4:	dc400215 	stw	r17,8(sp)
 800f2e8:	2027883a 	mov	r19,r4
 800f2ec:	2825883a 	mov	r18,r5
 800f2f0:	3021883a 	mov	r16,r6
 800f2f4:	8009c040 	call	8009c04 <__locale_mb_cur_max>
 800f2f8:	00c00044 	movi	r3,1
 800f2fc:	10c03e26 	beq	r2,r3,800f3f8 <__fputwc+0x130>
 800f300:	81c01704 	addi	r7,r16,92
 800f304:	900d883a 	mov	r6,r18
 800f308:	d80b883a 	mov	r5,sp
 800f30c:	9809883a 	mov	r4,r19
 800f310:	800f7980 	call	800f798 <_wcrtomb_r>
 800f314:	1029883a 	mov	r20,r2
 800f318:	00bfffc4 	movi	r2,-1
 800f31c:	a0802026 	beq	r20,r2,800f3a0 <__fputwc+0xd8>
 800f320:	d9400003 	ldbu	r5,0(sp)
 800f324:	a0001c26 	beq	r20,zero,800f398 <__fputwc+0xd0>
 800f328:	0023883a 	mov	r17,zero
 800f32c:	05400284 	movi	r21,10
 800f330:	00000906 	br	800f358 <__fputwc+0x90>
 800f334:	80800017 	ldw	r2,0(r16)
 800f338:	11400005 	stb	r5,0(r2)
 800f33c:	80c00017 	ldw	r3,0(r16)
 800f340:	18c00044 	addi	r3,r3,1
 800f344:	80c00015 	stw	r3,0(r16)
 800f348:	8c400044 	addi	r17,r17,1
 800f34c:	dc45883a 	add	r2,sp,r17
 800f350:	8d00112e 	bgeu	r17,r20,800f398 <__fputwc+0xd0>
 800f354:	11400003 	ldbu	r5,0(r2)
 800f358:	80c00217 	ldw	r3,8(r16)
 800f35c:	18ffffc4 	addi	r3,r3,-1
 800f360:	80c00215 	stw	r3,8(r16)
 800f364:	183ff30e 	bge	r3,zero,800f334 <__alt_data_end+0xfc00f334>
 800f368:	80800617 	ldw	r2,24(r16)
 800f36c:	18801916 	blt	r3,r2,800f3d4 <__fputwc+0x10c>
 800f370:	80800017 	ldw	r2,0(r16)
 800f374:	11400005 	stb	r5,0(r2)
 800f378:	80800017 	ldw	r2,0(r16)
 800f37c:	10c00003 	ldbu	r3,0(r2)
 800f380:	10800044 	addi	r2,r2,1
 800f384:	1d402326 	beq	r3,r21,800f414 <__fputwc+0x14c>
 800f388:	80800015 	stw	r2,0(r16)
 800f38c:	8c400044 	addi	r17,r17,1
 800f390:	dc45883a 	add	r2,sp,r17
 800f394:	8d3fef36 	bltu	r17,r20,800f354 <__alt_data_end+0xfc00f354>
 800f398:	9005883a 	mov	r2,r18
 800f39c:	00000406 	br	800f3b0 <__fputwc+0xe8>
 800f3a0:	80c0030b 	ldhu	r3,12(r16)
 800f3a4:	a005883a 	mov	r2,r20
 800f3a8:	18c01014 	ori	r3,r3,64
 800f3ac:	80c0030d 	sth	r3,12(r16)
 800f3b0:	dfc00717 	ldw	ra,28(sp)
 800f3b4:	dd400617 	ldw	r21,24(sp)
 800f3b8:	dd000517 	ldw	r20,20(sp)
 800f3bc:	dcc00417 	ldw	r19,16(sp)
 800f3c0:	dc800317 	ldw	r18,12(sp)
 800f3c4:	dc400217 	ldw	r17,8(sp)
 800f3c8:	dc000117 	ldw	r16,4(sp)
 800f3cc:	dec00804 	addi	sp,sp,32
 800f3d0:	f800283a 	ret
 800f3d4:	800d883a 	mov	r6,r16
 800f3d8:	29403fcc 	andi	r5,r5,255
 800f3dc:	9809883a 	mov	r4,r19
 800f3e0:	800f6400 	call	800f640 <__swbuf_r>
 800f3e4:	10bfffe0 	cmpeqi	r2,r2,-1
 800f3e8:	10803fcc 	andi	r2,r2,255
 800f3ec:	103fd626 	beq	r2,zero,800f348 <__alt_data_end+0xfc00f348>
 800f3f0:	00bfffc4 	movi	r2,-1
 800f3f4:	003fee06 	br	800f3b0 <__alt_data_end+0xfc00f3b0>
 800f3f8:	90ffffc4 	addi	r3,r18,-1
 800f3fc:	01003f84 	movi	r4,254
 800f400:	20ffbf36 	bltu	r4,r3,800f300 <__alt_data_end+0xfc00f300>
 800f404:	900b883a 	mov	r5,r18
 800f408:	dc800005 	stb	r18,0(sp)
 800f40c:	1029883a 	mov	r20,r2
 800f410:	003fc506 	br	800f328 <__alt_data_end+0xfc00f328>
 800f414:	800d883a 	mov	r6,r16
 800f418:	a80b883a 	mov	r5,r21
 800f41c:	9809883a 	mov	r4,r19
 800f420:	800f6400 	call	800f640 <__swbuf_r>
 800f424:	10bfffe0 	cmpeqi	r2,r2,-1
 800f428:	003fef06 	br	800f3e8 <__alt_data_end+0xfc00f3e8>

0800f42c <_fputwc_r>:
 800f42c:	3080030b 	ldhu	r2,12(r6)
 800f430:	10c8000c 	andi	r3,r2,8192
 800f434:	1800051e 	bne	r3,zero,800f44c <_fputwc_r+0x20>
 800f438:	30c01917 	ldw	r3,100(r6)
 800f43c:	10880014 	ori	r2,r2,8192
 800f440:	3080030d 	sth	r2,12(r6)
 800f444:	18880014 	ori	r2,r3,8192
 800f448:	30801915 	stw	r2,100(r6)
 800f44c:	800f2c81 	jmpi	800f2c8 <__fputwc>

0800f450 <fputwc>:
 800f450:	008200b4 	movhi	r2,2050
 800f454:	defffc04 	addi	sp,sp,-16
 800f458:	10a73d04 	addi	r2,r2,-25356
 800f45c:	dc000115 	stw	r16,4(sp)
 800f460:	14000017 	ldw	r16,0(r2)
 800f464:	dc400215 	stw	r17,8(sp)
 800f468:	dfc00315 	stw	ra,12(sp)
 800f46c:	2023883a 	mov	r17,r4
 800f470:	80000226 	beq	r16,zero,800f47c <fputwc+0x2c>
 800f474:	80800e17 	ldw	r2,56(r16)
 800f478:	10001026 	beq	r2,zero,800f4bc <fputwc+0x6c>
 800f47c:	2880030b 	ldhu	r2,12(r5)
 800f480:	10c8000c 	andi	r3,r2,8192
 800f484:	1800051e 	bne	r3,zero,800f49c <fputwc+0x4c>
 800f488:	28c01917 	ldw	r3,100(r5)
 800f48c:	10880014 	ori	r2,r2,8192
 800f490:	2880030d 	sth	r2,12(r5)
 800f494:	18880014 	ori	r2,r3,8192
 800f498:	28801915 	stw	r2,100(r5)
 800f49c:	280d883a 	mov	r6,r5
 800f4a0:	8009883a 	mov	r4,r16
 800f4a4:	880b883a 	mov	r5,r17
 800f4a8:	dfc00317 	ldw	ra,12(sp)
 800f4ac:	dc400217 	ldw	r17,8(sp)
 800f4b0:	dc000117 	ldw	r16,4(sp)
 800f4b4:	dec00404 	addi	sp,sp,16
 800f4b8:	800f2c81 	jmpi	800f2c8 <__fputwc>
 800f4bc:	8009883a 	mov	r4,r16
 800f4c0:	d9400015 	stw	r5,0(sp)
 800f4c4:	80090a80 	call	80090a8 <__sinit>
 800f4c8:	d9400017 	ldw	r5,0(sp)
 800f4cc:	003feb06 	br	800f47c <__alt_data_end+0xfc00f47c>

0800f4d0 <_fstat_r>:
 800f4d0:	defffd04 	addi	sp,sp,-12
 800f4d4:	2805883a 	mov	r2,r5
 800f4d8:	dc000015 	stw	r16,0(sp)
 800f4dc:	040200b4 	movhi	r16,2050
 800f4e0:	dc400115 	stw	r17,4(sp)
 800f4e4:	842f3604 	addi	r16,r16,-17192
 800f4e8:	2023883a 	mov	r17,r4
 800f4ec:	300b883a 	mov	r5,r6
 800f4f0:	1009883a 	mov	r4,r2
 800f4f4:	dfc00215 	stw	ra,8(sp)
 800f4f8:	80000015 	stw	zero,0(r16)
 800f4fc:	80130080 	call	8013008 <fstat>
 800f500:	00ffffc4 	movi	r3,-1
 800f504:	10c00526 	beq	r2,r3,800f51c <_fstat_r+0x4c>
 800f508:	dfc00217 	ldw	ra,8(sp)
 800f50c:	dc400117 	ldw	r17,4(sp)
 800f510:	dc000017 	ldw	r16,0(sp)
 800f514:	dec00304 	addi	sp,sp,12
 800f518:	f800283a 	ret
 800f51c:	80c00017 	ldw	r3,0(r16)
 800f520:	183ff926 	beq	r3,zero,800f508 <__alt_data_end+0xfc00f508>
 800f524:	88c00015 	stw	r3,0(r17)
 800f528:	003ff706 	br	800f508 <__alt_data_end+0xfc00f508>

0800f52c <_isatty_r>:
 800f52c:	defffd04 	addi	sp,sp,-12
 800f530:	dc000015 	stw	r16,0(sp)
 800f534:	040200b4 	movhi	r16,2050
 800f538:	dc400115 	stw	r17,4(sp)
 800f53c:	842f3604 	addi	r16,r16,-17192
 800f540:	2023883a 	mov	r17,r4
 800f544:	2809883a 	mov	r4,r5
 800f548:	dfc00215 	stw	ra,8(sp)
 800f54c:	80000015 	stw	zero,0(r16)
 800f550:	80130fc0 	call	80130fc <isatty>
 800f554:	00ffffc4 	movi	r3,-1
 800f558:	10c00526 	beq	r2,r3,800f570 <_isatty_r+0x44>
 800f55c:	dfc00217 	ldw	ra,8(sp)
 800f560:	dc400117 	ldw	r17,4(sp)
 800f564:	dc000017 	ldw	r16,0(sp)
 800f568:	dec00304 	addi	sp,sp,12
 800f56c:	f800283a 	ret
 800f570:	80c00017 	ldw	r3,0(r16)
 800f574:	183ff926 	beq	r3,zero,800f55c <__alt_data_end+0xfc00f55c>
 800f578:	88c00015 	stw	r3,0(r17)
 800f57c:	003ff706 	br	800f55c <__alt_data_end+0xfc00f55c>

0800f580 <_lseek_r>:
 800f580:	defffd04 	addi	sp,sp,-12
 800f584:	2805883a 	mov	r2,r5
 800f588:	dc000015 	stw	r16,0(sp)
 800f58c:	040200b4 	movhi	r16,2050
 800f590:	dc400115 	stw	r17,4(sp)
 800f594:	300b883a 	mov	r5,r6
 800f598:	842f3604 	addi	r16,r16,-17192
 800f59c:	2023883a 	mov	r17,r4
 800f5a0:	380d883a 	mov	r6,r7
 800f5a4:	1009883a 	mov	r4,r2
 800f5a8:	dfc00215 	stw	ra,8(sp)
 800f5ac:	80000015 	stw	zero,0(r16)
 800f5b0:	80132d00 	call	80132d0 <lseek>
 800f5b4:	00ffffc4 	movi	r3,-1
 800f5b8:	10c00526 	beq	r2,r3,800f5d0 <_lseek_r+0x50>
 800f5bc:	dfc00217 	ldw	ra,8(sp)
 800f5c0:	dc400117 	ldw	r17,4(sp)
 800f5c4:	dc000017 	ldw	r16,0(sp)
 800f5c8:	dec00304 	addi	sp,sp,12
 800f5cc:	f800283a 	ret
 800f5d0:	80c00017 	ldw	r3,0(r16)
 800f5d4:	183ff926 	beq	r3,zero,800f5bc <__alt_data_end+0xfc00f5bc>
 800f5d8:	88c00015 	stw	r3,0(r17)
 800f5dc:	003ff706 	br	800f5bc <__alt_data_end+0xfc00f5bc>

0800f5e0 <_read_r>:
 800f5e0:	defffd04 	addi	sp,sp,-12
 800f5e4:	2805883a 	mov	r2,r5
 800f5e8:	dc000015 	stw	r16,0(sp)
 800f5ec:	040200b4 	movhi	r16,2050
 800f5f0:	dc400115 	stw	r17,4(sp)
 800f5f4:	300b883a 	mov	r5,r6
 800f5f8:	842f3604 	addi	r16,r16,-17192
 800f5fc:	2023883a 	mov	r17,r4
 800f600:	380d883a 	mov	r6,r7
 800f604:	1009883a 	mov	r4,r2
 800f608:	dfc00215 	stw	ra,8(sp)
 800f60c:	80000015 	stw	zero,0(r16)
 800f610:	80134ac0 	call	80134ac <read>
 800f614:	00ffffc4 	movi	r3,-1
 800f618:	10c00526 	beq	r2,r3,800f630 <_read_r+0x50>
 800f61c:	dfc00217 	ldw	ra,8(sp)
 800f620:	dc400117 	ldw	r17,4(sp)
 800f624:	dc000017 	ldw	r16,0(sp)
 800f628:	dec00304 	addi	sp,sp,12
 800f62c:	f800283a 	ret
 800f630:	80c00017 	ldw	r3,0(r16)
 800f634:	183ff926 	beq	r3,zero,800f61c <__alt_data_end+0xfc00f61c>
 800f638:	88c00015 	stw	r3,0(r17)
 800f63c:	003ff706 	br	800f61c <__alt_data_end+0xfc00f61c>

0800f640 <__swbuf_r>:
 800f640:	defffb04 	addi	sp,sp,-20
 800f644:	dcc00315 	stw	r19,12(sp)
 800f648:	dc800215 	stw	r18,8(sp)
 800f64c:	dc000015 	stw	r16,0(sp)
 800f650:	dfc00415 	stw	ra,16(sp)
 800f654:	dc400115 	stw	r17,4(sp)
 800f658:	2025883a 	mov	r18,r4
 800f65c:	2827883a 	mov	r19,r5
 800f660:	3021883a 	mov	r16,r6
 800f664:	20000226 	beq	r4,zero,800f670 <__swbuf_r+0x30>
 800f668:	20800e17 	ldw	r2,56(r4)
 800f66c:	10004226 	beq	r2,zero,800f778 <__swbuf_r+0x138>
 800f670:	80800617 	ldw	r2,24(r16)
 800f674:	8100030b 	ldhu	r4,12(r16)
 800f678:	80800215 	stw	r2,8(r16)
 800f67c:	2080020c 	andi	r2,r4,8
 800f680:	10003626 	beq	r2,zero,800f75c <__swbuf_r+0x11c>
 800f684:	80c00417 	ldw	r3,16(r16)
 800f688:	18003426 	beq	r3,zero,800f75c <__swbuf_r+0x11c>
 800f68c:	2088000c 	andi	r2,r4,8192
 800f690:	9c403fcc 	andi	r17,r19,255
 800f694:	10001a26 	beq	r2,zero,800f700 <__swbuf_r+0xc0>
 800f698:	80800017 	ldw	r2,0(r16)
 800f69c:	81000517 	ldw	r4,20(r16)
 800f6a0:	10c7c83a 	sub	r3,r2,r3
 800f6a4:	1900200e 	bge	r3,r4,800f728 <__swbuf_r+0xe8>
 800f6a8:	18c00044 	addi	r3,r3,1
 800f6ac:	81000217 	ldw	r4,8(r16)
 800f6b0:	11400044 	addi	r5,r2,1
 800f6b4:	81400015 	stw	r5,0(r16)
 800f6b8:	213fffc4 	addi	r4,r4,-1
 800f6bc:	81000215 	stw	r4,8(r16)
 800f6c0:	14c00005 	stb	r19,0(r2)
 800f6c4:	80800517 	ldw	r2,20(r16)
 800f6c8:	10c01e26 	beq	r2,r3,800f744 <__swbuf_r+0x104>
 800f6cc:	8080030b 	ldhu	r2,12(r16)
 800f6d0:	1080004c 	andi	r2,r2,1
 800f6d4:	10000226 	beq	r2,zero,800f6e0 <__swbuf_r+0xa0>
 800f6d8:	00800284 	movi	r2,10
 800f6dc:	88801926 	beq	r17,r2,800f744 <__swbuf_r+0x104>
 800f6e0:	8805883a 	mov	r2,r17
 800f6e4:	dfc00417 	ldw	ra,16(sp)
 800f6e8:	dcc00317 	ldw	r19,12(sp)
 800f6ec:	dc800217 	ldw	r18,8(sp)
 800f6f0:	dc400117 	ldw	r17,4(sp)
 800f6f4:	dc000017 	ldw	r16,0(sp)
 800f6f8:	dec00504 	addi	sp,sp,20
 800f6fc:	f800283a 	ret
 800f700:	81401917 	ldw	r5,100(r16)
 800f704:	00b7ffc4 	movi	r2,-8193
 800f708:	21080014 	ori	r4,r4,8192
 800f70c:	2884703a 	and	r2,r5,r2
 800f710:	80801915 	stw	r2,100(r16)
 800f714:	80800017 	ldw	r2,0(r16)
 800f718:	8100030d 	sth	r4,12(r16)
 800f71c:	81000517 	ldw	r4,20(r16)
 800f720:	10c7c83a 	sub	r3,r2,r3
 800f724:	193fe016 	blt	r3,r4,800f6a8 <__alt_data_end+0xfc00f6a8>
 800f728:	800b883a 	mov	r5,r16
 800f72c:	9009883a 	mov	r4,r18
 800f730:	8008cbc0 	call	8008cbc <_fflush_r>
 800f734:	1000071e 	bne	r2,zero,800f754 <__swbuf_r+0x114>
 800f738:	80800017 	ldw	r2,0(r16)
 800f73c:	00c00044 	movi	r3,1
 800f740:	003fda06 	br	800f6ac <__alt_data_end+0xfc00f6ac>
 800f744:	800b883a 	mov	r5,r16
 800f748:	9009883a 	mov	r4,r18
 800f74c:	8008cbc0 	call	8008cbc <_fflush_r>
 800f750:	103fe326 	beq	r2,zero,800f6e0 <__alt_data_end+0xfc00f6e0>
 800f754:	00bfffc4 	movi	r2,-1
 800f758:	003fe206 	br	800f6e4 <__alt_data_end+0xfc00f6e4>
 800f75c:	800b883a 	mov	r5,r16
 800f760:	9009883a 	mov	r4,r18
 800f764:	800709c0 	call	800709c <__swsetup_r>
 800f768:	103ffa1e 	bne	r2,zero,800f754 <__alt_data_end+0xfc00f754>
 800f76c:	8100030b 	ldhu	r4,12(r16)
 800f770:	80c00417 	ldw	r3,16(r16)
 800f774:	003fc506 	br	800f68c <__alt_data_end+0xfc00f68c>
 800f778:	80090a80 	call	80090a8 <__sinit>
 800f77c:	003fbc06 	br	800f670 <__alt_data_end+0xfc00f670>

0800f780 <__swbuf>:
 800f780:	008200b4 	movhi	r2,2050
 800f784:	10a73d04 	addi	r2,r2,-25356
 800f788:	280d883a 	mov	r6,r5
 800f78c:	200b883a 	mov	r5,r4
 800f790:	11000017 	ldw	r4,0(r2)
 800f794:	800f6401 	jmpi	800f640 <__swbuf_r>

0800f798 <_wcrtomb_r>:
 800f798:	defff604 	addi	sp,sp,-40
 800f79c:	008200b4 	movhi	r2,2050
 800f7a0:	dc800815 	stw	r18,32(sp)
 800f7a4:	dc400715 	stw	r17,28(sp)
 800f7a8:	dc000615 	stw	r16,24(sp)
 800f7ac:	10a74104 	addi	r2,r2,-25340
 800f7b0:	dfc00915 	stw	ra,36(sp)
 800f7b4:	2021883a 	mov	r16,r4
 800f7b8:	3823883a 	mov	r17,r7
 800f7bc:	14800017 	ldw	r18,0(r2)
 800f7c0:	28001426 	beq	r5,zero,800f814 <_wcrtomb_r+0x7c>
 800f7c4:	d9400415 	stw	r5,16(sp)
 800f7c8:	d9800515 	stw	r6,20(sp)
 800f7cc:	8009bf80 	call	8009bf8 <__locale_charset>
 800f7d0:	d9800517 	ldw	r6,20(sp)
 800f7d4:	d9400417 	ldw	r5,16(sp)
 800f7d8:	100f883a 	mov	r7,r2
 800f7dc:	dc400015 	stw	r17,0(sp)
 800f7e0:	8009883a 	mov	r4,r16
 800f7e4:	903ee83a 	callr	r18
 800f7e8:	00ffffc4 	movi	r3,-1
 800f7ec:	10c0031e 	bne	r2,r3,800f7fc <_wcrtomb_r+0x64>
 800f7f0:	88000015 	stw	zero,0(r17)
 800f7f4:	00c02284 	movi	r3,138
 800f7f8:	80c00015 	stw	r3,0(r16)
 800f7fc:	dfc00917 	ldw	ra,36(sp)
 800f800:	dc800817 	ldw	r18,32(sp)
 800f804:	dc400717 	ldw	r17,28(sp)
 800f808:	dc000617 	ldw	r16,24(sp)
 800f80c:	dec00a04 	addi	sp,sp,40
 800f810:	f800283a 	ret
 800f814:	8009bf80 	call	8009bf8 <__locale_charset>
 800f818:	100f883a 	mov	r7,r2
 800f81c:	dc400015 	stw	r17,0(sp)
 800f820:	000d883a 	mov	r6,zero
 800f824:	d9400104 	addi	r5,sp,4
 800f828:	8009883a 	mov	r4,r16
 800f82c:	903ee83a 	callr	r18
 800f830:	003fed06 	br	800f7e8 <__alt_data_end+0xfc00f7e8>

0800f834 <wcrtomb>:
 800f834:	defff604 	addi	sp,sp,-40
 800f838:	008200b4 	movhi	r2,2050
 800f83c:	dc800615 	stw	r18,24(sp)
 800f840:	dc400515 	stw	r17,20(sp)
 800f844:	10a73d04 	addi	r2,r2,-25356
 800f848:	dfc00915 	stw	ra,36(sp)
 800f84c:	dd000815 	stw	r20,32(sp)
 800f850:	dcc00715 	stw	r19,28(sp)
 800f854:	dc000415 	stw	r16,16(sp)
 800f858:	3025883a 	mov	r18,r6
 800f85c:	14400017 	ldw	r17,0(r2)
 800f860:	20001926 	beq	r4,zero,800f8c8 <wcrtomb+0x94>
 800f864:	008200b4 	movhi	r2,2050
 800f868:	10a74104 	addi	r2,r2,-25340
 800f86c:	15000017 	ldw	r20,0(r2)
 800f870:	2021883a 	mov	r16,r4
 800f874:	2827883a 	mov	r19,r5
 800f878:	8009bf80 	call	8009bf8 <__locale_charset>
 800f87c:	100f883a 	mov	r7,r2
 800f880:	dc800015 	stw	r18,0(sp)
 800f884:	980d883a 	mov	r6,r19
 800f888:	800b883a 	mov	r5,r16
 800f88c:	8809883a 	mov	r4,r17
 800f890:	a03ee83a 	callr	r20
 800f894:	00ffffc4 	movi	r3,-1
 800f898:	10c0031e 	bne	r2,r3,800f8a8 <wcrtomb+0x74>
 800f89c:	90000015 	stw	zero,0(r18)
 800f8a0:	00c02284 	movi	r3,138
 800f8a4:	88c00015 	stw	r3,0(r17)
 800f8a8:	dfc00917 	ldw	ra,36(sp)
 800f8ac:	dd000817 	ldw	r20,32(sp)
 800f8b0:	dcc00717 	ldw	r19,28(sp)
 800f8b4:	dc800617 	ldw	r18,24(sp)
 800f8b8:	dc400517 	ldw	r17,20(sp)
 800f8bc:	dc000417 	ldw	r16,16(sp)
 800f8c0:	dec00a04 	addi	sp,sp,40
 800f8c4:	f800283a 	ret
 800f8c8:	008200b4 	movhi	r2,2050
 800f8cc:	10a74104 	addi	r2,r2,-25340
 800f8d0:	14000017 	ldw	r16,0(r2)
 800f8d4:	8009bf80 	call	8009bf8 <__locale_charset>
 800f8d8:	100f883a 	mov	r7,r2
 800f8dc:	dc800015 	stw	r18,0(sp)
 800f8e0:	000d883a 	mov	r6,zero
 800f8e4:	d9400104 	addi	r5,sp,4
 800f8e8:	8809883a 	mov	r4,r17
 800f8ec:	803ee83a 	callr	r16
 800f8f0:	003fe806 	br	800f894 <__alt_data_end+0xfc00f894>

0800f8f4 <__ascii_wctomb>:
 800f8f4:	28000526 	beq	r5,zero,800f90c <__ascii_wctomb+0x18>
 800f8f8:	00803fc4 	movi	r2,255
 800f8fc:	11800536 	bltu	r2,r6,800f914 <__ascii_wctomb+0x20>
 800f900:	29800005 	stb	r6,0(r5)
 800f904:	00800044 	movi	r2,1
 800f908:	f800283a 	ret
 800f90c:	0005883a 	mov	r2,zero
 800f910:	f800283a 	ret
 800f914:	00802284 	movi	r2,138
 800f918:	20800015 	stw	r2,0(r4)
 800f91c:	00bfffc4 	movi	r2,-1
 800f920:	f800283a 	ret

0800f924 <_wctomb_r>:
 800f924:	008200b4 	movhi	r2,2050
 800f928:	defff904 	addi	sp,sp,-28
 800f92c:	10a74104 	addi	r2,r2,-25340
 800f930:	dfc00615 	stw	ra,24(sp)
 800f934:	dc400515 	stw	r17,20(sp)
 800f938:	dc000415 	stw	r16,16(sp)
 800f93c:	3823883a 	mov	r17,r7
 800f940:	14000017 	ldw	r16,0(r2)
 800f944:	d9000115 	stw	r4,4(sp)
 800f948:	d9400215 	stw	r5,8(sp)
 800f94c:	d9800315 	stw	r6,12(sp)
 800f950:	8009bf80 	call	8009bf8 <__locale_charset>
 800f954:	d9800317 	ldw	r6,12(sp)
 800f958:	d9400217 	ldw	r5,8(sp)
 800f95c:	d9000117 	ldw	r4,4(sp)
 800f960:	100f883a 	mov	r7,r2
 800f964:	dc400015 	stw	r17,0(sp)
 800f968:	803ee83a 	callr	r16
 800f96c:	dfc00617 	ldw	ra,24(sp)
 800f970:	dc400517 	ldw	r17,20(sp)
 800f974:	dc000417 	ldw	r16,16(sp)
 800f978:	dec00704 	addi	sp,sp,28
 800f97c:	f800283a 	ret

0800f980 <__muldi3>:
 800f980:	defff604 	addi	sp,sp,-40
 800f984:	dd800615 	stw	r22,24(sp)
 800f988:	dd400515 	stw	r21,20(sp)
 800f98c:	dc400115 	stw	r17,4(sp)
 800f990:	357fffcc 	andi	r21,r6,65535
 800f994:	2022d43a 	srli	r17,r4,16
 800f998:	25bfffcc 	andi	r22,r4,65535
 800f99c:	dcc00315 	stw	r19,12(sp)
 800f9a0:	dc800215 	stw	r18,8(sp)
 800f9a4:	2027883a 	mov	r19,r4
 800f9a8:	2825883a 	mov	r18,r5
 800f9ac:	b009883a 	mov	r4,r22
 800f9b0:	a80b883a 	mov	r5,r21
 800f9b4:	dfc00915 	stw	ra,36(sp)
 800f9b8:	df000815 	stw	fp,32(sp)
 800f9bc:	ddc00715 	stw	r23,28(sp)
 800f9c0:	3839883a 	mov	fp,r7
 800f9c4:	302ed43a 	srli	r23,r6,16
 800f9c8:	dd000415 	stw	r20,16(sp)
 800f9cc:	dc000015 	stw	r16,0(sp)
 800f9d0:	3029883a 	mov	r20,r6
 800f9d4:	8001b580 	call	8001b58 <__mulsi3>
 800f9d8:	a80b883a 	mov	r5,r21
 800f9dc:	8809883a 	mov	r4,r17
 800f9e0:	1021883a 	mov	r16,r2
 800f9e4:	8001b580 	call	8001b58 <__mulsi3>
 800f9e8:	8809883a 	mov	r4,r17
 800f9ec:	b80b883a 	mov	r5,r23
 800f9f0:	102b883a 	mov	r21,r2
 800f9f4:	8001b580 	call	8001b58 <__mulsi3>
 800f9f8:	b80b883a 	mov	r5,r23
 800f9fc:	b009883a 	mov	r4,r22
 800fa00:	1023883a 	mov	r17,r2
 800fa04:	8001b580 	call	8001b58 <__mulsi3>
 800fa08:	8006d43a 	srli	r3,r16,16
 800fa0c:	1545883a 	add	r2,r2,r21
 800fa10:	1885883a 	add	r2,r3,r2
 800fa14:	1540022e 	bgeu	r2,r21,800fa20 <__muldi3+0xa0>
 800fa18:	00c00074 	movhi	r3,1
 800fa1c:	88e3883a 	add	r17,r17,r3
 800fa20:	1006d43a 	srli	r3,r2,16
 800fa24:	1004943a 	slli	r2,r2,16
 800fa28:	e00b883a 	mov	r5,fp
 800fa2c:	9809883a 	mov	r4,r19
 800fa30:	843fffcc 	andi	r16,r16,65535
 800fa34:	1c63883a 	add	r17,r3,r17
 800fa38:	1421883a 	add	r16,r2,r16
 800fa3c:	8001b580 	call	8001b58 <__mulsi3>
 800fa40:	900b883a 	mov	r5,r18
 800fa44:	a009883a 	mov	r4,r20
 800fa48:	1027883a 	mov	r19,r2
 800fa4c:	8001b580 	call	8001b58 <__mulsi3>
 800fa50:	9885883a 	add	r2,r19,r2
 800fa54:	1447883a 	add	r3,r2,r17
 800fa58:	8005883a 	mov	r2,r16
 800fa5c:	dfc00917 	ldw	ra,36(sp)
 800fa60:	df000817 	ldw	fp,32(sp)
 800fa64:	ddc00717 	ldw	r23,28(sp)
 800fa68:	dd800617 	ldw	r22,24(sp)
 800fa6c:	dd400517 	ldw	r21,20(sp)
 800fa70:	dd000417 	ldw	r20,16(sp)
 800fa74:	dcc00317 	ldw	r19,12(sp)
 800fa78:	dc800217 	ldw	r18,8(sp)
 800fa7c:	dc400117 	ldw	r17,4(sp)
 800fa80:	dc000017 	ldw	r16,0(sp)
 800fa84:	dec00a04 	addi	sp,sp,40
 800fa88:	f800283a 	ret

0800fa8c <__udivdi3>:
 800fa8c:	defff404 	addi	sp,sp,-48
 800fa90:	dcc00515 	stw	r19,20(sp)
 800fa94:	dc000215 	stw	r16,8(sp)
 800fa98:	dfc00b15 	stw	ra,44(sp)
 800fa9c:	df000a15 	stw	fp,40(sp)
 800faa0:	ddc00915 	stw	r23,36(sp)
 800faa4:	dd800815 	stw	r22,32(sp)
 800faa8:	dd400715 	stw	r21,28(sp)
 800faac:	dd000615 	stw	r20,24(sp)
 800fab0:	dc800415 	stw	r18,16(sp)
 800fab4:	dc400315 	stw	r17,12(sp)
 800fab8:	2027883a 	mov	r19,r4
 800fabc:	2821883a 	mov	r16,r5
 800fac0:	3800461e 	bne	r7,zero,800fbdc <__udivdi3+0x150>
 800fac4:	3023883a 	mov	r17,r6
 800fac8:	2025883a 	mov	r18,r4
 800facc:	2980572e 	bgeu	r5,r6,800fc2c <__udivdi3+0x1a0>
 800fad0:	00bfffd4 	movui	r2,65535
 800fad4:	282d883a 	mov	r22,r5
 800fad8:	1180b236 	bltu	r2,r6,800fda4 <__udivdi3+0x318>
 800fadc:	00803fc4 	movi	r2,255
 800fae0:	1185803a 	cmpltu	r2,r2,r6
 800fae4:	100490fa 	slli	r2,r2,3
 800fae8:	3086d83a 	srl	r3,r6,r2
 800faec:	01020074 	movhi	r4,2049
 800faf0:	211e9044 	addi	r4,r4,31297
 800faf4:	20c7883a 	add	r3,r4,r3
 800faf8:	18c00003 	ldbu	r3,0(r3)
 800fafc:	1885883a 	add	r2,r3,r2
 800fb00:	00c00804 	movi	r3,32
 800fb04:	1887c83a 	sub	r3,r3,r2
 800fb08:	18000526 	beq	r3,zero,800fb20 <__udivdi3+0x94>
 800fb0c:	80e0983a 	sll	r16,r16,r3
 800fb10:	9884d83a 	srl	r2,r19,r2
 800fb14:	30e2983a 	sll	r17,r6,r3
 800fb18:	98e4983a 	sll	r18,r19,r3
 800fb1c:	142cb03a 	or	r22,r2,r16
 800fb20:	882ad43a 	srli	r21,r17,16
 800fb24:	b009883a 	mov	r4,r22
 800fb28:	8d3fffcc 	andi	r20,r17,65535
 800fb2c:	a80b883a 	mov	r5,r21
 800fb30:	8001b000 	call	8001b00 <__umodsi3>
 800fb34:	b009883a 	mov	r4,r22
 800fb38:	a80b883a 	mov	r5,r21
 800fb3c:	1027883a 	mov	r19,r2
 800fb40:	8001a9c0 	call	8001a9c <__udivsi3>
 800fb44:	100b883a 	mov	r5,r2
 800fb48:	a009883a 	mov	r4,r20
 800fb4c:	102d883a 	mov	r22,r2
 800fb50:	8001b580 	call	8001b58 <__mulsi3>
 800fb54:	9826943a 	slli	r19,r19,16
 800fb58:	9006d43a 	srli	r3,r18,16
 800fb5c:	1cc6b03a 	or	r3,r3,r19
 800fb60:	1880052e 	bgeu	r3,r2,800fb78 <__udivdi3+0xec>
 800fb64:	1c47883a 	add	r3,r3,r17
 800fb68:	b13fffc4 	addi	r4,r22,-1
 800fb6c:	1c400136 	bltu	r3,r17,800fb74 <__udivdi3+0xe8>
 800fb70:	18814236 	bltu	r3,r2,801007c <__udivdi3+0x5f0>
 800fb74:	202d883a 	mov	r22,r4
 800fb78:	18a1c83a 	sub	r16,r3,r2
 800fb7c:	8009883a 	mov	r4,r16
 800fb80:	a80b883a 	mov	r5,r21
 800fb84:	8001b000 	call	8001b00 <__umodsi3>
 800fb88:	1027883a 	mov	r19,r2
 800fb8c:	8009883a 	mov	r4,r16
 800fb90:	a80b883a 	mov	r5,r21
 800fb94:	9826943a 	slli	r19,r19,16
 800fb98:	8001a9c0 	call	8001a9c <__udivsi3>
 800fb9c:	100b883a 	mov	r5,r2
 800fba0:	a009883a 	mov	r4,r20
 800fba4:	94bfffcc 	andi	r18,r18,65535
 800fba8:	1021883a 	mov	r16,r2
 800fbac:	94e4b03a 	or	r18,r18,r19
 800fbb0:	8001b580 	call	8001b58 <__mulsi3>
 800fbb4:	9080052e 	bgeu	r18,r2,800fbcc <__udivdi3+0x140>
 800fbb8:	8ca5883a 	add	r18,r17,r18
 800fbbc:	80ffffc4 	addi	r3,r16,-1
 800fbc0:	94410c36 	bltu	r18,r17,800fff4 <__udivdi3+0x568>
 800fbc4:	90810b2e 	bgeu	r18,r2,800fff4 <__udivdi3+0x568>
 800fbc8:	843fff84 	addi	r16,r16,-2
 800fbcc:	b004943a 	slli	r2,r22,16
 800fbd0:	0007883a 	mov	r3,zero
 800fbd4:	1404b03a 	or	r2,r2,r16
 800fbd8:	00005e06 	br	800fd54 <__udivdi3+0x2c8>
 800fbdc:	29c05b36 	bltu	r5,r7,800fd4c <__udivdi3+0x2c0>
 800fbe0:	00bfffd4 	movui	r2,65535
 800fbe4:	11c0672e 	bgeu	r2,r7,800fd84 <__udivdi3+0x2f8>
 800fbe8:	00804034 	movhi	r2,256
 800fbec:	10bfffc4 	addi	r2,r2,-1
 800fbf0:	11c10a36 	bltu	r2,r7,801001c <__udivdi3+0x590>
 800fbf4:	00800404 	movi	r2,16
 800fbf8:	3886d83a 	srl	r3,r7,r2
 800fbfc:	01020074 	movhi	r4,2049
 800fc00:	211e9044 	addi	r4,r4,31297
 800fc04:	20c7883a 	add	r3,r4,r3
 800fc08:	18c00003 	ldbu	r3,0(r3)
 800fc0c:	05c00804 	movi	r23,32
 800fc10:	1885883a 	add	r2,r3,r2
 800fc14:	b8afc83a 	sub	r23,r23,r2
 800fc18:	b800671e 	bne	r23,zero,800fdb8 <__udivdi3+0x32c>
 800fc1c:	3c010536 	bltu	r7,r16,8010034 <__udivdi3+0x5a8>
 800fc20:	9985403a 	cmpgeu	r2,r19,r6
 800fc24:	0007883a 	mov	r3,zero
 800fc28:	00004a06 	br	800fd54 <__udivdi3+0x2c8>
 800fc2c:	3000041e 	bne	r6,zero,800fc40 <__udivdi3+0x1b4>
 800fc30:	000b883a 	mov	r5,zero
 800fc34:	01000044 	movi	r4,1
 800fc38:	8001a9c0 	call	8001a9c <__udivsi3>
 800fc3c:	1023883a 	mov	r17,r2
 800fc40:	00bfffd4 	movui	r2,65535
 800fc44:	1440532e 	bgeu	r2,r17,800fd94 <__udivdi3+0x308>
 800fc48:	00804034 	movhi	r2,256
 800fc4c:	10bfffc4 	addi	r2,r2,-1
 800fc50:	1440f436 	bltu	r2,r17,8010024 <__udivdi3+0x598>
 800fc54:	00800404 	movi	r2,16
 800fc58:	8886d83a 	srl	r3,r17,r2
 800fc5c:	01020074 	movhi	r4,2049
 800fc60:	211e9044 	addi	r4,r4,31297
 800fc64:	20c7883a 	add	r3,r4,r3
 800fc68:	18c00003 	ldbu	r3,0(r3)
 800fc6c:	1885883a 	add	r2,r3,r2
 800fc70:	00c00804 	movi	r3,32
 800fc74:	1887c83a 	sub	r3,r3,r2
 800fc78:	1800a51e 	bne	r3,zero,800ff10 <__udivdi3+0x484>
 800fc7c:	882ad43a 	srli	r21,r17,16
 800fc80:	8461c83a 	sub	r16,r16,r17
 800fc84:	8d3fffcc 	andi	r20,r17,65535
 800fc88:	00c00044 	movi	r3,1
 800fc8c:	a80b883a 	mov	r5,r21
 800fc90:	8009883a 	mov	r4,r16
 800fc94:	d8c00115 	stw	r3,4(sp)
 800fc98:	8001b000 	call	8001b00 <__umodsi3>
 800fc9c:	a80b883a 	mov	r5,r21
 800fca0:	8009883a 	mov	r4,r16
 800fca4:	1027883a 	mov	r19,r2
 800fca8:	8001a9c0 	call	8001a9c <__udivsi3>
 800fcac:	a00b883a 	mov	r5,r20
 800fcb0:	1009883a 	mov	r4,r2
 800fcb4:	102d883a 	mov	r22,r2
 800fcb8:	8001b580 	call	8001b58 <__mulsi3>
 800fcbc:	9826943a 	slli	r19,r19,16
 800fcc0:	900ed43a 	srli	r7,r18,16
 800fcc4:	d8c00117 	ldw	r3,4(sp)
 800fcc8:	3cceb03a 	or	r7,r7,r19
 800fccc:	3880052e 	bgeu	r7,r2,800fce4 <__udivdi3+0x258>
 800fcd0:	3c4f883a 	add	r7,r7,r17
 800fcd4:	b13fffc4 	addi	r4,r22,-1
 800fcd8:	3c400136 	bltu	r7,r17,800fce0 <__udivdi3+0x254>
 800fcdc:	3880e436 	bltu	r7,r2,8010070 <__udivdi3+0x5e4>
 800fce0:	202d883a 	mov	r22,r4
 800fce4:	38a1c83a 	sub	r16,r7,r2
 800fce8:	8009883a 	mov	r4,r16
 800fcec:	a80b883a 	mov	r5,r21
 800fcf0:	d8c00115 	stw	r3,4(sp)
 800fcf4:	8001b000 	call	8001b00 <__umodsi3>
 800fcf8:	1027883a 	mov	r19,r2
 800fcfc:	8009883a 	mov	r4,r16
 800fd00:	a80b883a 	mov	r5,r21
 800fd04:	9826943a 	slli	r19,r19,16
 800fd08:	8001a9c0 	call	8001a9c <__udivsi3>
 800fd0c:	a00b883a 	mov	r5,r20
 800fd10:	1009883a 	mov	r4,r2
 800fd14:	94bfffcc 	andi	r18,r18,65535
 800fd18:	1021883a 	mov	r16,r2
 800fd1c:	94e4b03a 	or	r18,r18,r19
 800fd20:	8001b580 	call	8001b58 <__mulsi3>
 800fd24:	d8c00117 	ldw	r3,4(sp)
 800fd28:	9080052e 	bgeu	r18,r2,800fd40 <__udivdi3+0x2b4>
 800fd2c:	8ca5883a 	add	r18,r17,r18
 800fd30:	813fffc4 	addi	r4,r16,-1
 800fd34:	9440ad36 	bltu	r18,r17,800ffec <__udivdi3+0x560>
 800fd38:	9080ac2e 	bgeu	r18,r2,800ffec <__udivdi3+0x560>
 800fd3c:	843fff84 	addi	r16,r16,-2
 800fd40:	b004943a 	slli	r2,r22,16
 800fd44:	1404b03a 	or	r2,r2,r16
 800fd48:	00000206 	br	800fd54 <__udivdi3+0x2c8>
 800fd4c:	0007883a 	mov	r3,zero
 800fd50:	0005883a 	mov	r2,zero
 800fd54:	dfc00b17 	ldw	ra,44(sp)
 800fd58:	df000a17 	ldw	fp,40(sp)
 800fd5c:	ddc00917 	ldw	r23,36(sp)
 800fd60:	dd800817 	ldw	r22,32(sp)
 800fd64:	dd400717 	ldw	r21,28(sp)
 800fd68:	dd000617 	ldw	r20,24(sp)
 800fd6c:	dcc00517 	ldw	r19,20(sp)
 800fd70:	dc800417 	ldw	r18,16(sp)
 800fd74:	dc400317 	ldw	r17,12(sp)
 800fd78:	dc000217 	ldw	r16,8(sp)
 800fd7c:	dec00c04 	addi	sp,sp,48
 800fd80:	f800283a 	ret
 800fd84:	00803fc4 	movi	r2,255
 800fd88:	11c5803a 	cmpltu	r2,r2,r7
 800fd8c:	100490fa 	slli	r2,r2,3
 800fd90:	003f9906 	br	800fbf8 <__alt_data_end+0xfc00fbf8>
 800fd94:	00803fc4 	movi	r2,255
 800fd98:	1445803a 	cmpltu	r2,r2,r17
 800fd9c:	100490fa 	slli	r2,r2,3
 800fda0:	003fad06 	br	800fc58 <__alt_data_end+0xfc00fc58>
 800fda4:	00804034 	movhi	r2,256
 800fda8:	10bfffc4 	addi	r2,r2,-1
 800fdac:	11809f36 	bltu	r2,r6,801002c <__udivdi3+0x5a0>
 800fdb0:	00800404 	movi	r2,16
 800fdb4:	003f4c06 	br	800fae8 <__alt_data_end+0xfc00fae8>
 800fdb8:	3dce983a 	sll	r7,r7,r23
 800fdbc:	30b8d83a 	srl	fp,r6,r2
 800fdc0:	80a2d83a 	srl	r17,r16,r2
 800fdc4:	35cc983a 	sll	r6,r6,r23
 800fdc8:	3f38b03a 	or	fp,r7,fp
 800fdcc:	e024d43a 	srli	r18,fp,16
 800fdd0:	9884d83a 	srl	r2,r19,r2
 800fdd4:	85e0983a 	sll	r16,r16,r23
 800fdd8:	8809883a 	mov	r4,r17
 800fddc:	900b883a 	mov	r5,r18
 800fde0:	d9800015 	stw	r6,0(sp)
 800fde4:	1420b03a 	or	r16,r2,r16
 800fde8:	8001b000 	call	8001b00 <__umodsi3>
 800fdec:	900b883a 	mov	r5,r18
 800fdf0:	8809883a 	mov	r4,r17
 800fdf4:	1029883a 	mov	r20,r2
 800fdf8:	e5bfffcc 	andi	r22,fp,65535
 800fdfc:	8001a9c0 	call	8001a9c <__udivsi3>
 800fe00:	100b883a 	mov	r5,r2
 800fe04:	b009883a 	mov	r4,r22
 800fe08:	102b883a 	mov	r21,r2
 800fe0c:	8001b580 	call	8001b58 <__mulsi3>
 800fe10:	a028943a 	slli	r20,r20,16
 800fe14:	8006d43a 	srli	r3,r16,16
 800fe18:	1d06b03a 	or	r3,r3,r20
 800fe1c:	1880042e 	bgeu	r3,r2,800fe30 <__udivdi3+0x3a4>
 800fe20:	1f07883a 	add	r3,r3,fp
 800fe24:	a93fffc4 	addi	r4,r21,-1
 800fe28:	1f00892e 	bgeu	r3,fp,8010050 <__udivdi3+0x5c4>
 800fe2c:	202b883a 	mov	r21,r4
 800fe30:	18a3c83a 	sub	r17,r3,r2
 800fe34:	8809883a 	mov	r4,r17
 800fe38:	900b883a 	mov	r5,r18
 800fe3c:	8001b000 	call	8001b00 <__umodsi3>
 800fe40:	1029883a 	mov	r20,r2
 800fe44:	8809883a 	mov	r4,r17
 800fe48:	900b883a 	mov	r5,r18
 800fe4c:	a028943a 	slli	r20,r20,16
 800fe50:	8001a9c0 	call	8001a9c <__udivsi3>
 800fe54:	100b883a 	mov	r5,r2
 800fe58:	b009883a 	mov	r4,r22
 800fe5c:	843fffcc 	andi	r16,r16,65535
 800fe60:	1023883a 	mov	r17,r2
 800fe64:	8520b03a 	or	r16,r16,r20
 800fe68:	8001b580 	call	8001b58 <__mulsi3>
 800fe6c:	8080042e 	bgeu	r16,r2,800fe80 <__udivdi3+0x3f4>
 800fe70:	8721883a 	add	r16,r16,fp
 800fe74:	88ffffc4 	addi	r3,r17,-1
 800fe78:	8700712e 	bgeu	r16,fp,8010040 <__udivdi3+0x5b4>
 800fe7c:	1823883a 	mov	r17,r3
 800fe80:	a80e943a 	slli	r7,r21,16
 800fe84:	d8c00017 	ldw	r3,0(sp)
 800fe88:	80a1c83a 	sub	r16,r16,r2
 800fe8c:	3c64b03a 	or	r18,r7,r17
 800fe90:	1d3fffcc 	andi	r20,r3,65535
 800fe94:	9022d43a 	srli	r17,r18,16
 800fe98:	95bfffcc 	andi	r22,r18,65535
 800fe9c:	a00b883a 	mov	r5,r20
 800fea0:	b009883a 	mov	r4,r22
 800fea4:	182ad43a 	srli	r21,r3,16
 800fea8:	8001b580 	call	8001b58 <__mulsi3>
 800feac:	a00b883a 	mov	r5,r20
 800feb0:	8809883a 	mov	r4,r17
 800feb4:	1039883a 	mov	fp,r2
 800feb8:	8001b580 	call	8001b58 <__mulsi3>
 800febc:	8809883a 	mov	r4,r17
 800fec0:	a80b883a 	mov	r5,r21
 800fec4:	1029883a 	mov	r20,r2
 800fec8:	8001b580 	call	8001b58 <__mulsi3>
 800fecc:	a80b883a 	mov	r5,r21
 800fed0:	b009883a 	mov	r4,r22
 800fed4:	1023883a 	mov	r17,r2
 800fed8:	8001b580 	call	8001b58 <__mulsi3>
 800fedc:	e006d43a 	srli	r3,fp,16
 800fee0:	1505883a 	add	r2,r2,r20
 800fee4:	1887883a 	add	r3,r3,r2
 800fee8:	1d00022e 	bgeu	r3,r20,800fef4 <__udivdi3+0x468>
 800feec:	00800074 	movhi	r2,1
 800fef0:	88a3883a 	add	r17,r17,r2
 800fef4:	1804d43a 	srli	r2,r3,16
 800fef8:	1463883a 	add	r17,r2,r17
 800fefc:	84404436 	bltu	r16,r17,8010010 <__udivdi3+0x584>
 800ff00:	84403e26 	beq	r16,r17,800fffc <__udivdi3+0x570>
 800ff04:	9005883a 	mov	r2,r18
 800ff08:	0007883a 	mov	r3,zero
 800ff0c:	003f9106 	br	800fd54 <__alt_data_end+0xfc00fd54>
 800ff10:	88e2983a 	sll	r17,r17,r3
 800ff14:	80aed83a 	srl	r23,r16,r2
 800ff18:	80e0983a 	sll	r16,r16,r3
 800ff1c:	882ad43a 	srli	r21,r17,16
 800ff20:	9884d83a 	srl	r2,r19,r2
 800ff24:	b809883a 	mov	r4,r23
 800ff28:	a80b883a 	mov	r5,r21
 800ff2c:	98e4983a 	sll	r18,r19,r3
 800ff30:	142cb03a 	or	r22,r2,r16
 800ff34:	8001b000 	call	8001b00 <__umodsi3>
 800ff38:	b809883a 	mov	r4,r23
 800ff3c:	a80b883a 	mov	r5,r21
 800ff40:	1027883a 	mov	r19,r2
 800ff44:	8d3fffcc 	andi	r20,r17,65535
 800ff48:	8001a9c0 	call	8001a9c <__udivsi3>
 800ff4c:	a009883a 	mov	r4,r20
 800ff50:	100b883a 	mov	r5,r2
 800ff54:	102f883a 	mov	r23,r2
 800ff58:	8001b580 	call	8001b58 <__mulsi3>
 800ff5c:	9826943a 	slli	r19,r19,16
 800ff60:	b008d43a 	srli	r4,r22,16
 800ff64:	24c8b03a 	or	r4,r4,r19
 800ff68:	2080062e 	bgeu	r4,r2,800ff84 <__udivdi3+0x4f8>
 800ff6c:	2449883a 	add	r4,r4,r17
 800ff70:	b8ffffc4 	addi	r3,r23,-1
 800ff74:	24403c36 	bltu	r4,r17,8010068 <__udivdi3+0x5dc>
 800ff78:	20803b2e 	bgeu	r4,r2,8010068 <__udivdi3+0x5dc>
 800ff7c:	bdffff84 	addi	r23,r23,-2
 800ff80:	2449883a 	add	r4,r4,r17
 800ff84:	20a1c83a 	sub	r16,r4,r2
 800ff88:	a80b883a 	mov	r5,r21
 800ff8c:	8009883a 	mov	r4,r16
 800ff90:	8001b000 	call	8001b00 <__umodsi3>
 800ff94:	a80b883a 	mov	r5,r21
 800ff98:	8009883a 	mov	r4,r16
 800ff9c:	1027883a 	mov	r19,r2
 800ffa0:	8001a9c0 	call	8001a9c <__udivsi3>
 800ffa4:	a009883a 	mov	r4,r20
 800ffa8:	100b883a 	mov	r5,r2
 800ffac:	9826943a 	slli	r19,r19,16
 800ffb0:	1039883a 	mov	fp,r2
 800ffb4:	8001b580 	call	8001b58 <__mulsi3>
 800ffb8:	b13fffcc 	andi	r4,r22,65535
 800ffbc:	24c8b03a 	or	r4,r4,r19
 800ffc0:	2080062e 	bgeu	r4,r2,800ffdc <__udivdi3+0x550>
 800ffc4:	2449883a 	add	r4,r4,r17
 800ffc8:	e0ffffc4 	addi	r3,fp,-1
 800ffcc:	24402436 	bltu	r4,r17,8010060 <__udivdi3+0x5d4>
 800ffd0:	2080232e 	bgeu	r4,r2,8010060 <__udivdi3+0x5d4>
 800ffd4:	e73fff84 	addi	fp,fp,-2
 800ffd8:	2449883a 	add	r4,r4,r17
 800ffdc:	b82e943a 	slli	r23,r23,16
 800ffe0:	20a1c83a 	sub	r16,r4,r2
 800ffe4:	bf06b03a 	or	r3,r23,fp
 800ffe8:	003f2806 	br	800fc8c <__alt_data_end+0xfc00fc8c>
 800ffec:	2021883a 	mov	r16,r4
 800fff0:	003f5306 	br	800fd40 <__alt_data_end+0xfc00fd40>
 800fff4:	1821883a 	mov	r16,r3
 800fff8:	003ef406 	br	800fbcc <__alt_data_end+0xfc00fbcc>
 800fffc:	1806943a 	slli	r3,r3,16
 8010000:	9de6983a 	sll	r19,r19,r23
 8010004:	e73fffcc 	andi	fp,fp,65535
 8010008:	1f07883a 	add	r3,r3,fp
 801000c:	98ffbd2e 	bgeu	r19,r3,800ff04 <__alt_data_end+0xfc00ff04>
 8010010:	90bfffc4 	addi	r2,r18,-1
 8010014:	0007883a 	mov	r3,zero
 8010018:	003f4e06 	br	800fd54 <__alt_data_end+0xfc00fd54>
 801001c:	00800604 	movi	r2,24
 8010020:	003ef506 	br	800fbf8 <__alt_data_end+0xfc00fbf8>
 8010024:	00800604 	movi	r2,24
 8010028:	003f0b06 	br	800fc58 <__alt_data_end+0xfc00fc58>
 801002c:	00800604 	movi	r2,24
 8010030:	003ead06 	br	800fae8 <__alt_data_end+0xfc00fae8>
 8010034:	0007883a 	mov	r3,zero
 8010038:	00800044 	movi	r2,1
 801003c:	003f4506 	br	800fd54 <__alt_data_end+0xfc00fd54>
 8010040:	80bf8e2e 	bgeu	r16,r2,800fe7c <__alt_data_end+0xfc00fe7c>
 8010044:	8c7fff84 	addi	r17,r17,-2
 8010048:	8721883a 	add	r16,r16,fp
 801004c:	003f8c06 	br	800fe80 <__alt_data_end+0xfc00fe80>
 8010050:	18bf762e 	bgeu	r3,r2,800fe2c <__alt_data_end+0xfc00fe2c>
 8010054:	ad7fff84 	addi	r21,r21,-2
 8010058:	1f07883a 	add	r3,r3,fp
 801005c:	003f7406 	br	800fe30 <__alt_data_end+0xfc00fe30>
 8010060:	1839883a 	mov	fp,r3
 8010064:	003fdd06 	br	800ffdc <__alt_data_end+0xfc00ffdc>
 8010068:	182f883a 	mov	r23,r3
 801006c:	003fc506 	br	800ff84 <__alt_data_end+0xfc00ff84>
 8010070:	b5bfff84 	addi	r22,r22,-2
 8010074:	3c4f883a 	add	r7,r7,r17
 8010078:	003f1a06 	br	800fce4 <__alt_data_end+0xfc00fce4>
 801007c:	b5bfff84 	addi	r22,r22,-2
 8010080:	1c47883a 	add	r3,r3,r17
 8010084:	003ebc06 	br	800fb78 <__alt_data_end+0xfc00fb78>

08010088 <__umoddi3>:
 8010088:	defff304 	addi	sp,sp,-52
 801008c:	df000b15 	stw	fp,44(sp)
 8010090:	dc400415 	stw	r17,16(sp)
 8010094:	dc000315 	stw	r16,12(sp)
 8010098:	dfc00c15 	stw	ra,48(sp)
 801009c:	ddc00a15 	stw	r23,40(sp)
 80100a0:	dd800915 	stw	r22,36(sp)
 80100a4:	dd400815 	stw	r21,32(sp)
 80100a8:	dd000715 	stw	r20,28(sp)
 80100ac:	dcc00615 	stw	r19,24(sp)
 80100b0:	dc800515 	stw	r18,20(sp)
 80100b4:	2021883a 	mov	r16,r4
 80100b8:	2823883a 	mov	r17,r5
 80100bc:	2839883a 	mov	fp,r5
 80100c0:	3800401e 	bne	r7,zero,80101c4 <__umoddi3+0x13c>
 80100c4:	3027883a 	mov	r19,r6
 80100c8:	2029883a 	mov	r20,r4
 80100cc:	2980552e 	bgeu	r5,r6,8010224 <__umoddi3+0x19c>
 80100d0:	00bfffd4 	movui	r2,65535
 80100d4:	1180a236 	bltu	r2,r6,8010360 <__umoddi3+0x2d8>
 80100d8:	01003fc4 	movi	r4,255
 80100dc:	2189803a 	cmpltu	r4,r4,r6
 80100e0:	200890fa 	slli	r4,r4,3
 80100e4:	3104d83a 	srl	r2,r6,r4
 80100e8:	00c20074 	movhi	r3,2049
 80100ec:	18de9044 	addi	r3,r3,31297
 80100f0:	1885883a 	add	r2,r3,r2
 80100f4:	10c00003 	ldbu	r3,0(r2)
 80100f8:	00800804 	movi	r2,32
 80100fc:	1909883a 	add	r4,r3,r4
 8010100:	1125c83a 	sub	r18,r2,r4
 8010104:	90000526 	beq	r18,zero,801011c <__umoddi3+0x94>
 8010108:	8ca2983a 	sll	r17,r17,r18
 801010c:	8108d83a 	srl	r4,r16,r4
 8010110:	34a6983a 	sll	r19,r6,r18
 8010114:	84a8983a 	sll	r20,r16,r18
 8010118:	2478b03a 	or	fp,r4,r17
 801011c:	982cd43a 	srli	r22,r19,16
 8010120:	e009883a 	mov	r4,fp
 8010124:	9dffffcc 	andi	r23,r19,65535
 8010128:	b00b883a 	mov	r5,r22
 801012c:	8001b000 	call	8001b00 <__umodsi3>
 8010130:	b00b883a 	mov	r5,r22
 8010134:	e009883a 	mov	r4,fp
 8010138:	102b883a 	mov	r21,r2
 801013c:	8001a9c0 	call	8001a9c <__udivsi3>
 8010140:	100b883a 	mov	r5,r2
 8010144:	b809883a 	mov	r4,r23
 8010148:	8001b580 	call	8001b58 <__mulsi3>
 801014c:	a82a943a 	slli	r21,r21,16
 8010150:	a006d43a 	srli	r3,r20,16
 8010154:	1d46b03a 	or	r3,r3,r21
 8010158:	1880032e 	bgeu	r3,r2,8010168 <__umoddi3+0xe0>
 801015c:	1cc7883a 	add	r3,r3,r19
 8010160:	1cc00136 	bltu	r3,r19,8010168 <__umoddi3+0xe0>
 8010164:	18813136 	bltu	r3,r2,801062c <__umoddi3+0x5a4>
 8010168:	18a1c83a 	sub	r16,r3,r2
 801016c:	b00b883a 	mov	r5,r22
 8010170:	8009883a 	mov	r4,r16
 8010174:	8001b000 	call	8001b00 <__umodsi3>
 8010178:	b00b883a 	mov	r5,r22
 801017c:	8009883a 	mov	r4,r16
 8010180:	1023883a 	mov	r17,r2
 8010184:	8001a9c0 	call	8001a9c <__udivsi3>
 8010188:	100b883a 	mov	r5,r2
 801018c:	b809883a 	mov	r4,r23
 8010190:	8822943a 	slli	r17,r17,16
 8010194:	8001b580 	call	8001b58 <__mulsi3>
 8010198:	a0ffffcc 	andi	r3,r20,65535
 801019c:	1c46b03a 	or	r3,r3,r17
 80101a0:	1880042e 	bgeu	r3,r2,80101b4 <__umoddi3+0x12c>
 80101a4:	1cc7883a 	add	r3,r3,r19
 80101a8:	1cc00236 	bltu	r3,r19,80101b4 <__umoddi3+0x12c>
 80101ac:	1880012e 	bgeu	r3,r2,80101b4 <__umoddi3+0x12c>
 80101b0:	1cc7883a 	add	r3,r3,r19
 80101b4:	1885c83a 	sub	r2,r3,r2
 80101b8:	1484d83a 	srl	r2,r2,r18
 80101bc:	0007883a 	mov	r3,zero
 80101c0:	00005306 	br	8010310 <__umoddi3+0x288>
 80101c4:	29c05036 	bltu	r5,r7,8010308 <__umoddi3+0x280>
 80101c8:	00bfffd4 	movui	r2,65535
 80101cc:	11c05c2e 	bgeu	r2,r7,8010340 <__umoddi3+0x2b8>
 80101d0:	00804034 	movhi	r2,256
 80101d4:	10bfffc4 	addi	r2,r2,-1
 80101d8:	11c10636 	bltu	r2,r7,80105f4 <__umoddi3+0x56c>
 80101dc:	01000404 	movi	r4,16
 80101e0:	3904d83a 	srl	r2,r7,r4
 80101e4:	00c20074 	movhi	r3,2049
 80101e8:	18de9044 	addi	r3,r3,31297
 80101ec:	1885883a 	add	r2,r3,r2
 80101f0:	14c00003 	ldbu	r19,0(r2)
 80101f4:	00c00804 	movi	r3,32
 80101f8:	9927883a 	add	r19,r19,r4
 80101fc:	1ce9c83a 	sub	r20,r3,r19
 8010200:	a0005c1e 	bne	r20,zero,8010374 <__umoddi3+0x2ec>
 8010204:	3c400136 	bltu	r7,r17,801020c <__umoddi3+0x184>
 8010208:	81810a36 	bltu	r16,r6,8010634 <__umoddi3+0x5ac>
 801020c:	8185c83a 	sub	r2,r16,r6
 8010210:	89e3c83a 	sub	r17,r17,r7
 8010214:	8089803a 	cmpltu	r4,r16,r2
 8010218:	8939c83a 	sub	fp,r17,r4
 801021c:	e007883a 	mov	r3,fp
 8010220:	00003b06 	br	8010310 <__umoddi3+0x288>
 8010224:	3000041e 	bne	r6,zero,8010238 <__umoddi3+0x1b0>
 8010228:	000b883a 	mov	r5,zero
 801022c:	01000044 	movi	r4,1
 8010230:	8001a9c0 	call	8001a9c <__udivsi3>
 8010234:	1027883a 	mov	r19,r2
 8010238:	00bfffd4 	movui	r2,65535
 801023c:	14c0442e 	bgeu	r2,r19,8010350 <__umoddi3+0x2c8>
 8010240:	00804034 	movhi	r2,256
 8010244:	10bfffc4 	addi	r2,r2,-1
 8010248:	14c0ec36 	bltu	r2,r19,80105fc <__umoddi3+0x574>
 801024c:	00800404 	movi	r2,16
 8010250:	9886d83a 	srl	r3,r19,r2
 8010254:	01020074 	movhi	r4,2049
 8010258:	211e9044 	addi	r4,r4,31297
 801025c:	20c7883a 	add	r3,r4,r3
 8010260:	18c00003 	ldbu	r3,0(r3)
 8010264:	1887883a 	add	r3,r3,r2
 8010268:	00800804 	movi	r2,32
 801026c:	10e5c83a 	sub	r18,r2,r3
 8010270:	9000ab1e 	bne	r18,zero,8010520 <__umoddi3+0x498>
 8010274:	982cd43a 	srli	r22,r19,16
 8010278:	8ce3c83a 	sub	r17,r17,r19
 801027c:	9dffffcc 	andi	r23,r19,65535
 8010280:	b00b883a 	mov	r5,r22
 8010284:	8809883a 	mov	r4,r17
 8010288:	8001b000 	call	8001b00 <__umodsi3>
 801028c:	b00b883a 	mov	r5,r22
 8010290:	8809883a 	mov	r4,r17
 8010294:	102b883a 	mov	r21,r2
 8010298:	8001a9c0 	call	8001a9c <__udivsi3>
 801029c:	b80b883a 	mov	r5,r23
 80102a0:	1009883a 	mov	r4,r2
 80102a4:	8001b580 	call	8001b58 <__mulsi3>
 80102a8:	a82a943a 	slli	r21,r21,16
 80102ac:	a006d43a 	srli	r3,r20,16
 80102b0:	1d46b03a 	or	r3,r3,r21
 80102b4:	1880042e 	bgeu	r3,r2,80102c8 <__umoddi3+0x240>
 80102b8:	1cc7883a 	add	r3,r3,r19
 80102bc:	1cc00236 	bltu	r3,r19,80102c8 <__umoddi3+0x240>
 80102c0:	1880012e 	bgeu	r3,r2,80102c8 <__umoddi3+0x240>
 80102c4:	1cc7883a 	add	r3,r3,r19
 80102c8:	18a1c83a 	sub	r16,r3,r2
 80102cc:	b00b883a 	mov	r5,r22
 80102d0:	8009883a 	mov	r4,r16
 80102d4:	8001b000 	call	8001b00 <__umodsi3>
 80102d8:	1023883a 	mov	r17,r2
 80102dc:	b00b883a 	mov	r5,r22
 80102e0:	8009883a 	mov	r4,r16
 80102e4:	8001a9c0 	call	8001a9c <__udivsi3>
 80102e8:	8822943a 	slli	r17,r17,16
 80102ec:	b80b883a 	mov	r5,r23
 80102f0:	1009883a 	mov	r4,r2
 80102f4:	8001b580 	call	8001b58 <__mulsi3>
 80102f8:	a53fffcc 	andi	r20,r20,65535
 80102fc:	a446b03a 	or	r3,r20,r17
 8010300:	18bfac2e 	bgeu	r3,r2,80101b4 <__alt_data_end+0xfc0101b4>
 8010304:	003fa706 	br	80101a4 <__alt_data_end+0xfc0101a4>
 8010308:	2005883a 	mov	r2,r4
 801030c:	2807883a 	mov	r3,r5
 8010310:	dfc00c17 	ldw	ra,48(sp)
 8010314:	df000b17 	ldw	fp,44(sp)
 8010318:	ddc00a17 	ldw	r23,40(sp)
 801031c:	dd800917 	ldw	r22,36(sp)
 8010320:	dd400817 	ldw	r21,32(sp)
 8010324:	dd000717 	ldw	r20,28(sp)
 8010328:	dcc00617 	ldw	r19,24(sp)
 801032c:	dc800517 	ldw	r18,20(sp)
 8010330:	dc400417 	ldw	r17,16(sp)
 8010334:	dc000317 	ldw	r16,12(sp)
 8010338:	dec00d04 	addi	sp,sp,52
 801033c:	f800283a 	ret
 8010340:	04c03fc4 	movi	r19,255
 8010344:	99c9803a 	cmpltu	r4,r19,r7
 8010348:	200890fa 	slli	r4,r4,3
 801034c:	003fa406 	br	80101e0 <__alt_data_end+0xfc0101e0>
 8010350:	00803fc4 	movi	r2,255
 8010354:	14c5803a 	cmpltu	r2,r2,r19
 8010358:	100490fa 	slli	r2,r2,3
 801035c:	003fbc06 	br	8010250 <__alt_data_end+0xfc010250>
 8010360:	00804034 	movhi	r2,256
 8010364:	10bfffc4 	addi	r2,r2,-1
 8010368:	1180a636 	bltu	r2,r6,8010604 <__umoddi3+0x57c>
 801036c:	01000404 	movi	r4,16
 8010370:	003f5c06 	br	80100e4 <__alt_data_end+0xfc0100e4>
 8010374:	3d0e983a 	sll	r7,r7,r20
 8010378:	34ead83a 	srl	r21,r6,r19
 801037c:	8cc6d83a 	srl	r3,r17,r19
 8010380:	8d10983a 	sll	r8,r17,r20
 8010384:	3d6ab03a 	or	r21,r7,r21
 8010388:	a82cd43a 	srli	r22,r21,16
 801038c:	84e2d83a 	srl	r17,r16,r19
 8010390:	1809883a 	mov	r4,r3
 8010394:	b00b883a 	mov	r5,r22
 8010398:	8a22b03a 	or	r17,r17,r8
 801039c:	3524983a 	sll	r18,r6,r20
 80103a0:	dc400015 	stw	r17,0(sp)
 80103a4:	d8c00115 	stw	r3,4(sp)
 80103a8:	8001b000 	call	8001b00 <__umodsi3>
 80103ac:	d8c00117 	ldw	r3,4(sp)
 80103b0:	b00b883a 	mov	r5,r22
 80103b4:	1039883a 	mov	fp,r2
 80103b8:	1809883a 	mov	r4,r3
 80103bc:	8001a9c0 	call	8001a9c <__udivsi3>
 80103c0:	adffffcc 	andi	r23,r21,65535
 80103c4:	100b883a 	mov	r5,r2
 80103c8:	b809883a 	mov	r4,r23
 80103cc:	1023883a 	mov	r17,r2
 80103d0:	8001b580 	call	8001b58 <__mulsi3>
 80103d4:	d9400017 	ldw	r5,0(sp)
 80103d8:	e008943a 	slli	r4,fp,16
 80103dc:	8520983a 	sll	r16,r16,r20
 80103e0:	2806d43a 	srli	r3,r5,16
 80103e4:	1906b03a 	or	r3,r3,r4
 80103e8:	1880042e 	bgeu	r3,r2,80103fc <__umoddi3+0x374>
 80103ec:	1d47883a 	add	r3,r3,r21
 80103f0:	893fffc4 	addi	r4,r17,-1
 80103f4:	1d40892e 	bgeu	r3,r21,801061c <__umoddi3+0x594>
 80103f8:	2023883a 	mov	r17,r4
 80103fc:	18b9c83a 	sub	fp,r3,r2
 8010400:	b00b883a 	mov	r5,r22
 8010404:	e009883a 	mov	r4,fp
 8010408:	8001b000 	call	8001b00 <__umodsi3>
 801040c:	b00b883a 	mov	r5,r22
 8010410:	e009883a 	mov	r4,fp
 8010414:	d8800215 	stw	r2,8(sp)
 8010418:	8001a9c0 	call	8001a9c <__udivsi3>
 801041c:	100b883a 	mov	r5,r2
 8010420:	b809883a 	mov	r4,r23
 8010424:	102d883a 	mov	r22,r2
 8010428:	8001b580 	call	8001b58 <__mulsi3>
 801042c:	d9800217 	ldw	r6,8(sp)
 8010430:	d8c00017 	ldw	r3,0(sp)
 8010434:	300c943a 	slli	r6,r6,16
 8010438:	1a3fffcc 	andi	r8,r3,65535
 801043c:	4190b03a 	or	r8,r8,r6
 8010440:	4080042e 	bgeu	r8,r2,8010454 <__umoddi3+0x3cc>
 8010444:	4551883a 	add	r8,r8,r21
 8010448:	b0ffffc4 	addi	r3,r22,-1
 801044c:	45406f2e 	bgeu	r8,r21,801060c <__umoddi3+0x584>
 8010450:	182d883a 	mov	r22,r3
 8010454:	880e943a 	slli	r7,r17,16
 8010458:	9006d43a 	srli	r3,r18,16
 801045c:	91bfffcc 	andi	r6,r18,65535
 8010460:	3dacb03a 	or	r22,r7,r22
 8010464:	b02ed43a 	srli	r23,r22,16
 8010468:	b5bfffcc 	andi	r22,r22,65535
 801046c:	300b883a 	mov	r5,r6
 8010470:	b009883a 	mov	r4,r22
 8010474:	40a3c83a 	sub	r17,r8,r2
 8010478:	d8c00115 	stw	r3,4(sp)
 801047c:	d9800215 	stw	r6,8(sp)
 8010480:	8001b580 	call	8001b58 <__mulsi3>
 8010484:	d9800217 	ldw	r6,8(sp)
 8010488:	b809883a 	mov	r4,r23
 801048c:	1039883a 	mov	fp,r2
 8010490:	300b883a 	mov	r5,r6
 8010494:	8001b580 	call	8001b58 <__mulsi3>
 8010498:	d8c00117 	ldw	r3,4(sp)
 801049c:	b809883a 	mov	r4,r23
 80104a0:	d8800215 	stw	r2,8(sp)
 80104a4:	180b883a 	mov	r5,r3
 80104a8:	8001b580 	call	8001b58 <__mulsi3>
 80104ac:	d8c00117 	ldw	r3,4(sp)
 80104b0:	b009883a 	mov	r4,r22
 80104b4:	102f883a 	mov	r23,r2
 80104b8:	180b883a 	mov	r5,r3
 80104bc:	8001b580 	call	8001b58 <__mulsi3>
 80104c0:	d9800217 	ldw	r6,8(sp)
 80104c4:	e006d43a 	srli	r3,fp,16
 80104c8:	1185883a 	add	r2,r2,r6
 80104cc:	1885883a 	add	r2,r3,r2
 80104d0:	1180022e 	bgeu	r2,r6,80104dc <__umoddi3+0x454>
 80104d4:	00c00074 	movhi	r3,1
 80104d8:	b8ef883a 	add	r23,r23,r3
 80104dc:	1006d43a 	srli	r3,r2,16
 80104e0:	1004943a 	slli	r2,r2,16
 80104e4:	e73fffcc 	andi	fp,fp,65535
 80104e8:	1dc7883a 	add	r3,r3,r23
 80104ec:	1739883a 	add	fp,r2,fp
 80104f0:	88c03a36 	bltu	r17,r3,80105dc <__umoddi3+0x554>
 80104f4:	88c05126 	beq	r17,r3,801063c <__umoddi3+0x5b4>
 80104f8:	88c9c83a 	sub	r4,r17,r3
 80104fc:	e00f883a 	mov	r7,fp
 8010500:	81cfc83a 	sub	r7,r16,r7
 8010504:	81c7803a 	cmpltu	r3,r16,r7
 8010508:	20c7c83a 	sub	r3,r4,r3
 801050c:	1cc4983a 	sll	r2,r3,r19
 8010510:	3d0ed83a 	srl	r7,r7,r20
 8010514:	1d06d83a 	srl	r3,r3,r20
 8010518:	11c4b03a 	or	r2,r2,r7
 801051c:	003f7c06 	br	8010310 <__alt_data_end+0xfc010310>
 8010520:	9ca6983a 	sll	r19,r19,r18
 8010524:	88f8d83a 	srl	fp,r17,r3
 8010528:	80c4d83a 	srl	r2,r16,r3
 801052c:	982cd43a 	srli	r22,r19,16
 8010530:	8ca2983a 	sll	r17,r17,r18
 8010534:	e009883a 	mov	r4,fp
 8010538:	b00b883a 	mov	r5,r22
 801053c:	146ab03a 	or	r21,r2,r17
 8010540:	8001b000 	call	8001b00 <__umodsi3>
 8010544:	b00b883a 	mov	r5,r22
 8010548:	e009883a 	mov	r4,fp
 801054c:	1029883a 	mov	r20,r2
 8010550:	9dffffcc 	andi	r23,r19,65535
 8010554:	8001a9c0 	call	8001a9c <__udivsi3>
 8010558:	b809883a 	mov	r4,r23
 801055c:	100b883a 	mov	r5,r2
 8010560:	8001b580 	call	8001b58 <__mulsi3>
 8010564:	a008943a 	slli	r4,r20,16
 8010568:	a806d43a 	srli	r3,r21,16
 801056c:	84a8983a 	sll	r20,r16,r18
 8010570:	1906b03a 	or	r3,r3,r4
 8010574:	1880042e 	bgeu	r3,r2,8010588 <__umoddi3+0x500>
 8010578:	1cc7883a 	add	r3,r3,r19
 801057c:	1cc00236 	bltu	r3,r19,8010588 <__umoddi3+0x500>
 8010580:	1880012e 	bgeu	r3,r2,8010588 <__umoddi3+0x500>
 8010584:	1cc7883a 	add	r3,r3,r19
 8010588:	18a3c83a 	sub	r17,r3,r2
 801058c:	b00b883a 	mov	r5,r22
 8010590:	8809883a 	mov	r4,r17
 8010594:	8001b000 	call	8001b00 <__umodsi3>
 8010598:	b00b883a 	mov	r5,r22
 801059c:	8809883a 	mov	r4,r17
 80105a0:	1021883a 	mov	r16,r2
 80105a4:	8001a9c0 	call	8001a9c <__udivsi3>
 80105a8:	100b883a 	mov	r5,r2
 80105ac:	b809883a 	mov	r4,r23
 80105b0:	8020943a 	slli	r16,r16,16
 80105b4:	8001b580 	call	8001b58 <__mulsi3>
 80105b8:	a8ffffcc 	andi	r3,r21,65535
 80105bc:	1c06b03a 	or	r3,r3,r16
 80105c0:	1880042e 	bgeu	r3,r2,80105d4 <__umoddi3+0x54c>
 80105c4:	1cc7883a 	add	r3,r3,r19
 80105c8:	1cc00236 	bltu	r3,r19,80105d4 <__umoddi3+0x54c>
 80105cc:	1880012e 	bgeu	r3,r2,80105d4 <__umoddi3+0x54c>
 80105d0:	1cc7883a 	add	r3,r3,r19
 80105d4:	18a3c83a 	sub	r17,r3,r2
 80105d8:	003f2906 	br	8010280 <__alt_data_end+0xfc010280>
 80105dc:	e48fc83a 	sub	r7,fp,r18
 80105e0:	1d49c83a 	sub	r4,r3,r21
 80105e4:	e1f9803a 	cmpltu	fp,fp,r7
 80105e8:	2739c83a 	sub	fp,r4,fp
 80105ec:	8f09c83a 	sub	r4,r17,fp
 80105f0:	003fc306 	br	8010500 <__alt_data_end+0xfc010500>
 80105f4:	01000604 	movi	r4,24
 80105f8:	003ef906 	br	80101e0 <__alt_data_end+0xfc0101e0>
 80105fc:	00800604 	movi	r2,24
 8010600:	003f1306 	br	8010250 <__alt_data_end+0xfc010250>
 8010604:	01000604 	movi	r4,24
 8010608:	003eb606 	br	80100e4 <__alt_data_end+0xfc0100e4>
 801060c:	40bf902e 	bgeu	r8,r2,8010450 <__alt_data_end+0xfc010450>
 8010610:	b5bfff84 	addi	r22,r22,-2
 8010614:	4551883a 	add	r8,r8,r21
 8010618:	003f8e06 	br	8010454 <__alt_data_end+0xfc010454>
 801061c:	18bf762e 	bgeu	r3,r2,80103f8 <__alt_data_end+0xfc0103f8>
 8010620:	8c7fff84 	addi	r17,r17,-2
 8010624:	1d47883a 	add	r3,r3,r21
 8010628:	003f7406 	br	80103fc <__alt_data_end+0xfc0103fc>
 801062c:	1cc7883a 	add	r3,r3,r19
 8010630:	003ecd06 	br	8010168 <__alt_data_end+0xfc010168>
 8010634:	8005883a 	mov	r2,r16
 8010638:	003ef806 	br	801021c <__alt_data_end+0xfc01021c>
 801063c:	873fe736 	bltu	r16,fp,80105dc <__alt_data_end+0xfc0105dc>
 8010640:	e00f883a 	mov	r7,fp
 8010644:	0009883a 	mov	r4,zero
 8010648:	003fad06 	br	8010500 <__alt_data_end+0xfc010500>

0801064c <__adddf3>:
 801064c:	02c00434 	movhi	r11,16
 8010650:	5affffc4 	addi	r11,r11,-1
 8010654:	2806d7fa 	srli	r3,r5,31
 8010658:	2ad4703a 	and	r10,r5,r11
 801065c:	3ad2703a 	and	r9,r7,r11
 8010660:	3804d53a 	srli	r2,r7,20
 8010664:	3018d77a 	srli	r12,r6,29
 8010668:	280ad53a 	srli	r5,r5,20
 801066c:	501490fa 	slli	r10,r10,3
 8010670:	2010d77a 	srli	r8,r4,29
 8010674:	481290fa 	slli	r9,r9,3
 8010678:	380ed7fa 	srli	r7,r7,31
 801067c:	defffb04 	addi	sp,sp,-20
 8010680:	dc800215 	stw	r18,8(sp)
 8010684:	dc400115 	stw	r17,4(sp)
 8010688:	dc000015 	stw	r16,0(sp)
 801068c:	dfc00415 	stw	ra,16(sp)
 8010690:	dcc00315 	stw	r19,12(sp)
 8010694:	1c803fcc 	andi	r18,r3,255
 8010698:	2c01ffcc 	andi	r16,r5,2047
 801069c:	5210b03a 	or	r8,r10,r8
 80106a0:	202290fa 	slli	r17,r4,3
 80106a4:	1081ffcc 	andi	r2,r2,2047
 80106a8:	4b12b03a 	or	r9,r9,r12
 80106ac:	300c90fa 	slli	r6,r6,3
 80106b0:	91c07526 	beq	r18,r7,8010888 <__adddf3+0x23c>
 80106b4:	8087c83a 	sub	r3,r16,r2
 80106b8:	00c0ab0e 	bge	zero,r3,8010968 <__adddf3+0x31c>
 80106bc:	10002a1e 	bne	r2,zero,8010768 <__adddf3+0x11c>
 80106c0:	4984b03a 	or	r2,r9,r6
 80106c4:	1000961e 	bne	r2,zero,8010920 <__adddf3+0x2d4>
 80106c8:	888001cc 	andi	r2,r17,7
 80106cc:	10000726 	beq	r2,zero,80106ec <__adddf3+0xa0>
 80106d0:	888003cc 	andi	r2,r17,15
 80106d4:	00c00104 	movi	r3,4
 80106d8:	10c00426 	beq	r2,r3,80106ec <__adddf3+0xa0>
 80106dc:	88c7883a 	add	r3,r17,r3
 80106e0:	1c63803a 	cmpltu	r17,r3,r17
 80106e4:	4451883a 	add	r8,r8,r17
 80106e8:	1823883a 	mov	r17,r3
 80106ec:	4080202c 	andhi	r2,r8,128
 80106f0:	10005926 	beq	r2,zero,8010858 <__adddf3+0x20c>
 80106f4:	84000044 	addi	r16,r16,1
 80106f8:	0081ffc4 	movi	r2,2047
 80106fc:	8080ba26 	beq	r16,r2,80109e8 <__adddf3+0x39c>
 8010700:	00bfe034 	movhi	r2,65408
 8010704:	10bfffc4 	addi	r2,r2,-1
 8010708:	4090703a 	and	r8,r8,r2
 801070c:	4004977a 	slli	r2,r8,29
 8010710:	4010927a 	slli	r8,r8,9
 8010714:	8822d0fa 	srli	r17,r17,3
 8010718:	8401ffcc 	andi	r16,r16,2047
 801071c:	4010d33a 	srli	r8,r8,12
 8010720:	9007883a 	mov	r3,r18
 8010724:	1444b03a 	or	r2,r2,r17
 8010728:	8401ffcc 	andi	r16,r16,2047
 801072c:	8020953a 	slli	r16,r16,20
 8010730:	18c03fcc 	andi	r3,r3,255
 8010734:	01000434 	movhi	r4,16
 8010738:	213fffc4 	addi	r4,r4,-1
 801073c:	180697fa 	slli	r3,r3,31
 8010740:	4110703a 	and	r8,r8,r4
 8010744:	4410b03a 	or	r8,r8,r16
 8010748:	40c6b03a 	or	r3,r8,r3
 801074c:	dfc00417 	ldw	ra,16(sp)
 8010750:	dcc00317 	ldw	r19,12(sp)
 8010754:	dc800217 	ldw	r18,8(sp)
 8010758:	dc400117 	ldw	r17,4(sp)
 801075c:	dc000017 	ldw	r16,0(sp)
 8010760:	dec00504 	addi	sp,sp,20
 8010764:	f800283a 	ret
 8010768:	0081ffc4 	movi	r2,2047
 801076c:	80bfd626 	beq	r16,r2,80106c8 <__alt_data_end+0xfc0106c8>
 8010770:	4a402034 	orhi	r9,r9,128
 8010774:	00800e04 	movi	r2,56
 8010778:	10c09f16 	blt	r2,r3,80109f8 <__adddf3+0x3ac>
 801077c:	008007c4 	movi	r2,31
 8010780:	10c0c216 	blt	r2,r3,8010a8c <__adddf3+0x440>
 8010784:	00800804 	movi	r2,32
 8010788:	10c5c83a 	sub	r2,r2,r3
 801078c:	488a983a 	sll	r5,r9,r2
 8010790:	30c8d83a 	srl	r4,r6,r3
 8010794:	3084983a 	sll	r2,r6,r2
 8010798:	48c6d83a 	srl	r3,r9,r3
 801079c:	290cb03a 	or	r6,r5,r4
 80107a0:	1004c03a 	cmpne	r2,r2,zero
 80107a4:	308cb03a 	or	r6,r6,r2
 80107a8:	898dc83a 	sub	r6,r17,r6
 80107ac:	89a3803a 	cmpltu	r17,r17,r6
 80107b0:	40d1c83a 	sub	r8,r8,r3
 80107b4:	4451c83a 	sub	r8,r8,r17
 80107b8:	3023883a 	mov	r17,r6
 80107bc:	4080202c 	andhi	r2,r8,128
 80107c0:	10002326 	beq	r2,zero,8010850 <__adddf3+0x204>
 80107c4:	04c02034 	movhi	r19,128
 80107c8:	9cffffc4 	addi	r19,r19,-1
 80107cc:	44e6703a 	and	r19,r8,r19
 80107d0:	98007626 	beq	r19,zero,80109ac <__adddf3+0x360>
 80107d4:	9809883a 	mov	r4,r19
 80107d8:	80026b00 	call	80026b0 <__clzsi2>
 80107dc:	10fffe04 	addi	r3,r2,-8
 80107e0:	010007c4 	movi	r4,31
 80107e4:	20c07716 	blt	r4,r3,80109c4 <__adddf3+0x378>
 80107e8:	00800804 	movi	r2,32
 80107ec:	10c5c83a 	sub	r2,r2,r3
 80107f0:	8884d83a 	srl	r2,r17,r2
 80107f4:	98d0983a 	sll	r8,r19,r3
 80107f8:	88e2983a 	sll	r17,r17,r3
 80107fc:	1204b03a 	or	r2,r2,r8
 8010800:	1c007416 	blt	r3,r16,80109d4 <__adddf3+0x388>
 8010804:	1c21c83a 	sub	r16,r3,r16
 8010808:	82000044 	addi	r8,r16,1
 801080c:	00c007c4 	movi	r3,31
 8010810:	1a009116 	blt	r3,r8,8010a58 <__adddf3+0x40c>
 8010814:	00c00804 	movi	r3,32
 8010818:	1a07c83a 	sub	r3,r3,r8
 801081c:	8a08d83a 	srl	r4,r17,r8
 8010820:	88e2983a 	sll	r17,r17,r3
 8010824:	10c6983a 	sll	r3,r2,r3
 8010828:	1210d83a 	srl	r8,r2,r8
 801082c:	8804c03a 	cmpne	r2,r17,zero
 8010830:	1906b03a 	or	r3,r3,r4
 8010834:	18a2b03a 	or	r17,r3,r2
 8010838:	0021883a 	mov	r16,zero
 801083c:	003fa206 	br	80106c8 <__alt_data_end+0xfc0106c8>
 8010840:	1890b03a 	or	r8,r3,r2
 8010844:	40017d26 	beq	r8,zero,8010e3c <__adddf3+0x7f0>
 8010848:	1011883a 	mov	r8,r2
 801084c:	1823883a 	mov	r17,r3
 8010850:	888001cc 	andi	r2,r17,7
 8010854:	103f9e1e 	bne	r2,zero,80106d0 <__alt_data_end+0xfc0106d0>
 8010858:	4004977a 	slli	r2,r8,29
 801085c:	8822d0fa 	srli	r17,r17,3
 8010860:	4010d0fa 	srli	r8,r8,3
 8010864:	9007883a 	mov	r3,r18
 8010868:	1444b03a 	or	r2,r2,r17
 801086c:	0101ffc4 	movi	r4,2047
 8010870:	81002426 	beq	r16,r4,8010904 <__adddf3+0x2b8>
 8010874:	8120703a 	and	r16,r16,r4
 8010878:	01000434 	movhi	r4,16
 801087c:	213fffc4 	addi	r4,r4,-1
 8010880:	4110703a 	and	r8,r8,r4
 8010884:	003fa806 	br	8010728 <__alt_data_end+0xfc010728>
 8010888:	8089c83a 	sub	r4,r16,r2
 801088c:	01005e0e 	bge	zero,r4,8010a08 <__adddf3+0x3bc>
 8010890:	10002b26 	beq	r2,zero,8010940 <__adddf3+0x2f4>
 8010894:	0081ffc4 	movi	r2,2047
 8010898:	80bf8b26 	beq	r16,r2,80106c8 <__alt_data_end+0xfc0106c8>
 801089c:	4a402034 	orhi	r9,r9,128
 80108a0:	00800e04 	movi	r2,56
 80108a4:	1100a40e 	bge	r2,r4,8010b38 <__adddf3+0x4ec>
 80108a8:	498cb03a 	or	r6,r9,r6
 80108ac:	300ac03a 	cmpne	r5,r6,zero
 80108b0:	0013883a 	mov	r9,zero
 80108b4:	2c4b883a 	add	r5,r5,r17
 80108b8:	2c63803a 	cmpltu	r17,r5,r17
 80108bc:	4a11883a 	add	r8,r9,r8
 80108c0:	8a11883a 	add	r8,r17,r8
 80108c4:	2823883a 	mov	r17,r5
 80108c8:	4080202c 	andhi	r2,r8,128
 80108cc:	103fe026 	beq	r2,zero,8010850 <__alt_data_end+0xfc010850>
 80108d0:	84000044 	addi	r16,r16,1
 80108d4:	0081ffc4 	movi	r2,2047
 80108d8:	8080d226 	beq	r16,r2,8010c24 <__adddf3+0x5d8>
 80108dc:	00bfe034 	movhi	r2,65408
 80108e0:	10bfffc4 	addi	r2,r2,-1
 80108e4:	4090703a 	and	r8,r8,r2
 80108e8:	880ad07a 	srli	r5,r17,1
 80108ec:	400897fa 	slli	r4,r8,31
 80108f0:	88c0004c 	andi	r3,r17,1
 80108f4:	28e2b03a 	or	r17,r5,r3
 80108f8:	4010d07a 	srli	r8,r8,1
 80108fc:	2462b03a 	or	r17,r4,r17
 8010900:	003f7106 	br	80106c8 <__alt_data_end+0xfc0106c8>
 8010904:	4088b03a 	or	r4,r8,r2
 8010908:	20014526 	beq	r4,zero,8010e20 <__adddf3+0x7d4>
 801090c:	01000434 	movhi	r4,16
 8010910:	42000234 	orhi	r8,r8,8
 8010914:	213fffc4 	addi	r4,r4,-1
 8010918:	4110703a 	and	r8,r8,r4
 801091c:	003f8206 	br	8010728 <__alt_data_end+0xfc010728>
 8010920:	18ffffc4 	addi	r3,r3,-1
 8010924:	1800491e 	bne	r3,zero,8010a4c <__adddf3+0x400>
 8010928:	898bc83a 	sub	r5,r17,r6
 801092c:	8963803a 	cmpltu	r17,r17,r5
 8010930:	4251c83a 	sub	r8,r8,r9
 8010934:	4451c83a 	sub	r8,r8,r17
 8010938:	2823883a 	mov	r17,r5
 801093c:	003f9f06 	br	80107bc <__alt_data_end+0xfc0107bc>
 8010940:	4984b03a 	or	r2,r9,r6
 8010944:	103f6026 	beq	r2,zero,80106c8 <__alt_data_end+0xfc0106c8>
 8010948:	213fffc4 	addi	r4,r4,-1
 801094c:	2000931e 	bne	r4,zero,8010b9c <__adddf3+0x550>
 8010950:	898d883a 	add	r6,r17,r6
 8010954:	3463803a 	cmpltu	r17,r6,r17
 8010958:	4251883a 	add	r8,r8,r9
 801095c:	8a11883a 	add	r8,r17,r8
 8010960:	3023883a 	mov	r17,r6
 8010964:	003fd806 	br	80108c8 <__alt_data_end+0xfc0108c8>
 8010968:	1800541e 	bne	r3,zero,8010abc <__adddf3+0x470>
 801096c:	80800044 	addi	r2,r16,1
 8010970:	1081ffcc 	andi	r2,r2,2047
 8010974:	00c00044 	movi	r3,1
 8010978:	1880a00e 	bge	r3,r2,8010bfc <__adddf3+0x5b0>
 801097c:	8989c83a 	sub	r4,r17,r6
 8010980:	8905803a 	cmpltu	r2,r17,r4
 8010984:	4267c83a 	sub	r19,r8,r9
 8010988:	98a7c83a 	sub	r19,r19,r2
 801098c:	9880202c 	andhi	r2,r19,128
 8010990:	10006326 	beq	r2,zero,8010b20 <__adddf3+0x4d4>
 8010994:	3463c83a 	sub	r17,r6,r17
 8010998:	4a07c83a 	sub	r3,r9,r8
 801099c:	344d803a 	cmpltu	r6,r6,r17
 80109a0:	19a7c83a 	sub	r19,r3,r6
 80109a4:	3825883a 	mov	r18,r7
 80109a8:	983f8a1e 	bne	r19,zero,80107d4 <__alt_data_end+0xfc0107d4>
 80109ac:	8809883a 	mov	r4,r17
 80109b0:	80026b00 	call	80026b0 <__clzsi2>
 80109b4:	10800804 	addi	r2,r2,32
 80109b8:	10fffe04 	addi	r3,r2,-8
 80109bc:	010007c4 	movi	r4,31
 80109c0:	20ff890e 	bge	r4,r3,80107e8 <__alt_data_end+0xfc0107e8>
 80109c4:	10bff604 	addi	r2,r2,-40
 80109c8:	8884983a 	sll	r2,r17,r2
 80109cc:	0023883a 	mov	r17,zero
 80109d0:	1c3f8c0e 	bge	r3,r16,8010804 <__alt_data_end+0xfc010804>
 80109d4:	023fe034 	movhi	r8,65408
 80109d8:	423fffc4 	addi	r8,r8,-1
 80109dc:	80e1c83a 	sub	r16,r16,r3
 80109e0:	1210703a 	and	r8,r2,r8
 80109e4:	003f3806 	br	80106c8 <__alt_data_end+0xfc0106c8>
 80109e8:	9007883a 	mov	r3,r18
 80109ec:	0011883a 	mov	r8,zero
 80109f0:	0005883a 	mov	r2,zero
 80109f4:	003f4c06 	br	8010728 <__alt_data_end+0xfc010728>
 80109f8:	498cb03a 	or	r6,r9,r6
 80109fc:	300cc03a 	cmpne	r6,r6,zero
 8010a00:	0007883a 	mov	r3,zero
 8010a04:	003f6806 	br	80107a8 <__alt_data_end+0xfc0107a8>
 8010a08:	20009c1e 	bne	r4,zero,8010c7c <__adddf3+0x630>
 8010a0c:	80800044 	addi	r2,r16,1
 8010a10:	1141ffcc 	andi	r5,r2,2047
 8010a14:	01000044 	movi	r4,1
 8010a18:	2140670e 	bge	r4,r5,8010bb8 <__adddf3+0x56c>
 8010a1c:	0101ffc4 	movi	r4,2047
 8010a20:	11007f26 	beq	r2,r4,8010c20 <__adddf3+0x5d4>
 8010a24:	898d883a 	add	r6,r17,r6
 8010a28:	4247883a 	add	r3,r8,r9
 8010a2c:	3451803a 	cmpltu	r8,r6,r17
 8010a30:	40d1883a 	add	r8,r8,r3
 8010a34:	402297fa 	slli	r17,r8,31
 8010a38:	300cd07a 	srli	r6,r6,1
 8010a3c:	4010d07a 	srli	r8,r8,1
 8010a40:	1021883a 	mov	r16,r2
 8010a44:	89a2b03a 	or	r17,r17,r6
 8010a48:	003f1f06 	br	80106c8 <__alt_data_end+0xfc0106c8>
 8010a4c:	0081ffc4 	movi	r2,2047
 8010a50:	80bf481e 	bne	r16,r2,8010774 <__alt_data_end+0xfc010774>
 8010a54:	003f1c06 	br	80106c8 <__alt_data_end+0xfc0106c8>
 8010a58:	843ff844 	addi	r16,r16,-31
 8010a5c:	01000804 	movi	r4,32
 8010a60:	1406d83a 	srl	r3,r2,r16
 8010a64:	41005026 	beq	r8,r4,8010ba8 <__adddf3+0x55c>
 8010a68:	01001004 	movi	r4,64
 8010a6c:	2211c83a 	sub	r8,r4,r8
 8010a70:	1204983a 	sll	r2,r2,r8
 8010a74:	88a2b03a 	or	r17,r17,r2
 8010a78:	8822c03a 	cmpne	r17,r17,zero
 8010a7c:	1c62b03a 	or	r17,r3,r17
 8010a80:	0011883a 	mov	r8,zero
 8010a84:	0021883a 	mov	r16,zero
 8010a88:	003f7106 	br	8010850 <__alt_data_end+0xfc010850>
 8010a8c:	193ff804 	addi	r4,r3,-32
 8010a90:	00800804 	movi	r2,32
 8010a94:	4908d83a 	srl	r4,r9,r4
 8010a98:	18804526 	beq	r3,r2,8010bb0 <__adddf3+0x564>
 8010a9c:	00801004 	movi	r2,64
 8010aa0:	10c5c83a 	sub	r2,r2,r3
 8010aa4:	4886983a 	sll	r3,r9,r2
 8010aa8:	198cb03a 	or	r6,r3,r6
 8010aac:	300cc03a 	cmpne	r6,r6,zero
 8010ab0:	218cb03a 	or	r6,r4,r6
 8010ab4:	0007883a 	mov	r3,zero
 8010ab8:	003f3b06 	br	80107a8 <__alt_data_end+0xfc0107a8>
 8010abc:	80002a26 	beq	r16,zero,8010b68 <__adddf3+0x51c>
 8010ac0:	0101ffc4 	movi	r4,2047
 8010ac4:	11006826 	beq	r2,r4,8010c68 <__adddf3+0x61c>
 8010ac8:	00c7c83a 	sub	r3,zero,r3
 8010acc:	42002034 	orhi	r8,r8,128
 8010ad0:	01000e04 	movi	r4,56
 8010ad4:	20c07c16 	blt	r4,r3,8010cc8 <__adddf3+0x67c>
 8010ad8:	010007c4 	movi	r4,31
 8010adc:	20c0da16 	blt	r4,r3,8010e48 <__adddf3+0x7fc>
 8010ae0:	01000804 	movi	r4,32
 8010ae4:	20c9c83a 	sub	r4,r4,r3
 8010ae8:	4114983a 	sll	r10,r8,r4
 8010aec:	88cad83a 	srl	r5,r17,r3
 8010af0:	8908983a 	sll	r4,r17,r4
 8010af4:	40c6d83a 	srl	r3,r8,r3
 8010af8:	5162b03a 	or	r17,r10,r5
 8010afc:	2008c03a 	cmpne	r4,r4,zero
 8010b00:	8922b03a 	or	r17,r17,r4
 8010b04:	3463c83a 	sub	r17,r6,r17
 8010b08:	48c7c83a 	sub	r3,r9,r3
 8010b0c:	344d803a 	cmpltu	r6,r6,r17
 8010b10:	1991c83a 	sub	r8,r3,r6
 8010b14:	1021883a 	mov	r16,r2
 8010b18:	3825883a 	mov	r18,r7
 8010b1c:	003f2706 	br	80107bc <__alt_data_end+0xfc0107bc>
 8010b20:	24d0b03a 	or	r8,r4,r19
 8010b24:	40001b1e 	bne	r8,zero,8010b94 <__adddf3+0x548>
 8010b28:	0005883a 	mov	r2,zero
 8010b2c:	0007883a 	mov	r3,zero
 8010b30:	0021883a 	mov	r16,zero
 8010b34:	003f4d06 	br	801086c <__alt_data_end+0xfc01086c>
 8010b38:	008007c4 	movi	r2,31
 8010b3c:	11003c16 	blt	r2,r4,8010c30 <__adddf3+0x5e4>
 8010b40:	00800804 	movi	r2,32
 8010b44:	1105c83a 	sub	r2,r2,r4
 8010b48:	488e983a 	sll	r7,r9,r2
 8010b4c:	310ad83a 	srl	r5,r6,r4
 8010b50:	3084983a 	sll	r2,r6,r2
 8010b54:	4912d83a 	srl	r9,r9,r4
 8010b58:	394ab03a 	or	r5,r7,r5
 8010b5c:	1004c03a 	cmpne	r2,r2,zero
 8010b60:	288ab03a 	or	r5,r5,r2
 8010b64:	003f5306 	br	80108b4 <__alt_data_end+0xfc0108b4>
 8010b68:	4448b03a 	or	r4,r8,r17
 8010b6c:	20003e26 	beq	r4,zero,8010c68 <__adddf3+0x61c>
 8010b70:	00c6303a 	nor	r3,zero,r3
 8010b74:	18003a1e 	bne	r3,zero,8010c60 <__adddf3+0x614>
 8010b78:	3463c83a 	sub	r17,r6,r17
 8010b7c:	4a07c83a 	sub	r3,r9,r8
 8010b80:	344d803a 	cmpltu	r6,r6,r17
 8010b84:	1991c83a 	sub	r8,r3,r6
 8010b88:	1021883a 	mov	r16,r2
 8010b8c:	3825883a 	mov	r18,r7
 8010b90:	003f0a06 	br	80107bc <__alt_data_end+0xfc0107bc>
 8010b94:	2023883a 	mov	r17,r4
 8010b98:	003f0d06 	br	80107d0 <__alt_data_end+0xfc0107d0>
 8010b9c:	0081ffc4 	movi	r2,2047
 8010ba0:	80bf3f1e 	bne	r16,r2,80108a0 <__alt_data_end+0xfc0108a0>
 8010ba4:	003ec806 	br	80106c8 <__alt_data_end+0xfc0106c8>
 8010ba8:	0005883a 	mov	r2,zero
 8010bac:	003fb106 	br	8010a74 <__alt_data_end+0xfc010a74>
 8010bb0:	0007883a 	mov	r3,zero
 8010bb4:	003fbc06 	br	8010aa8 <__alt_data_end+0xfc010aa8>
 8010bb8:	4444b03a 	or	r2,r8,r17
 8010bbc:	8000871e 	bne	r16,zero,8010ddc <__adddf3+0x790>
 8010bc0:	1000ba26 	beq	r2,zero,8010eac <__adddf3+0x860>
 8010bc4:	4984b03a 	or	r2,r9,r6
 8010bc8:	103ebf26 	beq	r2,zero,80106c8 <__alt_data_end+0xfc0106c8>
 8010bcc:	8985883a 	add	r2,r17,r6
 8010bd0:	4247883a 	add	r3,r8,r9
 8010bd4:	1451803a 	cmpltu	r8,r2,r17
 8010bd8:	40d1883a 	add	r8,r8,r3
 8010bdc:	40c0202c 	andhi	r3,r8,128
 8010be0:	1023883a 	mov	r17,r2
 8010be4:	183f1a26 	beq	r3,zero,8010850 <__alt_data_end+0xfc010850>
 8010be8:	00bfe034 	movhi	r2,65408
 8010bec:	10bfffc4 	addi	r2,r2,-1
 8010bf0:	2021883a 	mov	r16,r4
 8010bf4:	4090703a 	and	r8,r8,r2
 8010bf8:	003eb306 	br	80106c8 <__alt_data_end+0xfc0106c8>
 8010bfc:	4444b03a 	or	r2,r8,r17
 8010c00:	8000291e 	bne	r16,zero,8010ca8 <__adddf3+0x65c>
 8010c04:	10004b1e 	bne	r2,zero,8010d34 <__adddf3+0x6e8>
 8010c08:	4990b03a 	or	r8,r9,r6
 8010c0c:	40008b26 	beq	r8,zero,8010e3c <__adddf3+0x7f0>
 8010c10:	4811883a 	mov	r8,r9
 8010c14:	3023883a 	mov	r17,r6
 8010c18:	3825883a 	mov	r18,r7
 8010c1c:	003eaa06 	br	80106c8 <__alt_data_end+0xfc0106c8>
 8010c20:	1021883a 	mov	r16,r2
 8010c24:	0011883a 	mov	r8,zero
 8010c28:	0005883a 	mov	r2,zero
 8010c2c:	003f0f06 	br	801086c <__alt_data_end+0xfc01086c>
 8010c30:	217ff804 	addi	r5,r4,-32
 8010c34:	00800804 	movi	r2,32
 8010c38:	494ad83a 	srl	r5,r9,r5
 8010c3c:	20807d26 	beq	r4,r2,8010e34 <__adddf3+0x7e8>
 8010c40:	00801004 	movi	r2,64
 8010c44:	1109c83a 	sub	r4,r2,r4
 8010c48:	4912983a 	sll	r9,r9,r4
 8010c4c:	498cb03a 	or	r6,r9,r6
 8010c50:	300cc03a 	cmpne	r6,r6,zero
 8010c54:	298ab03a 	or	r5,r5,r6
 8010c58:	0013883a 	mov	r9,zero
 8010c5c:	003f1506 	br	80108b4 <__alt_data_end+0xfc0108b4>
 8010c60:	0101ffc4 	movi	r4,2047
 8010c64:	113f9a1e 	bne	r2,r4,8010ad0 <__alt_data_end+0xfc010ad0>
 8010c68:	4811883a 	mov	r8,r9
 8010c6c:	3023883a 	mov	r17,r6
 8010c70:	1021883a 	mov	r16,r2
 8010c74:	3825883a 	mov	r18,r7
 8010c78:	003e9306 	br	80106c8 <__alt_data_end+0xfc0106c8>
 8010c7c:	8000161e 	bne	r16,zero,8010cd8 <__adddf3+0x68c>
 8010c80:	444ab03a 	or	r5,r8,r17
 8010c84:	28005126 	beq	r5,zero,8010dcc <__adddf3+0x780>
 8010c88:	0108303a 	nor	r4,zero,r4
 8010c8c:	20004d1e 	bne	r4,zero,8010dc4 <__adddf3+0x778>
 8010c90:	89a3883a 	add	r17,r17,r6
 8010c94:	4253883a 	add	r9,r8,r9
 8010c98:	898d803a 	cmpltu	r6,r17,r6
 8010c9c:	3251883a 	add	r8,r6,r9
 8010ca0:	1021883a 	mov	r16,r2
 8010ca4:	003f0806 	br	80108c8 <__alt_data_end+0xfc0108c8>
 8010ca8:	1000301e 	bne	r2,zero,8010d6c <__adddf3+0x720>
 8010cac:	4984b03a 	or	r2,r9,r6
 8010cb0:	10007126 	beq	r2,zero,8010e78 <__adddf3+0x82c>
 8010cb4:	4811883a 	mov	r8,r9
 8010cb8:	3023883a 	mov	r17,r6
 8010cbc:	3825883a 	mov	r18,r7
 8010cc0:	0401ffc4 	movi	r16,2047
 8010cc4:	003e8006 	br	80106c8 <__alt_data_end+0xfc0106c8>
 8010cc8:	4462b03a 	or	r17,r8,r17
 8010ccc:	8822c03a 	cmpne	r17,r17,zero
 8010cd0:	0007883a 	mov	r3,zero
 8010cd4:	003f8b06 	br	8010b04 <__alt_data_end+0xfc010b04>
 8010cd8:	0141ffc4 	movi	r5,2047
 8010cdc:	11403b26 	beq	r2,r5,8010dcc <__adddf3+0x780>
 8010ce0:	0109c83a 	sub	r4,zero,r4
 8010ce4:	42002034 	orhi	r8,r8,128
 8010ce8:	01400e04 	movi	r5,56
 8010cec:	29006716 	blt	r5,r4,8010e8c <__adddf3+0x840>
 8010cf0:	014007c4 	movi	r5,31
 8010cf4:	29007016 	blt	r5,r4,8010eb8 <__adddf3+0x86c>
 8010cf8:	01400804 	movi	r5,32
 8010cfc:	290bc83a 	sub	r5,r5,r4
 8010d00:	4154983a 	sll	r10,r8,r5
 8010d04:	890ed83a 	srl	r7,r17,r4
 8010d08:	894a983a 	sll	r5,r17,r5
 8010d0c:	4108d83a 	srl	r4,r8,r4
 8010d10:	51e2b03a 	or	r17,r10,r7
 8010d14:	280ac03a 	cmpne	r5,r5,zero
 8010d18:	8962b03a 	or	r17,r17,r5
 8010d1c:	89a3883a 	add	r17,r17,r6
 8010d20:	2253883a 	add	r9,r4,r9
 8010d24:	898d803a 	cmpltu	r6,r17,r6
 8010d28:	3251883a 	add	r8,r6,r9
 8010d2c:	1021883a 	mov	r16,r2
 8010d30:	003ee506 	br	80108c8 <__alt_data_end+0xfc0108c8>
 8010d34:	4984b03a 	or	r2,r9,r6
 8010d38:	103e6326 	beq	r2,zero,80106c8 <__alt_data_end+0xfc0106c8>
 8010d3c:	8987c83a 	sub	r3,r17,r6
 8010d40:	88c9803a 	cmpltu	r4,r17,r3
 8010d44:	4245c83a 	sub	r2,r8,r9
 8010d48:	1105c83a 	sub	r2,r2,r4
 8010d4c:	1100202c 	andhi	r4,r2,128
 8010d50:	203ebb26 	beq	r4,zero,8010840 <__alt_data_end+0xfc010840>
 8010d54:	3463c83a 	sub	r17,r6,r17
 8010d58:	4a07c83a 	sub	r3,r9,r8
 8010d5c:	344d803a 	cmpltu	r6,r6,r17
 8010d60:	1991c83a 	sub	r8,r3,r6
 8010d64:	3825883a 	mov	r18,r7
 8010d68:	003e5706 	br	80106c8 <__alt_data_end+0xfc0106c8>
 8010d6c:	4984b03a 	or	r2,r9,r6
 8010d70:	10002e26 	beq	r2,zero,8010e2c <__adddf3+0x7e0>
 8010d74:	4004d0fa 	srli	r2,r8,3
 8010d78:	8822d0fa 	srli	r17,r17,3
 8010d7c:	4010977a 	slli	r8,r8,29
 8010d80:	10c0022c 	andhi	r3,r2,8
 8010d84:	4462b03a 	or	r17,r8,r17
 8010d88:	18000826 	beq	r3,zero,8010dac <__adddf3+0x760>
 8010d8c:	4808d0fa 	srli	r4,r9,3
 8010d90:	20c0022c 	andhi	r3,r4,8
 8010d94:	1800051e 	bne	r3,zero,8010dac <__adddf3+0x760>
 8010d98:	300cd0fa 	srli	r6,r6,3
 8010d9c:	4806977a 	slli	r3,r9,29
 8010da0:	2005883a 	mov	r2,r4
 8010da4:	3825883a 	mov	r18,r7
 8010da8:	19a2b03a 	or	r17,r3,r6
 8010dac:	8810d77a 	srli	r8,r17,29
 8010db0:	100490fa 	slli	r2,r2,3
 8010db4:	882290fa 	slli	r17,r17,3
 8010db8:	0401ffc4 	movi	r16,2047
 8010dbc:	4090b03a 	or	r8,r8,r2
 8010dc0:	003e4106 	br	80106c8 <__alt_data_end+0xfc0106c8>
 8010dc4:	0141ffc4 	movi	r5,2047
 8010dc8:	117fc71e 	bne	r2,r5,8010ce8 <__alt_data_end+0xfc010ce8>
 8010dcc:	4811883a 	mov	r8,r9
 8010dd0:	3023883a 	mov	r17,r6
 8010dd4:	1021883a 	mov	r16,r2
 8010dd8:	003e3b06 	br	80106c8 <__alt_data_end+0xfc0106c8>
 8010ddc:	10002f26 	beq	r2,zero,8010e9c <__adddf3+0x850>
 8010de0:	4984b03a 	or	r2,r9,r6
 8010de4:	10001126 	beq	r2,zero,8010e2c <__adddf3+0x7e0>
 8010de8:	4004d0fa 	srli	r2,r8,3
 8010dec:	8822d0fa 	srli	r17,r17,3
 8010df0:	4010977a 	slli	r8,r8,29
 8010df4:	10c0022c 	andhi	r3,r2,8
 8010df8:	4462b03a 	or	r17,r8,r17
 8010dfc:	183feb26 	beq	r3,zero,8010dac <__alt_data_end+0xfc010dac>
 8010e00:	4808d0fa 	srli	r4,r9,3
 8010e04:	20c0022c 	andhi	r3,r4,8
 8010e08:	183fe81e 	bne	r3,zero,8010dac <__alt_data_end+0xfc010dac>
 8010e0c:	300cd0fa 	srli	r6,r6,3
 8010e10:	4806977a 	slli	r3,r9,29
 8010e14:	2005883a 	mov	r2,r4
 8010e18:	19a2b03a 	or	r17,r3,r6
 8010e1c:	003fe306 	br	8010dac <__alt_data_end+0xfc010dac>
 8010e20:	0011883a 	mov	r8,zero
 8010e24:	0005883a 	mov	r2,zero
 8010e28:	003e3f06 	br	8010728 <__alt_data_end+0xfc010728>
 8010e2c:	0401ffc4 	movi	r16,2047
 8010e30:	003e2506 	br	80106c8 <__alt_data_end+0xfc0106c8>
 8010e34:	0013883a 	mov	r9,zero
 8010e38:	003f8406 	br	8010c4c <__alt_data_end+0xfc010c4c>
 8010e3c:	0005883a 	mov	r2,zero
 8010e40:	0007883a 	mov	r3,zero
 8010e44:	003e8906 	br	801086c <__alt_data_end+0xfc01086c>
 8010e48:	197ff804 	addi	r5,r3,-32
 8010e4c:	01000804 	movi	r4,32
 8010e50:	414ad83a 	srl	r5,r8,r5
 8010e54:	19002426 	beq	r3,r4,8010ee8 <__adddf3+0x89c>
 8010e58:	01001004 	movi	r4,64
 8010e5c:	20c7c83a 	sub	r3,r4,r3
 8010e60:	40c6983a 	sll	r3,r8,r3
 8010e64:	1c46b03a 	or	r3,r3,r17
 8010e68:	1806c03a 	cmpne	r3,r3,zero
 8010e6c:	28e2b03a 	or	r17,r5,r3
 8010e70:	0007883a 	mov	r3,zero
 8010e74:	003f2306 	br	8010b04 <__alt_data_end+0xfc010b04>
 8010e78:	0007883a 	mov	r3,zero
 8010e7c:	5811883a 	mov	r8,r11
 8010e80:	00bfffc4 	movi	r2,-1
 8010e84:	0401ffc4 	movi	r16,2047
 8010e88:	003e7806 	br	801086c <__alt_data_end+0xfc01086c>
 8010e8c:	4462b03a 	or	r17,r8,r17
 8010e90:	8822c03a 	cmpne	r17,r17,zero
 8010e94:	0009883a 	mov	r4,zero
 8010e98:	003fa006 	br	8010d1c <__alt_data_end+0xfc010d1c>
 8010e9c:	4811883a 	mov	r8,r9
 8010ea0:	3023883a 	mov	r17,r6
 8010ea4:	0401ffc4 	movi	r16,2047
 8010ea8:	003e0706 	br	80106c8 <__alt_data_end+0xfc0106c8>
 8010eac:	4811883a 	mov	r8,r9
 8010eb0:	3023883a 	mov	r17,r6
 8010eb4:	003e0406 	br	80106c8 <__alt_data_end+0xfc0106c8>
 8010eb8:	21fff804 	addi	r7,r4,-32
 8010ebc:	01400804 	movi	r5,32
 8010ec0:	41ced83a 	srl	r7,r8,r7
 8010ec4:	21400a26 	beq	r4,r5,8010ef0 <__adddf3+0x8a4>
 8010ec8:	01401004 	movi	r5,64
 8010ecc:	2909c83a 	sub	r4,r5,r4
 8010ed0:	4108983a 	sll	r4,r8,r4
 8010ed4:	2448b03a 	or	r4,r4,r17
 8010ed8:	2008c03a 	cmpne	r4,r4,zero
 8010edc:	3922b03a 	or	r17,r7,r4
 8010ee0:	0009883a 	mov	r4,zero
 8010ee4:	003f8d06 	br	8010d1c <__alt_data_end+0xfc010d1c>
 8010ee8:	0007883a 	mov	r3,zero
 8010eec:	003fdd06 	br	8010e64 <__alt_data_end+0xfc010e64>
 8010ef0:	0009883a 	mov	r4,zero
 8010ef4:	003ff706 	br	8010ed4 <__alt_data_end+0xfc010ed4>

08010ef8 <__divdf3>:
 8010ef8:	defff004 	addi	sp,sp,-64
 8010efc:	dc800815 	stw	r18,32(sp)
 8010f00:	2824d53a 	srli	r18,r5,20
 8010f04:	dd800c15 	stw	r22,48(sp)
 8010f08:	282cd7fa 	srli	r22,r5,31
 8010f0c:	dc000615 	stw	r16,24(sp)
 8010f10:	04000434 	movhi	r16,16
 8010f14:	843fffc4 	addi	r16,r16,-1
 8010f18:	dfc00f15 	stw	ra,60(sp)
 8010f1c:	df000e15 	stw	fp,56(sp)
 8010f20:	ddc00d15 	stw	r23,52(sp)
 8010f24:	dd400b15 	stw	r21,44(sp)
 8010f28:	dd000a15 	stw	r20,40(sp)
 8010f2c:	dcc00915 	stw	r19,36(sp)
 8010f30:	dc400715 	stw	r17,28(sp)
 8010f34:	9481ffcc 	andi	r18,r18,2047
 8010f38:	2c20703a 	and	r16,r5,r16
 8010f3c:	b2003fcc 	andi	r8,r22,255
 8010f40:	90006126 	beq	r18,zero,80110c8 <__divdf3+0x1d0>
 8010f44:	0081ffc4 	movi	r2,2047
 8010f48:	202b883a 	mov	r21,r4
 8010f4c:	90803726 	beq	r18,r2,801102c <__divdf3+0x134>
 8010f50:	80800434 	orhi	r2,r16,16
 8010f54:	100490fa 	slli	r2,r2,3
 8010f58:	2020d77a 	srli	r16,r4,29
 8010f5c:	202a90fa 	slli	r21,r4,3
 8010f60:	94bf0044 	addi	r18,r18,-1023
 8010f64:	80a0b03a 	or	r16,r16,r2
 8010f68:	0013883a 	mov	r9,zero
 8010f6c:	000b883a 	mov	r5,zero
 8010f70:	3806d53a 	srli	r3,r7,20
 8010f74:	382ed7fa 	srli	r23,r7,31
 8010f78:	04400434 	movhi	r17,16
 8010f7c:	8c7fffc4 	addi	r17,r17,-1
 8010f80:	18c1ffcc 	andi	r3,r3,2047
 8010f84:	3029883a 	mov	r20,r6
 8010f88:	3c62703a 	and	r17,r7,r17
 8010f8c:	bf003fcc 	andi	fp,r23,255
 8010f90:	18006e26 	beq	r3,zero,801114c <__divdf3+0x254>
 8010f94:	0081ffc4 	movi	r2,2047
 8010f98:	18806626 	beq	r3,r2,8011134 <__divdf3+0x23c>
 8010f9c:	88800434 	orhi	r2,r17,16
 8010fa0:	100490fa 	slli	r2,r2,3
 8010fa4:	3022d77a 	srli	r17,r6,29
 8010fa8:	302890fa 	slli	r20,r6,3
 8010fac:	18ff0044 	addi	r3,r3,-1023
 8010fb0:	88a2b03a 	or	r17,r17,r2
 8010fb4:	000f883a 	mov	r7,zero
 8010fb8:	b5e6f03a 	xor	r19,r22,r23
 8010fbc:	3a4cb03a 	or	r6,r7,r9
 8010fc0:	008003c4 	movi	r2,15
 8010fc4:	9809883a 	mov	r4,r19
 8010fc8:	90c7c83a 	sub	r3,r18,r3
 8010fcc:	9cc03fcc 	andi	r19,r19,255
 8010fd0:	11809636 	bltu	r2,r6,801122c <__divdf3+0x334>
 8010fd4:	300c90ba 	slli	r6,r6,2
 8010fd8:	00820074 	movhi	r2,2049
 8010fdc:	1083fb04 	addi	r2,r2,4076
 8010fe0:	308d883a 	add	r6,r6,r2
 8010fe4:	30800017 	ldw	r2,0(r6)
 8010fe8:	1000683a 	jmp	r2
 8010fec:	0801122c 	andhi	zero,at,1096
 8010ff0:	08011064 	muli	zero,at,1089
 8010ff4:	0801121c 	xori	zero,at,1096
 8010ff8:	08011058 	cmpnei	zero,at,1089
 8010ffc:	0801121c 	xori	zero,at,1096
 8011000:	080111f0 	cmpltui	zero,at,1095
 8011004:	0801121c 	xori	zero,at,1096
 8011008:	08011058 	cmpnei	zero,at,1089
 801100c:	08011064 	muli	zero,at,1089
 8011010:	08011064 	muli	zero,at,1089
 8011014:	080111f0 	cmpltui	zero,at,1095
 8011018:	08011058 	cmpnei	zero,at,1089
 801101c:	08011048 	cmpgei	zero,at,1089
 8011020:	08011048 	cmpgei	zero,at,1089
 8011024:	08011048 	cmpgei	zero,at,1089
 8011028:	080115b4 	orhi	zero,at,1110
 801102c:	2404b03a 	or	r2,r4,r16
 8011030:	10006c1e 	bne	r2,zero,80111e4 <__divdf3+0x2ec>
 8011034:	02400204 	movi	r9,8
 8011038:	0021883a 	mov	r16,zero
 801103c:	002b883a 	mov	r21,zero
 8011040:	01400084 	movi	r5,2
 8011044:	003fca06 	br	8010f70 <__alt_data_end+0xfc010f70>
 8011048:	8023883a 	mov	r17,r16
 801104c:	a829883a 	mov	r20,r21
 8011050:	4039883a 	mov	fp,r8
 8011054:	280f883a 	mov	r7,r5
 8011058:	00800084 	movi	r2,2
 801105c:	3881601e 	bne	r7,r2,80115e0 <__divdf3+0x6e8>
 8011060:	e027883a 	mov	r19,fp
 8011064:	9900004c 	andi	r4,r19,1
 8011068:	0081ffc4 	movi	r2,2047
 801106c:	0021883a 	mov	r16,zero
 8011070:	002b883a 	mov	r21,zero
 8011074:	1004953a 	slli	r2,r2,20
 8011078:	20c03fcc 	andi	r3,r4,255
 801107c:	01400434 	movhi	r5,16
 8011080:	297fffc4 	addi	r5,r5,-1
 8011084:	180697fa 	slli	r3,r3,31
 8011088:	8160703a 	and	r16,r16,r5
 801108c:	80a0b03a 	or	r16,r16,r2
 8011090:	80c6b03a 	or	r3,r16,r3
 8011094:	a805883a 	mov	r2,r21
 8011098:	dfc00f17 	ldw	ra,60(sp)
 801109c:	df000e17 	ldw	fp,56(sp)
 80110a0:	ddc00d17 	ldw	r23,52(sp)
 80110a4:	dd800c17 	ldw	r22,48(sp)
 80110a8:	dd400b17 	ldw	r21,44(sp)
 80110ac:	dd000a17 	ldw	r20,40(sp)
 80110b0:	dcc00917 	ldw	r19,36(sp)
 80110b4:	dc800817 	ldw	r18,32(sp)
 80110b8:	dc400717 	ldw	r17,28(sp)
 80110bc:	dc000617 	ldw	r16,24(sp)
 80110c0:	dec01004 	addi	sp,sp,64
 80110c4:	f800283a 	ret
 80110c8:	2404b03a 	or	r2,r4,r16
 80110cc:	2023883a 	mov	r17,r4
 80110d0:	10003f26 	beq	r2,zero,80111d0 <__divdf3+0x2d8>
 80110d4:	80015e26 	beq	r16,zero,8011650 <__divdf3+0x758>
 80110d8:	8009883a 	mov	r4,r16
 80110dc:	d9800215 	stw	r6,8(sp)
 80110e0:	d9c00515 	stw	r7,20(sp)
 80110e4:	da000415 	stw	r8,16(sp)
 80110e8:	80026b00 	call	80026b0 <__clzsi2>
 80110ec:	d9800217 	ldw	r6,8(sp)
 80110f0:	d9c00517 	ldw	r7,20(sp)
 80110f4:	da000417 	ldw	r8,16(sp)
 80110f8:	113ffd44 	addi	r4,r2,-11
 80110fc:	00c00704 	movi	r3,28
 8011100:	19014f16 	blt	r3,r4,8011640 <__divdf3+0x748>
 8011104:	00c00744 	movi	r3,29
 8011108:	157ffe04 	addi	r21,r2,-8
 801110c:	1907c83a 	sub	r3,r3,r4
 8011110:	8560983a 	sll	r16,r16,r21
 8011114:	88c6d83a 	srl	r3,r17,r3
 8011118:	8d6a983a 	sll	r21,r17,r21
 801111c:	1c20b03a 	or	r16,r3,r16
 8011120:	1080fcc4 	addi	r2,r2,1011
 8011124:	00a5c83a 	sub	r18,zero,r2
 8011128:	0013883a 	mov	r9,zero
 801112c:	000b883a 	mov	r5,zero
 8011130:	003f8f06 	br	8010f70 <__alt_data_end+0xfc010f70>
 8011134:	3444b03a 	or	r2,r6,r17
 8011138:	1000231e 	bne	r2,zero,80111c8 <__divdf3+0x2d0>
 801113c:	0023883a 	mov	r17,zero
 8011140:	0029883a 	mov	r20,zero
 8011144:	01c00084 	movi	r7,2
 8011148:	003f9b06 	br	8010fb8 <__alt_data_end+0xfc010fb8>
 801114c:	3444b03a 	or	r2,r6,r17
 8011150:	10001926 	beq	r2,zero,80111b8 <__divdf3+0x2c0>
 8011154:	88014b26 	beq	r17,zero,8011684 <__divdf3+0x78c>
 8011158:	8809883a 	mov	r4,r17
 801115c:	d9400115 	stw	r5,4(sp)
 8011160:	d9800215 	stw	r6,8(sp)
 8011164:	da000415 	stw	r8,16(sp)
 8011168:	da400315 	stw	r9,12(sp)
 801116c:	80026b00 	call	80026b0 <__clzsi2>
 8011170:	d9400117 	ldw	r5,4(sp)
 8011174:	d9800217 	ldw	r6,8(sp)
 8011178:	da000417 	ldw	r8,16(sp)
 801117c:	da400317 	ldw	r9,12(sp)
 8011180:	113ffd44 	addi	r4,r2,-11
 8011184:	00c00704 	movi	r3,28
 8011188:	19013a16 	blt	r3,r4,8011674 <__divdf3+0x77c>
 801118c:	00c00744 	movi	r3,29
 8011190:	153ffe04 	addi	r20,r2,-8
 8011194:	1907c83a 	sub	r3,r3,r4
 8011198:	8d22983a 	sll	r17,r17,r20
 801119c:	30c6d83a 	srl	r3,r6,r3
 80111a0:	3528983a 	sll	r20,r6,r20
 80111a4:	1c62b03a 	or	r17,r3,r17
 80111a8:	1080fcc4 	addi	r2,r2,1011
 80111ac:	0087c83a 	sub	r3,zero,r2
 80111b0:	000f883a 	mov	r7,zero
 80111b4:	003f8006 	br	8010fb8 <__alt_data_end+0xfc010fb8>
 80111b8:	0023883a 	mov	r17,zero
 80111bc:	0029883a 	mov	r20,zero
 80111c0:	01c00044 	movi	r7,1
 80111c4:	003f7c06 	br	8010fb8 <__alt_data_end+0xfc010fb8>
 80111c8:	01c000c4 	movi	r7,3
 80111cc:	003f7a06 	br	8010fb8 <__alt_data_end+0xfc010fb8>
 80111d0:	02400104 	movi	r9,4
 80111d4:	0021883a 	mov	r16,zero
 80111d8:	002b883a 	mov	r21,zero
 80111dc:	01400044 	movi	r5,1
 80111e0:	003f6306 	br	8010f70 <__alt_data_end+0xfc010f70>
 80111e4:	02400304 	movi	r9,12
 80111e8:	014000c4 	movi	r5,3
 80111ec:	003f6006 	br	8010f70 <__alt_data_end+0xfc010f70>
 80111f0:	04000434 	movhi	r16,16
 80111f4:	0009883a 	mov	r4,zero
 80111f8:	843fffc4 	addi	r16,r16,-1
 80111fc:	057fffc4 	movi	r21,-1
 8011200:	0081ffc4 	movi	r2,2047
 8011204:	003f9b06 	br	8011074 <__alt_data_end+0xfc011074>
 8011208:	00c00044 	movi	r3,1
 801120c:	1887c83a 	sub	r3,r3,r2
 8011210:	01000e04 	movi	r4,56
 8011214:	20c1530e 	bge	r4,r3,8011764 <__divdf3+0x86c>
 8011218:	9900004c 	andi	r4,r19,1
 801121c:	0005883a 	mov	r2,zero
 8011220:	0021883a 	mov	r16,zero
 8011224:	002b883a 	mov	r21,zero
 8011228:	003f9206 	br	8011074 <__alt_data_end+0xfc011074>
 801122c:	8c012e36 	bltu	r17,r16,80116e8 <__divdf3+0x7f0>
 8011230:	84412c26 	beq	r16,r17,80116e4 <__divdf3+0x7ec>
 8011234:	a82f883a 	mov	r23,r21
 8011238:	18ffffc4 	addi	r3,r3,-1
 801123c:	002b883a 	mov	r21,zero
 8011240:	a004d63a 	srli	r2,r20,24
 8011244:	8822923a 	slli	r17,r17,8
 8011248:	a028923a 	slli	r20,r20,8
 801124c:	8009883a 	mov	r4,r16
 8011250:	88acb03a 	or	r22,r17,r2
 8011254:	dd000015 	stw	r20,0(sp)
 8011258:	b028d43a 	srli	r20,r22,16
 801125c:	d8c00215 	stw	r3,8(sp)
 8011260:	b4bfffcc 	andi	r18,r22,65535
 8011264:	a00b883a 	mov	r5,r20
 8011268:	8001a9c0 	call	8001a9c <__udivsi3>
 801126c:	100b883a 	mov	r5,r2
 8011270:	9009883a 	mov	r4,r18
 8011274:	1023883a 	mov	r17,r2
 8011278:	8001b580 	call	8001b58 <__mulsi3>
 801127c:	8009883a 	mov	r4,r16
 8011280:	a00b883a 	mov	r5,r20
 8011284:	1039883a 	mov	fp,r2
 8011288:	8001b000 	call	8001b00 <__umodsi3>
 801128c:	1004943a 	slli	r2,r2,16
 8011290:	b808d43a 	srli	r4,r23,16
 8011294:	d8c00217 	ldw	r3,8(sp)
 8011298:	2084b03a 	or	r2,r4,r2
 801129c:	1700062e 	bgeu	r2,fp,80112b8 <__divdf3+0x3c0>
 80112a0:	1585883a 	add	r2,r2,r22
 80112a4:	893fffc4 	addi	r4,r17,-1
 80112a8:	15811d36 	bltu	r2,r22,8011720 <__divdf3+0x828>
 80112ac:	17011c2e 	bgeu	r2,fp,8011720 <__divdf3+0x828>
 80112b0:	8c7fff84 	addi	r17,r17,-2
 80112b4:	1585883a 	add	r2,r2,r22
 80112b8:	1739c83a 	sub	fp,r2,fp
 80112bc:	a00b883a 	mov	r5,r20
 80112c0:	e009883a 	mov	r4,fp
 80112c4:	d8c00215 	stw	r3,8(sp)
 80112c8:	8001a9c0 	call	8001a9c <__udivsi3>
 80112cc:	100b883a 	mov	r5,r2
 80112d0:	9009883a 	mov	r4,r18
 80112d4:	1021883a 	mov	r16,r2
 80112d8:	8001b580 	call	8001b58 <__mulsi3>
 80112dc:	a00b883a 	mov	r5,r20
 80112e0:	e009883a 	mov	r4,fp
 80112e4:	d8800415 	stw	r2,16(sp)
 80112e8:	8001b000 	call	8001b00 <__umodsi3>
 80112ec:	1004943a 	slli	r2,r2,16
 80112f0:	da000417 	ldw	r8,16(sp)
 80112f4:	bdffffcc 	andi	r23,r23,65535
 80112f8:	b884b03a 	or	r2,r23,r2
 80112fc:	d8c00217 	ldw	r3,8(sp)
 8011300:	1200062e 	bgeu	r2,r8,801131c <__divdf3+0x424>
 8011304:	1585883a 	add	r2,r2,r22
 8011308:	813fffc4 	addi	r4,r16,-1
 801130c:	15810236 	bltu	r2,r22,8011718 <__divdf3+0x820>
 8011310:	1201012e 	bgeu	r2,r8,8011718 <__divdf3+0x820>
 8011314:	843fff84 	addi	r16,r16,-2
 8011318:	1585883a 	add	r2,r2,r22
 801131c:	8822943a 	slli	r17,r17,16
 8011320:	d9800017 	ldw	r6,0(sp)
 8011324:	1211c83a 	sub	r8,r2,r8
 8011328:	8c22b03a 	or	r17,r17,r16
 801132c:	373fffcc 	andi	fp,r6,65535
 8011330:	8abfffcc 	andi	r10,r17,65535
 8011334:	8820d43a 	srli	r16,r17,16
 8011338:	5009883a 	mov	r4,r10
 801133c:	e00b883a 	mov	r5,fp
 8011340:	302ed43a 	srli	r23,r6,16
 8011344:	d8c00215 	stw	r3,8(sp)
 8011348:	da000415 	stw	r8,16(sp)
 801134c:	da800115 	stw	r10,4(sp)
 8011350:	8001b580 	call	8001b58 <__mulsi3>
 8011354:	800b883a 	mov	r5,r16
 8011358:	e009883a 	mov	r4,fp
 801135c:	d8800515 	stw	r2,20(sp)
 8011360:	8001b580 	call	8001b58 <__mulsi3>
 8011364:	8009883a 	mov	r4,r16
 8011368:	b80b883a 	mov	r5,r23
 801136c:	d8800315 	stw	r2,12(sp)
 8011370:	8001b580 	call	8001b58 <__mulsi3>
 8011374:	da800117 	ldw	r10,4(sp)
 8011378:	b80b883a 	mov	r5,r23
 801137c:	1021883a 	mov	r16,r2
 8011380:	5009883a 	mov	r4,r10
 8011384:	8001b580 	call	8001b58 <__mulsi3>
 8011388:	d9c00517 	ldw	r7,20(sp)
 801138c:	da400317 	ldw	r9,12(sp)
 8011390:	d8c00217 	ldw	r3,8(sp)
 8011394:	3808d43a 	srli	r4,r7,16
 8011398:	1245883a 	add	r2,r2,r9
 801139c:	da000417 	ldw	r8,16(sp)
 80113a0:	2085883a 	add	r2,r4,r2
 80113a4:	1240022e 	bgeu	r2,r9,80113b0 <__divdf3+0x4b8>
 80113a8:	01000074 	movhi	r4,1
 80113ac:	8121883a 	add	r16,r16,r4
 80113b0:	1008d43a 	srli	r4,r2,16
 80113b4:	1004943a 	slli	r2,r2,16
 80113b8:	39ffffcc 	andi	r7,r7,65535
 80113bc:	2409883a 	add	r4,r4,r16
 80113c0:	11c5883a 	add	r2,r2,r7
 80113c4:	4100bb36 	bltu	r8,r4,80116b4 <__divdf3+0x7bc>
 80113c8:	4100d726 	beq	r8,r4,8011728 <__divdf3+0x830>
 80113cc:	4109c83a 	sub	r4,r8,r4
 80113d0:	a8a1c83a 	sub	r16,r21,r2
 80113d4:	ac2b803a 	cmpltu	r21,r21,r16
 80113d8:	256bc83a 	sub	r21,r4,r21
 80113dc:	b540d926 	beq	r22,r21,8011744 <__divdf3+0x84c>
 80113e0:	a00b883a 	mov	r5,r20
 80113e4:	a809883a 	mov	r4,r21
 80113e8:	d8c00215 	stw	r3,8(sp)
 80113ec:	8001a9c0 	call	8001a9c <__udivsi3>
 80113f0:	100b883a 	mov	r5,r2
 80113f4:	9009883a 	mov	r4,r18
 80113f8:	d8800515 	stw	r2,20(sp)
 80113fc:	8001b580 	call	8001b58 <__mulsi3>
 8011400:	a809883a 	mov	r4,r21
 8011404:	a00b883a 	mov	r5,r20
 8011408:	d8800415 	stw	r2,16(sp)
 801140c:	8001b000 	call	8001b00 <__umodsi3>
 8011410:	1004943a 	slli	r2,r2,16
 8011414:	8008d43a 	srli	r4,r16,16
 8011418:	da000417 	ldw	r8,16(sp)
 801141c:	d8c00217 	ldw	r3,8(sp)
 8011420:	2084b03a 	or	r2,r4,r2
 8011424:	d9c00517 	ldw	r7,20(sp)
 8011428:	1200062e 	bgeu	r2,r8,8011444 <__divdf3+0x54c>
 801142c:	1585883a 	add	r2,r2,r22
 8011430:	393fffc4 	addi	r4,r7,-1
 8011434:	1580c536 	bltu	r2,r22,801174c <__divdf3+0x854>
 8011438:	1200c42e 	bgeu	r2,r8,801174c <__divdf3+0x854>
 801143c:	39ffff84 	addi	r7,r7,-2
 8011440:	1585883a 	add	r2,r2,r22
 8011444:	122bc83a 	sub	r21,r2,r8
 8011448:	a00b883a 	mov	r5,r20
 801144c:	a809883a 	mov	r4,r21
 8011450:	d8c00215 	stw	r3,8(sp)
 8011454:	d9c00515 	stw	r7,20(sp)
 8011458:	8001a9c0 	call	8001a9c <__udivsi3>
 801145c:	9009883a 	mov	r4,r18
 8011460:	100b883a 	mov	r5,r2
 8011464:	d8800415 	stw	r2,16(sp)
 8011468:	8001b580 	call	8001b58 <__mulsi3>
 801146c:	a809883a 	mov	r4,r21
 8011470:	a00b883a 	mov	r5,r20
 8011474:	1025883a 	mov	r18,r2
 8011478:	8001b000 	call	8001b00 <__umodsi3>
 801147c:	1004943a 	slli	r2,r2,16
 8011480:	813fffcc 	andi	r4,r16,65535
 8011484:	d8c00217 	ldw	r3,8(sp)
 8011488:	20a0b03a 	or	r16,r4,r2
 801148c:	d9c00517 	ldw	r7,20(sp)
 8011490:	da000417 	ldw	r8,16(sp)
 8011494:	8480062e 	bgeu	r16,r18,80114b0 <__divdf3+0x5b8>
 8011498:	85a1883a 	add	r16,r16,r22
 801149c:	40bfffc4 	addi	r2,r8,-1
 80114a0:	8580ac36 	bltu	r16,r22,8011754 <__divdf3+0x85c>
 80114a4:	8480ab2e 	bgeu	r16,r18,8011754 <__divdf3+0x85c>
 80114a8:	423fff84 	addi	r8,r8,-2
 80114ac:	85a1883a 	add	r16,r16,r22
 80114b0:	3804943a 	slli	r2,r7,16
 80114b4:	84a1c83a 	sub	r16,r16,r18
 80114b8:	e009883a 	mov	r4,fp
 80114bc:	1228b03a 	or	r20,r2,r8
 80114c0:	a1ffffcc 	andi	r7,r20,65535
 80114c4:	a024d43a 	srli	r18,r20,16
 80114c8:	380b883a 	mov	r5,r7
 80114cc:	d8c00215 	stw	r3,8(sp)
 80114d0:	d9c00515 	stw	r7,20(sp)
 80114d4:	8001b580 	call	8001b58 <__mulsi3>
 80114d8:	900b883a 	mov	r5,r18
 80114dc:	e009883a 	mov	r4,fp
 80114e0:	102b883a 	mov	r21,r2
 80114e4:	8001b580 	call	8001b58 <__mulsi3>
 80114e8:	900b883a 	mov	r5,r18
 80114ec:	b809883a 	mov	r4,r23
 80114f0:	1039883a 	mov	fp,r2
 80114f4:	8001b580 	call	8001b58 <__mulsi3>
 80114f8:	d9c00517 	ldw	r7,20(sp)
 80114fc:	b80b883a 	mov	r5,r23
 8011500:	1025883a 	mov	r18,r2
 8011504:	3809883a 	mov	r4,r7
 8011508:	8001b580 	call	8001b58 <__mulsi3>
 801150c:	a808d43a 	srli	r4,r21,16
 8011510:	1705883a 	add	r2,r2,fp
 8011514:	d8c00217 	ldw	r3,8(sp)
 8011518:	2085883a 	add	r2,r4,r2
 801151c:	1700022e 	bgeu	r2,fp,8011528 <__divdf3+0x630>
 8011520:	01000074 	movhi	r4,1
 8011524:	9125883a 	add	r18,r18,r4
 8011528:	1008d43a 	srli	r4,r2,16
 801152c:	1004943a 	slli	r2,r2,16
 8011530:	ad7fffcc 	andi	r21,r21,65535
 8011534:	2489883a 	add	r4,r4,r18
 8011538:	1545883a 	add	r2,r2,r21
 801153c:	81003836 	bltu	r16,r4,8011620 <__divdf3+0x728>
 8011540:	81003626 	beq	r16,r4,801161c <__divdf3+0x724>
 8011544:	a5000054 	ori	r20,r20,1
 8011548:	1880ffc4 	addi	r2,r3,1023
 801154c:	00bf2e0e 	bge	zero,r2,8011208 <__alt_data_end+0xfc011208>
 8011550:	a10001cc 	andi	r4,r20,7
 8011554:	20000726 	beq	r4,zero,8011574 <__divdf3+0x67c>
 8011558:	a10003cc 	andi	r4,r20,15
 801155c:	01400104 	movi	r5,4
 8011560:	21400426 	beq	r4,r5,8011574 <__divdf3+0x67c>
 8011564:	a149883a 	add	r4,r20,r5
 8011568:	2529803a 	cmpltu	r20,r4,r20
 801156c:	8d23883a 	add	r17,r17,r20
 8011570:	2029883a 	mov	r20,r4
 8011574:	8900402c 	andhi	r4,r17,256
 8011578:	20000426 	beq	r4,zero,801158c <__divdf3+0x694>
 801157c:	18810004 	addi	r2,r3,1024
 8011580:	00ffc034 	movhi	r3,65280
 8011584:	18ffffc4 	addi	r3,r3,-1
 8011588:	88e2703a 	and	r17,r17,r3
 801158c:	00c1ff84 	movi	r3,2046
 8011590:	18beb416 	blt	r3,r2,8011064 <__alt_data_end+0xfc011064>
 8011594:	a028d0fa 	srli	r20,r20,3
 8011598:	882a977a 	slli	r21,r17,29
 801159c:	8820927a 	slli	r16,r17,9
 80115a0:	1081ffcc 	andi	r2,r2,2047
 80115a4:	ad2ab03a 	or	r21,r21,r20
 80115a8:	8020d33a 	srli	r16,r16,12
 80115ac:	9900004c 	andi	r4,r19,1
 80115b0:	003eb006 	br	8011074 <__alt_data_end+0xfc011074>
 80115b4:	8080022c 	andhi	r2,r16,8
 80115b8:	10001226 	beq	r2,zero,8011604 <__divdf3+0x70c>
 80115bc:	8880022c 	andhi	r2,r17,8
 80115c0:	1000101e 	bne	r2,zero,8011604 <__divdf3+0x70c>
 80115c4:	00800434 	movhi	r2,16
 80115c8:	8c000234 	orhi	r16,r17,8
 80115cc:	10bfffc4 	addi	r2,r2,-1
 80115d0:	b809883a 	mov	r4,r23
 80115d4:	80a0703a 	and	r16,r16,r2
 80115d8:	a02b883a 	mov	r21,r20
 80115dc:	003f0806 	br	8011200 <__alt_data_end+0xfc011200>
 80115e0:	008000c4 	movi	r2,3
 80115e4:	3880b126 	beq	r7,r2,80118ac <__divdf3+0x9b4>
 80115e8:	00800044 	movi	r2,1
 80115ec:	38805b1e 	bne	r7,r2,801175c <__divdf3+0x864>
 80115f0:	e009883a 	mov	r4,fp
 80115f4:	0005883a 	mov	r2,zero
 80115f8:	0021883a 	mov	r16,zero
 80115fc:	002b883a 	mov	r21,zero
 8011600:	003e9c06 	br	8011074 <__alt_data_end+0xfc011074>
 8011604:	00800434 	movhi	r2,16
 8011608:	84000234 	orhi	r16,r16,8
 801160c:	10bfffc4 	addi	r2,r2,-1
 8011610:	b009883a 	mov	r4,r22
 8011614:	80a0703a 	and	r16,r16,r2
 8011618:	003ef906 	br	8011200 <__alt_data_end+0xfc011200>
 801161c:	103fca26 	beq	r2,zero,8011548 <__alt_data_end+0xfc011548>
 8011620:	b421883a 	add	r16,r22,r16
 8011624:	a17fffc4 	addi	r5,r20,-1
 8011628:	8580422e 	bgeu	r16,r22,8011734 <__divdf3+0x83c>
 801162c:	2829883a 	mov	r20,r5
 8011630:	813fc41e 	bne	r16,r4,8011544 <__alt_data_end+0xfc011544>
 8011634:	d9800017 	ldw	r6,0(sp)
 8011638:	30bfc21e 	bne	r6,r2,8011544 <__alt_data_end+0xfc011544>
 801163c:	003fc206 	br	8011548 <__alt_data_end+0xfc011548>
 8011640:	143ff604 	addi	r16,r2,-40
 8011644:	8c20983a 	sll	r16,r17,r16
 8011648:	002b883a 	mov	r21,zero
 801164c:	003eb406 	br	8011120 <__alt_data_end+0xfc011120>
 8011650:	d9800215 	stw	r6,8(sp)
 8011654:	d9c00515 	stw	r7,20(sp)
 8011658:	da000415 	stw	r8,16(sp)
 801165c:	80026b00 	call	80026b0 <__clzsi2>
 8011660:	10800804 	addi	r2,r2,32
 8011664:	da000417 	ldw	r8,16(sp)
 8011668:	d9c00517 	ldw	r7,20(sp)
 801166c:	d9800217 	ldw	r6,8(sp)
 8011670:	003ea106 	br	80110f8 <__alt_data_end+0xfc0110f8>
 8011674:	147ff604 	addi	r17,r2,-40
 8011678:	3462983a 	sll	r17,r6,r17
 801167c:	0029883a 	mov	r20,zero
 8011680:	003ec906 	br	80111a8 <__alt_data_end+0xfc0111a8>
 8011684:	3009883a 	mov	r4,r6
 8011688:	d9400115 	stw	r5,4(sp)
 801168c:	d9800215 	stw	r6,8(sp)
 8011690:	da000415 	stw	r8,16(sp)
 8011694:	da400315 	stw	r9,12(sp)
 8011698:	80026b00 	call	80026b0 <__clzsi2>
 801169c:	10800804 	addi	r2,r2,32
 80116a0:	da400317 	ldw	r9,12(sp)
 80116a4:	da000417 	ldw	r8,16(sp)
 80116a8:	d9800217 	ldw	r6,8(sp)
 80116ac:	d9400117 	ldw	r5,4(sp)
 80116b0:	003eb306 	br	8011180 <__alt_data_end+0xfc011180>
 80116b4:	d9800017 	ldw	r6,0(sp)
 80116b8:	a9ab883a 	add	r21,r21,r6
 80116bc:	a98b803a 	cmpltu	r5,r21,r6
 80116c0:	2d8b883a 	add	r5,r5,r22
 80116c4:	2a11883a 	add	r8,r5,r8
 80116c8:	897fffc4 	addi	r5,r17,-1
 80116cc:	b2000c2e 	bgeu	r22,r8,8011700 <__divdf3+0x808>
 80116d0:	41003f36 	bltu	r8,r4,80117d0 <__divdf3+0x8d8>
 80116d4:	22006c26 	beq	r4,r8,8011888 <__divdf3+0x990>
 80116d8:	4109c83a 	sub	r4,r8,r4
 80116dc:	2823883a 	mov	r17,r5
 80116e0:	003f3b06 	br	80113d0 <__alt_data_end+0xfc0113d0>
 80116e4:	ad3ed336 	bltu	r21,r20,8011234 <__alt_data_end+0xfc011234>
 80116e8:	a804d07a 	srli	r2,r21,1
 80116ec:	802e97fa 	slli	r23,r16,31
 80116f0:	a82a97fa 	slli	r21,r21,31
 80116f4:	8020d07a 	srli	r16,r16,1
 80116f8:	b8aeb03a 	or	r23,r23,r2
 80116fc:	003ed006 	br	8011240 <__alt_data_end+0xfc011240>
 8011700:	b23ff51e 	bne	r22,r8,80116d8 <__alt_data_end+0xfc0116d8>
 8011704:	d9800017 	ldw	r6,0(sp)
 8011708:	a9bff12e 	bgeu	r21,r6,80116d0 <__alt_data_end+0xfc0116d0>
 801170c:	b109c83a 	sub	r4,r22,r4
 8011710:	2823883a 	mov	r17,r5
 8011714:	003f2e06 	br	80113d0 <__alt_data_end+0xfc0113d0>
 8011718:	2021883a 	mov	r16,r4
 801171c:	003eff06 	br	801131c <__alt_data_end+0xfc01131c>
 8011720:	2023883a 	mov	r17,r4
 8011724:	003ee406 	br	80112b8 <__alt_data_end+0xfc0112b8>
 8011728:	a8bfe236 	bltu	r21,r2,80116b4 <__alt_data_end+0xfc0116b4>
 801172c:	0009883a 	mov	r4,zero
 8011730:	003f2706 	br	80113d0 <__alt_data_end+0xfc0113d0>
 8011734:	81002d36 	bltu	r16,r4,80117ec <__divdf3+0x8f4>
 8011738:	24005626 	beq	r4,r16,8011894 <__divdf3+0x99c>
 801173c:	2829883a 	mov	r20,r5
 8011740:	003f8006 	br	8011544 <__alt_data_end+0xfc011544>
 8011744:	053fffc4 	movi	r20,-1
 8011748:	003f7f06 	br	8011548 <__alt_data_end+0xfc011548>
 801174c:	200f883a 	mov	r7,r4
 8011750:	003f3c06 	br	8011444 <__alt_data_end+0xfc011444>
 8011754:	1011883a 	mov	r8,r2
 8011758:	003f5506 	br	80114b0 <__alt_data_end+0xfc0114b0>
 801175c:	e027883a 	mov	r19,fp
 8011760:	003f7906 	br	8011548 <__alt_data_end+0xfc011548>
 8011764:	010007c4 	movi	r4,31
 8011768:	20c02816 	blt	r4,r3,801180c <__divdf3+0x914>
 801176c:	00800804 	movi	r2,32
 8011770:	10c5c83a 	sub	r2,r2,r3
 8011774:	888a983a 	sll	r5,r17,r2
 8011778:	a0c8d83a 	srl	r4,r20,r3
 801177c:	a084983a 	sll	r2,r20,r2
 8011780:	88e2d83a 	srl	r17,r17,r3
 8011784:	2906b03a 	or	r3,r5,r4
 8011788:	1004c03a 	cmpne	r2,r2,zero
 801178c:	1886b03a 	or	r3,r3,r2
 8011790:	188001cc 	andi	r2,r3,7
 8011794:	10000726 	beq	r2,zero,80117b4 <__divdf3+0x8bc>
 8011798:	188003cc 	andi	r2,r3,15
 801179c:	01000104 	movi	r4,4
 80117a0:	11000426 	beq	r2,r4,80117b4 <__divdf3+0x8bc>
 80117a4:	1805883a 	mov	r2,r3
 80117a8:	10c00104 	addi	r3,r2,4
 80117ac:	1885803a 	cmpltu	r2,r3,r2
 80117b0:	88a3883a 	add	r17,r17,r2
 80117b4:	8880202c 	andhi	r2,r17,128
 80117b8:	10002926 	beq	r2,zero,8011860 <__divdf3+0x968>
 80117bc:	9900004c 	andi	r4,r19,1
 80117c0:	00800044 	movi	r2,1
 80117c4:	0021883a 	mov	r16,zero
 80117c8:	002b883a 	mov	r21,zero
 80117cc:	003e2906 	br	8011074 <__alt_data_end+0xfc011074>
 80117d0:	d9800017 	ldw	r6,0(sp)
 80117d4:	8c7fff84 	addi	r17,r17,-2
 80117d8:	a9ab883a 	add	r21,r21,r6
 80117dc:	a98b803a 	cmpltu	r5,r21,r6
 80117e0:	2d8b883a 	add	r5,r5,r22
 80117e4:	2a11883a 	add	r8,r5,r8
 80117e8:	003ef806 	br	80113cc <__alt_data_end+0xfc0113cc>
 80117ec:	d9800017 	ldw	r6,0(sp)
 80117f0:	318f883a 	add	r7,r6,r6
 80117f4:	398b803a 	cmpltu	r5,r7,r6
 80117f8:	2d8d883a 	add	r6,r5,r22
 80117fc:	81a1883a 	add	r16,r16,r6
 8011800:	a17fff84 	addi	r5,r20,-2
 8011804:	d9c00015 	stw	r7,0(sp)
 8011808:	003f8806 	br	801162c <__alt_data_end+0xfc01162c>
 801180c:	013ff844 	movi	r4,-31
 8011810:	2085c83a 	sub	r2,r4,r2
 8011814:	8888d83a 	srl	r4,r17,r2
 8011818:	00800804 	movi	r2,32
 801181c:	18802126 	beq	r3,r2,80118a4 <__divdf3+0x9ac>
 8011820:	04001004 	movi	r16,64
 8011824:	80c7c83a 	sub	r3,r16,r3
 8011828:	88e0983a 	sll	r16,r17,r3
 801182c:	8504b03a 	or	r2,r16,r20
 8011830:	1004c03a 	cmpne	r2,r2,zero
 8011834:	2084b03a 	or	r2,r4,r2
 8011838:	144001cc 	andi	r17,r2,7
 801183c:	88000d1e 	bne	r17,zero,8011874 <__divdf3+0x97c>
 8011840:	0021883a 	mov	r16,zero
 8011844:	102ad0fa 	srli	r21,r2,3
 8011848:	9900004c 	andi	r4,r19,1
 801184c:	0005883a 	mov	r2,zero
 8011850:	ac6ab03a 	or	r21,r21,r17
 8011854:	003e0706 	br	8011074 <__alt_data_end+0xfc011074>
 8011858:	1007883a 	mov	r3,r2
 801185c:	0023883a 	mov	r17,zero
 8011860:	8820927a 	slli	r16,r17,9
 8011864:	1805883a 	mov	r2,r3
 8011868:	8822977a 	slli	r17,r17,29
 801186c:	8020d33a 	srli	r16,r16,12
 8011870:	003ff406 	br	8011844 <__alt_data_end+0xfc011844>
 8011874:	10c003cc 	andi	r3,r2,15
 8011878:	01000104 	movi	r4,4
 801187c:	193ff626 	beq	r3,r4,8011858 <__alt_data_end+0xfc011858>
 8011880:	0023883a 	mov	r17,zero
 8011884:	003fc806 	br	80117a8 <__alt_data_end+0xfc0117a8>
 8011888:	a8bfd136 	bltu	r21,r2,80117d0 <__alt_data_end+0xfc0117d0>
 801188c:	2823883a 	mov	r17,r5
 8011890:	003fa606 	br	801172c <__alt_data_end+0xfc01172c>
 8011894:	d9800017 	ldw	r6,0(sp)
 8011898:	30bfd436 	bltu	r6,r2,80117ec <__alt_data_end+0xfc0117ec>
 801189c:	2829883a 	mov	r20,r5
 80118a0:	003f6406 	br	8011634 <__alt_data_end+0xfc011634>
 80118a4:	0021883a 	mov	r16,zero
 80118a8:	003fe006 	br	801182c <__alt_data_end+0xfc01182c>
 80118ac:	00800434 	movhi	r2,16
 80118b0:	8c000234 	orhi	r16,r17,8
 80118b4:	10bfffc4 	addi	r2,r2,-1
 80118b8:	e009883a 	mov	r4,fp
 80118bc:	80a0703a 	and	r16,r16,r2
 80118c0:	a02b883a 	mov	r21,r20
 80118c4:	003e4e06 	br	8011200 <__alt_data_end+0xfc011200>

080118c8 <__eqdf2>:
 80118c8:	2804d53a 	srli	r2,r5,20
 80118cc:	3806d53a 	srli	r3,r7,20
 80118d0:	02000434 	movhi	r8,16
 80118d4:	423fffc4 	addi	r8,r8,-1
 80118d8:	1081ffcc 	andi	r2,r2,2047
 80118dc:	0281ffc4 	movi	r10,2047
 80118e0:	2a12703a 	and	r9,r5,r8
 80118e4:	18c1ffcc 	andi	r3,r3,2047
 80118e8:	3a10703a 	and	r8,r7,r8
 80118ec:	280ad7fa 	srli	r5,r5,31
 80118f0:	380ed7fa 	srli	r7,r7,31
 80118f4:	12801026 	beq	r2,r10,8011938 <__eqdf2+0x70>
 80118f8:	0281ffc4 	movi	r10,2047
 80118fc:	1a800a26 	beq	r3,r10,8011928 <__eqdf2+0x60>
 8011900:	10c00226 	beq	r2,r3,801190c <__eqdf2+0x44>
 8011904:	00800044 	movi	r2,1
 8011908:	f800283a 	ret
 801190c:	4a3ffd1e 	bne	r9,r8,8011904 <__alt_data_end+0xfc011904>
 8011910:	21bffc1e 	bne	r4,r6,8011904 <__alt_data_end+0xfc011904>
 8011914:	29c00c26 	beq	r5,r7,8011948 <__eqdf2+0x80>
 8011918:	103ffa1e 	bne	r2,zero,8011904 <__alt_data_end+0xfc011904>
 801191c:	2244b03a 	or	r2,r4,r9
 8011920:	1004c03a 	cmpne	r2,r2,zero
 8011924:	f800283a 	ret
 8011928:	3214b03a 	or	r10,r6,r8
 801192c:	503ff426 	beq	r10,zero,8011900 <__alt_data_end+0xfc011900>
 8011930:	00800044 	movi	r2,1
 8011934:	f800283a 	ret
 8011938:	2254b03a 	or	r10,r4,r9
 801193c:	503fee26 	beq	r10,zero,80118f8 <__alt_data_end+0xfc0118f8>
 8011940:	00800044 	movi	r2,1
 8011944:	f800283a 	ret
 8011948:	0005883a 	mov	r2,zero
 801194c:	f800283a 	ret

08011950 <__gedf2>:
 8011950:	2804d53a 	srli	r2,r5,20
 8011954:	3806d53a 	srli	r3,r7,20
 8011958:	02000434 	movhi	r8,16
 801195c:	423fffc4 	addi	r8,r8,-1
 8011960:	1081ffcc 	andi	r2,r2,2047
 8011964:	0241ffc4 	movi	r9,2047
 8011968:	2a14703a 	and	r10,r5,r8
 801196c:	18c1ffcc 	andi	r3,r3,2047
 8011970:	3a10703a 	and	r8,r7,r8
 8011974:	280ad7fa 	srli	r5,r5,31
 8011978:	380ed7fa 	srli	r7,r7,31
 801197c:	12401d26 	beq	r2,r9,80119f4 <__gedf2+0xa4>
 8011980:	0241ffc4 	movi	r9,2047
 8011984:	1a401226 	beq	r3,r9,80119d0 <__gedf2+0x80>
 8011988:	1000081e 	bne	r2,zero,80119ac <__gedf2+0x5c>
 801198c:	2296b03a 	or	r11,r4,r10
 8011990:	5813003a 	cmpeq	r9,r11,zero
 8011994:	1800091e 	bne	r3,zero,80119bc <__gedf2+0x6c>
 8011998:	3218b03a 	or	r12,r6,r8
 801199c:	6000071e 	bne	r12,zero,80119bc <__gedf2+0x6c>
 80119a0:	0005883a 	mov	r2,zero
 80119a4:	5800101e 	bne	r11,zero,80119e8 <__gedf2+0x98>
 80119a8:	f800283a 	ret
 80119ac:	18000c1e 	bne	r3,zero,80119e0 <__gedf2+0x90>
 80119b0:	3212b03a 	or	r9,r6,r8
 80119b4:	48000c26 	beq	r9,zero,80119e8 <__gedf2+0x98>
 80119b8:	0013883a 	mov	r9,zero
 80119bc:	39c03fcc 	andi	r7,r7,255
 80119c0:	48000826 	beq	r9,zero,80119e4 <__gedf2+0x94>
 80119c4:	38000926 	beq	r7,zero,80119ec <__gedf2+0x9c>
 80119c8:	00800044 	movi	r2,1
 80119cc:	f800283a 	ret
 80119d0:	3212b03a 	or	r9,r6,r8
 80119d4:	483fec26 	beq	r9,zero,8011988 <__alt_data_end+0xfc011988>
 80119d8:	00bfff84 	movi	r2,-2
 80119dc:	f800283a 	ret
 80119e0:	39c03fcc 	andi	r7,r7,255
 80119e4:	29c00626 	beq	r5,r7,8011a00 <__gedf2+0xb0>
 80119e8:	283ff726 	beq	r5,zero,80119c8 <__alt_data_end+0xfc0119c8>
 80119ec:	00bfffc4 	movi	r2,-1
 80119f0:	f800283a 	ret
 80119f4:	2292b03a 	or	r9,r4,r10
 80119f8:	483fe126 	beq	r9,zero,8011980 <__alt_data_end+0xfc011980>
 80119fc:	003ff606 	br	80119d8 <__alt_data_end+0xfc0119d8>
 8011a00:	18bff916 	blt	r3,r2,80119e8 <__alt_data_end+0xfc0119e8>
 8011a04:	10c00316 	blt	r2,r3,8011a14 <__gedf2+0xc4>
 8011a08:	42bff736 	bltu	r8,r10,80119e8 <__alt_data_end+0xfc0119e8>
 8011a0c:	52000326 	beq	r10,r8,8011a1c <__gedf2+0xcc>
 8011a10:	5200042e 	bgeu	r10,r8,8011a24 <__gedf2+0xd4>
 8011a14:	283fec1e 	bne	r5,zero,80119c8 <__alt_data_end+0xfc0119c8>
 8011a18:	003ff406 	br	80119ec <__alt_data_end+0xfc0119ec>
 8011a1c:	313ff236 	bltu	r6,r4,80119e8 <__alt_data_end+0xfc0119e8>
 8011a20:	21bffc36 	bltu	r4,r6,8011a14 <__alt_data_end+0xfc011a14>
 8011a24:	0005883a 	mov	r2,zero
 8011a28:	f800283a 	ret

08011a2c <__ledf2>:
 8011a2c:	2804d53a 	srli	r2,r5,20
 8011a30:	3810d53a 	srli	r8,r7,20
 8011a34:	00c00434 	movhi	r3,16
 8011a38:	18ffffc4 	addi	r3,r3,-1
 8011a3c:	1081ffcc 	andi	r2,r2,2047
 8011a40:	0241ffc4 	movi	r9,2047
 8011a44:	28d4703a 	and	r10,r5,r3
 8011a48:	4201ffcc 	andi	r8,r8,2047
 8011a4c:	38c6703a 	and	r3,r7,r3
 8011a50:	280ad7fa 	srli	r5,r5,31
 8011a54:	380ed7fa 	srli	r7,r7,31
 8011a58:	12401f26 	beq	r2,r9,8011ad8 <__ledf2+0xac>
 8011a5c:	0241ffc4 	movi	r9,2047
 8011a60:	42401426 	beq	r8,r9,8011ab4 <__ledf2+0x88>
 8011a64:	1000091e 	bne	r2,zero,8011a8c <__ledf2+0x60>
 8011a68:	2296b03a 	or	r11,r4,r10
 8011a6c:	5813003a 	cmpeq	r9,r11,zero
 8011a70:	29403fcc 	andi	r5,r5,255
 8011a74:	40000a1e 	bne	r8,zero,8011aa0 <__ledf2+0x74>
 8011a78:	30d8b03a 	or	r12,r6,r3
 8011a7c:	6000081e 	bne	r12,zero,8011aa0 <__ledf2+0x74>
 8011a80:	0005883a 	mov	r2,zero
 8011a84:	5800111e 	bne	r11,zero,8011acc <__ledf2+0xa0>
 8011a88:	f800283a 	ret
 8011a8c:	29403fcc 	andi	r5,r5,255
 8011a90:	40000c1e 	bne	r8,zero,8011ac4 <__ledf2+0x98>
 8011a94:	30d2b03a 	or	r9,r6,r3
 8011a98:	48000c26 	beq	r9,zero,8011acc <__ledf2+0xa0>
 8011a9c:	0013883a 	mov	r9,zero
 8011aa0:	39c03fcc 	andi	r7,r7,255
 8011aa4:	48000826 	beq	r9,zero,8011ac8 <__ledf2+0x9c>
 8011aa8:	38001126 	beq	r7,zero,8011af0 <__ledf2+0xc4>
 8011aac:	00800044 	movi	r2,1
 8011ab0:	f800283a 	ret
 8011ab4:	30d2b03a 	or	r9,r6,r3
 8011ab8:	483fea26 	beq	r9,zero,8011a64 <__alt_data_end+0xfc011a64>
 8011abc:	00800084 	movi	r2,2
 8011ac0:	f800283a 	ret
 8011ac4:	39c03fcc 	andi	r7,r7,255
 8011ac8:	39400726 	beq	r7,r5,8011ae8 <__ledf2+0xbc>
 8011acc:	2800081e 	bne	r5,zero,8011af0 <__ledf2+0xc4>
 8011ad0:	00800044 	movi	r2,1
 8011ad4:	f800283a 	ret
 8011ad8:	2292b03a 	or	r9,r4,r10
 8011adc:	483fdf26 	beq	r9,zero,8011a5c <__alt_data_end+0xfc011a5c>
 8011ae0:	00800084 	movi	r2,2
 8011ae4:	f800283a 	ret
 8011ae8:	4080030e 	bge	r8,r2,8011af8 <__ledf2+0xcc>
 8011aec:	383fef26 	beq	r7,zero,8011aac <__alt_data_end+0xfc011aac>
 8011af0:	00bfffc4 	movi	r2,-1
 8011af4:	f800283a 	ret
 8011af8:	123feb16 	blt	r2,r8,8011aa8 <__alt_data_end+0xfc011aa8>
 8011afc:	1abff336 	bltu	r3,r10,8011acc <__alt_data_end+0xfc011acc>
 8011b00:	50c00326 	beq	r10,r3,8011b10 <__ledf2+0xe4>
 8011b04:	50c0042e 	bgeu	r10,r3,8011b18 <__ledf2+0xec>
 8011b08:	283fe81e 	bne	r5,zero,8011aac <__alt_data_end+0xfc011aac>
 8011b0c:	003ff806 	br	8011af0 <__alt_data_end+0xfc011af0>
 8011b10:	313fee36 	bltu	r6,r4,8011acc <__alt_data_end+0xfc011acc>
 8011b14:	21bffc36 	bltu	r4,r6,8011b08 <__alt_data_end+0xfc011b08>
 8011b18:	0005883a 	mov	r2,zero
 8011b1c:	f800283a 	ret

08011b20 <__muldf3>:
 8011b20:	deffee04 	addi	sp,sp,-72
 8011b24:	dd000c15 	stw	r20,48(sp)
 8011b28:	2828d53a 	srli	r20,r5,20
 8011b2c:	ddc00f15 	stw	r23,60(sp)
 8011b30:	282ed7fa 	srli	r23,r5,31
 8011b34:	dc000815 	stw	r16,32(sp)
 8011b38:	04000434 	movhi	r16,16
 8011b3c:	dcc00b15 	stw	r19,44(sp)
 8011b40:	843fffc4 	addi	r16,r16,-1
 8011b44:	dfc01115 	stw	ra,68(sp)
 8011b48:	df001015 	stw	fp,64(sp)
 8011b4c:	dd800e15 	stw	r22,56(sp)
 8011b50:	dd400d15 	stw	r21,52(sp)
 8011b54:	dc800a15 	stw	r18,40(sp)
 8011b58:	dc400915 	stw	r17,36(sp)
 8011b5c:	a501ffcc 	andi	r20,r20,2047
 8011b60:	2c20703a 	and	r16,r5,r16
 8011b64:	b827883a 	mov	r19,r23
 8011b68:	ba403fcc 	andi	r9,r23,255
 8011b6c:	a0006026 	beq	r20,zero,8011cf0 <__muldf3+0x1d0>
 8011b70:	0081ffc4 	movi	r2,2047
 8011b74:	202d883a 	mov	r22,r4
 8011b78:	a0803626 	beq	r20,r2,8011c54 <__muldf3+0x134>
 8011b7c:	84000434 	orhi	r16,r16,16
 8011b80:	200ad77a 	srli	r5,r4,29
 8011b84:	800490fa 	slli	r2,r16,3
 8011b88:	202c90fa 	slli	r22,r4,3
 8011b8c:	a53f0044 	addi	r20,r20,-1023
 8011b90:	28a0b03a 	or	r16,r5,r2
 8011b94:	002b883a 	mov	r21,zero
 8011b98:	000b883a 	mov	r5,zero
 8011b9c:	3804d53a 	srli	r2,r7,20
 8011ba0:	3838d7fa 	srli	fp,r7,31
 8011ba4:	04400434 	movhi	r17,16
 8011ba8:	8c7fffc4 	addi	r17,r17,-1
 8011bac:	1081ffcc 	andi	r2,r2,2047
 8011bb0:	3025883a 	mov	r18,r6
 8011bb4:	3c62703a 	and	r17,r7,r17
 8011bb8:	e2803fcc 	andi	r10,fp,255
 8011bbc:	10006d26 	beq	r2,zero,8011d74 <__muldf3+0x254>
 8011bc0:	00c1ffc4 	movi	r3,2047
 8011bc4:	10c06526 	beq	r2,r3,8011d5c <__muldf3+0x23c>
 8011bc8:	8c400434 	orhi	r17,r17,16
 8011bcc:	300ed77a 	srli	r7,r6,29
 8011bd0:	880690fa 	slli	r3,r17,3
 8011bd4:	302490fa 	slli	r18,r6,3
 8011bd8:	10bf0044 	addi	r2,r2,-1023
 8011bdc:	38e2b03a 	or	r17,r7,r3
 8011be0:	000f883a 	mov	r7,zero
 8011be4:	a087883a 	add	r3,r20,r2
 8011be8:	010003c4 	movi	r4,15
 8011bec:	3d44b03a 	or	r2,r7,r21
 8011bf0:	e5ccf03a 	xor	r6,fp,r23
 8011bf4:	1a000044 	addi	r8,r3,1
 8011bf8:	20809b36 	bltu	r4,r2,8011e68 <__muldf3+0x348>
 8011bfc:	100490ba 	slli	r2,r2,2
 8011c00:	01020074 	movhi	r4,2049
 8011c04:	21070504 	addi	r4,r4,7188
 8011c08:	1105883a 	add	r2,r2,r4
 8011c0c:	10800017 	ldw	r2,0(r2)
 8011c10:	1000683a 	jmp	r2
 8011c14:	08011e68 	cmpgeui	zero,at,1145
 8011c18:	08011c74 	orhi	zero,at,1137
 8011c1c:	08011c74 	orhi	zero,at,1137
 8011c20:	08011c70 	cmpltui	zero,at,1137
 8011c24:	08011e44 	addi	zero,at,1145
 8011c28:	08011e44 	addi	zero,at,1145
 8011c2c:	08011e2c 	andhi	zero,at,1144
 8011c30:	08011c70 	cmpltui	zero,at,1137
 8011c34:	08011e44 	addi	zero,at,1145
 8011c38:	08011e2c 	andhi	zero,at,1144
 8011c3c:	08011e44 	addi	zero,at,1145
 8011c40:	08011c70 	cmpltui	zero,at,1137
 8011c44:	08011e54 	ori	zero,at,1145
 8011c48:	08011e54 	ori	zero,at,1145
 8011c4c:	08011e54 	ori	zero,at,1145
 8011c50:	080121b4 	orhi	zero,at,1158
 8011c54:	2404b03a 	or	r2,r4,r16
 8011c58:	1000711e 	bne	r2,zero,8011e20 <__muldf3+0x300>
 8011c5c:	05400204 	movi	r21,8
 8011c60:	0021883a 	mov	r16,zero
 8011c64:	002d883a 	mov	r22,zero
 8011c68:	01400084 	movi	r5,2
 8011c6c:	003fcb06 	br	8011b9c <__alt_data_end+0xfc011b9c>
 8011c70:	500d883a 	mov	r6,r10
 8011c74:	00800084 	movi	r2,2
 8011c78:	38805926 	beq	r7,r2,8011de0 <__muldf3+0x2c0>
 8011c7c:	008000c4 	movi	r2,3
 8011c80:	3881bb26 	beq	r7,r2,8012370 <__muldf3+0x850>
 8011c84:	00800044 	movi	r2,1
 8011c88:	3881961e 	bne	r7,r2,80122e4 <__muldf3+0x7c4>
 8011c8c:	3027883a 	mov	r19,r6
 8011c90:	0005883a 	mov	r2,zero
 8011c94:	0021883a 	mov	r16,zero
 8011c98:	002d883a 	mov	r22,zero
 8011c9c:	1004953a 	slli	r2,r2,20
 8011ca0:	98c03fcc 	andi	r3,r19,255
 8011ca4:	04400434 	movhi	r17,16
 8011ca8:	8c7fffc4 	addi	r17,r17,-1
 8011cac:	180697fa 	slli	r3,r3,31
 8011cb0:	8460703a 	and	r16,r16,r17
 8011cb4:	80a0b03a 	or	r16,r16,r2
 8011cb8:	80c6b03a 	or	r3,r16,r3
 8011cbc:	b005883a 	mov	r2,r22
 8011cc0:	dfc01117 	ldw	ra,68(sp)
 8011cc4:	df001017 	ldw	fp,64(sp)
 8011cc8:	ddc00f17 	ldw	r23,60(sp)
 8011ccc:	dd800e17 	ldw	r22,56(sp)
 8011cd0:	dd400d17 	ldw	r21,52(sp)
 8011cd4:	dd000c17 	ldw	r20,48(sp)
 8011cd8:	dcc00b17 	ldw	r19,44(sp)
 8011cdc:	dc800a17 	ldw	r18,40(sp)
 8011ce0:	dc400917 	ldw	r17,36(sp)
 8011ce4:	dc000817 	ldw	r16,32(sp)
 8011ce8:	dec01204 	addi	sp,sp,72
 8011cec:	f800283a 	ret
 8011cf0:	2404b03a 	or	r2,r4,r16
 8011cf4:	202b883a 	mov	r21,r4
 8011cf8:	10004426 	beq	r2,zero,8011e0c <__muldf3+0x2ec>
 8011cfc:	80015126 	beq	r16,zero,8012244 <__muldf3+0x724>
 8011d00:	8009883a 	mov	r4,r16
 8011d04:	d9800715 	stw	r6,28(sp)
 8011d08:	d9c00215 	stw	r7,8(sp)
 8011d0c:	da400415 	stw	r9,16(sp)
 8011d10:	80026b00 	call	80026b0 <__clzsi2>
 8011d14:	d9800717 	ldw	r6,28(sp)
 8011d18:	d9c00217 	ldw	r7,8(sp)
 8011d1c:	da400417 	ldw	r9,16(sp)
 8011d20:	113ffd44 	addi	r4,r2,-11
 8011d24:	00c00704 	movi	r3,28
 8011d28:	19014216 	blt	r3,r4,8012234 <__muldf3+0x714>
 8011d2c:	00c00744 	movi	r3,29
 8011d30:	15bffe04 	addi	r22,r2,-8
 8011d34:	1907c83a 	sub	r3,r3,r4
 8011d38:	85a0983a 	sll	r16,r16,r22
 8011d3c:	a8c6d83a 	srl	r3,r21,r3
 8011d40:	adac983a 	sll	r22,r21,r22
 8011d44:	1c20b03a 	or	r16,r3,r16
 8011d48:	1080fcc4 	addi	r2,r2,1011
 8011d4c:	00a9c83a 	sub	r20,zero,r2
 8011d50:	002b883a 	mov	r21,zero
 8011d54:	000b883a 	mov	r5,zero
 8011d58:	003f9006 	br	8011b9c <__alt_data_end+0xfc011b9c>
 8011d5c:	3446b03a 	or	r3,r6,r17
 8011d60:	1800281e 	bne	r3,zero,8011e04 <__muldf3+0x2e4>
 8011d64:	0023883a 	mov	r17,zero
 8011d68:	0025883a 	mov	r18,zero
 8011d6c:	01c00084 	movi	r7,2
 8011d70:	003f9c06 	br	8011be4 <__alt_data_end+0xfc011be4>
 8011d74:	3446b03a 	or	r3,r6,r17
 8011d78:	18001e26 	beq	r3,zero,8011df4 <__muldf3+0x2d4>
 8011d7c:	88012126 	beq	r17,zero,8012204 <__muldf3+0x6e4>
 8011d80:	8809883a 	mov	r4,r17
 8011d84:	d9400215 	stw	r5,8(sp)
 8011d88:	d9800715 	stw	r6,28(sp)
 8011d8c:	da400415 	stw	r9,16(sp)
 8011d90:	da800315 	stw	r10,12(sp)
 8011d94:	80026b00 	call	80026b0 <__clzsi2>
 8011d98:	d9400217 	ldw	r5,8(sp)
 8011d9c:	d9800717 	ldw	r6,28(sp)
 8011da0:	da400417 	ldw	r9,16(sp)
 8011da4:	da800317 	ldw	r10,12(sp)
 8011da8:	113ffd44 	addi	r4,r2,-11
 8011dac:	00c00704 	movi	r3,28
 8011db0:	19011016 	blt	r3,r4,80121f4 <__muldf3+0x6d4>
 8011db4:	00c00744 	movi	r3,29
 8011db8:	14bffe04 	addi	r18,r2,-8
 8011dbc:	1907c83a 	sub	r3,r3,r4
 8011dc0:	8ca2983a 	sll	r17,r17,r18
 8011dc4:	30c6d83a 	srl	r3,r6,r3
 8011dc8:	34a4983a 	sll	r18,r6,r18
 8011dcc:	1c62b03a 	or	r17,r3,r17
 8011dd0:	1080fcc4 	addi	r2,r2,1011
 8011dd4:	0085c83a 	sub	r2,zero,r2
 8011dd8:	000f883a 	mov	r7,zero
 8011ddc:	003f8106 	br	8011be4 <__alt_data_end+0xfc011be4>
 8011de0:	3027883a 	mov	r19,r6
 8011de4:	0081ffc4 	movi	r2,2047
 8011de8:	0021883a 	mov	r16,zero
 8011dec:	002d883a 	mov	r22,zero
 8011df0:	003faa06 	br	8011c9c <__alt_data_end+0xfc011c9c>
 8011df4:	0023883a 	mov	r17,zero
 8011df8:	0025883a 	mov	r18,zero
 8011dfc:	01c00044 	movi	r7,1
 8011e00:	003f7806 	br	8011be4 <__alt_data_end+0xfc011be4>
 8011e04:	01c000c4 	movi	r7,3
 8011e08:	003f7606 	br	8011be4 <__alt_data_end+0xfc011be4>
 8011e0c:	05400104 	movi	r21,4
 8011e10:	0021883a 	mov	r16,zero
 8011e14:	002d883a 	mov	r22,zero
 8011e18:	01400044 	movi	r5,1
 8011e1c:	003f5f06 	br	8011b9c <__alt_data_end+0xfc011b9c>
 8011e20:	05400304 	movi	r21,12
 8011e24:	014000c4 	movi	r5,3
 8011e28:	003f5c06 	br	8011b9c <__alt_data_end+0xfc011b9c>
 8011e2c:	04000434 	movhi	r16,16
 8011e30:	0027883a 	mov	r19,zero
 8011e34:	843fffc4 	addi	r16,r16,-1
 8011e38:	05bfffc4 	movi	r22,-1
 8011e3c:	0081ffc4 	movi	r2,2047
 8011e40:	003f9606 	br	8011c9c <__alt_data_end+0xfc011c9c>
 8011e44:	8023883a 	mov	r17,r16
 8011e48:	b025883a 	mov	r18,r22
 8011e4c:	280f883a 	mov	r7,r5
 8011e50:	003f8806 	br	8011c74 <__alt_data_end+0xfc011c74>
 8011e54:	8023883a 	mov	r17,r16
 8011e58:	b025883a 	mov	r18,r22
 8011e5c:	480d883a 	mov	r6,r9
 8011e60:	280f883a 	mov	r7,r5
 8011e64:	003f8306 	br	8011c74 <__alt_data_end+0xfc011c74>
 8011e68:	b026d43a 	srli	r19,r22,16
 8011e6c:	902ed43a 	srli	r23,r18,16
 8011e70:	b5bfffcc 	andi	r22,r22,65535
 8011e74:	94bfffcc 	andi	r18,r18,65535
 8011e78:	b00b883a 	mov	r5,r22
 8011e7c:	9009883a 	mov	r4,r18
 8011e80:	d8c00515 	stw	r3,20(sp)
 8011e84:	d9800715 	stw	r6,28(sp)
 8011e88:	da000615 	stw	r8,24(sp)
 8011e8c:	8001b580 	call	8001b58 <__mulsi3>
 8011e90:	980b883a 	mov	r5,r19
 8011e94:	9009883a 	mov	r4,r18
 8011e98:	1029883a 	mov	r20,r2
 8011e9c:	8001b580 	call	8001b58 <__mulsi3>
 8011ea0:	b80b883a 	mov	r5,r23
 8011ea4:	9809883a 	mov	r4,r19
 8011ea8:	102b883a 	mov	r21,r2
 8011eac:	8001b580 	call	8001b58 <__mulsi3>
 8011eb0:	b809883a 	mov	r4,r23
 8011eb4:	b00b883a 	mov	r5,r22
 8011eb8:	1039883a 	mov	fp,r2
 8011ebc:	8001b580 	call	8001b58 <__mulsi3>
 8011ec0:	a008d43a 	srli	r4,r20,16
 8011ec4:	1545883a 	add	r2,r2,r21
 8011ec8:	d8c00517 	ldw	r3,20(sp)
 8011ecc:	2085883a 	add	r2,r4,r2
 8011ed0:	d9800717 	ldw	r6,28(sp)
 8011ed4:	da000617 	ldw	r8,24(sp)
 8011ed8:	1540022e 	bgeu	r2,r21,8011ee4 <__muldf3+0x3c4>
 8011edc:	01000074 	movhi	r4,1
 8011ee0:	e139883a 	add	fp,fp,r4
 8011ee4:	100e943a 	slli	r7,r2,16
 8011ee8:	1004d43a 	srli	r2,r2,16
 8011eec:	882ad43a 	srli	r21,r17,16
 8011ef0:	a53fffcc 	andi	r20,r20,65535
 8011ef4:	8c7fffcc 	andi	r17,r17,65535
 8011ef8:	3d29883a 	add	r20,r7,r20
 8011efc:	b00b883a 	mov	r5,r22
 8011f00:	8809883a 	mov	r4,r17
 8011f04:	d8c00515 	stw	r3,20(sp)
 8011f08:	d9800715 	stw	r6,28(sp)
 8011f0c:	da000615 	stw	r8,24(sp)
 8011f10:	dd000115 	stw	r20,4(sp)
 8011f14:	d8800015 	stw	r2,0(sp)
 8011f18:	8001b580 	call	8001b58 <__mulsi3>
 8011f1c:	980b883a 	mov	r5,r19
 8011f20:	8809883a 	mov	r4,r17
 8011f24:	d8800215 	stw	r2,8(sp)
 8011f28:	8001b580 	call	8001b58 <__mulsi3>
 8011f2c:	9809883a 	mov	r4,r19
 8011f30:	a80b883a 	mov	r5,r21
 8011f34:	1029883a 	mov	r20,r2
 8011f38:	8001b580 	call	8001b58 <__mulsi3>
 8011f3c:	b00b883a 	mov	r5,r22
 8011f40:	a809883a 	mov	r4,r21
 8011f44:	d8800415 	stw	r2,16(sp)
 8011f48:	8001b580 	call	8001b58 <__mulsi3>
 8011f4c:	d9c00217 	ldw	r7,8(sp)
 8011f50:	1505883a 	add	r2,r2,r20
 8011f54:	d8c00517 	ldw	r3,20(sp)
 8011f58:	3826d43a 	srli	r19,r7,16
 8011f5c:	d9800717 	ldw	r6,28(sp)
 8011f60:	da000617 	ldw	r8,24(sp)
 8011f64:	9885883a 	add	r2,r19,r2
 8011f68:	da400417 	ldw	r9,16(sp)
 8011f6c:	1500022e 	bgeu	r2,r20,8011f78 <__muldf3+0x458>
 8011f70:	01000074 	movhi	r4,1
 8011f74:	4913883a 	add	r9,r9,r4
 8011f78:	1028d43a 	srli	r20,r2,16
 8011f7c:	1004943a 	slli	r2,r2,16
 8011f80:	802cd43a 	srli	r22,r16,16
 8011f84:	843fffcc 	andi	r16,r16,65535
 8011f88:	3cffffcc 	andi	r19,r7,65535
 8011f8c:	9009883a 	mov	r4,r18
 8011f90:	800b883a 	mov	r5,r16
 8011f94:	a269883a 	add	r20,r20,r9
 8011f98:	d8c00515 	stw	r3,20(sp)
 8011f9c:	d9800715 	stw	r6,28(sp)
 8011fa0:	da000615 	stw	r8,24(sp)
 8011fa4:	14e7883a 	add	r19,r2,r19
 8011fa8:	8001b580 	call	8001b58 <__mulsi3>
 8011fac:	9009883a 	mov	r4,r18
 8011fb0:	b00b883a 	mov	r5,r22
 8011fb4:	d8800315 	stw	r2,12(sp)
 8011fb8:	8001b580 	call	8001b58 <__mulsi3>
 8011fbc:	b809883a 	mov	r4,r23
 8011fc0:	b00b883a 	mov	r5,r22
 8011fc4:	d8800215 	stw	r2,8(sp)
 8011fc8:	8001b580 	call	8001b58 <__mulsi3>
 8011fcc:	b80b883a 	mov	r5,r23
 8011fd0:	8009883a 	mov	r4,r16
 8011fd4:	d8800415 	stw	r2,16(sp)
 8011fd8:	8001b580 	call	8001b58 <__mulsi3>
 8011fdc:	da800317 	ldw	r10,12(sp)
 8011fe0:	d9c00217 	ldw	r7,8(sp)
 8011fe4:	d9000017 	ldw	r4,0(sp)
 8011fe8:	502ed43a 	srli	r23,r10,16
 8011fec:	11c5883a 	add	r2,r2,r7
 8011ff0:	24e5883a 	add	r18,r4,r19
 8011ff4:	b885883a 	add	r2,r23,r2
 8011ff8:	d8c00517 	ldw	r3,20(sp)
 8011ffc:	d9800717 	ldw	r6,28(sp)
 8012000:	da000617 	ldw	r8,24(sp)
 8012004:	da400417 	ldw	r9,16(sp)
 8012008:	11c0022e 	bgeu	r2,r7,8012014 <__muldf3+0x4f4>
 801200c:	01000074 	movhi	r4,1
 8012010:	4913883a 	add	r9,r9,r4
 8012014:	100ed43a 	srli	r7,r2,16
 8012018:	1004943a 	slli	r2,r2,16
 801201c:	55ffffcc 	andi	r23,r10,65535
 8012020:	3a53883a 	add	r9,r7,r9
 8012024:	8809883a 	mov	r4,r17
 8012028:	800b883a 	mov	r5,r16
 801202c:	d8c00515 	stw	r3,20(sp)
 8012030:	d9800715 	stw	r6,28(sp)
 8012034:	da000615 	stw	r8,24(sp)
 8012038:	da400415 	stw	r9,16(sp)
 801203c:	15ef883a 	add	r23,r2,r23
 8012040:	8001b580 	call	8001b58 <__mulsi3>
 8012044:	8809883a 	mov	r4,r17
 8012048:	b00b883a 	mov	r5,r22
 801204c:	d8800215 	stw	r2,8(sp)
 8012050:	8001b580 	call	8001b58 <__mulsi3>
 8012054:	b00b883a 	mov	r5,r22
 8012058:	a809883a 	mov	r4,r21
 801205c:	d8800315 	stw	r2,12(sp)
 8012060:	8001b580 	call	8001b58 <__mulsi3>
 8012064:	8009883a 	mov	r4,r16
 8012068:	a80b883a 	mov	r5,r21
 801206c:	1023883a 	mov	r17,r2
 8012070:	8001b580 	call	8001b58 <__mulsi3>
 8012074:	d9c00217 	ldw	r7,8(sp)
 8012078:	da800317 	ldw	r10,12(sp)
 801207c:	d8c00517 	ldw	r3,20(sp)
 8012080:	3808d43a 	srli	r4,r7,16
 8012084:	1285883a 	add	r2,r2,r10
 8012088:	d9800717 	ldw	r6,28(sp)
 801208c:	2085883a 	add	r2,r4,r2
 8012090:	da000617 	ldw	r8,24(sp)
 8012094:	da400417 	ldw	r9,16(sp)
 8012098:	1280022e 	bgeu	r2,r10,80120a4 <__muldf3+0x584>
 801209c:	01000074 	movhi	r4,1
 80120a0:	8923883a 	add	r17,r17,r4
 80120a4:	1008943a 	slli	r4,r2,16
 80120a8:	39ffffcc 	andi	r7,r7,65535
 80120ac:	e4b9883a 	add	fp,fp,r18
 80120b0:	21cf883a 	add	r7,r4,r7
 80120b4:	e4e7803a 	cmpltu	r19,fp,r19
 80120b8:	3d0f883a 	add	r7,r7,r20
 80120bc:	bf39883a 	add	fp,r23,fp
 80120c0:	99c9883a 	add	r4,r19,r7
 80120c4:	e5ef803a 	cmpltu	r23,fp,r23
 80120c8:	490b883a 	add	r5,r9,r4
 80120cc:	1004d43a 	srli	r2,r2,16
 80120d0:	b965883a 	add	r18,r23,r5
 80120d4:	24c9803a 	cmpltu	r4,r4,r19
 80120d8:	3d29803a 	cmpltu	r20,r7,r20
 80120dc:	a128b03a 	or	r20,r20,r4
 80120e0:	95ef803a 	cmpltu	r23,r18,r23
 80120e4:	2a53803a 	cmpltu	r9,r5,r9
 80120e8:	a0a9883a 	add	r20,r20,r2
 80120ec:	4deeb03a 	or	r23,r9,r23
 80120f0:	a5ef883a 	add	r23,r20,r23
 80120f4:	bc63883a 	add	r17,r23,r17
 80120f8:	e004927a 	slli	r2,fp,9
 80120fc:	d9000117 	ldw	r4,4(sp)
 8012100:	882e927a 	slli	r23,r17,9
 8012104:	9022d5fa 	srli	r17,r18,23
 8012108:	e038d5fa 	srli	fp,fp,23
 801210c:	1104b03a 	or	r2,r2,r4
 8012110:	9024927a 	slli	r18,r18,9
 8012114:	1004c03a 	cmpne	r2,r2,zero
 8012118:	bc62b03a 	or	r17,r23,r17
 801211c:	1738b03a 	or	fp,r2,fp
 8012120:	8880402c 	andhi	r2,r17,256
 8012124:	e4a4b03a 	or	r18,fp,r18
 8012128:	10000726 	beq	r2,zero,8012148 <__muldf3+0x628>
 801212c:	9006d07a 	srli	r3,r18,1
 8012130:	880497fa 	slli	r2,r17,31
 8012134:	9480004c 	andi	r18,r18,1
 8012138:	8822d07a 	srli	r17,r17,1
 801213c:	1ca4b03a 	or	r18,r3,r18
 8012140:	14a4b03a 	or	r18,r2,r18
 8012144:	4007883a 	mov	r3,r8
 8012148:	1880ffc4 	addi	r2,r3,1023
 801214c:	0080460e 	bge	zero,r2,8012268 <__muldf3+0x748>
 8012150:	910001cc 	andi	r4,r18,7
 8012154:	20000726 	beq	r4,zero,8012174 <__muldf3+0x654>
 8012158:	910003cc 	andi	r4,r18,15
 801215c:	01400104 	movi	r5,4
 8012160:	21400426 	beq	r4,r5,8012174 <__muldf3+0x654>
 8012164:	9149883a 	add	r4,r18,r5
 8012168:	24a5803a 	cmpltu	r18,r4,r18
 801216c:	8ca3883a 	add	r17,r17,r18
 8012170:	2025883a 	mov	r18,r4
 8012174:	8900402c 	andhi	r4,r17,256
 8012178:	20000426 	beq	r4,zero,801218c <__muldf3+0x66c>
 801217c:	18810004 	addi	r2,r3,1024
 8012180:	00ffc034 	movhi	r3,65280
 8012184:	18ffffc4 	addi	r3,r3,-1
 8012188:	88e2703a 	and	r17,r17,r3
 801218c:	00c1ff84 	movi	r3,2046
 8012190:	18bf1316 	blt	r3,r2,8011de0 <__alt_data_end+0xfc011de0>
 8012194:	882c977a 	slli	r22,r17,29
 8012198:	9024d0fa 	srli	r18,r18,3
 801219c:	8822927a 	slli	r17,r17,9
 80121a0:	1081ffcc 	andi	r2,r2,2047
 80121a4:	b4acb03a 	or	r22,r22,r18
 80121a8:	8820d33a 	srli	r16,r17,12
 80121ac:	3027883a 	mov	r19,r6
 80121b0:	003eba06 	br	8011c9c <__alt_data_end+0xfc011c9c>
 80121b4:	8080022c 	andhi	r2,r16,8
 80121b8:	10000926 	beq	r2,zero,80121e0 <__muldf3+0x6c0>
 80121bc:	8880022c 	andhi	r2,r17,8
 80121c0:	1000071e 	bne	r2,zero,80121e0 <__muldf3+0x6c0>
 80121c4:	00800434 	movhi	r2,16
 80121c8:	8c000234 	orhi	r16,r17,8
 80121cc:	10bfffc4 	addi	r2,r2,-1
 80121d0:	e027883a 	mov	r19,fp
 80121d4:	80a0703a 	and	r16,r16,r2
 80121d8:	902d883a 	mov	r22,r18
 80121dc:	003f1706 	br	8011e3c <__alt_data_end+0xfc011e3c>
 80121e0:	00800434 	movhi	r2,16
 80121e4:	84000234 	orhi	r16,r16,8
 80121e8:	10bfffc4 	addi	r2,r2,-1
 80121ec:	80a0703a 	and	r16,r16,r2
 80121f0:	003f1206 	br	8011e3c <__alt_data_end+0xfc011e3c>
 80121f4:	147ff604 	addi	r17,r2,-40
 80121f8:	3462983a 	sll	r17,r6,r17
 80121fc:	0025883a 	mov	r18,zero
 8012200:	003ef306 	br	8011dd0 <__alt_data_end+0xfc011dd0>
 8012204:	3009883a 	mov	r4,r6
 8012208:	d9400215 	stw	r5,8(sp)
 801220c:	d9800715 	stw	r6,28(sp)
 8012210:	da400415 	stw	r9,16(sp)
 8012214:	da800315 	stw	r10,12(sp)
 8012218:	80026b00 	call	80026b0 <__clzsi2>
 801221c:	10800804 	addi	r2,r2,32
 8012220:	da800317 	ldw	r10,12(sp)
 8012224:	da400417 	ldw	r9,16(sp)
 8012228:	d9800717 	ldw	r6,28(sp)
 801222c:	d9400217 	ldw	r5,8(sp)
 8012230:	003edd06 	br	8011da8 <__alt_data_end+0xfc011da8>
 8012234:	143ff604 	addi	r16,r2,-40
 8012238:	ac20983a 	sll	r16,r21,r16
 801223c:	002d883a 	mov	r22,zero
 8012240:	003ec106 	br	8011d48 <__alt_data_end+0xfc011d48>
 8012244:	d9800715 	stw	r6,28(sp)
 8012248:	d9c00215 	stw	r7,8(sp)
 801224c:	da400415 	stw	r9,16(sp)
 8012250:	80026b00 	call	80026b0 <__clzsi2>
 8012254:	10800804 	addi	r2,r2,32
 8012258:	da400417 	ldw	r9,16(sp)
 801225c:	d9c00217 	ldw	r7,8(sp)
 8012260:	d9800717 	ldw	r6,28(sp)
 8012264:	003eae06 	br	8011d20 <__alt_data_end+0xfc011d20>
 8012268:	00c00044 	movi	r3,1
 801226c:	1887c83a 	sub	r3,r3,r2
 8012270:	01000e04 	movi	r4,56
 8012274:	20fe8516 	blt	r4,r3,8011c8c <__alt_data_end+0xfc011c8c>
 8012278:	010007c4 	movi	r4,31
 801227c:	20c01b16 	blt	r4,r3,80122ec <__muldf3+0x7cc>
 8012280:	00800804 	movi	r2,32
 8012284:	10c5c83a 	sub	r2,r2,r3
 8012288:	888a983a 	sll	r5,r17,r2
 801228c:	90c8d83a 	srl	r4,r18,r3
 8012290:	9084983a 	sll	r2,r18,r2
 8012294:	88e2d83a 	srl	r17,r17,r3
 8012298:	2906b03a 	or	r3,r5,r4
 801229c:	1004c03a 	cmpne	r2,r2,zero
 80122a0:	1886b03a 	or	r3,r3,r2
 80122a4:	188001cc 	andi	r2,r3,7
 80122a8:	10000726 	beq	r2,zero,80122c8 <__muldf3+0x7a8>
 80122ac:	188003cc 	andi	r2,r3,15
 80122b0:	01000104 	movi	r4,4
 80122b4:	11000426 	beq	r2,r4,80122c8 <__muldf3+0x7a8>
 80122b8:	1805883a 	mov	r2,r3
 80122bc:	10c00104 	addi	r3,r2,4
 80122c0:	1885803a 	cmpltu	r2,r3,r2
 80122c4:	88a3883a 	add	r17,r17,r2
 80122c8:	8880202c 	andhi	r2,r17,128
 80122cc:	10001c26 	beq	r2,zero,8012340 <__muldf3+0x820>
 80122d0:	3027883a 	mov	r19,r6
 80122d4:	00800044 	movi	r2,1
 80122d8:	0021883a 	mov	r16,zero
 80122dc:	002d883a 	mov	r22,zero
 80122e0:	003e6e06 	br	8011c9c <__alt_data_end+0xfc011c9c>
 80122e4:	4007883a 	mov	r3,r8
 80122e8:	003f9706 	br	8012148 <__alt_data_end+0xfc012148>
 80122ec:	017ff844 	movi	r5,-31
 80122f0:	2885c83a 	sub	r2,r5,r2
 80122f4:	888ad83a 	srl	r5,r17,r2
 80122f8:	00800804 	movi	r2,32
 80122fc:	18801a26 	beq	r3,r2,8012368 <__muldf3+0x848>
 8012300:	01001004 	movi	r4,64
 8012304:	20c7c83a 	sub	r3,r4,r3
 8012308:	88e2983a 	sll	r17,r17,r3
 801230c:	8ca4b03a 	or	r18,r17,r18
 8012310:	9004c03a 	cmpne	r2,r18,zero
 8012314:	2884b03a 	or	r2,r5,r2
 8012318:	144001cc 	andi	r17,r2,7
 801231c:	88000d1e 	bne	r17,zero,8012354 <__muldf3+0x834>
 8012320:	0021883a 	mov	r16,zero
 8012324:	102cd0fa 	srli	r22,r2,3
 8012328:	3027883a 	mov	r19,r6
 801232c:	0005883a 	mov	r2,zero
 8012330:	b46cb03a 	or	r22,r22,r17
 8012334:	003e5906 	br	8011c9c <__alt_data_end+0xfc011c9c>
 8012338:	1007883a 	mov	r3,r2
 801233c:	0023883a 	mov	r17,zero
 8012340:	8820927a 	slli	r16,r17,9
 8012344:	1805883a 	mov	r2,r3
 8012348:	8822977a 	slli	r17,r17,29
 801234c:	8020d33a 	srli	r16,r16,12
 8012350:	003ff406 	br	8012324 <__alt_data_end+0xfc012324>
 8012354:	10c003cc 	andi	r3,r2,15
 8012358:	01000104 	movi	r4,4
 801235c:	193ff626 	beq	r3,r4,8012338 <__alt_data_end+0xfc012338>
 8012360:	0023883a 	mov	r17,zero
 8012364:	003fd506 	br	80122bc <__alt_data_end+0xfc0122bc>
 8012368:	0023883a 	mov	r17,zero
 801236c:	003fe706 	br	801230c <__alt_data_end+0xfc01230c>
 8012370:	00800434 	movhi	r2,16
 8012374:	8c000234 	orhi	r16,r17,8
 8012378:	10bfffc4 	addi	r2,r2,-1
 801237c:	3027883a 	mov	r19,r6
 8012380:	80a0703a 	and	r16,r16,r2
 8012384:	902d883a 	mov	r22,r18
 8012388:	003eac06 	br	8011e3c <__alt_data_end+0xfc011e3c>

0801238c <__subdf3>:
 801238c:	02000434 	movhi	r8,16
 8012390:	423fffc4 	addi	r8,r8,-1
 8012394:	defffb04 	addi	sp,sp,-20
 8012398:	2a14703a 	and	r10,r5,r8
 801239c:	3812d53a 	srli	r9,r7,20
 80123a0:	3a10703a 	and	r8,r7,r8
 80123a4:	2006d77a 	srli	r3,r4,29
 80123a8:	3004d77a 	srli	r2,r6,29
 80123ac:	dc000015 	stw	r16,0(sp)
 80123b0:	501490fa 	slli	r10,r10,3
 80123b4:	2820d53a 	srli	r16,r5,20
 80123b8:	401090fa 	slli	r8,r8,3
 80123bc:	dc800215 	stw	r18,8(sp)
 80123c0:	dc400115 	stw	r17,4(sp)
 80123c4:	dfc00415 	stw	ra,16(sp)
 80123c8:	202290fa 	slli	r17,r4,3
 80123cc:	dcc00315 	stw	r19,12(sp)
 80123d0:	4a41ffcc 	andi	r9,r9,2047
 80123d4:	0101ffc4 	movi	r4,2047
 80123d8:	2824d7fa 	srli	r18,r5,31
 80123dc:	8401ffcc 	andi	r16,r16,2047
 80123e0:	50c6b03a 	or	r3,r10,r3
 80123e4:	380ed7fa 	srli	r7,r7,31
 80123e8:	408ab03a 	or	r5,r8,r2
 80123ec:	300c90fa 	slli	r6,r6,3
 80123f0:	49009626 	beq	r9,r4,801264c <__subdf3+0x2c0>
 80123f4:	39c0005c 	xori	r7,r7,1
 80123f8:	8245c83a 	sub	r2,r16,r9
 80123fc:	3c807426 	beq	r7,r18,80125d0 <__subdf3+0x244>
 8012400:	0080af0e 	bge	zero,r2,80126c0 <__subdf3+0x334>
 8012404:	48002a1e 	bne	r9,zero,80124b0 <__subdf3+0x124>
 8012408:	2988b03a 	or	r4,r5,r6
 801240c:	20009a1e 	bne	r4,zero,8012678 <__subdf3+0x2ec>
 8012410:	888001cc 	andi	r2,r17,7
 8012414:	10000726 	beq	r2,zero,8012434 <__subdf3+0xa8>
 8012418:	888003cc 	andi	r2,r17,15
 801241c:	01000104 	movi	r4,4
 8012420:	11000426 	beq	r2,r4,8012434 <__subdf3+0xa8>
 8012424:	890b883a 	add	r5,r17,r4
 8012428:	2c63803a 	cmpltu	r17,r5,r17
 801242c:	1c47883a 	add	r3,r3,r17
 8012430:	2823883a 	mov	r17,r5
 8012434:	1880202c 	andhi	r2,r3,128
 8012438:	10005926 	beq	r2,zero,80125a0 <__subdf3+0x214>
 801243c:	84000044 	addi	r16,r16,1
 8012440:	0081ffc4 	movi	r2,2047
 8012444:	8080be26 	beq	r16,r2,8012740 <__subdf3+0x3b4>
 8012448:	017fe034 	movhi	r5,65408
 801244c:	297fffc4 	addi	r5,r5,-1
 8012450:	1946703a 	and	r3,r3,r5
 8012454:	1804977a 	slli	r2,r3,29
 8012458:	1806927a 	slli	r3,r3,9
 801245c:	8822d0fa 	srli	r17,r17,3
 8012460:	8401ffcc 	andi	r16,r16,2047
 8012464:	180ad33a 	srli	r5,r3,12
 8012468:	9100004c 	andi	r4,r18,1
 801246c:	1444b03a 	or	r2,r2,r17
 8012470:	80c1ffcc 	andi	r3,r16,2047
 8012474:	1820953a 	slli	r16,r3,20
 8012478:	20c03fcc 	andi	r3,r4,255
 801247c:	180897fa 	slli	r4,r3,31
 8012480:	00c00434 	movhi	r3,16
 8012484:	18ffffc4 	addi	r3,r3,-1
 8012488:	28c6703a 	and	r3,r5,r3
 801248c:	1c06b03a 	or	r3,r3,r16
 8012490:	1906b03a 	or	r3,r3,r4
 8012494:	dfc00417 	ldw	ra,16(sp)
 8012498:	dcc00317 	ldw	r19,12(sp)
 801249c:	dc800217 	ldw	r18,8(sp)
 80124a0:	dc400117 	ldw	r17,4(sp)
 80124a4:	dc000017 	ldw	r16,0(sp)
 80124a8:	dec00504 	addi	sp,sp,20
 80124ac:	f800283a 	ret
 80124b0:	0101ffc4 	movi	r4,2047
 80124b4:	813fd626 	beq	r16,r4,8012410 <__alt_data_end+0xfc012410>
 80124b8:	29402034 	orhi	r5,r5,128
 80124bc:	01000e04 	movi	r4,56
 80124c0:	2080a316 	blt	r4,r2,8012750 <__subdf3+0x3c4>
 80124c4:	010007c4 	movi	r4,31
 80124c8:	2080c616 	blt	r4,r2,80127e4 <__subdf3+0x458>
 80124cc:	01000804 	movi	r4,32
 80124d0:	2089c83a 	sub	r4,r4,r2
 80124d4:	2910983a 	sll	r8,r5,r4
 80124d8:	308ed83a 	srl	r7,r6,r2
 80124dc:	3108983a 	sll	r4,r6,r4
 80124e0:	2884d83a 	srl	r2,r5,r2
 80124e4:	41ccb03a 	or	r6,r8,r7
 80124e8:	2008c03a 	cmpne	r4,r4,zero
 80124ec:	310cb03a 	or	r6,r6,r4
 80124f0:	898dc83a 	sub	r6,r17,r6
 80124f4:	89a3803a 	cmpltu	r17,r17,r6
 80124f8:	1887c83a 	sub	r3,r3,r2
 80124fc:	1c47c83a 	sub	r3,r3,r17
 8012500:	3023883a 	mov	r17,r6
 8012504:	1880202c 	andhi	r2,r3,128
 8012508:	10002326 	beq	r2,zero,8012598 <__subdf3+0x20c>
 801250c:	04c02034 	movhi	r19,128
 8012510:	9cffffc4 	addi	r19,r19,-1
 8012514:	1ce6703a 	and	r19,r3,r19
 8012518:	98007a26 	beq	r19,zero,8012704 <__subdf3+0x378>
 801251c:	9809883a 	mov	r4,r19
 8012520:	80026b00 	call	80026b0 <__clzsi2>
 8012524:	113ffe04 	addi	r4,r2,-8
 8012528:	00c007c4 	movi	r3,31
 801252c:	19007b16 	blt	r3,r4,801271c <__subdf3+0x390>
 8012530:	00800804 	movi	r2,32
 8012534:	1105c83a 	sub	r2,r2,r4
 8012538:	8884d83a 	srl	r2,r17,r2
 801253c:	9906983a 	sll	r3,r19,r4
 8012540:	8922983a 	sll	r17,r17,r4
 8012544:	10c4b03a 	or	r2,r2,r3
 8012548:	24007816 	blt	r4,r16,801272c <__subdf3+0x3a0>
 801254c:	2421c83a 	sub	r16,r4,r16
 8012550:	80c00044 	addi	r3,r16,1
 8012554:	010007c4 	movi	r4,31
 8012558:	20c09516 	blt	r4,r3,80127b0 <__subdf3+0x424>
 801255c:	01400804 	movi	r5,32
 8012560:	28cbc83a 	sub	r5,r5,r3
 8012564:	88c8d83a 	srl	r4,r17,r3
 8012568:	8962983a 	sll	r17,r17,r5
 801256c:	114a983a 	sll	r5,r2,r5
 8012570:	10c6d83a 	srl	r3,r2,r3
 8012574:	8804c03a 	cmpne	r2,r17,zero
 8012578:	290ab03a 	or	r5,r5,r4
 801257c:	28a2b03a 	or	r17,r5,r2
 8012580:	0021883a 	mov	r16,zero
 8012584:	003fa206 	br	8012410 <__alt_data_end+0xfc012410>
 8012588:	2090b03a 	or	r8,r4,r2
 801258c:	40018e26 	beq	r8,zero,8012bc8 <__subdf3+0x83c>
 8012590:	1007883a 	mov	r3,r2
 8012594:	2023883a 	mov	r17,r4
 8012598:	888001cc 	andi	r2,r17,7
 801259c:	103f9e1e 	bne	r2,zero,8012418 <__alt_data_end+0xfc012418>
 80125a0:	1804977a 	slli	r2,r3,29
 80125a4:	8822d0fa 	srli	r17,r17,3
 80125a8:	1810d0fa 	srli	r8,r3,3
 80125ac:	9100004c 	andi	r4,r18,1
 80125b0:	1444b03a 	or	r2,r2,r17
 80125b4:	00c1ffc4 	movi	r3,2047
 80125b8:	80c02826 	beq	r16,r3,801265c <__subdf3+0x2d0>
 80125bc:	01400434 	movhi	r5,16
 80125c0:	297fffc4 	addi	r5,r5,-1
 80125c4:	80e0703a 	and	r16,r16,r3
 80125c8:	414a703a 	and	r5,r8,r5
 80125cc:	003fa806 	br	8012470 <__alt_data_end+0xfc012470>
 80125d0:	0080630e 	bge	zero,r2,8012760 <__subdf3+0x3d4>
 80125d4:	48003026 	beq	r9,zero,8012698 <__subdf3+0x30c>
 80125d8:	0101ffc4 	movi	r4,2047
 80125dc:	813f8c26 	beq	r16,r4,8012410 <__alt_data_end+0xfc012410>
 80125e0:	29402034 	orhi	r5,r5,128
 80125e4:	01000e04 	movi	r4,56
 80125e8:	2080a90e 	bge	r4,r2,8012890 <__subdf3+0x504>
 80125ec:	298cb03a 	or	r6,r5,r6
 80125f0:	3012c03a 	cmpne	r9,r6,zero
 80125f4:	0005883a 	mov	r2,zero
 80125f8:	4c53883a 	add	r9,r9,r17
 80125fc:	4c63803a 	cmpltu	r17,r9,r17
 8012600:	10c7883a 	add	r3,r2,r3
 8012604:	88c7883a 	add	r3,r17,r3
 8012608:	4823883a 	mov	r17,r9
 801260c:	1880202c 	andhi	r2,r3,128
 8012610:	1000d026 	beq	r2,zero,8012954 <__subdf3+0x5c8>
 8012614:	84000044 	addi	r16,r16,1
 8012618:	0081ffc4 	movi	r2,2047
 801261c:	8080fe26 	beq	r16,r2,8012a18 <__subdf3+0x68c>
 8012620:	00bfe034 	movhi	r2,65408
 8012624:	10bfffc4 	addi	r2,r2,-1
 8012628:	1886703a 	and	r3,r3,r2
 801262c:	880ad07a 	srli	r5,r17,1
 8012630:	180497fa 	slli	r2,r3,31
 8012634:	8900004c 	andi	r4,r17,1
 8012638:	2922b03a 	or	r17,r5,r4
 801263c:	1806d07a 	srli	r3,r3,1
 8012640:	1462b03a 	or	r17,r2,r17
 8012644:	3825883a 	mov	r18,r7
 8012648:	003f7106 	br	8012410 <__alt_data_end+0xfc012410>
 801264c:	2984b03a 	or	r2,r5,r6
 8012650:	103f6826 	beq	r2,zero,80123f4 <__alt_data_end+0xfc0123f4>
 8012654:	39c03fcc 	andi	r7,r7,255
 8012658:	003f6706 	br	80123f8 <__alt_data_end+0xfc0123f8>
 801265c:	4086b03a 	or	r3,r8,r2
 8012660:	18015226 	beq	r3,zero,8012bac <__subdf3+0x820>
 8012664:	00c00434 	movhi	r3,16
 8012668:	41400234 	orhi	r5,r8,8
 801266c:	18ffffc4 	addi	r3,r3,-1
 8012670:	28ca703a 	and	r5,r5,r3
 8012674:	003f7e06 	br	8012470 <__alt_data_end+0xfc012470>
 8012678:	10bfffc4 	addi	r2,r2,-1
 801267c:	1000491e 	bne	r2,zero,80127a4 <__subdf3+0x418>
 8012680:	898fc83a 	sub	r7,r17,r6
 8012684:	89e3803a 	cmpltu	r17,r17,r7
 8012688:	1947c83a 	sub	r3,r3,r5
 801268c:	1c47c83a 	sub	r3,r3,r17
 8012690:	3823883a 	mov	r17,r7
 8012694:	003f9b06 	br	8012504 <__alt_data_end+0xfc012504>
 8012698:	2988b03a 	or	r4,r5,r6
 801269c:	203f5c26 	beq	r4,zero,8012410 <__alt_data_end+0xfc012410>
 80126a0:	10bfffc4 	addi	r2,r2,-1
 80126a4:	1000931e 	bne	r2,zero,80128f4 <__subdf3+0x568>
 80126a8:	898d883a 	add	r6,r17,r6
 80126ac:	3463803a 	cmpltu	r17,r6,r17
 80126b0:	1947883a 	add	r3,r3,r5
 80126b4:	88c7883a 	add	r3,r17,r3
 80126b8:	3023883a 	mov	r17,r6
 80126bc:	003fd306 	br	801260c <__alt_data_end+0xfc01260c>
 80126c0:	1000541e 	bne	r2,zero,8012814 <__subdf3+0x488>
 80126c4:	80800044 	addi	r2,r16,1
 80126c8:	1081ffcc 	andi	r2,r2,2047
 80126cc:	01000044 	movi	r4,1
 80126d0:	2080a20e 	bge	r4,r2,801295c <__subdf3+0x5d0>
 80126d4:	8989c83a 	sub	r4,r17,r6
 80126d8:	8905803a 	cmpltu	r2,r17,r4
 80126dc:	1967c83a 	sub	r19,r3,r5
 80126e0:	98a7c83a 	sub	r19,r19,r2
 80126e4:	9880202c 	andhi	r2,r19,128
 80126e8:	10006326 	beq	r2,zero,8012878 <__subdf3+0x4ec>
 80126ec:	3463c83a 	sub	r17,r6,r17
 80126f0:	28c7c83a 	sub	r3,r5,r3
 80126f4:	344d803a 	cmpltu	r6,r6,r17
 80126f8:	19a7c83a 	sub	r19,r3,r6
 80126fc:	3825883a 	mov	r18,r7
 8012700:	983f861e 	bne	r19,zero,801251c <__alt_data_end+0xfc01251c>
 8012704:	8809883a 	mov	r4,r17
 8012708:	80026b00 	call	80026b0 <__clzsi2>
 801270c:	10800804 	addi	r2,r2,32
 8012710:	113ffe04 	addi	r4,r2,-8
 8012714:	00c007c4 	movi	r3,31
 8012718:	193f850e 	bge	r3,r4,8012530 <__alt_data_end+0xfc012530>
 801271c:	10bff604 	addi	r2,r2,-40
 8012720:	8884983a 	sll	r2,r17,r2
 8012724:	0023883a 	mov	r17,zero
 8012728:	243f880e 	bge	r4,r16,801254c <__alt_data_end+0xfc01254c>
 801272c:	00ffe034 	movhi	r3,65408
 8012730:	18ffffc4 	addi	r3,r3,-1
 8012734:	8121c83a 	sub	r16,r16,r4
 8012738:	10c6703a 	and	r3,r2,r3
 801273c:	003f3406 	br	8012410 <__alt_data_end+0xfc012410>
 8012740:	9100004c 	andi	r4,r18,1
 8012744:	000b883a 	mov	r5,zero
 8012748:	0005883a 	mov	r2,zero
 801274c:	003f4806 	br	8012470 <__alt_data_end+0xfc012470>
 8012750:	298cb03a 	or	r6,r5,r6
 8012754:	300cc03a 	cmpne	r6,r6,zero
 8012758:	0005883a 	mov	r2,zero
 801275c:	003f6406 	br	80124f0 <__alt_data_end+0xfc0124f0>
 8012760:	10009a1e 	bne	r2,zero,80129cc <__subdf3+0x640>
 8012764:	82400044 	addi	r9,r16,1
 8012768:	4881ffcc 	andi	r2,r9,2047
 801276c:	02800044 	movi	r10,1
 8012770:	5080670e 	bge	r10,r2,8012910 <__subdf3+0x584>
 8012774:	0081ffc4 	movi	r2,2047
 8012778:	4880af26 	beq	r9,r2,8012a38 <__subdf3+0x6ac>
 801277c:	898d883a 	add	r6,r17,r6
 8012780:	1945883a 	add	r2,r3,r5
 8012784:	3447803a 	cmpltu	r3,r6,r17
 8012788:	1887883a 	add	r3,r3,r2
 801278c:	182297fa 	slli	r17,r3,31
 8012790:	300cd07a 	srli	r6,r6,1
 8012794:	1806d07a 	srli	r3,r3,1
 8012798:	4821883a 	mov	r16,r9
 801279c:	89a2b03a 	or	r17,r17,r6
 80127a0:	003f1b06 	br	8012410 <__alt_data_end+0xfc012410>
 80127a4:	0101ffc4 	movi	r4,2047
 80127a8:	813f441e 	bne	r16,r4,80124bc <__alt_data_end+0xfc0124bc>
 80127ac:	003f1806 	br	8012410 <__alt_data_end+0xfc012410>
 80127b0:	843ff844 	addi	r16,r16,-31
 80127b4:	01400804 	movi	r5,32
 80127b8:	1408d83a 	srl	r4,r2,r16
 80127bc:	19405026 	beq	r3,r5,8012900 <__subdf3+0x574>
 80127c0:	01401004 	movi	r5,64
 80127c4:	28c7c83a 	sub	r3,r5,r3
 80127c8:	10c4983a 	sll	r2,r2,r3
 80127cc:	88a2b03a 	or	r17,r17,r2
 80127d0:	8822c03a 	cmpne	r17,r17,zero
 80127d4:	2462b03a 	or	r17,r4,r17
 80127d8:	0007883a 	mov	r3,zero
 80127dc:	0021883a 	mov	r16,zero
 80127e0:	003f6d06 	br	8012598 <__alt_data_end+0xfc012598>
 80127e4:	11fff804 	addi	r7,r2,-32
 80127e8:	01000804 	movi	r4,32
 80127ec:	29ced83a 	srl	r7,r5,r7
 80127f0:	11004526 	beq	r2,r4,8012908 <__subdf3+0x57c>
 80127f4:	01001004 	movi	r4,64
 80127f8:	2089c83a 	sub	r4,r4,r2
 80127fc:	2904983a 	sll	r2,r5,r4
 8012800:	118cb03a 	or	r6,r2,r6
 8012804:	300cc03a 	cmpne	r6,r6,zero
 8012808:	398cb03a 	or	r6,r7,r6
 801280c:	0005883a 	mov	r2,zero
 8012810:	003f3706 	br	80124f0 <__alt_data_end+0xfc0124f0>
 8012814:	80002a26 	beq	r16,zero,80128c0 <__subdf3+0x534>
 8012818:	0101ffc4 	movi	r4,2047
 801281c:	49006626 	beq	r9,r4,80129b8 <__subdf3+0x62c>
 8012820:	0085c83a 	sub	r2,zero,r2
 8012824:	18c02034 	orhi	r3,r3,128
 8012828:	01000e04 	movi	r4,56
 801282c:	20807e16 	blt	r4,r2,8012a28 <__subdf3+0x69c>
 8012830:	010007c4 	movi	r4,31
 8012834:	2080e716 	blt	r4,r2,8012bd4 <__subdf3+0x848>
 8012838:	01000804 	movi	r4,32
 801283c:	2089c83a 	sub	r4,r4,r2
 8012840:	1914983a 	sll	r10,r3,r4
 8012844:	8890d83a 	srl	r8,r17,r2
 8012848:	8908983a 	sll	r4,r17,r4
 801284c:	1884d83a 	srl	r2,r3,r2
 8012850:	5222b03a 	or	r17,r10,r8
 8012854:	2006c03a 	cmpne	r3,r4,zero
 8012858:	88e2b03a 	or	r17,r17,r3
 801285c:	3463c83a 	sub	r17,r6,r17
 8012860:	2885c83a 	sub	r2,r5,r2
 8012864:	344d803a 	cmpltu	r6,r6,r17
 8012868:	1187c83a 	sub	r3,r2,r6
 801286c:	4821883a 	mov	r16,r9
 8012870:	3825883a 	mov	r18,r7
 8012874:	003f2306 	br	8012504 <__alt_data_end+0xfc012504>
 8012878:	24d0b03a 	or	r8,r4,r19
 801287c:	40001b1e 	bne	r8,zero,80128ec <__subdf3+0x560>
 8012880:	0005883a 	mov	r2,zero
 8012884:	0009883a 	mov	r4,zero
 8012888:	0021883a 	mov	r16,zero
 801288c:	003f4906 	br	80125b4 <__alt_data_end+0xfc0125b4>
 8012890:	010007c4 	movi	r4,31
 8012894:	20803a16 	blt	r4,r2,8012980 <__subdf3+0x5f4>
 8012898:	01000804 	movi	r4,32
 801289c:	2089c83a 	sub	r4,r4,r2
 80128a0:	2912983a 	sll	r9,r5,r4
 80128a4:	3090d83a 	srl	r8,r6,r2
 80128a8:	3108983a 	sll	r4,r6,r4
 80128ac:	2884d83a 	srl	r2,r5,r2
 80128b0:	4a12b03a 	or	r9,r9,r8
 80128b4:	2008c03a 	cmpne	r4,r4,zero
 80128b8:	4912b03a 	or	r9,r9,r4
 80128bc:	003f4e06 	br	80125f8 <__alt_data_end+0xfc0125f8>
 80128c0:	1c48b03a 	or	r4,r3,r17
 80128c4:	20003c26 	beq	r4,zero,80129b8 <__subdf3+0x62c>
 80128c8:	0084303a 	nor	r2,zero,r2
 80128cc:	1000381e 	bne	r2,zero,80129b0 <__subdf3+0x624>
 80128d0:	3463c83a 	sub	r17,r6,r17
 80128d4:	28c5c83a 	sub	r2,r5,r3
 80128d8:	344d803a 	cmpltu	r6,r6,r17
 80128dc:	1187c83a 	sub	r3,r2,r6
 80128e0:	4821883a 	mov	r16,r9
 80128e4:	3825883a 	mov	r18,r7
 80128e8:	003f0606 	br	8012504 <__alt_data_end+0xfc012504>
 80128ec:	2023883a 	mov	r17,r4
 80128f0:	003f0906 	br	8012518 <__alt_data_end+0xfc012518>
 80128f4:	0101ffc4 	movi	r4,2047
 80128f8:	813f3a1e 	bne	r16,r4,80125e4 <__alt_data_end+0xfc0125e4>
 80128fc:	003ec406 	br	8012410 <__alt_data_end+0xfc012410>
 8012900:	0005883a 	mov	r2,zero
 8012904:	003fb106 	br	80127cc <__alt_data_end+0xfc0127cc>
 8012908:	0005883a 	mov	r2,zero
 801290c:	003fbc06 	br	8012800 <__alt_data_end+0xfc012800>
 8012910:	1c44b03a 	or	r2,r3,r17
 8012914:	80008e1e 	bne	r16,zero,8012b50 <__subdf3+0x7c4>
 8012918:	1000c826 	beq	r2,zero,8012c3c <__subdf3+0x8b0>
 801291c:	2984b03a 	or	r2,r5,r6
 8012920:	103ebb26 	beq	r2,zero,8012410 <__alt_data_end+0xfc012410>
 8012924:	8989883a 	add	r4,r17,r6
 8012928:	1945883a 	add	r2,r3,r5
 801292c:	2447803a 	cmpltu	r3,r4,r17
 8012930:	1887883a 	add	r3,r3,r2
 8012934:	1880202c 	andhi	r2,r3,128
 8012938:	2023883a 	mov	r17,r4
 801293c:	103f1626 	beq	r2,zero,8012598 <__alt_data_end+0xfc012598>
 8012940:	00bfe034 	movhi	r2,65408
 8012944:	10bfffc4 	addi	r2,r2,-1
 8012948:	5021883a 	mov	r16,r10
 801294c:	1886703a 	and	r3,r3,r2
 8012950:	003eaf06 	br	8012410 <__alt_data_end+0xfc012410>
 8012954:	3825883a 	mov	r18,r7
 8012958:	003f0f06 	br	8012598 <__alt_data_end+0xfc012598>
 801295c:	1c44b03a 	or	r2,r3,r17
 8012960:	8000251e 	bne	r16,zero,80129f8 <__subdf3+0x66c>
 8012964:	1000661e 	bne	r2,zero,8012b00 <__subdf3+0x774>
 8012968:	2990b03a 	or	r8,r5,r6
 801296c:	40009626 	beq	r8,zero,8012bc8 <__subdf3+0x83c>
 8012970:	2807883a 	mov	r3,r5
 8012974:	3023883a 	mov	r17,r6
 8012978:	3825883a 	mov	r18,r7
 801297c:	003ea406 	br	8012410 <__alt_data_end+0xfc012410>
 8012980:	127ff804 	addi	r9,r2,-32
 8012984:	01000804 	movi	r4,32
 8012988:	2a52d83a 	srl	r9,r5,r9
 801298c:	11008c26 	beq	r2,r4,8012bc0 <__subdf3+0x834>
 8012990:	01001004 	movi	r4,64
 8012994:	2085c83a 	sub	r2,r4,r2
 8012998:	2884983a 	sll	r2,r5,r2
 801299c:	118cb03a 	or	r6,r2,r6
 80129a0:	300cc03a 	cmpne	r6,r6,zero
 80129a4:	4992b03a 	or	r9,r9,r6
 80129a8:	0005883a 	mov	r2,zero
 80129ac:	003f1206 	br	80125f8 <__alt_data_end+0xfc0125f8>
 80129b0:	0101ffc4 	movi	r4,2047
 80129b4:	493f9c1e 	bne	r9,r4,8012828 <__alt_data_end+0xfc012828>
 80129b8:	2807883a 	mov	r3,r5
 80129bc:	3023883a 	mov	r17,r6
 80129c0:	4821883a 	mov	r16,r9
 80129c4:	3825883a 	mov	r18,r7
 80129c8:	003e9106 	br	8012410 <__alt_data_end+0xfc012410>
 80129cc:	80001f1e 	bne	r16,zero,8012a4c <__subdf3+0x6c0>
 80129d0:	1c48b03a 	or	r4,r3,r17
 80129d4:	20005a26 	beq	r4,zero,8012b40 <__subdf3+0x7b4>
 80129d8:	0084303a 	nor	r2,zero,r2
 80129dc:	1000561e 	bne	r2,zero,8012b38 <__subdf3+0x7ac>
 80129e0:	89a3883a 	add	r17,r17,r6
 80129e4:	1945883a 	add	r2,r3,r5
 80129e8:	898d803a 	cmpltu	r6,r17,r6
 80129ec:	3087883a 	add	r3,r6,r2
 80129f0:	4821883a 	mov	r16,r9
 80129f4:	003f0506 	br	801260c <__alt_data_end+0xfc01260c>
 80129f8:	10002b1e 	bne	r2,zero,8012aa8 <__subdf3+0x71c>
 80129fc:	2984b03a 	or	r2,r5,r6
 8012a00:	10008026 	beq	r2,zero,8012c04 <__subdf3+0x878>
 8012a04:	2807883a 	mov	r3,r5
 8012a08:	3023883a 	mov	r17,r6
 8012a0c:	3825883a 	mov	r18,r7
 8012a10:	0401ffc4 	movi	r16,2047
 8012a14:	003e7e06 	br	8012410 <__alt_data_end+0xfc012410>
 8012a18:	3809883a 	mov	r4,r7
 8012a1c:	0011883a 	mov	r8,zero
 8012a20:	0005883a 	mov	r2,zero
 8012a24:	003ee306 	br	80125b4 <__alt_data_end+0xfc0125b4>
 8012a28:	1c62b03a 	or	r17,r3,r17
 8012a2c:	8822c03a 	cmpne	r17,r17,zero
 8012a30:	0005883a 	mov	r2,zero
 8012a34:	003f8906 	br	801285c <__alt_data_end+0xfc01285c>
 8012a38:	3809883a 	mov	r4,r7
 8012a3c:	4821883a 	mov	r16,r9
 8012a40:	0011883a 	mov	r8,zero
 8012a44:	0005883a 	mov	r2,zero
 8012a48:	003eda06 	br	80125b4 <__alt_data_end+0xfc0125b4>
 8012a4c:	0101ffc4 	movi	r4,2047
 8012a50:	49003b26 	beq	r9,r4,8012b40 <__subdf3+0x7b4>
 8012a54:	0085c83a 	sub	r2,zero,r2
 8012a58:	18c02034 	orhi	r3,r3,128
 8012a5c:	01000e04 	movi	r4,56
 8012a60:	20806e16 	blt	r4,r2,8012c1c <__subdf3+0x890>
 8012a64:	010007c4 	movi	r4,31
 8012a68:	20807716 	blt	r4,r2,8012c48 <__subdf3+0x8bc>
 8012a6c:	01000804 	movi	r4,32
 8012a70:	2089c83a 	sub	r4,r4,r2
 8012a74:	1914983a 	sll	r10,r3,r4
 8012a78:	8890d83a 	srl	r8,r17,r2
 8012a7c:	8908983a 	sll	r4,r17,r4
 8012a80:	1884d83a 	srl	r2,r3,r2
 8012a84:	5222b03a 	or	r17,r10,r8
 8012a88:	2006c03a 	cmpne	r3,r4,zero
 8012a8c:	88e2b03a 	or	r17,r17,r3
 8012a90:	89a3883a 	add	r17,r17,r6
 8012a94:	1145883a 	add	r2,r2,r5
 8012a98:	898d803a 	cmpltu	r6,r17,r6
 8012a9c:	3087883a 	add	r3,r6,r2
 8012aa0:	4821883a 	mov	r16,r9
 8012aa4:	003ed906 	br	801260c <__alt_data_end+0xfc01260c>
 8012aa8:	2984b03a 	or	r2,r5,r6
 8012aac:	10004226 	beq	r2,zero,8012bb8 <__subdf3+0x82c>
 8012ab0:	1808d0fa 	srli	r4,r3,3
 8012ab4:	8822d0fa 	srli	r17,r17,3
 8012ab8:	1806977a 	slli	r3,r3,29
 8012abc:	2080022c 	andhi	r2,r4,8
 8012ac0:	1c62b03a 	or	r17,r3,r17
 8012ac4:	10000826 	beq	r2,zero,8012ae8 <__subdf3+0x75c>
 8012ac8:	2812d0fa 	srli	r9,r5,3
 8012acc:	4880022c 	andhi	r2,r9,8
 8012ad0:	1000051e 	bne	r2,zero,8012ae8 <__subdf3+0x75c>
 8012ad4:	300cd0fa 	srli	r6,r6,3
 8012ad8:	2804977a 	slli	r2,r5,29
 8012adc:	4809883a 	mov	r4,r9
 8012ae0:	3825883a 	mov	r18,r7
 8012ae4:	11a2b03a 	or	r17,r2,r6
 8012ae8:	8806d77a 	srli	r3,r17,29
 8012aec:	200890fa 	slli	r4,r4,3
 8012af0:	882290fa 	slli	r17,r17,3
 8012af4:	0401ffc4 	movi	r16,2047
 8012af8:	1906b03a 	or	r3,r3,r4
 8012afc:	003e4406 	br	8012410 <__alt_data_end+0xfc012410>
 8012b00:	2984b03a 	or	r2,r5,r6
 8012b04:	103e4226 	beq	r2,zero,8012410 <__alt_data_end+0xfc012410>
 8012b08:	8989c83a 	sub	r4,r17,r6
 8012b0c:	8911803a 	cmpltu	r8,r17,r4
 8012b10:	1945c83a 	sub	r2,r3,r5
 8012b14:	1205c83a 	sub	r2,r2,r8
 8012b18:	1200202c 	andhi	r8,r2,128
 8012b1c:	403e9a26 	beq	r8,zero,8012588 <__alt_data_end+0xfc012588>
 8012b20:	3463c83a 	sub	r17,r6,r17
 8012b24:	28c5c83a 	sub	r2,r5,r3
 8012b28:	344d803a 	cmpltu	r6,r6,r17
 8012b2c:	1187c83a 	sub	r3,r2,r6
 8012b30:	3825883a 	mov	r18,r7
 8012b34:	003e3606 	br	8012410 <__alt_data_end+0xfc012410>
 8012b38:	0101ffc4 	movi	r4,2047
 8012b3c:	493fc71e 	bne	r9,r4,8012a5c <__alt_data_end+0xfc012a5c>
 8012b40:	2807883a 	mov	r3,r5
 8012b44:	3023883a 	mov	r17,r6
 8012b48:	4821883a 	mov	r16,r9
 8012b4c:	003e3006 	br	8012410 <__alt_data_end+0xfc012410>
 8012b50:	10003626 	beq	r2,zero,8012c2c <__subdf3+0x8a0>
 8012b54:	2984b03a 	or	r2,r5,r6
 8012b58:	10001726 	beq	r2,zero,8012bb8 <__subdf3+0x82c>
 8012b5c:	1808d0fa 	srli	r4,r3,3
 8012b60:	8822d0fa 	srli	r17,r17,3
 8012b64:	1806977a 	slli	r3,r3,29
 8012b68:	2080022c 	andhi	r2,r4,8
 8012b6c:	1c62b03a 	or	r17,r3,r17
 8012b70:	10000726 	beq	r2,zero,8012b90 <__subdf3+0x804>
 8012b74:	2812d0fa 	srli	r9,r5,3
 8012b78:	4880022c 	andhi	r2,r9,8
 8012b7c:	1000041e 	bne	r2,zero,8012b90 <__subdf3+0x804>
 8012b80:	300cd0fa 	srli	r6,r6,3
 8012b84:	2804977a 	slli	r2,r5,29
 8012b88:	4809883a 	mov	r4,r9
 8012b8c:	11a2b03a 	or	r17,r2,r6
 8012b90:	8806d77a 	srli	r3,r17,29
 8012b94:	200890fa 	slli	r4,r4,3
 8012b98:	882290fa 	slli	r17,r17,3
 8012b9c:	3825883a 	mov	r18,r7
 8012ba0:	1906b03a 	or	r3,r3,r4
 8012ba4:	0401ffc4 	movi	r16,2047
 8012ba8:	003e1906 	br	8012410 <__alt_data_end+0xfc012410>
 8012bac:	000b883a 	mov	r5,zero
 8012bb0:	0005883a 	mov	r2,zero
 8012bb4:	003e2e06 	br	8012470 <__alt_data_end+0xfc012470>
 8012bb8:	0401ffc4 	movi	r16,2047
 8012bbc:	003e1406 	br	8012410 <__alt_data_end+0xfc012410>
 8012bc0:	0005883a 	mov	r2,zero
 8012bc4:	003f7506 	br	801299c <__alt_data_end+0xfc01299c>
 8012bc8:	0005883a 	mov	r2,zero
 8012bcc:	0009883a 	mov	r4,zero
 8012bd0:	003e7806 	br	80125b4 <__alt_data_end+0xfc0125b4>
 8012bd4:	123ff804 	addi	r8,r2,-32
 8012bd8:	01000804 	movi	r4,32
 8012bdc:	1a10d83a 	srl	r8,r3,r8
 8012be0:	11002526 	beq	r2,r4,8012c78 <__subdf3+0x8ec>
 8012be4:	01001004 	movi	r4,64
 8012be8:	2085c83a 	sub	r2,r4,r2
 8012bec:	1884983a 	sll	r2,r3,r2
 8012bf0:	1444b03a 	or	r2,r2,r17
 8012bf4:	1004c03a 	cmpne	r2,r2,zero
 8012bf8:	40a2b03a 	or	r17,r8,r2
 8012bfc:	0005883a 	mov	r2,zero
 8012c00:	003f1606 	br	801285c <__alt_data_end+0xfc01285c>
 8012c04:	02000434 	movhi	r8,16
 8012c08:	0009883a 	mov	r4,zero
 8012c0c:	423fffc4 	addi	r8,r8,-1
 8012c10:	00bfffc4 	movi	r2,-1
 8012c14:	0401ffc4 	movi	r16,2047
 8012c18:	003e6606 	br	80125b4 <__alt_data_end+0xfc0125b4>
 8012c1c:	1c62b03a 	or	r17,r3,r17
 8012c20:	8822c03a 	cmpne	r17,r17,zero
 8012c24:	0005883a 	mov	r2,zero
 8012c28:	003f9906 	br	8012a90 <__alt_data_end+0xfc012a90>
 8012c2c:	2807883a 	mov	r3,r5
 8012c30:	3023883a 	mov	r17,r6
 8012c34:	0401ffc4 	movi	r16,2047
 8012c38:	003df506 	br	8012410 <__alt_data_end+0xfc012410>
 8012c3c:	2807883a 	mov	r3,r5
 8012c40:	3023883a 	mov	r17,r6
 8012c44:	003df206 	br	8012410 <__alt_data_end+0xfc012410>
 8012c48:	123ff804 	addi	r8,r2,-32
 8012c4c:	01000804 	movi	r4,32
 8012c50:	1a10d83a 	srl	r8,r3,r8
 8012c54:	11000a26 	beq	r2,r4,8012c80 <__subdf3+0x8f4>
 8012c58:	01001004 	movi	r4,64
 8012c5c:	2085c83a 	sub	r2,r4,r2
 8012c60:	1884983a 	sll	r2,r3,r2
 8012c64:	1444b03a 	or	r2,r2,r17
 8012c68:	1004c03a 	cmpne	r2,r2,zero
 8012c6c:	40a2b03a 	or	r17,r8,r2
 8012c70:	0005883a 	mov	r2,zero
 8012c74:	003f8606 	br	8012a90 <__alt_data_end+0xfc012a90>
 8012c78:	0005883a 	mov	r2,zero
 8012c7c:	003fdc06 	br	8012bf0 <__alt_data_end+0xfc012bf0>
 8012c80:	0005883a 	mov	r2,zero
 8012c84:	003ff706 	br	8012c64 <__alt_data_end+0xfc012c64>

08012c88 <__fixdfsi>:
 8012c88:	280cd53a 	srli	r6,r5,20
 8012c8c:	00c00434 	movhi	r3,16
 8012c90:	18ffffc4 	addi	r3,r3,-1
 8012c94:	3181ffcc 	andi	r6,r6,2047
 8012c98:	01c0ff84 	movi	r7,1022
 8012c9c:	28c6703a 	and	r3,r5,r3
 8012ca0:	280ad7fa 	srli	r5,r5,31
 8012ca4:	3980120e 	bge	r7,r6,8012cf0 <__fixdfsi+0x68>
 8012ca8:	00810744 	movi	r2,1053
 8012cac:	11800c16 	blt	r2,r6,8012ce0 <__fixdfsi+0x58>
 8012cb0:	00810cc4 	movi	r2,1075
 8012cb4:	1185c83a 	sub	r2,r2,r6
 8012cb8:	01c007c4 	movi	r7,31
 8012cbc:	18c00434 	orhi	r3,r3,16
 8012cc0:	38800d16 	blt	r7,r2,8012cf8 <__fixdfsi+0x70>
 8012cc4:	31befb44 	addi	r6,r6,-1043
 8012cc8:	2084d83a 	srl	r2,r4,r2
 8012ccc:	1986983a 	sll	r3,r3,r6
 8012cd0:	1884b03a 	or	r2,r3,r2
 8012cd4:	28000726 	beq	r5,zero,8012cf4 <__fixdfsi+0x6c>
 8012cd8:	0085c83a 	sub	r2,zero,r2
 8012cdc:	f800283a 	ret
 8012ce0:	00a00034 	movhi	r2,32768
 8012ce4:	10bfffc4 	addi	r2,r2,-1
 8012ce8:	2885883a 	add	r2,r5,r2
 8012cec:	f800283a 	ret
 8012cf0:	0005883a 	mov	r2,zero
 8012cf4:	f800283a 	ret
 8012cf8:	008104c4 	movi	r2,1043
 8012cfc:	1185c83a 	sub	r2,r2,r6
 8012d00:	1884d83a 	srl	r2,r3,r2
 8012d04:	003ff306 	br	8012cd4 <__alt_data_end+0xfc012cd4>

08012d08 <__floatsidf>:
 8012d08:	defffd04 	addi	sp,sp,-12
 8012d0c:	dfc00215 	stw	ra,8(sp)
 8012d10:	dc400115 	stw	r17,4(sp)
 8012d14:	dc000015 	stw	r16,0(sp)
 8012d18:	20002b26 	beq	r4,zero,8012dc8 <__floatsidf+0xc0>
 8012d1c:	2023883a 	mov	r17,r4
 8012d20:	2020d7fa 	srli	r16,r4,31
 8012d24:	20002d16 	blt	r4,zero,8012ddc <__floatsidf+0xd4>
 8012d28:	8809883a 	mov	r4,r17
 8012d2c:	80026b00 	call	80026b0 <__clzsi2>
 8012d30:	01410784 	movi	r5,1054
 8012d34:	288bc83a 	sub	r5,r5,r2
 8012d38:	01010cc4 	movi	r4,1075
 8012d3c:	2149c83a 	sub	r4,r4,r5
 8012d40:	00c007c4 	movi	r3,31
 8012d44:	1900160e 	bge	r3,r4,8012da0 <__floatsidf+0x98>
 8012d48:	00c104c4 	movi	r3,1043
 8012d4c:	1947c83a 	sub	r3,r3,r5
 8012d50:	88c6983a 	sll	r3,r17,r3
 8012d54:	00800434 	movhi	r2,16
 8012d58:	10bfffc4 	addi	r2,r2,-1
 8012d5c:	1886703a 	and	r3,r3,r2
 8012d60:	2941ffcc 	andi	r5,r5,2047
 8012d64:	800d883a 	mov	r6,r16
 8012d68:	0005883a 	mov	r2,zero
 8012d6c:	280a953a 	slli	r5,r5,20
 8012d70:	31803fcc 	andi	r6,r6,255
 8012d74:	01000434 	movhi	r4,16
 8012d78:	300c97fa 	slli	r6,r6,31
 8012d7c:	213fffc4 	addi	r4,r4,-1
 8012d80:	1906703a 	and	r3,r3,r4
 8012d84:	1946b03a 	or	r3,r3,r5
 8012d88:	1986b03a 	or	r3,r3,r6
 8012d8c:	dfc00217 	ldw	ra,8(sp)
 8012d90:	dc400117 	ldw	r17,4(sp)
 8012d94:	dc000017 	ldw	r16,0(sp)
 8012d98:	dec00304 	addi	sp,sp,12
 8012d9c:	f800283a 	ret
 8012da0:	00c002c4 	movi	r3,11
 8012da4:	1887c83a 	sub	r3,r3,r2
 8012da8:	88c6d83a 	srl	r3,r17,r3
 8012dac:	8904983a 	sll	r2,r17,r4
 8012db0:	01000434 	movhi	r4,16
 8012db4:	213fffc4 	addi	r4,r4,-1
 8012db8:	2941ffcc 	andi	r5,r5,2047
 8012dbc:	1906703a 	and	r3,r3,r4
 8012dc0:	800d883a 	mov	r6,r16
 8012dc4:	003fe906 	br	8012d6c <__alt_data_end+0xfc012d6c>
 8012dc8:	000d883a 	mov	r6,zero
 8012dcc:	000b883a 	mov	r5,zero
 8012dd0:	0007883a 	mov	r3,zero
 8012dd4:	0005883a 	mov	r2,zero
 8012dd8:	003fe406 	br	8012d6c <__alt_data_end+0xfc012d6c>
 8012ddc:	0123c83a 	sub	r17,zero,r4
 8012de0:	003fd106 	br	8012d28 <__alt_data_end+0xfc012d28>

08012de4 <__floatunsidf>:
 8012de4:	defffe04 	addi	sp,sp,-8
 8012de8:	dc000015 	stw	r16,0(sp)
 8012dec:	dfc00115 	stw	ra,4(sp)
 8012df0:	2021883a 	mov	r16,r4
 8012df4:	20002226 	beq	r4,zero,8012e80 <__floatunsidf+0x9c>
 8012df8:	80026b00 	call	80026b0 <__clzsi2>
 8012dfc:	01010784 	movi	r4,1054
 8012e00:	2089c83a 	sub	r4,r4,r2
 8012e04:	01810cc4 	movi	r6,1075
 8012e08:	310dc83a 	sub	r6,r6,r4
 8012e0c:	00c007c4 	movi	r3,31
 8012e10:	1980120e 	bge	r3,r6,8012e5c <__floatunsidf+0x78>
 8012e14:	00c104c4 	movi	r3,1043
 8012e18:	1907c83a 	sub	r3,r3,r4
 8012e1c:	80ca983a 	sll	r5,r16,r3
 8012e20:	00800434 	movhi	r2,16
 8012e24:	10bfffc4 	addi	r2,r2,-1
 8012e28:	2101ffcc 	andi	r4,r4,2047
 8012e2c:	0021883a 	mov	r16,zero
 8012e30:	288a703a 	and	r5,r5,r2
 8012e34:	2008953a 	slli	r4,r4,20
 8012e38:	00c00434 	movhi	r3,16
 8012e3c:	18ffffc4 	addi	r3,r3,-1
 8012e40:	28c6703a 	and	r3,r5,r3
 8012e44:	8005883a 	mov	r2,r16
 8012e48:	1906b03a 	or	r3,r3,r4
 8012e4c:	dfc00117 	ldw	ra,4(sp)
 8012e50:	dc000017 	ldw	r16,0(sp)
 8012e54:	dec00204 	addi	sp,sp,8
 8012e58:	f800283a 	ret
 8012e5c:	00c002c4 	movi	r3,11
 8012e60:	188bc83a 	sub	r5,r3,r2
 8012e64:	814ad83a 	srl	r5,r16,r5
 8012e68:	00c00434 	movhi	r3,16
 8012e6c:	18ffffc4 	addi	r3,r3,-1
 8012e70:	81a0983a 	sll	r16,r16,r6
 8012e74:	2101ffcc 	andi	r4,r4,2047
 8012e78:	28ca703a 	and	r5,r5,r3
 8012e7c:	003fed06 	br	8012e34 <__alt_data_end+0xfc012e34>
 8012e80:	0009883a 	mov	r4,zero
 8012e84:	000b883a 	mov	r5,zero
 8012e88:	003fea06 	br	8012e34 <__alt_data_end+0xfc012e34>

08012e8c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8012e8c:	defffe04 	addi	sp,sp,-8
 8012e90:	dfc00115 	stw	ra,4(sp)
 8012e94:	df000015 	stw	fp,0(sp)
 8012e98:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8012e9c:	d0a00e17 	ldw	r2,-32712(gp)
 8012ea0:	10000326 	beq	r2,zero,8012eb0 <alt_get_errno+0x24>
 8012ea4:	d0a00e17 	ldw	r2,-32712(gp)
 8012ea8:	103ee83a 	callr	r2
 8012eac:	00000106 	br	8012eb4 <alt_get_errno+0x28>
 8012eb0:	d0a7fd04 	addi	r2,gp,-24588
}
 8012eb4:	e037883a 	mov	sp,fp
 8012eb8:	dfc00117 	ldw	ra,4(sp)
 8012ebc:	df000017 	ldw	fp,0(sp)
 8012ec0:	dec00204 	addi	sp,sp,8
 8012ec4:	f800283a 	ret

08012ec8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 8012ec8:	defffb04 	addi	sp,sp,-20
 8012ecc:	dfc00415 	stw	ra,16(sp)
 8012ed0:	df000315 	stw	fp,12(sp)
 8012ed4:	df000304 	addi	fp,sp,12
 8012ed8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 8012edc:	e0bfff17 	ldw	r2,-4(fp)
 8012ee0:	10000816 	blt	r2,zero,8012f04 <close+0x3c>
 8012ee4:	01400304 	movi	r5,12
 8012ee8:	e13fff17 	ldw	r4,-4(fp)
 8012eec:	8001b580 	call	8001b58 <__mulsi3>
 8012ef0:	1007883a 	mov	r3,r2
 8012ef4:	008200b4 	movhi	r2,2050
 8012ef8:	10a2b304 	addi	r2,r2,-30004
 8012efc:	1885883a 	add	r2,r3,r2
 8012f00:	00000106 	br	8012f08 <close+0x40>
 8012f04:	0005883a 	mov	r2,zero
 8012f08:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 8012f0c:	e0bffd17 	ldw	r2,-12(fp)
 8012f10:	10001926 	beq	r2,zero,8012f78 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 8012f14:	e0bffd17 	ldw	r2,-12(fp)
 8012f18:	10800017 	ldw	r2,0(r2)
 8012f1c:	10800417 	ldw	r2,16(r2)
 8012f20:	10000626 	beq	r2,zero,8012f3c <close+0x74>
 8012f24:	e0bffd17 	ldw	r2,-12(fp)
 8012f28:	10800017 	ldw	r2,0(r2)
 8012f2c:	10800417 	ldw	r2,16(r2)
 8012f30:	e13ffd17 	ldw	r4,-12(fp)
 8012f34:	103ee83a 	callr	r2
 8012f38:	00000106 	br	8012f40 <close+0x78>
 8012f3c:	0005883a 	mov	r2,zero
 8012f40:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 8012f44:	e13fff17 	ldw	r4,-4(fp)
 8012f48:	80135b00 	call	80135b0 <alt_release_fd>
    if (rval < 0)
 8012f4c:	e0bffe17 	ldw	r2,-8(fp)
 8012f50:	1000070e 	bge	r2,zero,8012f70 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 8012f54:	8012e8c0 	call	8012e8c <alt_get_errno>
 8012f58:	1007883a 	mov	r3,r2
 8012f5c:	e0bffe17 	ldw	r2,-8(fp)
 8012f60:	0085c83a 	sub	r2,zero,r2
 8012f64:	18800015 	stw	r2,0(r3)
      return -1;
 8012f68:	00bfffc4 	movi	r2,-1
 8012f6c:	00000706 	br	8012f8c <close+0xc4>
    }
    return 0;
 8012f70:	0005883a 	mov	r2,zero
 8012f74:	00000506 	br	8012f8c <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8012f78:	8012e8c0 	call	8012e8c <alt_get_errno>
 8012f7c:	1007883a 	mov	r3,r2
 8012f80:	00801444 	movi	r2,81
 8012f84:	18800015 	stw	r2,0(r3)
    return -1;
 8012f88:	00bfffc4 	movi	r2,-1
  }
}
 8012f8c:	e037883a 	mov	sp,fp
 8012f90:	dfc00117 	ldw	ra,4(sp)
 8012f94:	df000017 	ldw	fp,0(sp)
 8012f98:	dec00204 	addi	sp,sp,8
 8012f9c:	f800283a 	ret

08012fa0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 8012fa0:	defffc04 	addi	sp,sp,-16
 8012fa4:	df000315 	stw	fp,12(sp)
 8012fa8:	df000304 	addi	fp,sp,12
 8012fac:	e13ffd15 	stw	r4,-12(fp)
 8012fb0:	e17ffe15 	stw	r5,-8(fp)
 8012fb4:	e1bfff15 	stw	r6,-4(fp)
  return len;
 8012fb8:	e0bfff17 	ldw	r2,-4(fp)
}
 8012fbc:	e037883a 	mov	sp,fp
 8012fc0:	df000017 	ldw	fp,0(sp)
 8012fc4:	dec00104 	addi	sp,sp,4
 8012fc8:	f800283a 	ret

08012fcc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8012fcc:	defffe04 	addi	sp,sp,-8
 8012fd0:	dfc00115 	stw	ra,4(sp)
 8012fd4:	df000015 	stw	fp,0(sp)
 8012fd8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8012fdc:	d0a00e17 	ldw	r2,-32712(gp)
 8012fe0:	10000326 	beq	r2,zero,8012ff0 <alt_get_errno+0x24>
 8012fe4:	d0a00e17 	ldw	r2,-32712(gp)
 8012fe8:	103ee83a 	callr	r2
 8012fec:	00000106 	br	8012ff4 <alt_get_errno+0x28>
 8012ff0:	d0a7fd04 	addi	r2,gp,-24588
}
 8012ff4:	e037883a 	mov	sp,fp
 8012ff8:	dfc00117 	ldw	ra,4(sp)
 8012ffc:	df000017 	ldw	fp,0(sp)
 8013000:	dec00204 	addi	sp,sp,8
 8013004:	f800283a 	ret

08013008 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 8013008:	defffb04 	addi	sp,sp,-20
 801300c:	dfc00415 	stw	ra,16(sp)
 8013010:	df000315 	stw	fp,12(sp)
 8013014:	df000304 	addi	fp,sp,12
 8013018:	e13ffe15 	stw	r4,-8(fp)
 801301c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8013020:	e0bffe17 	ldw	r2,-8(fp)
 8013024:	10000816 	blt	r2,zero,8013048 <fstat+0x40>
 8013028:	01400304 	movi	r5,12
 801302c:	e13ffe17 	ldw	r4,-8(fp)
 8013030:	8001b580 	call	8001b58 <__mulsi3>
 8013034:	1007883a 	mov	r3,r2
 8013038:	008200b4 	movhi	r2,2050
 801303c:	10a2b304 	addi	r2,r2,-30004
 8013040:	1885883a 	add	r2,r3,r2
 8013044:	00000106 	br	801304c <fstat+0x44>
 8013048:	0005883a 	mov	r2,zero
 801304c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 8013050:	e0bffd17 	ldw	r2,-12(fp)
 8013054:	10001026 	beq	r2,zero,8013098 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 8013058:	e0bffd17 	ldw	r2,-12(fp)
 801305c:	10800017 	ldw	r2,0(r2)
 8013060:	10800817 	ldw	r2,32(r2)
 8013064:	10000726 	beq	r2,zero,8013084 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 8013068:	e0bffd17 	ldw	r2,-12(fp)
 801306c:	10800017 	ldw	r2,0(r2)
 8013070:	10800817 	ldw	r2,32(r2)
 8013074:	e17fff17 	ldw	r5,-4(fp)
 8013078:	e13ffd17 	ldw	r4,-12(fp)
 801307c:	103ee83a 	callr	r2
 8013080:	00000a06 	br	80130ac <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 8013084:	e0bfff17 	ldw	r2,-4(fp)
 8013088:	00c80004 	movi	r3,8192
 801308c:	10c00115 	stw	r3,4(r2)
      return 0;
 8013090:	0005883a 	mov	r2,zero
 8013094:	00000506 	br	80130ac <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8013098:	8012fcc0 	call	8012fcc <alt_get_errno>
 801309c:	1007883a 	mov	r3,r2
 80130a0:	00801444 	movi	r2,81
 80130a4:	18800015 	stw	r2,0(r3)
    return -1;
 80130a8:	00bfffc4 	movi	r2,-1
  }
}
 80130ac:	e037883a 	mov	sp,fp
 80130b0:	dfc00117 	ldw	ra,4(sp)
 80130b4:	df000017 	ldw	fp,0(sp)
 80130b8:	dec00204 	addi	sp,sp,8
 80130bc:	f800283a 	ret

080130c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80130c0:	defffe04 	addi	sp,sp,-8
 80130c4:	dfc00115 	stw	ra,4(sp)
 80130c8:	df000015 	stw	fp,0(sp)
 80130cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80130d0:	d0a00e17 	ldw	r2,-32712(gp)
 80130d4:	10000326 	beq	r2,zero,80130e4 <alt_get_errno+0x24>
 80130d8:	d0a00e17 	ldw	r2,-32712(gp)
 80130dc:	103ee83a 	callr	r2
 80130e0:	00000106 	br	80130e8 <alt_get_errno+0x28>
 80130e4:	d0a7fd04 	addi	r2,gp,-24588
}
 80130e8:	e037883a 	mov	sp,fp
 80130ec:	dfc00117 	ldw	ra,4(sp)
 80130f0:	df000017 	ldw	fp,0(sp)
 80130f4:	dec00204 	addi	sp,sp,8
 80130f8:	f800283a 	ret

080130fc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 80130fc:	deffed04 	addi	sp,sp,-76
 8013100:	dfc01215 	stw	ra,72(sp)
 8013104:	df001115 	stw	fp,68(sp)
 8013108:	df001104 	addi	fp,sp,68
 801310c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8013110:	e0bfff17 	ldw	r2,-4(fp)
 8013114:	10000816 	blt	r2,zero,8013138 <isatty+0x3c>
 8013118:	01400304 	movi	r5,12
 801311c:	e13fff17 	ldw	r4,-4(fp)
 8013120:	8001b580 	call	8001b58 <__mulsi3>
 8013124:	1007883a 	mov	r3,r2
 8013128:	008200b4 	movhi	r2,2050
 801312c:	10a2b304 	addi	r2,r2,-30004
 8013130:	1885883a 	add	r2,r3,r2
 8013134:	00000106 	br	801313c <isatty+0x40>
 8013138:	0005883a 	mov	r2,zero
 801313c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 8013140:	e0bfef17 	ldw	r2,-68(fp)
 8013144:	10000e26 	beq	r2,zero,8013180 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 8013148:	e0bfef17 	ldw	r2,-68(fp)
 801314c:	10800017 	ldw	r2,0(r2)
 8013150:	10800817 	ldw	r2,32(r2)
 8013154:	1000021e 	bne	r2,zero,8013160 <isatty+0x64>
    {
      return 1;
 8013158:	00800044 	movi	r2,1
 801315c:	00000d06 	br	8013194 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 8013160:	e0bff004 	addi	r2,fp,-64
 8013164:	100b883a 	mov	r5,r2
 8013168:	e13fff17 	ldw	r4,-4(fp)
 801316c:	80130080 	call	8013008 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 8013170:	e0bff117 	ldw	r2,-60(fp)
 8013174:	10880020 	cmpeqi	r2,r2,8192
 8013178:	10803fcc 	andi	r2,r2,255
 801317c:	00000506 	br	8013194 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8013180:	80130c00 	call	80130c0 <alt_get_errno>
 8013184:	1007883a 	mov	r3,r2
 8013188:	00801444 	movi	r2,81
 801318c:	18800015 	stw	r2,0(r3)
    return 0;
 8013190:	0005883a 	mov	r2,zero
  }
}
 8013194:	e037883a 	mov	sp,fp
 8013198:	dfc00117 	ldw	ra,4(sp)
 801319c:	df000017 	ldw	fp,0(sp)
 80131a0:	dec00204 	addi	sp,sp,8
 80131a4:	f800283a 	ret

080131a8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 80131a8:	defffc04 	addi	sp,sp,-16
 80131ac:	df000315 	stw	fp,12(sp)
 80131b0:	df000304 	addi	fp,sp,12
 80131b4:	e13ffd15 	stw	r4,-12(fp)
 80131b8:	e17ffe15 	stw	r5,-8(fp)
 80131bc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 80131c0:	e0fffe17 	ldw	r3,-8(fp)
 80131c4:	e0bffd17 	ldw	r2,-12(fp)
 80131c8:	18800c26 	beq	r3,r2,80131fc <alt_load_section+0x54>
  {
    while( to != end )
 80131cc:	00000806 	br	80131f0 <alt_load_section+0x48>
    {
      *to++ = *from++;
 80131d0:	e0bffe17 	ldw	r2,-8(fp)
 80131d4:	10c00104 	addi	r3,r2,4
 80131d8:	e0fffe15 	stw	r3,-8(fp)
 80131dc:	e0fffd17 	ldw	r3,-12(fp)
 80131e0:	19000104 	addi	r4,r3,4
 80131e4:	e13ffd15 	stw	r4,-12(fp)
 80131e8:	18c00017 	ldw	r3,0(r3)
 80131ec:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 80131f0:	e0fffe17 	ldw	r3,-8(fp)
 80131f4:	e0bfff17 	ldw	r2,-4(fp)
 80131f8:	18bff51e 	bne	r3,r2,80131d0 <__alt_data_end+0xfc0131d0>
    {
      *to++ = *from++;
    }
  }
}
 80131fc:	0001883a 	nop
 8013200:	e037883a 	mov	sp,fp
 8013204:	df000017 	ldw	fp,0(sp)
 8013208:	dec00104 	addi	sp,sp,4
 801320c:	f800283a 	ret

08013210 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 8013210:	defffe04 	addi	sp,sp,-8
 8013214:	dfc00115 	stw	ra,4(sp)
 8013218:	df000015 	stw	fp,0(sp)
 801321c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 8013220:	018200b4 	movhi	r6,2050
 8013224:	31a74e04 	addi	r6,r6,-25288
 8013228:	01420074 	movhi	r5,2049
 801322c:	295f6c04 	addi	r5,r5,32176
 8013230:	010200b4 	movhi	r4,2050
 8013234:	21274e04 	addi	r4,r4,-25288
 8013238:	80131a80 	call	80131a8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 801323c:	01820034 	movhi	r6,2048
 8013240:	31808c04 	addi	r6,r6,560
 8013244:	01420034 	movhi	r5,2048
 8013248:	29400804 	addi	r5,r5,32
 801324c:	01020034 	movhi	r4,2048
 8013250:	21000804 	addi	r4,r4,32
 8013254:	80131a80 	call	80131a8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 8013258:	01820074 	movhi	r6,2049
 801325c:	319f6c04 	addi	r6,r6,32176
 8013260:	01420074 	movhi	r5,2049
 8013264:	295deb04 	addi	r5,r5,30636
 8013268:	01020074 	movhi	r4,2049
 801326c:	211deb04 	addi	r4,r4,30636
 8013270:	80131a80 	call	80131a8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 8013274:	80163240 	call	8016324 <alt_dcache_flush_all>
  alt_icache_flush_all();
 8013278:	80165740 	call	8016574 <alt_icache_flush_all>
}
 801327c:	0001883a 	nop
 8013280:	e037883a 	mov	sp,fp
 8013284:	dfc00117 	ldw	ra,4(sp)
 8013288:	df000017 	ldw	fp,0(sp)
 801328c:	dec00204 	addi	sp,sp,8
 8013290:	f800283a 	ret

08013294 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8013294:	defffe04 	addi	sp,sp,-8
 8013298:	dfc00115 	stw	ra,4(sp)
 801329c:	df000015 	stw	fp,0(sp)
 80132a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80132a4:	d0a00e17 	ldw	r2,-32712(gp)
 80132a8:	10000326 	beq	r2,zero,80132b8 <alt_get_errno+0x24>
 80132ac:	d0a00e17 	ldw	r2,-32712(gp)
 80132b0:	103ee83a 	callr	r2
 80132b4:	00000106 	br	80132bc <alt_get_errno+0x28>
 80132b8:	d0a7fd04 	addi	r2,gp,-24588
}
 80132bc:	e037883a 	mov	sp,fp
 80132c0:	dfc00117 	ldw	ra,4(sp)
 80132c4:	df000017 	ldw	fp,0(sp)
 80132c8:	dec00204 	addi	sp,sp,8
 80132cc:	f800283a 	ret

080132d0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 80132d0:	defff904 	addi	sp,sp,-28
 80132d4:	dfc00615 	stw	ra,24(sp)
 80132d8:	df000515 	stw	fp,20(sp)
 80132dc:	df000504 	addi	fp,sp,20
 80132e0:	e13ffd15 	stw	r4,-12(fp)
 80132e4:	e17ffe15 	stw	r5,-8(fp)
 80132e8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 80132ec:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80132f0:	e0bffd17 	ldw	r2,-12(fp)
 80132f4:	10000816 	blt	r2,zero,8013318 <lseek+0x48>
 80132f8:	01400304 	movi	r5,12
 80132fc:	e13ffd17 	ldw	r4,-12(fp)
 8013300:	8001b580 	call	8001b58 <__mulsi3>
 8013304:	1007883a 	mov	r3,r2
 8013308:	008200b4 	movhi	r2,2050
 801330c:	10a2b304 	addi	r2,r2,-30004
 8013310:	1885883a 	add	r2,r3,r2
 8013314:	00000106 	br	801331c <lseek+0x4c>
 8013318:	0005883a 	mov	r2,zero
 801331c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 8013320:	e0bffc17 	ldw	r2,-16(fp)
 8013324:	10001026 	beq	r2,zero,8013368 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 8013328:	e0bffc17 	ldw	r2,-16(fp)
 801332c:	10800017 	ldw	r2,0(r2)
 8013330:	10800717 	ldw	r2,28(r2)
 8013334:	10000926 	beq	r2,zero,801335c <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 8013338:	e0bffc17 	ldw	r2,-16(fp)
 801333c:	10800017 	ldw	r2,0(r2)
 8013340:	10800717 	ldw	r2,28(r2)
 8013344:	e1bfff17 	ldw	r6,-4(fp)
 8013348:	e17ffe17 	ldw	r5,-8(fp)
 801334c:	e13ffc17 	ldw	r4,-16(fp)
 8013350:	103ee83a 	callr	r2
 8013354:	e0bffb15 	stw	r2,-20(fp)
 8013358:	00000506 	br	8013370 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 801335c:	00bfde84 	movi	r2,-134
 8013360:	e0bffb15 	stw	r2,-20(fp)
 8013364:	00000206 	br	8013370 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 8013368:	00bfebc4 	movi	r2,-81
 801336c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 8013370:	e0bffb17 	ldw	r2,-20(fp)
 8013374:	1000070e 	bge	r2,zero,8013394 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 8013378:	80132940 	call	8013294 <alt_get_errno>
 801337c:	1007883a 	mov	r3,r2
 8013380:	e0bffb17 	ldw	r2,-20(fp)
 8013384:	0085c83a 	sub	r2,zero,r2
 8013388:	18800015 	stw	r2,0(r3)
    rc = -1;
 801338c:	00bfffc4 	movi	r2,-1
 8013390:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 8013394:	e0bffb17 	ldw	r2,-20(fp)
}
 8013398:	e037883a 	mov	sp,fp
 801339c:	dfc00117 	ldw	ra,4(sp)
 80133a0:	df000017 	ldw	fp,0(sp)
 80133a4:	dec00204 	addi	sp,sp,8
 80133a8:	f800283a 	ret

080133ac <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 80133ac:	defffd04 	addi	sp,sp,-12
 80133b0:	dfc00215 	stw	ra,8(sp)
 80133b4:	df000115 	stw	fp,4(sp)
 80133b8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 80133bc:	0009883a 	mov	r4,zero
 80133c0:	80138840 	call	8013884 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 80133c4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 80133c8:	80138bc0 	call	80138bc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 80133cc:	01820074 	movhi	r6,2049
 80133d0:	319f5704 	addi	r6,r6,32092
 80133d4:	01420074 	movhi	r5,2049
 80133d8:	295f5704 	addi	r5,r5,32092
 80133dc:	01020074 	movhi	r4,2049
 80133e0:	211f5704 	addi	r4,r4,32092
 80133e4:	80169180 	call	8016918 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 80133e8:	80164240 	call	8016424 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 80133ec:	01020074 	movhi	r4,2049
 80133f0:	21192104 	addi	r4,r4,25732
 80133f4:	80172b00 	call	80172b0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 80133f8:	d0a7fe17 	ldw	r2,-24584(gp)
 80133fc:	d0e7ff17 	ldw	r3,-24580(gp)
 8013400:	d1280017 	ldw	r4,-24576(gp)
 8013404:	200d883a 	mov	r6,r4
 8013408:	180b883a 	mov	r5,r3
 801340c:	1009883a 	mov	r4,r2
 8013410:	80008500 	call	8000850 <main>
 8013414:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 8013418:	01000044 	movi	r4,1
 801341c:	8012ec80 	call	8012ec8 <close>
  exit (result);
 8013420:	e13fff17 	ldw	r4,-4(fp)
 8013424:	80172c40 	call	80172c4 <exit>

08013428 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 8013428:	defffe04 	addi	sp,sp,-8
 801342c:	df000115 	stw	fp,4(sp)
 8013430:	df000104 	addi	fp,sp,4
 8013434:	e13fff15 	stw	r4,-4(fp)
}
 8013438:	0001883a 	nop
 801343c:	e037883a 	mov	sp,fp
 8013440:	df000017 	ldw	fp,0(sp)
 8013444:	dec00104 	addi	sp,sp,4
 8013448:	f800283a 	ret

0801344c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 801344c:	defffe04 	addi	sp,sp,-8
 8013450:	df000115 	stw	fp,4(sp)
 8013454:	df000104 	addi	fp,sp,4
 8013458:	e13fff15 	stw	r4,-4(fp)
}
 801345c:	0001883a 	nop
 8013460:	e037883a 	mov	sp,fp
 8013464:	df000017 	ldw	fp,0(sp)
 8013468:	dec00104 	addi	sp,sp,4
 801346c:	f800283a 	ret

08013470 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8013470:	defffe04 	addi	sp,sp,-8
 8013474:	dfc00115 	stw	ra,4(sp)
 8013478:	df000015 	stw	fp,0(sp)
 801347c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8013480:	d0a00e17 	ldw	r2,-32712(gp)
 8013484:	10000326 	beq	r2,zero,8013494 <alt_get_errno+0x24>
 8013488:	d0a00e17 	ldw	r2,-32712(gp)
 801348c:	103ee83a 	callr	r2
 8013490:	00000106 	br	8013498 <alt_get_errno+0x28>
 8013494:	d0a7fd04 	addi	r2,gp,-24588
}
 8013498:	e037883a 	mov	sp,fp
 801349c:	dfc00117 	ldw	ra,4(sp)
 80134a0:	df000017 	ldw	fp,0(sp)
 80134a4:	dec00204 	addi	sp,sp,8
 80134a8:	f800283a 	ret

080134ac <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 80134ac:	defff904 	addi	sp,sp,-28
 80134b0:	dfc00615 	stw	ra,24(sp)
 80134b4:	df000515 	stw	fp,20(sp)
 80134b8:	df000504 	addi	fp,sp,20
 80134bc:	e13ffd15 	stw	r4,-12(fp)
 80134c0:	e17ffe15 	stw	r5,-8(fp)
 80134c4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80134c8:	e0bffd17 	ldw	r2,-12(fp)
 80134cc:	10000816 	blt	r2,zero,80134f0 <read+0x44>
 80134d0:	01400304 	movi	r5,12
 80134d4:	e13ffd17 	ldw	r4,-12(fp)
 80134d8:	8001b580 	call	8001b58 <__mulsi3>
 80134dc:	1007883a 	mov	r3,r2
 80134e0:	008200b4 	movhi	r2,2050
 80134e4:	10a2b304 	addi	r2,r2,-30004
 80134e8:	1885883a 	add	r2,r3,r2
 80134ec:	00000106 	br	80134f4 <read+0x48>
 80134f0:	0005883a 	mov	r2,zero
 80134f4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 80134f8:	e0bffb17 	ldw	r2,-20(fp)
 80134fc:	10002226 	beq	r2,zero,8013588 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 8013500:	e0bffb17 	ldw	r2,-20(fp)
 8013504:	10800217 	ldw	r2,8(r2)
 8013508:	108000cc 	andi	r2,r2,3
 801350c:	10800060 	cmpeqi	r2,r2,1
 8013510:	1000181e 	bne	r2,zero,8013574 <read+0xc8>
        (fd->dev->read))
 8013514:	e0bffb17 	ldw	r2,-20(fp)
 8013518:	10800017 	ldw	r2,0(r2)
 801351c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 8013520:	10001426 	beq	r2,zero,8013574 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 8013524:	e0bffb17 	ldw	r2,-20(fp)
 8013528:	10800017 	ldw	r2,0(r2)
 801352c:	10800517 	ldw	r2,20(r2)
 8013530:	e0ffff17 	ldw	r3,-4(fp)
 8013534:	180d883a 	mov	r6,r3
 8013538:	e17ffe17 	ldw	r5,-8(fp)
 801353c:	e13ffb17 	ldw	r4,-20(fp)
 8013540:	103ee83a 	callr	r2
 8013544:	e0bffc15 	stw	r2,-16(fp)
 8013548:	e0bffc17 	ldw	r2,-16(fp)
 801354c:	1000070e 	bge	r2,zero,801356c <read+0xc0>
        {
          ALT_ERRNO = -rval;
 8013550:	80134700 	call	8013470 <alt_get_errno>
 8013554:	1007883a 	mov	r3,r2
 8013558:	e0bffc17 	ldw	r2,-16(fp)
 801355c:	0085c83a 	sub	r2,zero,r2
 8013560:	18800015 	stw	r2,0(r3)
          return -1;
 8013564:	00bfffc4 	movi	r2,-1
 8013568:	00000c06 	br	801359c <read+0xf0>
        }
        return rval;
 801356c:	e0bffc17 	ldw	r2,-16(fp)
 8013570:	00000a06 	br	801359c <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 8013574:	80134700 	call	8013470 <alt_get_errno>
 8013578:	1007883a 	mov	r3,r2
 801357c:	00800344 	movi	r2,13
 8013580:	18800015 	stw	r2,0(r3)
 8013584:	00000406 	br	8013598 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 8013588:	80134700 	call	8013470 <alt_get_errno>
 801358c:	1007883a 	mov	r3,r2
 8013590:	00801444 	movi	r2,81
 8013594:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8013598:	00bfffc4 	movi	r2,-1
}
 801359c:	e037883a 	mov	sp,fp
 80135a0:	dfc00117 	ldw	ra,4(sp)
 80135a4:	df000017 	ldw	fp,0(sp)
 80135a8:	dec00204 	addi	sp,sp,8
 80135ac:	f800283a 	ret

080135b0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 80135b0:	defffc04 	addi	sp,sp,-16
 80135b4:	dfc00315 	stw	ra,12(sp)
 80135b8:	df000215 	stw	fp,8(sp)
 80135bc:	dc000115 	stw	r16,4(sp)
 80135c0:	df000204 	addi	fp,sp,8
 80135c4:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 80135c8:	e0bffe17 	ldw	r2,-8(fp)
 80135cc:	108000d0 	cmplti	r2,r2,3
 80135d0:	1000111e 	bne	r2,zero,8013618 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 80135d4:	040200b4 	movhi	r16,2050
 80135d8:	8422b304 	addi	r16,r16,-30004
 80135dc:	e0bffe17 	ldw	r2,-8(fp)
 80135e0:	01400304 	movi	r5,12
 80135e4:	1009883a 	mov	r4,r2
 80135e8:	8001b580 	call	8001b58 <__mulsi3>
 80135ec:	8085883a 	add	r2,r16,r2
 80135f0:	10800204 	addi	r2,r2,8
 80135f4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 80135f8:	040200b4 	movhi	r16,2050
 80135fc:	8422b304 	addi	r16,r16,-30004
 8013600:	e0bffe17 	ldw	r2,-8(fp)
 8013604:	01400304 	movi	r5,12
 8013608:	1009883a 	mov	r4,r2
 801360c:	8001b580 	call	8001b58 <__mulsi3>
 8013610:	8085883a 	add	r2,r16,r2
 8013614:	10000015 	stw	zero,0(r2)
  }
}
 8013618:	0001883a 	nop
 801361c:	e6ffff04 	addi	sp,fp,-4
 8013620:	dfc00217 	ldw	ra,8(sp)
 8013624:	df000117 	ldw	fp,4(sp)
 8013628:	dc000017 	ldw	r16,0(sp)
 801362c:	dec00304 	addi	sp,sp,12
 8013630:	f800283a 	ret

08013634 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 8013634:	defff904 	addi	sp,sp,-28
 8013638:	df000615 	stw	fp,24(sp)
 801363c:	df000604 	addi	fp,sp,24
 8013640:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8013644:	0005303a 	rdctl	r2,status
 8013648:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801364c:	e0fffe17 	ldw	r3,-8(fp)
 8013650:	00bfff84 	movi	r2,-2
 8013654:	1884703a 	and	r2,r3,r2
 8013658:	1001703a 	wrctl	status,r2
  
  return context;
 801365c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 8013660:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 8013664:	d0a00f17 	ldw	r2,-32708(gp)
 8013668:	10c000c4 	addi	r3,r2,3
 801366c:	00bfff04 	movi	r2,-4
 8013670:	1884703a 	and	r2,r3,r2
 8013674:	d0a00f15 	stw	r2,-32708(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 8013678:	d0e00f17 	ldw	r3,-32708(gp)
 801367c:	e0bfff17 	ldw	r2,-4(fp)
 8013680:	1887883a 	add	r3,r3,r2
 8013684:	00830034 	movhi	r2,3072
 8013688:	10800004 	addi	r2,r2,0
 801368c:	10c0062e 	bgeu	r2,r3,80136a8 <sbrk+0x74>
 8013690:	e0bffb17 	ldw	r2,-20(fp)
 8013694:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8013698:	e0bffa17 	ldw	r2,-24(fp)
 801369c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 80136a0:	00bfffc4 	movi	r2,-1
 80136a4:	00000b06 	br	80136d4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 80136a8:	d0a00f17 	ldw	r2,-32708(gp)
 80136ac:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 80136b0:	d0e00f17 	ldw	r3,-32708(gp)
 80136b4:	e0bfff17 	ldw	r2,-4(fp)
 80136b8:	1885883a 	add	r2,r3,r2
 80136bc:	d0a00f15 	stw	r2,-32708(gp)
 80136c0:	e0bffb17 	ldw	r2,-20(fp)
 80136c4:	e0bffc15 	stw	r2,-16(fp)
 80136c8:	e0bffc17 	ldw	r2,-16(fp)
 80136cc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 80136d0:	e0bffd17 	ldw	r2,-12(fp)
} 
 80136d4:	e037883a 	mov	sp,fp
 80136d8:	df000017 	ldw	fp,0(sp)
 80136dc:	dec00104 	addi	sp,sp,4
 80136e0:	f800283a 	ret

080136e4 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 80136e4:	defffd04 	addi	sp,sp,-12
 80136e8:	dfc00215 	stw	ra,8(sp)
 80136ec:	df000115 	stw	fp,4(sp)
 80136f0:	df000104 	addi	fp,sp,4
 80136f4:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 80136f8:	e13fff17 	ldw	r4,-4(fp)
 80136fc:	80161cc0 	call	80161cc <alt_busy_sleep>
}
 8013700:	e037883a 	mov	sp,fp
 8013704:	dfc00117 	ldw	ra,4(sp)
 8013708:	df000017 	ldw	fp,0(sp)
 801370c:	dec00204 	addi	sp,sp,8
 8013710:	f800283a 	ret

08013714 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8013714:	defffe04 	addi	sp,sp,-8
 8013718:	dfc00115 	stw	ra,4(sp)
 801371c:	df000015 	stw	fp,0(sp)
 8013720:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8013724:	d0a00e17 	ldw	r2,-32712(gp)
 8013728:	10000326 	beq	r2,zero,8013738 <alt_get_errno+0x24>
 801372c:	d0a00e17 	ldw	r2,-32712(gp)
 8013730:	103ee83a 	callr	r2
 8013734:	00000106 	br	801373c <alt_get_errno+0x28>
 8013738:	d0a7fd04 	addi	r2,gp,-24588
}
 801373c:	e037883a 	mov	sp,fp
 8013740:	dfc00117 	ldw	ra,4(sp)
 8013744:	df000017 	ldw	fp,0(sp)
 8013748:	dec00204 	addi	sp,sp,8
 801374c:	f800283a 	ret

08013750 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 8013750:	defff904 	addi	sp,sp,-28
 8013754:	dfc00615 	stw	ra,24(sp)
 8013758:	df000515 	stw	fp,20(sp)
 801375c:	df000504 	addi	fp,sp,20
 8013760:	e13ffd15 	stw	r4,-12(fp)
 8013764:	e17ffe15 	stw	r5,-8(fp)
 8013768:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 801376c:	e0bffd17 	ldw	r2,-12(fp)
 8013770:	10000816 	blt	r2,zero,8013794 <write+0x44>
 8013774:	01400304 	movi	r5,12
 8013778:	e13ffd17 	ldw	r4,-12(fp)
 801377c:	8001b580 	call	8001b58 <__mulsi3>
 8013780:	1007883a 	mov	r3,r2
 8013784:	008200b4 	movhi	r2,2050
 8013788:	10a2b304 	addi	r2,r2,-30004
 801378c:	1885883a 	add	r2,r3,r2
 8013790:	00000106 	br	8013798 <write+0x48>
 8013794:	0005883a 	mov	r2,zero
 8013798:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 801379c:	e0bffb17 	ldw	r2,-20(fp)
 80137a0:	10002126 	beq	r2,zero,8013828 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 80137a4:	e0bffb17 	ldw	r2,-20(fp)
 80137a8:	10800217 	ldw	r2,8(r2)
 80137ac:	108000cc 	andi	r2,r2,3
 80137b0:	10001826 	beq	r2,zero,8013814 <write+0xc4>
 80137b4:	e0bffb17 	ldw	r2,-20(fp)
 80137b8:	10800017 	ldw	r2,0(r2)
 80137bc:	10800617 	ldw	r2,24(r2)
 80137c0:	10001426 	beq	r2,zero,8013814 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 80137c4:	e0bffb17 	ldw	r2,-20(fp)
 80137c8:	10800017 	ldw	r2,0(r2)
 80137cc:	10800617 	ldw	r2,24(r2)
 80137d0:	e0ffff17 	ldw	r3,-4(fp)
 80137d4:	180d883a 	mov	r6,r3
 80137d8:	e17ffe17 	ldw	r5,-8(fp)
 80137dc:	e13ffb17 	ldw	r4,-20(fp)
 80137e0:	103ee83a 	callr	r2
 80137e4:	e0bffc15 	stw	r2,-16(fp)
 80137e8:	e0bffc17 	ldw	r2,-16(fp)
 80137ec:	1000070e 	bge	r2,zero,801380c <write+0xbc>
      {
        ALT_ERRNO = -rval;
 80137f0:	80137140 	call	8013714 <alt_get_errno>
 80137f4:	1007883a 	mov	r3,r2
 80137f8:	e0bffc17 	ldw	r2,-16(fp)
 80137fc:	0085c83a 	sub	r2,zero,r2
 8013800:	18800015 	stw	r2,0(r3)
        return -1;
 8013804:	00bfffc4 	movi	r2,-1
 8013808:	00000c06 	br	801383c <write+0xec>
      }
      return rval;
 801380c:	e0bffc17 	ldw	r2,-16(fp)
 8013810:	00000a06 	br	801383c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 8013814:	80137140 	call	8013714 <alt_get_errno>
 8013818:	1007883a 	mov	r3,r2
 801381c:	00800344 	movi	r2,13
 8013820:	18800015 	stw	r2,0(r3)
 8013824:	00000406 	br	8013838 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 8013828:	80137140 	call	8013714 <alt_get_errno>
 801382c:	1007883a 	mov	r3,r2
 8013830:	00801444 	movi	r2,81
 8013834:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8013838:	00bfffc4 	movi	r2,-1
}
 801383c:	e037883a 	mov	sp,fp
 8013840:	dfc00117 	ldw	ra,4(sp)
 8013844:	df000017 	ldw	fp,0(sp)
 8013848:	dec00204 	addi	sp,sp,8
 801384c:	f800283a 	ret

08013850 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 8013850:	defffd04 	addi	sp,sp,-12
 8013854:	dfc00215 	stw	ra,8(sp)
 8013858:	df000115 	stw	fp,4(sp)
 801385c:	df000104 	addi	fp,sp,4
 8013860:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 8013864:	d1600b04 	addi	r5,gp,-32724
 8013868:	e13fff17 	ldw	r4,-4(fp)
 801386c:	80163800 	call	8016380 <alt_dev_llist_insert>
}
 8013870:	e037883a 	mov	sp,fp
 8013874:	dfc00117 	ldw	ra,4(sp)
 8013878:	df000017 	ldw	fp,0(sp)
 801387c:	dec00204 	addi	sp,sp,8
 8013880:	f800283a 	ret

08013884 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 8013884:	defffd04 	addi	sp,sp,-12
 8013888:	dfc00215 	stw	ra,8(sp)
 801388c:	df000115 	stw	fp,4(sp)
 8013890:	df000104 	addi	fp,sp,4
 8013894:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 8013898:	80170240 	call	8017024 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 801389c:	00800044 	movi	r2,1
 80138a0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 80138a4:	0001883a 	nop
 80138a8:	e037883a 	mov	sp,fp
 80138ac:	dfc00117 	ldw	ra,4(sp)
 80138b0:	df000017 	ldw	fp,0(sp)
 80138b4:	dec00204 	addi	sp,sp,8
 80138b8:	f800283a 	ret

080138bc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 80138bc:	defffe04 	addi	sp,sp,-8
 80138c0:	dfc00115 	stw	ra,4(sp)
 80138c4:	df000015 	stw	fp,0(sp)
 80138c8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 80138cc:	01c0fa04 	movi	r7,1000
 80138d0:	01800044 	movi	r6,1
 80138d4:	000b883a 	mov	r5,zero
 80138d8:	01003004 	movi	r4,192
 80138dc:	80160240 	call	8016024 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_I2C_INIT ( I2C_0, i2c_0);
 80138e0:	010200b4 	movhi	r4,2050
 80138e4:	21231304 	addi	r4,r4,-29620
 80138e8:	8013b7c0 	call	8013b7c <alt_avalon_i2c_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 80138ec:	000d883a 	mov	r6,zero
 80138f0:	000b883a 	mov	r5,zero
 80138f4:	010200b4 	movhi	r4,2050
 80138f8:	21232b04 	addi	r4,r4,-29524
 80138fc:	80156a80 	call	80156a8 <altera_avalon_jtag_uart_init>
 8013900:	010200b4 	movhi	r4,2050
 8013904:	21232104 	addi	r4,r4,-29564
 8013908:	80138500 	call	8013850 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
 801390c:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 8013910:	0001883a 	nop
}
 8013914:	0001883a 	nop
 8013918:	e037883a 	mov	sp,fp
 801391c:	dfc00117 	ldw	ra,4(sp)
 8013920:	df000017 	ldw	fp,0(sp)
 8013924:	dec00204 	addi	sp,sp,8
 8013928:	f800283a 	ret

0801392c <optional_irq_callback>:

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
 801392c:	defff904 	addi	sp,sp,-28
 8013930:	dfc00615 	stw	ra,24(sp)
 8013934:	df000515 	stw	fp,20(sp)
 8013938:	df000504 	addi	fp,sp,20
 801393c:	e13fff15 	stw	r4,-4(fp)
   int timeout=100000;
 8013940:	008000b4 	movhi	r2,2
 8013944:	10a1a804 	addi	r2,r2,-31072
 8013948:	e0bffb15 	stw	r2,-20(fp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
 801394c:	e0bfff17 	ldw	r2,-4(fp)
 8013950:	e0bffc15 	stw	r2,-16(fp)
   IRQ_DATA_t *irq = i2c_dev->callback_context;
 8013954:	e0bffc17 	ldw	r2,-16(fp)
 8013958:	10800717 	ldw	r2,28(r2)
 801395c:	e0bffd15 	stw	r2,-12(fp)

   if (irq->irq_busy==2)  /*receive request*/
 8013960:	e0bffd17 	ldw	r2,-12(fp)
 8013964:	10800217 	ldw	r2,8(r2)
 8013968:	10800098 	cmpnei	r2,r2,2
 801396c:	1000251e 	bne	r2,zero,8013a04 <optional_irq_callback+0xd8>
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
 8013970:	e0bffd17 	ldw	r2,-12(fp)
 8013974:	10c00017 	ldw	r3,0(r2)
 8013978:	e0bffd17 	ldw	r2,-12(fp)
 801397c:	10800117 	ldw	r2,4(r2)
 8013980:	e13ffe04 	addi	r4,fp,-8
 8013984:	200f883a 	mov	r7,r4
 8013988:	100d883a 	mov	r6,r2
 801398c:	180b883a 	mov	r5,r3
 8013990:	e13ffc17 	ldw	r4,-16(fp)
 8013994:	80140dc0 	call	80140dc <alt_avalon_i2c_rx_read_available>
       irq->size-=bytes_read;
 8013998:	e0bffd17 	ldw	r2,-12(fp)
 801399c:	10c00117 	ldw	r3,4(r2)
 80139a0:	e0bffe17 	ldw	r2,-8(fp)
 80139a4:	1887c83a 	sub	r3,r3,r2
 80139a8:	e0bffd17 	ldw	r2,-12(fp)
 80139ac:	10c00115 	stw	r3,4(r2)
       irq->buffer+=bytes_read;
 80139b0:	e0bffd17 	ldw	r2,-12(fp)
 80139b4:	10c00017 	ldw	r3,0(r2)
 80139b8:	e0bffe17 	ldw	r2,-8(fp)
 80139bc:	1887883a 	add	r3,r3,r2
 80139c0:	e0bffd17 	ldw	r2,-12(fp)
 80139c4:	10c00015 	stw	r3,0(r2)
       if (irq->size > 0)
 80139c8:	e0bffd17 	ldw	r2,-12(fp)
 80139cc:	10800117 	ldw	r2,4(r2)
 80139d0:	10000c26 	beq	r2,zero,8013a04 <optional_irq_callback+0xd8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 80139d4:	01400704 	movi	r5,28
 80139d8:	e13ffc17 	ldw	r4,-16(fp)
 80139dc:	80152940 	call	8015294 <alt_avalon_i2c_int_clear>
         /* re-enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
 80139e0:	01400084 	movi	r5,2
 80139e4:	e13ffc17 	ldw	r4,-16(fp)
 80139e8:	80153380 	call	8015338 <alt_avalon_i2c_int_enable>
 80139ec:	00000e06 	br	8013a28 <optional_irq_callback+0xfc>
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    { 
      if (--timeout == 0)
 80139f0:	e0bffb17 	ldw	r2,-20(fp)
 80139f4:	10bfffc4 	addi	r2,r2,-1
 80139f8:	e0bffb15 	stw	r2,-20(fp)
 80139fc:	e0bffb17 	ldw	r2,-20(fp)
 8013a00:	10000426 	beq	r2,zero,8013a14 <optional_irq_callback+0xe8>

    /*transaction should be done so no or minimal looping should occur*/
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
 8013a04:	e13ffc17 	ldw	r4,-16(fp)
 8013a08:	80140980 	call	8014098 <alt_avalon_i2c_is_busy>
 8013a0c:	103ff81e 	bne	r2,zero,80139f0 <__alt_data_end+0xfc0139f0>
 8013a10:	00000106 	br	8013a18 <optional_irq_callback+0xec>
    { 
      if (--timeout == 0)
      {
         break;
 8013a14:	0001883a 	nop
      }
    }

    /*disable the ip.  The ip is disabled and enabled for each transaction.*/
    alt_avalon_i2c_disable(i2c_dev);
 8013a18:	e13ffc17 	ldw	r4,-16(fp)
 8013a1c:	8013d400 	call	8013d40 <alt_avalon_i2c_disable>

    irq->irq_busy=0;
 8013a20:	e0bffd17 	ldw	r2,-12(fp)
 8013a24:	10000215 	stw	zero,8(r2)
}
 8013a28:	e037883a 	mov	sp,fp
 8013a2c:	dfc00117 	ldw	ra,4(sp)
 8013a30:	df000017 	ldw	fp,0(sp)
 8013a34:	dec00204 	addi	sp,sp,8
 8013a38:	f800283a 	ret

08013a3c <alt_avalon_i2c_register_optional_irq_handler>:

void alt_avalon_i2c_register_optional_irq_handler(ALT_AVALON_I2C_DEV_t *i2c_dev,IRQ_DATA_t * irq_data)
{
 8013a3c:	defffc04 	addi	sp,sp,-16
 8013a40:	dfc00315 	stw	ra,12(sp)
 8013a44:	df000215 	stw	fp,8(sp)
 8013a48:	df000204 	addi	fp,sp,8
 8013a4c:	e13ffe15 	stw	r4,-8(fp)
 8013a50:	e17fff15 	stw	r5,-4(fp)
   irq_data->irq_busy=0;
 8013a54:	e0bfff17 	ldw	r2,-4(fp)
 8013a58:	10000215 	stw	zero,8(r2)
   alt_avalon_i2c_register_callback(i2c_dev,optional_irq_callback,0,irq_data);
 8013a5c:	e1ffff17 	ldw	r7,-4(fp)
 8013a60:	000d883a 	mov	r6,zero
 8013a64:	01420074 	movhi	r5,2049
 8013a68:	294e4b04 	addi	r5,r5,14636
 8013a6c:	e13ffe17 	ldw	r4,-8(fp)
 8013a70:	8013b280 	call	8013b28 <alt_avalon_i2c_register_callback>
}
 8013a74:	0001883a 	nop
 8013a78:	e037883a 	mov	sp,fp
 8013a7c:	dfc00117 	ldw	ra,4(sp)
 8013a80:	df000017 	ldw	fp,0(sp)
 8013a84:	dec00204 	addi	sp,sp,8
 8013a88:	f800283a 	ret

08013a8c <alt_avalon_i2c_irq>:
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
 8013a8c:	defff904 	addi	sp,sp,-28
 8013a90:	dfc00615 	stw	ra,24(sp)
 8013a94:	df000515 	stw	fp,20(sp)
 8013a98:	df000504 	addi	fp,sp,20
 8013a9c:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
 8013aa0:	e0bfff17 	ldw	r2,-4(fp)
 8013aa4:	e0bffb15 	stw	r2,-20(fp)
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
 8013aa8:	014007c4 	movi	r5,31
 8013aac:	e13ffb17 	ldw	r4,-20(fp)
 8013ab0:	80152d00 	call	80152d0 <alt_avalon_i2c_int_disable>
    
    /* clear irq status */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 8013ab4:	01400704 	movi	r5,28
 8013ab8:	e13ffb17 	ldw	r4,-20(fp)
 8013abc:	80152940 	call	8015294 <alt_avalon_i2c_int_clear>
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
 8013ac0:	e0bffb17 	ldw	r2,-20(fp)
 8013ac4:	10800617 	ldw	r2,24(r2)
 8013ac8:	10001126 	beq	r2,zero,8013b10 <alt_avalon_i2c_irq+0x84>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8013acc:	0005303a 	rdctl	r2,status
 8013ad0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8013ad4:	e0fffd17 	ldw	r3,-12(fp)
 8013ad8:	00bfff84 	movi	r2,-2
 8013adc:	1884703a 	and	r2,r3,r2
 8013ae0:	1001703a 	wrctl	status,r2
  
  return context;
 8013ae4:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
 8013ae8:	e0bffc15 	stw	r2,-16(fp)
        dev->callback(dev);
 8013aec:	e0bffb17 	ldw	r2,-20(fp)
 8013af0:	10800617 	ldw	r2,24(r2)
 8013af4:	e13ffb17 	ldw	r4,-20(fp)
 8013af8:	103ee83a 	callr	r2
 8013afc:	e0bffc17 	ldw	r2,-16(fp)
 8013b00:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8013b04:	e0bffe17 	ldw	r2,-8(fp)
 8013b08:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    return;
 8013b0c:	0001883a 	nop
 8013b10:	0001883a 	nop
}
 8013b14:	e037883a 	mov	sp,fp
 8013b18:	dfc00117 	ldw	ra,4(sp)
 8013b1c:	df000017 	ldw	fp,0(sp)
 8013b20:	dec00204 	addi	sp,sp,8
 8013b24:	f800283a 	ret

08013b28 <alt_avalon_i2c_register_callback>:
void alt_avalon_i2c_register_callback(
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
 8013b28:	defffb04 	addi	sp,sp,-20
 8013b2c:	df000415 	stw	fp,16(sp)
 8013b30:	df000404 	addi	fp,sp,16
 8013b34:	e13ffc15 	stw	r4,-16(fp)
 8013b38:	e17ffd15 	stw	r5,-12(fp)
 8013b3c:	e1bffe15 	stw	r6,-8(fp)
 8013b40:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
 8013b44:	e0bffc17 	ldw	r2,-16(fp)
 8013b48:	e0fffd17 	ldw	r3,-12(fp)
 8013b4c:	10c00615 	stw	r3,24(r2)
    dev->callback_context = context;
 8013b50:	e0bffc17 	ldw	r2,-16(fp)
 8013b54:	e0ffff17 	ldw	r3,-4(fp)
 8013b58:	10c00715 	stw	r3,28(r2)
    dev->control          = control;
 8013b5c:	e0bffc17 	ldw	r2,-16(fp)
 8013b60:	e0fffe17 	ldw	r3,-8(fp)
 8013b64:	10c00815 	stw	r3,32(r2)

    return ;
 8013b68:	0001883a 	nop
}
 8013b6c:	e037883a 	mov	sp,fp
 8013b70:	df000017 	ldw	fp,0(sp)
 8013b74:	dec00104 	addi	sp,sp,4
 8013b78:	f800283a 	ret

08013b7c <alt_avalon_i2c_init>:

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
 8013b7c:	defff704 	addi	sp,sp,-36
 8013b80:	dfc00815 	stw	ra,32(sp)
 8013b84:	df000715 	stw	fp,28(sp)
 8013b88:	df000704 	addi	fp,sp,28
 8013b8c:	e13fff15 	stw	r4,-4(fp)
    extern alt_llist alt_avalon_i2c_list;
    ALT_AVALON_I2C_MASTER_CONFIG_t cfg;
    int error;

    /* disable ip */
    alt_avalon_i2c_disable(dev);
 8013b90:	e13fff17 	ldw	r4,-4(fp)
 8013b94:	8013d400 	call	8013d40 <alt_avalon_i2c_disable>

    /* Disable interrupts */
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
 8013b98:	014007c4 	movi	r5,31
 8013b9c:	e13fff17 	ldw	r4,-4(fp)
 8013ba0:	80152d00 	call	80152d0 <alt_avalon_i2c_int_disable>

    /* clear ISR register content */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 8013ba4:	01400704 	movi	r5,28
 8013ba8:	e13fff17 	ldw	r4,-4(fp)
 8013bac:	80152940 	call	8015294 <alt_avalon_i2c_int_clear>
    
    /* set the cmd fifo threshold */
    alt_avalon_i2c_tfr_cmd_fifo_threshold_set(dev,ALT_AVALON_I2C_TFR_CMD_FIFO_NOT_FULL);
 8013bb0:	014000c4 	movi	r5,3
 8013bb4:	e13fff17 	ldw	r4,-4(fp)
 8013bb8:	80154dc0 	call	80154dc <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
 8013bbc:	014000c4 	movi	r5,3
 8013bc0:	e13fff17 	ldw	r4,-4(fp)
 8013bc4:	801542c0 	call	801542c <alt_avalon_i2c_rx_fifo_threshold_set>
    
    /* set the default bus speed */
    cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
 8013bc8:	e03ffc15 	stw	zero,-16(fp)
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
 8013bcc:	e03ffb15 	stw	zero,-20(fp)
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
 8013bd0:	e0bffb04 	addi	r2,fp,-20
 8013bd4:	018000b4 	movhi	r6,2
 8013bd8:	31a1a804 	addi	r6,r6,-31072
 8013bdc:	100b883a 	mov	r5,r2
 8013be0:	e13fff17 	ldw	r4,-4(fp)
 8013be4:	8013f9c0 	call	8013f9c <alt_avalon_i2c_master_config_speed_set>
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
 8013be8:	e0bffb04 	addi	r2,fp,-20
 8013bec:	100b883a 	mov	r5,r2
 8013bf0:	e13fff17 	ldw	r4,-4(fp)
 8013bf4:	8013e3c0 	call	8013e3c <alt_avalon_i2c_master_config_set>
    
    /* Register this instance of the i2c controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_avalon_i2c_list);
 8013bf8:	d1601004 	addi	r5,gp,-32704
 8013bfc:	e13fff17 	ldw	r4,-4(fp)
 8013c00:	80163800 	call	8016380 <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 8013c04:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
 8013c08:	e0bffa15 	stw	r2,-24(fp)

    if (!error)
 8013c0c:	e0bffa17 	ldw	r2,-24(fp)
 8013c10:	10000c1e 	bne	r2,zero,8013c44 <alt_avalon_i2c_init+0xc8>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
 8013c14:	e0bfff17 	ldw	r2,-4(fp)
 8013c18:	10c00417 	ldw	r3,16(r2)
 8013c1c:	e0bfff17 	ldw	r2,-4(fp)
 8013c20:	10800517 	ldw	r2,20(r2)
 8013c24:	d8000015 	stw	zero,0(sp)
 8013c28:	e1ffff17 	ldw	r7,-4(fp)
 8013c2c:	01820074 	movhi	r6,2049
 8013c30:	318ea304 	addi	r6,r6,14988
 8013c34:	100b883a 	mov	r5,r2
 8013c38:	1809883a 	mov	r4,r3
 8013c3c:	80165940 	call	8016594 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }

    return;
 8013c40:	00000406 	br	8013c54 <alt_avalon_i2c_init+0xd8>
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
 8013c44:	01020074 	movhi	r4,2049
 8013c48:	211f6404 	addi	r4,r4,32144
 8013c4c:	8016c180 	call	8016c18 <alt_printf>
    }

    return;
 8013c50:	0001883a 	nop

}
 8013c54:	e037883a 	mov	sp,fp
 8013c58:	dfc00117 	ldw	ra,4(sp)
 8013c5c:	df000017 	ldw	fp,0(sp)
 8013c60:	dec00204 	addi	sp,sp,8
 8013c64:	f800283a 	ret

08013c68 <alt_avalon_i2c_open>:

/*  Retrieve a pointer to the i2c instance */
ALT_AVALON_I2C_DEV_t* alt_avalon_i2c_open(const char* name)
{
 8013c68:	defffc04 	addi	sp,sp,-16
 8013c6c:	dfc00315 	stw	ra,12(sp)
 8013c70:	df000215 	stw	fp,8(sp)
 8013c74:	df000204 	addi	fp,sp,8
 8013c78:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t* dev = NULL;
 8013c7c:	e03ffe15 	stw	zero,-8(fp)

    dev = (ALT_AVALON_I2C_DEV_t*) alt_find_dev (name, &alt_avalon_i2c_list);
 8013c80:	d1601004 	addi	r5,gp,-32704
 8013c84:	e13fff17 	ldw	r4,-4(fp)
 8013c88:	80164e40 	call	80164e4 <alt_find_dev>
 8013c8c:	e0bffe15 	stw	r2,-8(fp)

    return dev;
 8013c90:	e0bffe17 	ldw	r2,-8(fp)
}
 8013c94:	e037883a 	mov	sp,fp
 8013c98:	dfc00117 	ldw	ra,4(sp)
 8013c9c:	df000017 	ldw	fp,0(sp)
 8013ca0:	dec00204 	addi	sp,sp,8
 8013ca4:	f800283a 	ret

08013ca8 <alt_avalon_i2c_enable>:

/* enable the avalon i2c ip */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_enable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 8013ca8:	defffc04 	addi	sp,sp,-16
 8013cac:	df000315 	stw	fp,12(sp)
 8013cb0:	df000304 	addi	fp,sp,12
 8013cb4:	e13fff15 	stw	r4,-4(fp)
   IRQ_DATA_t *irq_data = i2c_dev->callback_context;
 8013cb8:	e0bfff17 	ldw	r2,-4(fp)
 8013cbc:	10800717 	ldw	r2,28(r2)
 8013cc0:	e0bffd15 	stw	r2,-12(fp)
   alt_u32 enable_status;
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
 8013cc4:	e0bfff17 	ldw	r2,-4(fp)
 8013cc8:	10800317 	ldw	r2,12(r2)
 8013ccc:	10800204 	addi	r2,r2,8
 8013cd0:	10800037 	ldwio	r2,0(r2)
 8013cd4:	1080004c 	andi	r2,r2,1
 8013cd8:	e0bffe15 	stw	r2,-8(fp)
   if (enable_status)
 8013cdc:	e0bffe17 	ldw	r2,-8(fp)
 8013ce0:	10000226 	beq	r2,zero,8013cec <alt_avalon_i2c_enable+0x44>
   {
     return ALT_AVALON_I2C_BUSY;
 8013ce4:	00bffe44 	movi	r2,-7
 8013ce8:	00001106 	br	8013d30 <alt_avalon_i2c_enable+0x88>
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
 8013cec:	e0bfff17 	ldw	r2,-4(fp)
 8013cf0:	10c00617 	ldw	r3,24(r2)
 8013cf4:	00820074 	movhi	r2,2049
 8013cf8:	108e4b04 	addi	r2,r2,14636
 8013cfc:	1880021e 	bne	r3,r2,8013d08 <alt_avalon_i2c_enable+0x60>
   {
     irq_data->irq_busy=0;
 8013d00:	e0bffd17 	ldw	r2,-12(fp)
 8013d04:	10000215 	stw	zero,8(r2)
   }
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);
 8013d08:	e0bfff17 	ldw	r2,-4(fp)
 8013d0c:	10800317 	ldw	r2,12(r2)
 8013d10:	10800204 	addi	r2,r2,8
 8013d14:	e0ffff17 	ldw	r3,-4(fp)
 8013d18:	18c00317 	ldw	r3,12(r3)
 8013d1c:	18c00204 	addi	r3,r3,8
 8013d20:	18c00037 	ldwio	r3,0(r3)
 8013d24:	18c00054 	ori	r3,r3,1
 8013d28:	10c00035 	stwio	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
 8013d2c:	0005883a 	mov	r2,zero
}
 8013d30:	e037883a 	mov	sp,fp
 8013d34:	df000017 	ldw	fp,0(sp)
 8013d38:	dec00104 	addi	sp,sp,4
 8013d3c:	f800283a 	ret

08013d40 <alt_avalon_i2c_disable>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 8013d40:	defffe04 	addi	sp,sp,-8
 8013d44:	df000115 	stw	fp,4(sp)
 8013d48:	df000104 	addi	fp,sp,4
 8013d4c:	e13fff15 	stw	r4,-4(fp)
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
 8013d50:	e0bfff17 	ldw	r2,-4(fp)
 8013d54:	10800317 	ldw	r2,12(r2)
 8013d58:	10800204 	addi	r2,r2,8
 8013d5c:	e0ffff17 	ldw	r3,-4(fp)
 8013d60:	18c00317 	ldw	r3,12(r3)
 8013d64:	18c00204 	addi	r3,r3,8
 8013d68:	19000037 	ldwio	r4,0(r3)
 8013d6c:	00ffff84 	movi	r3,-2
 8013d70:	20c6703a 	and	r3,r4,r3
 8013d74:	10c00035 	stwio	r3,0(r2)

}
 8013d78:	0001883a 	nop
 8013d7c:	e037883a 	mov	sp,fp
 8013d80:	df000017 	ldw	fp,0(sp)
 8013d84:	dec00104 	addi	sp,sp,4
 8013d88:	f800283a 	ret

08013d8c <alt_avalon_i2c_master_config_get>:

/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
 8013d8c:	defffd04 	addi	sp,sp,-12
 8013d90:	df000215 	stw	fp,8(sp)
 8013d94:	df000204 	addi	fp,sp,8
 8013d98:	e13ffe15 	stw	r4,-8(fp)
 8013d9c:	e17fff15 	stw	r5,-4(fp)

    cfg->addr_mode = i2c_dev->address_mode;
 8013da0:	e0bffe17 	ldw	r2,-8(fp)
 8013da4:	10c00d17 	ldw	r3,52(r2)
 8013da8:	e0bfff17 	ldw	r2,-4(fp)
 8013dac:	10c00015 	stw	r3,0(r2)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
 8013db0:	e0bffe17 	ldw	r2,-8(fp)
 8013db4:	10800317 	ldw	r2,12(r2)
 8013db8:	10800204 	addi	r2,r2,8
 8013dbc:	10800037 	ldwio	r2,0(r2)
 8013dc0:	1080008c 	andi	r2,r2,2
 8013dc4:	1005d07a 	srai	r2,r2,1
 8013dc8:	1007883a 	mov	r3,r2
 8013dcc:	e0bfff17 	ldw	r2,-4(fp)
 8013dd0:	10c00115 	stw	r3,4(r2)

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
 8013dd4:	e0bffe17 	ldw	r2,-8(fp)
 8013dd8:	10800317 	ldw	r2,12(r2)
 8013ddc:	10800904 	addi	r2,r2,36
 8013de0:	10800037 	ldwio	r2,0(r2)
 8013de4:	1007883a 	mov	r3,r2
 8013de8:	e0bfff17 	ldw	r2,-4(fp)
 8013dec:	10c0020d 	sth	r3,8(r2)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
 8013df0:	e0bffe17 	ldw	r2,-8(fp)
 8013df4:	10800317 	ldw	r2,12(r2)
 8013df8:	10800804 	addi	r2,r2,32
 8013dfc:	10800037 	ldwio	r2,0(r2)
 8013e00:	1007883a 	mov	r3,r2
 8013e04:	e0bfff17 	ldw	r2,-4(fp)
 8013e08:	10c0028d 	sth	r3,10(r2)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
 8013e0c:	e0bffe17 	ldw	r2,-8(fp)
 8013e10:	10800317 	ldw	r2,12(r2)
 8013e14:	10800a04 	addi	r2,r2,40
 8013e18:	10800037 	ldwio	r2,0(r2)
 8013e1c:	1007883a 	mov	r3,r2
 8013e20:	e0bfff17 	ldw	r2,-4(fp)
 8013e24:	10c0030d 	sth	r3,12(r2)
}
 8013e28:	0001883a 	nop
 8013e2c:	e037883a 	mov	sp,fp
 8013e30:	df000017 	ldw	fp,0(sp)
 8013e34:	dec00104 	addi	sp,sp,4
 8013e38:	f800283a 	ret

08013e3c <alt_avalon_i2c_master_config_set>:

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
 8013e3c:	defffd04 	addi	sp,sp,-12
 8013e40:	df000215 	stw	fp,8(sp)
 8013e44:	df000204 	addi	fp,sp,8
 8013e48:	e13ffe15 	stw	r4,-8(fp)
 8013e4c:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->address_mode   =   cfg->addr_mode;
 8013e50:	e0bfff17 	ldw	r2,-4(fp)
 8013e54:	10c00017 	ldw	r3,0(r2)
 8013e58:	e0bffe17 	ldw	r2,-8(fp)
 8013e5c:	10c00d15 	stw	r3,52(r2)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
 8013e60:	e0bffe17 	ldw	r2,-8(fp)
 8013e64:	10800317 	ldw	r2,12(r2)
 8013e68:	10c00204 	addi	r3,r2,8
 8013e6c:	e0bffe17 	ldw	r2,-8(fp)
 8013e70:	10800317 	ldw	r2,12(r2)
 8013e74:	10800204 	addi	r2,r2,8
 8013e78:	10800037 	ldwio	r2,0(r2)
 8013e7c:	1009883a 	mov	r4,r2
 8013e80:	00bfff44 	movi	r2,-3
 8013e84:	2088703a 	and	r4,r4,r2
 8013e88:	e0bfff17 	ldw	r2,-4(fp)
 8013e8c:	10800117 	ldw	r2,4(r2)
 8013e90:	1085883a 	add	r2,r2,r2
 8013e94:	1080008c 	andi	r2,r2,2
 8013e98:	2084b03a 	or	r2,r4,r2
 8013e9c:	18800035 	stwio	r2,0(r3)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base,cfg->scl_hcnt);
 8013ea0:	e0bffe17 	ldw	r2,-8(fp)
 8013ea4:	10800317 	ldw	r2,12(r2)
 8013ea8:	10800904 	addi	r2,r2,36
 8013eac:	e0ffff17 	ldw	r3,-4(fp)
 8013eb0:	18c0020b 	ldhu	r3,8(r3)
 8013eb4:	18ffffcc 	andi	r3,r3,65535
 8013eb8:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base,cfg->scl_lcnt);
 8013ebc:	e0bffe17 	ldw	r2,-8(fp)
 8013ec0:	10800317 	ldw	r2,12(r2)
 8013ec4:	10800804 	addi	r2,r2,32
 8013ec8:	e0ffff17 	ldw	r3,-4(fp)
 8013ecc:	18c0028b 	ldhu	r3,10(r3)
 8013ed0:	18ffffcc 	andi	r3,r3,65535
 8013ed4:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base,cfg->sda_cnt);
 8013ed8:	e0bffe17 	ldw	r2,-8(fp)
 8013edc:	10800317 	ldw	r2,12(r2)
 8013ee0:	10800a04 	addi	r2,r2,40
 8013ee4:	e0ffff17 	ldw	r3,-4(fp)
 8013ee8:	18c0030b 	ldhu	r3,12(r3)
 8013eec:	18ffffcc 	andi	r3,r3,65535
 8013ef0:	10c00035 	stwio	r3,0(r2)
}
 8013ef4:	0001883a 	nop
 8013ef8:	e037883a 	mov	sp,fp
 8013efc:	df000017 	ldw	fp,0(sp)
 8013f00:	dec00104 	addi	sp,sp,4
 8013f04:	f800283a 	ret

08013f08 <alt_avalon_i2c_master_config_speed_get>:
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
 8013f08:	defffb04 	addi	sp,sp,-20
 8013f0c:	dfc00415 	stw	ra,16(sp)
 8013f10:	df000315 	stw	fp,12(sp)
 8013f14:	df000304 	addi	fp,sp,12
 8013f18:	e13ffd15 	stw	r4,-12(fp)
 8013f1c:	e17ffe15 	stw	r5,-8(fp)
 8013f20:	e1bfff15 	stw	r6,-4(fp)

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
 8013f24:	e0bffe17 	ldw	r2,-8(fp)
 8013f28:	1080028b 	ldhu	r2,10(r2)
 8013f2c:	10bfffcc 	andi	r2,r2,65535
 8013f30:	10000426 	beq	r2,zero,8013f44 <alt_avalon_i2c_master_config_speed_get+0x3c>
 8013f34:	e0bffe17 	ldw	r2,-8(fp)
 8013f38:	1080020b 	ldhu	r2,8(r2)
 8013f3c:	10bfffcc 	andi	r2,r2,65535
 8013f40:	1000021e 	bne	r2,zero,8013f4c <alt_avalon_i2c_master_config_speed_get+0x44>
   {
       return ALT_AVALON_I2C_BAD_ARG;
 8013f44:	00bfff44 	movi	r2,-3
 8013f48:	00000f06 	br	8013f88 <alt_avalon_i2c_master_config_speed_get+0x80>
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
 8013f4c:	e0bffd17 	ldw	r2,-12(fp)
 8013f50:	11000c17 	ldw	r4,48(r2)
 8013f54:	e0bffe17 	ldw	r2,-8(fp)
 8013f58:	1080028b 	ldhu	r2,10(r2)
 8013f5c:	10ffffcc 	andi	r3,r2,65535
 8013f60:	e0bffe17 	ldw	r2,-8(fp)
 8013f64:	1080020b 	ldhu	r2,8(r2)
 8013f68:	10bfffcc 	andi	r2,r2,65535
 8013f6c:	1885883a 	add	r2,r3,r2
 8013f70:	100b883a 	mov	r5,r2
 8013f74:	8001a9c0 	call	8001a9c <__udivsi3>
 8013f78:	1007883a 	mov	r3,r2
 8013f7c:	e0bfff17 	ldw	r2,-4(fp)
 8013f80:	10c00015 	stw	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
 8013f84:	0005883a 	mov	r2,zero
}
 8013f88:	e037883a 	mov	sp,fp
 8013f8c:	dfc00117 	ldw	ra,4(sp)
 8013f90:	df000017 	ldw	fp,0(sp)
 8013f94:	dec00204 	addi	sp,sp,8
 8013f98:	f800283a 	ret

08013f9c <alt_avalon_i2c_master_config_speed_set>:
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
 8013f9c:	defff904 	addi	sp,sp,-28
 8013fa0:	dfc00615 	stw	ra,24(sp)
 8013fa4:	df000515 	stw	fp,20(sp)
 8013fa8:	df000504 	addi	fp,sp,20
 8013fac:	e13ffd15 	stw	r4,-12(fp)
 8013fb0:	e17ffe15 	stw	r5,-8(fp)
 8013fb4:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
 8013fb8:	e0ffff17 	ldw	r3,-4(fp)
 8013fbc:	008001b4 	movhi	r2,6
 8013fc0:	1086a004 	addi	r2,r2,6784
 8013fc4:	10c00436 	bltu	r2,r3,8013fd8 <alt_avalon_i2c_master_config_speed_set+0x3c>
 8013fc8:	e0bfff17 	ldw	r2,-4(fp)
 8013fcc:	10000226 	beq	r2,zero,8013fd8 <alt_avalon_i2c_master_config_speed_set+0x3c>
 8013fd0:	e0bfff17 	ldw	r2,-4(fp)
 8013fd4:	1000021e 	bne	r2,zero,8013fe0 <alt_avalon_i2c_master_config_speed_set+0x44>
    {
        return ALT_AVALON_I2C_RANGE;
 8013fd8:	00bfff04 	movi	r2,-4
 8013fdc:	00002906 	br	8014084 <alt_avalon_i2c_master_config_speed_set+0xe8>
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
 8013fe0:	e0bffd17 	ldw	r2,-12(fp)
 8013fe4:	10c00c17 	ldw	r3,48(r2)
 8013fe8:	e0bfff17 	ldw	r2,-4(fp)
 8013fec:	1085883a 	add	r2,r2,r2
 8013ff0:	100b883a 	mov	r5,r2
 8013ff4:	1809883a 	mov	r4,r3
 8013ff8:	8001a9c0 	call	8001a9c <__udivsi3>
 8013ffc:	e0bffb15 	stw	r2,-20(fp)

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
 8014000:	e0bffb17 	ldw	r2,-20(fp)
 8014004:	10800f04 	addi	r2,r2,60
 8014008:	e0bffc15 	stw	r2,-16(fp)
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
 801400c:	e0bffb17 	ldw	r2,-20(fp)
 8014010:	10bff104 	addi	r2,r2,-60
 8014014:	e0bffb15 	stw	r2,-20(fp)

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
 8014018:	e0ffff17 	ldw	r3,-4(fp)
 801401c:	008000b4 	movhi	r2,2
 8014020:	10a1a804 	addi	r2,r2,-31072
 8014024:	10c0042e 	bgeu	r2,r3,8014038 <alt_avalon_i2c_master_config_speed_set+0x9c>
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
 8014028:	e0bffe17 	ldw	r2,-8(fp)
 801402c:	00c00044 	movi	r3,1
 8014030:	10c00115 	stw	r3,4(r2)
 8014034:	00000206 	br	8014040 <alt_avalon_i2c_master_config_speed_set+0xa4>
    }
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
 8014038:	e0bffe17 	ldw	r2,-8(fp)
 801403c:	10000115 	stw	zero,4(r2)
    }

    cfg->scl_lcnt = scl_lcnt;
 8014040:	e0bffb17 	ldw	r2,-20(fp)
 8014044:	1007883a 	mov	r3,r2
 8014048:	e0bffe17 	ldw	r2,-8(fp)
 801404c:	10c0028d 	sth	r3,10(r2)
    cfg->scl_hcnt = scl_hcnt;
 8014050:	e0bffc17 	ldw	r2,-16(fp)
 8014054:	1007883a 	mov	r3,r2
 8014058:	e0bffe17 	ldw	r2,-8(fp)
 801405c:	10c0020d 	sth	r3,8(r2)
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
 8014060:	e0bffb17 	ldw	r2,-20(fp)
 8014064:	1007883a 	mov	r3,r2
 8014068:	e0bffb17 	ldw	r2,-20(fp)
 801406c:	1004d07a 	srli	r2,r2,1
 8014070:	1885c83a 	sub	r2,r3,r2
 8014074:	1007883a 	mov	r3,r2
 8014078:	e0bffe17 	ldw	r2,-8(fp)
 801407c:	10c0030d 	sth	r3,12(r2)

    return ALT_AVALON_I2C_SUCCESS;
 8014080:	0005883a 	mov	r2,zero

}
 8014084:	e037883a 	mov	sp,fp
 8014088:	dfc00117 	ldw	ra,4(sp)
 801408c:	df000017 	ldw	fp,0(sp)
 8014090:	dec00204 	addi	sp,sp,8
 8014094:	f800283a 	ret

08014098 <alt_avalon_i2c_is_busy>:

/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 8014098:	defffe04 	addi	sp,sp,-8
 801409c:	df000115 	stw	fp,4(sp)
 80140a0:	df000104 	addi	fp,sp,4
 80140a4:	e13fff15 	stw	r4,-4(fp)

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
 80140a8:	e0bfff17 	ldw	r2,-4(fp)
 80140ac:	10800317 	ldw	r2,12(r2)
 80140b0:	10800504 	addi	r2,r2,20
 80140b4:	10800037 	ldwio	r2,0(r2)
 80140b8:	1080004c 	andi	r2,r2,1
 80140bc:	10000226 	beq	r2,zero,80140c8 <alt_avalon_i2c_is_busy+0x30>
    {
       return ALT_AVALON_I2C_TRUE;
 80140c0:	00800044 	movi	r2,1
 80140c4:	00000106 	br	80140cc <alt_avalon_i2c_is_busy+0x34>
    }

    return ALT_AVALON_I2C_FALSE;
 80140c8:	0005883a 	mov	r2,zero
}
 80140cc:	e037883a 	mov	sp,fp
 80140d0:	df000017 	ldw	fp,0(sp)
 80140d4:	dec00104 	addi	sp,sp,4
 80140d8:	f800283a 	ret

080140dc <alt_avalon_i2c_rx_read_available>:

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
 80140dc:	defffb04 	addi	sp,sp,-20
 80140e0:	df000415 	stw	fp,16(sp)
 80140e4:	df000404 	addi	fp,sp,16
 80140e8:	e13ffc15 	stw	r4,-16(fp)
 80140ec:	e17ffd15 	stw	r5,-12(fp)
 80140f0:	e1bffe15 	stw	r6,-8(fp)
 80140f4:	e1ffff15 	stw	r7,-4(fp)
    *bytes_read = 0;
 80140f8:	e0bfff17 	ldw	r2,-4(fp)
 80140fc:	10000015 	stw	zero,0(r2)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
 8014100:	00001406 	br	8014154 <alt_avalon_i2c_rx_read_available+0x78>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
 8014104:	e0bfff17 	ldw	r2,-4(fp)
 8014108:	10800017 	ldw	r2,0(r2)
 801410c:	e0fffd17 	ldw	r3,-12(fp)
 8014110:	1885883a 	add	r2,r3,r2
 8014114:	e0fffc17 	ldw	r3,-16(fp)
 8014118:	18c00317 	ldw	r3,12(r3)
 801411c:	18c00104 	addi	r3,r3,4
 8014120:	18c00037 	ldwio	r3,0(r3)
 8014124:	10c00005 	stb	r3,0(r2)
       *bytes_read+=1; 
 8014128:	e0bfff17 	ldw	r2,-4(fp)
 801412c:	10800017 	ldw	r2,0(r2)
 8014130:	10c00044 	addi	r3,r2,1
 8014134:	e0bfff17 	ldw	r2,-4(fp)
 8014138:	10c00015 	stw	r3,0(r2)
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
 801413c:	e0bfff17 	ldw	r2,-4(fp)
 8014140:	10c00017 	ldw	r3,0(r2)
 8014144:	e0bffe17 	ldw	r2,-8(fp)
 8014148:	1880021e 	bne	r3,r2,8014154 <alt_avalon_i2c_rx_read_available+0x78>
 801414c:	e0bffe17 	ldw	r2,-8(fp)
 8014150:	1000061e 	bne	r2,zero,801416c <alt_avalon_i2c_rx_read_available+0x90>
/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
 8014154:	e0bffc17 	ldw	r2,-16(fp)
 8014158:	10800317 	ldw	r2,12(r2)
 801415c:	10800704 	addi	r2,r2,28
 8014160:	10800037 	ldwio	r2,0(r2)
 8014164:	103fe71e 	bne	r2,zero,8014104 <__alt_data_end+0xfc014104>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
    }
}
 8014168:	00000106 	br	8014170 <alt_avalon_i2c_rx_read_available+0x94>
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
 801416c:	0001883a 	nop
    }
}
 8014170:	0001883a 	nop
 8014174:	e037883a 	mov	sp,fp
 8014178:	df000017 	ldw	fp,0(sp)
 801417c:	dec00104 	addi	sp,sp,4
 8014180:	f800283a 	ret

08014184 <alt_avalon_i2c_rx_read>:

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
 8014184:	defffa04 	addi	sp,sp,-24
 8014188:	dfc00515 	stw	ra,20(sp)
 801418c:	df000415 	stw	fp,16(sp)
 8014190:	df000404 	addi	fp,sp,16
 8014194:	e13ffe15 	stw	r4,-8(fp)
 8014198:	e17fff15 	stw	r5,-4(fp)
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
 801419c:	e03ffc15 	stw	zero,-16(fp)
    alt_u32 timeout = 100000;
 80141a0:	008000b4 	movhi	r2,2
 80141a4:	10a1a804 	addi	r2,r2,-31072
 80141a8:	e0bffd15 	stw	r2,-12(fp)


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
 80141ac:	00000d06 	br	80141e4 <alt_avalon_i2c_rx_read+0x60>
    {
      if (timeout<10) alt_busy_sleep(10000);
 80141b0:	e0bffd17 	ldw	r2,-12(fp)
 80141b4:	108002a8 	cmpgeui	r2,r2,10
 80141b8:	1000021e 	bne	r2,zero,80141c4 <alt_avalon_i2c_rx_read+0x40>
 80141bc:	0109c404 	movi	r4,10000
 80141c0:	80161cc0 	call	80161cc <alt_busy_sleep>
      if (--timeout == 0)
 80141c4:	e0bffd17 	ldw	r2,-12(fp)
 80141c8:	10bfffc4 	addi	r2,r2,-1
 80141cc:	e0bffd15 	stw	r2,-12(fp)
 80141d0:	e0bffd17 	ldw	r2,-12(fp)
 80141d4:	1000031e 	bne	r2,zero,80141e4 <alt_avalon_i2c_rx_read+0x60>
      {
        status = ALT_AVALON_I2C_TIMEOUT;
 80141d8:	00bfff84 	movi	r2,-2
 80141dc:	e0bffc15 	stw	r2,-16(fp)
        break;
 80141e0:	00000506 	br	80141f8 <alt_avalon_i2c_rx_read+0x74>
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
 80141e4:	e0bffe17 	ldw	r2,-8(fp)
 80141e8:	10800317 	ldw	r2,12(r2)
 80141ec:	10800704 	addi	r2,r2,28
 80141f0:	10800037 	ldwio	r2,0(r2)
 80141f4:	103fee26 	beq	r2,zero,80141b0 <__alt_data_end+0xfc0141b0>
        status = ALT_AVALON_I2C_TIMEOUT;
        break;
      }
    }

    *val = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
 80141f8:	e0bffe17 	ldw	r2,-8(fp)
 80141fc:	10800317 	ldw	r2,12(r2)
 8014200:	10800104 	addi	r2,r2,4
 8014204:	10800037 	ldwio	r2,0(r2)
 8014208:	1007883a 	mov	r3,r2
 801420c:	e0bfff17 	ldw	r2,-4(fp)
 8014210:	10c00005 	stb	r3,0(r2)
        
    return status;
 8014214:	e0bffc17 	ldw	r2,-16(fp)
}
 8014218:	e037883a 	mov	sp,fp
 801421c:	dfc00117 	ldw	ra,4(sp)
 8014220:	df000017 	ldw	fp,0(sp)
 8014224:	dec00204 	addi	sp,sp,8
 8014228:	f800283a 	ret

0801422c <alt_avalon_i2c_cmd_write>:
/* When space is available, writes the Transfer Command FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_cmd_write(ALT_AVALON_I2C_DEV_t *i2c_dev, 
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
 801422c:	defff804 	addi	sp,sp,-32
 8014230:	dfc00715 	stw	ra,28(sp)
 8014234:	df000615 	stw	fp,24(sp)
 8014238:	df000604 	addi	fp,sp,24
 801423c:	e13ffc15 	stw	r4,-16(fp)
 8014240:	2809883a 	mov	r4,r5
 8014244:	3007883a 	mov	r3,r6
 8014248:	3805883a 	mov	r2,r7
 801424c:	e13ffd05 	stb	r4,-12(fp)
 8014250:	e0fffe05 	stb	r3,-8(fp)
 8014254:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 timeout = 10000;
 8014258:	0089c404 	movi	r2,10000
 801425c:	e0bffa15 	stw	r2,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 8014260:	e03ffb15 	stw	zero,-20(fp)


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
 8014264:	00000c06 	br	8014298 <alt_avalon_i2c_cmd_write+0x6c>
    {
      if (timeout<10) alt_busy_sleep(10000);    
 8014268:	e0bffa17 	ldw	r2,-24(fp)
 801426c:	108002a8 	cmpgeui	r2,r2,10
 8014270:	1000021e 	bne	r2,zero,801427c <alt_avalon_i2c_cmd_write+0x50>
 8014274:	0109c404 	movi	r4,10000
 8014278:	80161cc0 	call	80161cc <alt_busy_sleep>
      if (--timeout == 0)
 801427c:	e0bffa17 	ldw	r2,-24(fp)
 8014280:	10bfffc4 	addi	r2,r2,-1
 8014284:	e0bffa15 	stw	r2,-24(fp)
 8014288:	e0bffa17 	ldw	r2,-24(fp)
 801428c:	1000021e 	bne	r2,zero,8014298 <alt_avalon_i2c_cmd_write+0x6c>
      {
        return ALT_AVALON_I2C_TIMEOUT;
 8014290:	00bfff84 	movi	r2,-2
 8014294:	00001906 	br	80142fc <alt_avalon_i2c_cmd_write+0xd0>
{
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
 8014298:	e0bffc17 	ldw	r2,-16(fp)
 801429c:	10800317 	ldw	r2,12(r2)
 80142a0:	10800404 	addi	r2,r2,16
 80142a4:	10800037 	ldwio	r2,0(r2)
 80142a8:	1080004c 	andi	r2,r2,1
 80142ac:	103fee26 	beq	r2,zero,8014268 <__alt_data_end+0xfc014268>
      {
        return ALT_AVALON_I2C_TIMEOUT;
      }
    }

    IOWR_ALT_AVALON_I2C_TFR_CMD(i2c_dev->i2c_base,val |
 80142b0:	e0bffc17 	ldw	r2,-16(fp)
 80142b4:	10800317 	ldw	r2,12(r2)
 80142b8:	e13ffd03 	ldbu	r4,-12(fp)
 80142bc:	e0fffe03 	ldbu	r3,-8(fp)
 80142c0:	1806927a 	slli	r3,r3,9
 80142c4:	20c8b03a 	or	r4,r4,r3
 80142c8:	e0ffff03 	ldbu	r3,-4(fp)
 80142cc:	1806923a 	slli	r3,r3,8
 80142d0:	20c6b03a 	or	r3,r4,r3
 80142d4:	10c00035 	stwio	r3,0(r2)
                                     (issue_restart << ALT_AVALON_I2C_TFR_CMD_STA_OFST) |
                                     (issue_stop << ALT_AVALON_I2C_TFR_CMD_STO_OFST));


    /*check for nack error*/
    alt_avalon_i2c_check_nack(i2c_dev,&status);
 80142d8:	e0bffb04 	addi	r2,fp,-20
 80142dc:	100b883a 	mov	r5,r2
 80142e0:	e13ffc17 	ldw	r4,-16(fp)
 80142e4:	801446c0 	call	801446c <alt_avalon_i2c_check_nack>
    
    /*check for arb lost*/
    alt_avalon_i2c_check_arblost(i2c_dev,&status);
 80142e8:	e0bffb04 	addi	r2,fp,-20
 80142ec:	100b883a 	mov	r5,r2
 80142f0:	e13ffc17 	ldw	r4,-16(fp)
 80142f4:	80144b80 	call	80144b8 <alt_avalon_i2c_check_arblost>
    
    return status;
 80142f8:	e0bffb17 	ldw	r2,-20(fp)
}
 80142fc:	e037883a 	mov	sp,fp
 8014300:	dfc00117 	ldw	ra,4(sp)
 8014304:	df000017 	ldw	fp,0(sp)
 8014308:	dec00204 	addi	sp,sp,8
 801430c:	f800283a 	ret

08014310 <alt_avalon_i2c_send_address>:

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
 8014310:	defffa04 	addi	sp,sp,-24
 8014314:	dfc00515 	stw	ra,20(sp)
 8014318:	df000415 	stw	fp,16(sp)
 801431c:	df000404 	addi	fp,sp,16
 8014320:	e13ffd15 	stw	r4,-12(fp)
 8014324:	e17ffe15 	stw	r5,-8(fp)
 8014328:	3005883a 	mov	r2,r6
 801432c:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
 8014330:	e0bffd17 	ldw	r2,-12(fp)
 8014334:	10800d17 	ldw	r2,52(r2)
 8014338:	10800058 	cmpnei	r2,r2,1
 801433c:	10001c1e 	bne	r2,zero,80143b0 <alt_avalon_i2c_send_address+0xa0>
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
 8014340:	e0bffd17 	ldw	r2,-12(fp)
 8014344:	10800917 	ldw	r2,36(r2)
 8014348:	109e0014 	ori	r2,r2,30720
 801434c:	1004d1fa 	srli	r2,r2,7
 8014350:	1007883a 	mov	r3,r2
 8014354:	00bfff84 	movi	r2,-2
 8014358:	1884703a 	and	r2,r3,r2
 801435c:	1007883a 	mov	r3,r2
 8014360:	e0bffe17 	ldw	r2,-8(fp)
 8014364:	1884b03a 	or	r2,r3,r2
 8014368:	10803fcc 	andi	r2,r2,255
 801436c:	e0ffff03 	ldbu	r3,-4(fp)
 8014370:	000f883a 	mov	r7,zero
 8014374:	180d883a 	mov	r6,r3
 8014378:	100b883a 	mov	r5,r2
 801437c:	e13ffd17 	ldw	r4,-12(fp)
 8014380:	801422c0 	call	801422c <alt_avalon_i2c_cmd_write>
 8014384:	e0bffc15 	stw	r2,-16(fp)
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
 8014388:	e0bffd17 	ldw	r2,-12(fp)
 801438c:	10800917 	ldw	r2,36(r2)
 8014390:	10803fcc 	andi	r2,r2,255
 8014394:	000f883a 	mov	r7,zero
 8014398:	000d883a 	mov	r6,zero
 801439c:	100b883a 	mov	r5,r2
 80143a0:	e13ffd17 	ldw	r4,-12(fp)
 80143a4:	801422c0 	call	801422c <alt_avalon_i2c_cmd_write>
 80143a8:	e0bffc15 	stw	r2,-16(fp)
 80143ac:	00000e06 	br	80143e8 <alt_avalon_i2c_send_address+0xd8>
    }
    else
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
 80143b0:	e0bffd17 	ldw	r2,-12(fp)
 80143b4:	10800917 	ldw	r2,36(r2)
 80143b8:	1085883a 	add	r2,r2,r2
 80143bc:	1007883a 	mov	r3,r2
 80143c0:	e0bffe17 	ldw	r2,-8(fp)
 80143c4:	1884b03a 	or	r2,r3,r2
 80143c8:	10803fcc 	andi	r2,r2,255
 80143cc:	e0ffff03 	ldbu	r3,-4(fp)
 80143d0:	000f883a 	mov	r7,zero
 80143d4:	180d883a 	mov	r6,r3
 80143d8:	100b883a 	mov	r5,r2
 80143dc:	e13ffd17 	ldw	r4,-12(fp)
 80143e0:	801422c0 	call	801422c <alt_avalon_i2c_cmd_write>
 80143e4:	e0bffc15 	stw	r2,-16(fp)
    }
    
    return status;
 80143e8:	e0bffc17 	ldw	r2,-16(fp)
}
 80143ec:	e037883a 	mov	sp,fp
 80143f0:	dfc00117 	ldw	ra,4(sp)
 80143f4:	df000017 	ldw	fp,0(sp)
 80143f8:	dec00204 	addi	sp,sp,8
 80143fc:	f800283a 	ret

08014400 <alt_avalon_i2c_master_target_get>:

/* This function returns the current target address. */
void alt_avalon_i2c_master_target_get(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 * target_addr)
{
 8014400:	defffd04 	addi	sp,sp,-12
 8014404:	df000215 	stw	fp,8(sp)
 8014408:	df000204 	addi	fp,sp,8
 801440c:	e13ffe15 	stw	r4,-8(fp)
 8014410:	e17fff15 	stw	r5,-4(fp)
    *target_addr=i2c_dev->master_target_address;
 8014414:	e0bffe17 	ldw	r2,-8(fp)
 8014418:	10c00917 	ldw	r3,36(r2)
 801441c:	e0bfff17 	ldw	r2,-4(fp)
 8014420:	10c00015 	stw	r3,0(r2)
}
 8014424:	0001883a 	nop
 8014428:	e037883a 	mov	sp,fp
 801442c:	df000017 	ldw	fp,0(sp)
 8014430:	dec00104 	addi	sp,sp,4
 8014434:	f800283a 	ret

08014438 <alt_avalon_i2c_master_target_set>:

/* This function updates the target address for any upcoming I2C bus IO. */
void alt_avalon_i2c_master_target_set(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 target_addr)
{
 8014438:	defffd04 	addi	sp,sp,-12
 801443c:	df000215 	stw	fp,8(sp)
 8014440:	df000204 	addi	fp,sp,8
 8014444:	e13ffe15 	stw	r4,-8(fp)
 8014448:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->master_target_address=target_addr;
 801444c:	e0bffe17 	ldw	r2,-8(fp)
 8014450:	e0ffff17 	ldw	r3,-4(fp)
 8014454:	10c00915 	stw	r3,36(r2)
}
 8014458:	0001883a 	nop
 801445c:	e037883a 	mov	sp,fp
 8014460:	df000017 	ldw	fp,0(sp)
 8014464:	dec00104 	addi	sp,sp,4
 8014468:	f800283a 	ret

0801446c <alt_avalon_i2c_check_nack>:

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
 801446c:	defffd04 	addi	sp,sp,-12
 8014470:	df000215 	stw	fp,8(sp)
 8014474:	df000204 	addi	fp,sp,8
 8014478:	e13ffe15 	stw	r4,-8(fp)
 801447c:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
 8014480:	e0bffe17 	ldw	r2,-8(fp)
 8014484:	10800317 	ldw	r2,12(r2)
 8014488:	10800404 	addi	r2,r2,16
 801448c:	10800037 	ldwio	r2,0(r2)
 8014490:	1080010c 	andi	r2,r2,4
 8014494:	10000326 	beq	r2,zero,80144a4 <alt_avalon_i2c_check_nack+0x38>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
 8014498:	e0bfff17 	ldw	r2,-4(fp)
 801449c:	00fffec4 	movi	r3,-5
 80144a0:	10c00015 	stw	r3,0(r2)
    }
}
 80144a4:	0001883a 	nop
 80144a8:	e037883a 	mov	sp,fp
 80144ac:	df000017 	ldw	fp,0(sp)
 80144b0:	dec00104 	addi	sp,sp,4
 80144b4:	f800283a 	ret

080144b8 <alt_avalon_i2c_check_arblost>:

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
 80144b8:	defffd04 	addi	sp,sp,-12
 80144bc:	df000215 	stw	fp,8(sp)
 80144c0:	df000204 	addi	fp,sp,8
 80144c4:	e13ffe15 	stw	r4,-8(fp)
 80144c8:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
 80144cc:	e0bffe17 	ldw	r2,-8(fp)
 80144d0:	10800317 	ldw	r2,12(r2)
 80144d4:	10800404 	addi	r2,r2,16
 80144d8:	10800037 	ldwio	r2,0(r2)
 80144dc:	1080020c 	andi	r2,r2,8
 80144e0:	10000326 	beq	r2,zero,80144f0 <alt_avalon_i2c_check_arblost+0x38>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
 80144e4:	e0bfff17 	ldw	r2,-4(fp)
 80144e8:	00fffe84 	movi	r3,-6
 80144ec:	10c00015 	stw	r3,0(r2)
    }
}
 80144f0:	0001883a 	nop
 80144f4:	e037883a 	mov	sp,fp
 80144f8:	df000017 	ldw	fp,0(sp)
 80144fc:	dec00104 	addi	sp,sp,4
 8014500:	f800283a 	ret

08014504 <alt_avalon_i2c_interrupt_transaction_status>:

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 8014504:	defff804 	addi	sp,sp,-32
 8014508:	dfc00715 	stw	ra,28(sp)
 801450c:	df000615 	stw	fp,24(sp)
 8014510:	df000604 	addi	fp,sp,24
 8014514:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 8014518:	e03ffc15 	stw	zero,-16(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
 801451c:	e0bfff17 	ldw	r2,-4(fp)
 8014520:	10800717 	ldw	r2,28(r2)
 8014524:	e0bffb15 	stw	r2,-20(fp)
    alt_u32 timeout=10000 * irq_data->size + 10000;
 8014528:	e0bffb17 	ldw	r2,-20(fp)
 801452c:	10800117 	ldw	r2,4(r2)
 8014530:	10800044 	addi	r2,r2,1
 8014534:	0149c404 	movi	r5,10000
 8014538:	1009883a 	mov	r4,r2
 801453c:	8001b580 	call	8001b58 <__mulsi3>
 8014540:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
 8014544:	e0bffd04 	addi	r2,fp,-12
 8014548:	100b883a 	mov	r5,r2
 801454c:	e13fff17 	ldw	r4,-4(fp)
 8014550:	801539c0 	call	801539c <alt_avalon_i2c_enabled_ints_get>
    
    /* disable the enabled interrupts */
    alt_avalon_i2c_int_disable(i2c_dev,saveints);
 8014554:	e0bffd17 	ldw	r2,-12(fp)
 8014558:	100b883a 	mov	r5,r2
 801455c:	e13fff17 	ldw	r4,-4(fp)
 8014560:	80152d00 	call	80152d0 <alt_avalon_i2c_int_disable>
    
    alt_avalon_i2c_check_nack(i2c_dev,&status);
 8014564:	e0bffc04 	addi	r2,fp,-16
 8014568:	100b883a 	mov	r5,r2
 801456c:	e13fff17 	ldw	r4,-4(fp)
 8014570:	801446c0 	call	801446c <alt_avalon_i2c_check_nack>

    if (status!=ALT_AVALON_I2C_SUCCESS)
 8014574:	e0bffc17 	ldw	r2,-16(fp)
 8014578:	10002226 	beq	r2,zero,8014604 <alt_avalon_i2c_interrupt_transaction_status+0x100>
    {
      if (irq_data->irq_busy)
 801457c:	e0bffb17 	ldw	r2,-20(fp)
 8014580:	10800217 	ldw	r2,8(r2)
 8014584:	10001d26 	beq	r2,zero,80145fc <alt_avalon_i2c_interrupt_transaction_status+0xf8>
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
 8014588:	00000d06 	br	80145c0 <alt_avalon_i2c_interrupt_transaction_status+0xbc>
        {
              if (timeout<10) alt_busy_sleep(10000);
 801458c:	e0bffa17 	ldw	r2,-24(fp)
 8014590:	108002a8 	cmpgeui	r2,r2,10
 8014594:	1000021e 	bne	r2,zero,80145a0 <alt_avalon_i2c_interrupt_transaction_status+0x9c>
 8014598:	0109c404 	movi	r4,10000
 801459c:	80161cc0 	call	80161cc <alt_busy_sleep>
              if (--timeout == 0)
 80145a0:	e0bffa17 	ldw	r2,-24(fp)
 80145a4:	10bfffc4 	addi	r2,r2,-1
 80145a8:	e0bffa15 	stw	r2,-24(fp)
 80145ac:	e0bffa17 	ldw	r2,-24(fp)
 80145b0:	1000031e 	bne	r2,zero,80145c0 <alt_avalon_i2c_interrupt_transaction_status+0xbc>
              {
                 status = ALT_AVALON_I2C_TIMEOUT;
 80145b4:	00bfff84 	movi	r2,-2
 80145b8:	e0bffc15 	stw	r2,-16(fp)
                 break;
 80145bc:	00000306 	br	80145cc <alt_avalon_i2c_interrupt_transaction_status+0xc8>

    if (status!=ALT_AVALON_I2C_SUCCESS)
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
 80145c0:	e13fff17 	ldw	r4,-4(fp)
 80145c4:	80140980 	call	8014098 <alt_avalon_i2c_is_busy>
 80145c8:	103ff01e 	bne	r2,zero,801458c <__alt_data_end+0xfc01458c>
                 break;
              }
        }
          
        /*clear any rx entries */
        alt_avalon_i2c_rx_read_available(i2c_dev, irq_data->buffer,0,&temp_bytes_read);
 80145cc:	e0bffb17 	ldw	r2,-20(fp)
 80145d0:	10800017 	ldw	r2,0(r2)
 80145d4:	e0fffe04 	addi	r3,fp,-8
 80145d8:	180f883a 	mov	r7,r3
 80145dc:	000d883a 	mov	r6,zero
 80145e0:	100b883a 	mov	r5,r2
 80145e4:	e13fff17 	ldw	r4,-4(fp)
 80145e8:	80140dc0 	call	80140dc <alt_avalon_i2c_rx_read_available>
       
        /*disable the ip.  The ip is disabled and enabled for each transaction. */
        alt_avalon_i2c_disable(i2c_dev);
 80145ec:	e13fff17 	ldw	r4,-4(fp)
 80145f0:	8013d400 	call	8013d40 <alt_avalon_i2c_disable>
          
        /*abort the transaction */
        irq_data->irq_busy=0;
 80145f4:	e0bffb17 	ldw	r2,-20(fp)
 80145f8:	10000215 	stw	zero,8(r2)
      }
      
      /*return nack error so transaction can be retried*/
      return status;
 80145fc:	e0bffc17 	ldw	r2,-16(fp)
 8014600:	00000a06 	br	801462c <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    if (irq_data->irq_busy)
 8014604:	e0bffb17 	ldw	r2,-20(fp)
 8014608:	10800217 	ldw	r2,8(r2)
 801460c:	10000626 	beq	r2,zero,8014628 <alt_avalon_i2c_interrupt_transaction_status+0x124>
    {
        /*re-enable the interrupts*/
        alt_avalon_i2c_int_enable(i2c_dev,saveints);
 8014610:	e0bffd17 	ldw	r2,-12(fp)
 8014614:	100b883a 	mov	r5,r2
 8014618:	e13fff17 	ldw	r4,-4(fp)
 801461c:	80153380 	call	8015338 <alt_avalon_i2c_int_enable>
        
        /*return transaction still busy*/
        return ALT_AVALON_I2C_BUSY;
 8014620:	00bffe44 	movi	r2,-7
 8014624:	00000106 	br	801462c <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    /*return transaction completed status, ok to do another transaction*/
    return ALT_AVALON_I2C_SUCCESS;
 8014628:	0005883a 	mov	r2,zero
}
 801462c:	e037883a 	mov	sp,fp
 8014630:	dfc00117 	ldw	ra,4(sp)
 8014634:	df000017 	ldw	fp,0(sp)
 8014638:	dec00204 	addi	sp,sp,8
 801463c:	f800283a 	ret

08014640 <alt_avalon_i2c_master_tx>:
/*transmit function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_tx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       const alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
 8014640:	defff704 	addi	sp,sp,-36
 8014644:	dfc00815 	stw	ra,32(sp)
 8014648:	df000715 	stw	fp,28(sp)
 801464c:	df000704 	addi	fp,sp,28
 8014650:	e13ffc15 	stw	r4,-16(fp)
 8014654:	e17ffd15 	stw	r5,-12(fp)
 8014658:	e1bffe15 	stw	r6,-8(fp)
 801465c:	3805883a 	mov	r2,r7
 8014660:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
 8014664:	0089c404 	movi	r2,10000
 8014668:	e0bffb15 	stw	r2,-20(fp)
    
    while (retry--)
 801466c:	00002206 	br	80146f8 <alt_avalon_i2c_master_tx+0xb8>
    {
      if (retry<10) alt_busy_sleep(10000);
 8014670:	e0bffb17 	ldw	r2,-20(fp)
 8014674:	108002a8 	cmpgeui	r2,r2,10
 8014678:	1000021e 	bne	r2,zero,8014684 <alt_avalon_i2c_master_tx+0x44>
 801467c:	0109c404 	movi	r4,10000
 8014680:	80161cc0 	call	80161cc <alt_busy_sleep>
      if (use_interrupts)
 8014684:	e0bfff03 	ldbu	r2,-4(fp)
 8014688:	10000926 	beq	r2,zero,80146b0 <alt_avalon_i2c_master_tx+0x70>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
 801468c:	00800044 	movi	r2,1
 8014690:	d8800015 	stw	r2,0(sp)
 8014694:	000f883a 	mov	r7,zero
 8014698:	e1bffe17 	ldw	r6,-8(fp)
 801469c:	e17ffd17 	ldw	r5,-12(fp)
 80146a0:	e13ffc17 	ldw	r4,-16(fp)
 80146a4:	8014bec0 	call	8014bec <alt_avalon_i2c_master_transmit_using_interrupts>
 80146a8:	e0bffa15 	stw	r2,-24(fp)
 80146ac:	00000806 	br	80146d0 <alt_avalon_i2c_master_tx+0x90>
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
 80146b0:	00800044 	movi	r2,1
 80146b4:	d8800015 	stw	r2,0(sp)
 80146b8:	000f883a 	mov	r7,zero
 80146bc:	e1bffe17 	ldw	r6,-8(fp)
 80146c0:	e17ffd17 	ldw	r5,-12(fp)
 80146c4:	e13ffc17 	ldw	r4,-16(fp)
 80146c8:	8014a2c0 	call	8014a2c <alt_avalon_i2c_master_transmit>
 80146cc:	e0bffa15 	stw	r2,-24(fp)
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 80146d0:	e0bffa17 	ldw	r2,-24(fp)
 80146d4:	10bffea0 	cmpeqi	r2,r2,-6
 80146d8:	1000061e 	bne	r2,zero,80146f4 <alt_avalon_i2c_master_tx+0xb4>
 80146dc:	e0bffa17 	ldw	r2,-24(fp)
 80146e0:	10bffee0 	cmpeqi	r2,r2,-5
 80146e4:	1000031e 	bne	r2,zero,80146f4 <alt_avalon_i2c_master_tx+0xb4>
 80146e8:	e0bffa17 	ldw	r2,-24(fp)
 80146ec:	10bffe58 	cmpnei	r2,r2,-7
 80146f0:	1000061e 	bne	r2,zero,801470c <alt_avalon_i2c_master_tx+0xcc>
 80146f4:	0001883a 	nop
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
 80146f8:	e0bffb17 	ldw	r2,-20(fp)
 80146fc:	10ffffc4 	addi	r3,r2,-1
 8014700:	e0fffb15 	stw	r3,-20(fp)
 8014704:	103fda1e 	bne	r2,zero,8014670 <__alt_data_end+0xfc014670>
 8014708:	00000106 	br	8014710 <alt_avalon_i2c_master_tx+0xd0>
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
      break;
 801470c:	0001883a 	nop
    }

    return status;
 8014710:	e0bffa17 	ldw	r2,-24(fp)
}        
 8014714:	e037883a 	mov	sp,fp
 8014718:	dfc00117 	ldw	ra,4(sp)
 801471c:	df000017 	ldw	fp,0(sp)
 8014720:	dec00204 	addi	sp,sp,8
 8014724:	f800283a 	ret

08014728 <alt_avalon_i2c_master_rx>:
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
 8014728:	defff704 	addi	sp,sp,-36
 801472c:	dfc00815 	stw	ra,32(sp)
 8014730:	df000715 	stw	fp,28(sp)
 8014734:	df000704 	addi	fp,sp,28
 8014738:	e13ffc15 	stw	r4,-16(fp)
 801473c:	e17ffd15 	stw	r5,-12(fp)
 8014740:	e1bffe15 	stw	r6,-8(fp)
 8014744:	3805883a 	mov	r2,r7
 8014748:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
 801474c:	0089c404 	movi	r2,10000
 8014750:	e0bffb15 	stw	r2,-20(fp)
    
    if (use_interrupts) 
 8014754:	e0bfff03 	ldbu	r2,-4(fp)
 8014758:	10003426 	beq	r2,zero,801482c <alt_avalon_i2c_master_rx+0x104>
    {
      while (retry--) 
 801475c:	00001706 	br	80147bc <alt_avalon_i2c_master_rx+0x94>
      {
        if (retry<10) alt_busy_sleep(10000);      
 8014760:	e0bffb17 	ldw	r2,-20(fp)
 8014764:	108002a8 	cmpgeui	r2,r2,10
 8014768:	1000021e 	bne	r2,zero,8014774 <alt_avalon_i2c_master_rx+0x4c>
 801476c:	0109c404 	movi	r4,10000
 8014770:	80161cc0 	call	80161cc <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
 8014774:	00800044 	movi	r2,1
 8014778:	d8800015 	stw	r2,0(sp)
 801477c:	000f883a 	mov	r7,zero
 8014780:	e1bffe17 	ldw	r6,-8(fp)
 8014784:	e17ffd17 	ldw	r5,-12(fp)
 8014788:	e13ffc17 	ldw	r4,-16(fp)
 801478c:	80150080 	call	8015008 <alt_avalon_i2c_master_receive_using_interrupts>
 8014790:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 8014794:	e0bffa17 	ldw	r2,-24(fp)
 8014798:	10bffea0 	cmpeqi	r2,r2,-6
 801479c:	1000061e 	bne	r2,zero,80147b8 <alt_avalon_i2c_master_rx+0x90>
 80147a0:	e0bffa17 	ldw	r2,-24(fp)
 80147a4:	10bffee0 	cmpeqi	r2,r2,-5
 80147a8:	1000031e 	bne	r2,zero,80147b8 <alt_avalon_i2c_master_rx+0x90>
 80147ac:	e0bffa17 	ldw	r2,-24(fp)
 80147b0:	10bffe58 	cmpnei	r2,r2,-7
 80147b4:	1000221e 	bne	r2,zero,8014840 <alt_avalon_i2c_master_rx+0x118>
 80147b8:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    {
      while (retry--) 
 80147bc:	e0bffb17 	ldw	r2,-20(fp)
 80147c0:	10ffffc4 	addi	r3,r2,-1
 80147c4:	e0fffb15 	stw	r3,-20(fp)
 80147c8:	103fe51e 	bne	r2,zero,8014760 <__alt_data_end+0xfc014760>
 80147cc:	00001f06 	br	801484c <alt_avalon_i2c_master_rx+0x124>
    }
    else
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
 80147d0:	e0bffb17 	ldw	r2,-20(fp)
 80147d4:	108002a8 	cmpgeui	r2,r2,10
 80147d8:	1000021e 	bne	r2,zero,80147e4 <alt_avalon_i2c_master_rx+0xbc>
 80147dc:	0109c404 	movi	r4,10000
 80147e0:	80161cc0 	call	80161cc <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
 80147e4:	00800044 	movi	r2,1
 80147e8:	d8800015 	stw	r2,0(sp)
 80147ec:	000f883a 	mov	r7,zero
 80147f0:	e1bffe17 	ldw	r6,-8(fp)
 80147f4:	e17ffd17 	ldw	r5,-12(fp)
 80147f8:	e13ffc17 	ldw	r4,-16(fp)
 80147fc:	8014df80 	call	8014df8 <alt_avalon_i2c_master_receive>
 8014800:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 8014804:	e0bffa17 	ldw	r2,-24(fp)
 8014808:	10bffea0 	cmpeqi	r2,r2,-6
 801480c:	1000061e 	bne	r2,zero,8014828 <alt_avalon_i2c_master_rx+0x100>
 8014810:	e0bffa17 	ldw	r2,-24(fp)
 8014814:	10bffee0 	cmpeqi	r2,r2,-5
 8014818:	1000031e 	bne	r2,zero,8014828 <alt_avalon_i2c_master_rx+0x100>
 801481c:	e0bffa17 	ldw	r2,-24(fp)
 8014820:	10bffe58 	cmpnei	r2,r2,-7
 8014824:	1000081e 	bne	r2,zero,8014848 <alt_avalon_i2c_master_rx+0x120>
 8014828:	0001883a 	nop
        break;
      }
    }
    else
    {
      while (retry--) 
 801482c:	e0bffb17 	ldw	r2,-20(fp)
 8014830:	10ffffc4 	addi	r3,r2,-1
 8014834:	e0fffb15 	stw	r3,-20(fp)
 8014838:	103fe51e 	bne	r2,zero,80147d0 <__alt_data_end+0xfc0147d0>
 801483c:	00000306 	br	801484c <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
 8014840:	0001883a 	nop
 8014844:	00000106 	br	801484c <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
 8014848:	0001883a 	nop
      }
    }
    
    return status;
 801484c:	e0bffa17 	ldw	r2,-24(fp)
}        
 8014850:	e037883a 	mov	sp,fp
 8014854:	dfc00117 	ldw	ra,4(sp)
 8014858:	df000017 	ldw	fp,0(sp)
 801485c:	dec00204 	addi	sp,sp,8
 8014860:	f800283a 	ret

08014864 <alt_avalon_i2c_master_tx_rx>:
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
 8014864:	defff604 	addi	sp,sp,-40
 8014868:	dfc00915 	stw	ra,36(sp)
 801486c:	df000815 	stw	fp,32(sp)
 8014870:	df000804 	addi	fp,sp,32
 8014874:	e13ffb15 	stw	r4,-20(fp)
 8014878:	e17ffc15 	stw	r5,-16(fp)
 801487c:	e1bffd15 	stw	r6,-12(fp)
 8014880:	e1fffe15 	stw	r7,-8(fp)
 8014884:	e0800317 	ldw	r2,12(fp)
 8014888:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
 801488c:	0089c404 	movi	r2,10000
 8014890:	e0bffa15 	stw	r2,-24(fp)
    
    if (use_interrupts)
 8014894:	e0bfff03 	ldbu	r2,-4(fp)
 8014898:	10005626 	beq	r2,zero,80149f4 <alt_avalon_i2c_master_tx_rx+0x190>
    {
      while (retry--) 
 801489c:	00002806 	br	8014940 <alt_avalon_i2c_master_tx_rx+0xdc>
      {
        if (retry<10) alt_busy_sleep(10000);      
 80148a0:	e0bffa17 	ldw	r2,-24(fp)
 80148a4:	108002a8 	cmpgeui	r2,r2,10
 80148a8:	1000021e 	bne	r2,zero,80148b4 <alt_avalon_i2c_master_tx_rx+0x50>
 80148ac:	0109c404 	movi	r4,10000
 80148b0:	80161cc0 	call	80161cc <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
 80148b4:	d8000015 	stw	zero,0(sp)
 80148b8:	000f883a 	mov	r7,zero
 80148bc:	e1bffd17 	ldw	r6,-12(fp)
 80148c0:	e17ffc17 	ldw	r5,-16(fp)
 80148c4:	e13ffb17 	ldw	r4,-20(fp)
 80148c8:	8014bec0 	call	8014bec <alt_avalon_i2c_master_transmit_using_interrupts>
 80148cc:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 80148d0:	e0bff917 	ldw	r2,-28(fp)
 80148d4:	10bffea0 	cmpeqi	r2,r2,-6
 80148d8:	1000191e 	bne	r2,zero,8014940 <alt_avalon_i2c_master_tx_rx+0xdc>
 80148dc:	e0bff917 	ldw	r2,-28(fp)
 80148e0:	10bffee0 	cmpeqi	r2,r2,-5
 80148e4:	1000161e 	bne	r2,zero,8014940 <alt_avalon_i2c_master_tx_rx+0xdc>
 80148e8:	e0bff917 	ldw	r2,-28(fp)
 80148ec:	10bffe58 	cmpnei	r2,r2,-7
 80148f0:	1000011e 	bne	r2,zero,80148f8 <alt_avalon_i2c_master_tx_rx+0x94>
 80148f4:	00001206 	br	8014940 <alt_avalon_i2c_master_tx_rx+0xdc>
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
 80148f8:	00800044 	movi	r2,1
 80148fc:	d8800015 	stw	r2,0(sp)
 8014900:	01c00044 	movi	r7,1
 8014904:	e1800217 	ldw	r6,8(fp)
 8014908:	e17ffe17 	ldw	r5,-8(fp)
 801490c:	e13ffb17 	ldw	r4,-20(fp)
 8014910:	80150080 	call	8015008 <alt_avalon_i2c_master_receive_using_interrupts>
 8014914:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 8014918:	e0bff917 	ldw	r2,-28(fp)
 801491c:	10bffea0 	cmpeqi	r2,r2,-6
 8014920:	1000061e 	bne	r2,zero,801493c <alt_avalon_i2c_master_tx_rx+0xd8>
 8014924:	e0bff917 	ldw	r2,-28(fp)
 8014928:	10bffee0 	cmpeqi	r2,r2,-5
 801492c:	1000031e 	bne	r2,zero,801493c <alt_avalon_i2c_master_tx_rx+0xd8>
 8014930:	e0bff917 	ldw	r2,-28(fp)
 8014934:	10bffe58 	cmpnei	r2,r2,-7
 8014938:	1000331e 	bne	r2,zero,8014a08 <alt_avalon_i2c_master_tx_rx+0x1a4>
 801493c:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    {
      while (retry--) 
 8014940:	e0bffa17 	ldw	r2,-24(fp)
 8014944:	10ffffc4 	addi	r3,r2,-1
 8014948:	e0fffa15 	stw	r3,-24(fp)
 801494c:	103fd41e 	bne	r2,zero,80148a0 <__alt_data_end+0xfc0148a0>
 8014950:	00003006 	br	8014a14 <alt_avalon_i2c_master_tx_rx+0x1b0>
    }
    else 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
 8014954:	e0bffa17 	ldw	r2,-24(fp)
 8014958:	108002a8 	cmpgeui	r2,r2,10
 801495c:	1000021e 	bne	r2,zero,8014968 <alt_avalon_i2c_master_tx_rx+0x104>
 8014960:	0109c404 	movi	r4,10000
 8014964:	80161cc0 	call	80161cc <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
 8014968:	d8000015 	stw	zero,0(sp)
 801496c:	000f883a 	mov	r7,zero
 8014970:	e1bffd17 	ldw	r6,-12(fp)
 8014974:	e17ffc17 	ldw	r5,-16(fp)
 8014978:	e13ffb17 	ldw	r4,-20(fp)
 801497c:	8014a2c0 	call	8014a2c <alt_avalon_i2c_master_transmit>
 8014980:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 8014984:	e0bff917 	ldw	r2,-28(fp)
 8014988:	10bffea0 	cmpeqi	r2,r2,-6
 801498c:	1000191e 	bne	r2,zero,80149f4 <alt_avalon_i2c_master_tx_rx+0x190>
 8014990:	e0bff917 	ldw	r2,-28(fp)
 8014994:	10bffee0 	cmpeqi	r2,r2,-5
 8014998:	1000161e 	bne	r2,zero,80149f4 <alt_avalon_i2c_master_tx_rx+0x190>
 801499c:	e0bff917 	ldw	r2,-28(fp)
 80149a0:	10bffe58 	cmpnei	r2,r2,-7
 80149a4:	1000011e 	bne	r2,zero,80149ac <alt_avalon_i2c_master_tx_rx+0x148>
 80149a8:	00001206 	br	80149f4 <alt_avalon_i2c_master_tx_rx+0x190>

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
 80149ac:	00800044 	movi	r2,1
 80149b0:	d8800015 	stw	r2,0(sp)
 80149b4:	01c00044 	movi	r7,1
 80149b8:	e1800217 	ldw	r6,8(fp)
 80149bc:	e17ffe17 	ldw	r5,-8(fp)
 80149c0:	e13ffb17 	ldw	r4,-20(fp)
 80149c4:	8014df80 	call	8014df8 <alt_avalon_i2c_master_receive>
 80149c8:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 80149cc:	e0bff917 	ldw	r2,-28(fp)
 80149d0:	10bffea0 	cmpeqi	r2,r2,-6
 80149d4:	1000061e 	bne	r2,zero,80149f0 <alt_avalon_i2c_master_tx_rx+0x18c>
 80149d8:	e0bff917 	ldw	r2,-28(fp)
 80149dc:	10bffee0 	cmpeqi	r2,r2,-5
 80149e0:	1000031e 	bne	r2,zero,80149f0 <alt_avalon_i2c_master_tx_rx+0x18c>
 80149e4:	e0bff917 	ldw	r2,-28(fp)
 80149e8:	10bffe58 	cmpnei	r2,r2,-7
 80149ec:	1000081e 	bne	r2,zero,8014a10 <alt_avalon_i2c_master_tx_rx+0x1ac>
 80149f0:	0001883a 	nop
        break;
      }
    }
    else 
    {
      while (retry--) 
 80149f4:	e0bffa17 	ldw	r2,-24(fp)
 80149f8:	10ffffc4 	addi	r3,r2,-1
 80149fc:	e0fffa15 	stw	r3,-24(fp)
 8014a00:	103fd41e 	bne	r2,zero,8014954 <__alt_data_end+0xfc014954>
 8014a04:	00000306 	br	8014a14 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
 8014a08:	0001883a 	nop
 8014a0c:	00000106 	br	8014a14 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
 8014a10:	0001883a 	nop
      }
    }
    
    return status;
 8014a14:	e0bff917 	ldw	r2,-28(fp)
}                                       
 8014a18:	e037883a 	mov	sp,fp
 8014a1c:	dfc00117 	ldw	ra,4(sp)
 8014a20:	df000017 	ldw	fp,0(sp)
 8014a24:	dec00204 	addi	sp,sp,8
 8014a28:	f800283a 	ret

08014a2c <alt_avalon_i2c_master_transmit>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
 8014a2c:	defff704 	addi	sp,sp,-36
 8014a30:	dfc00815 	stw	ra,32(sp)
 8014a34:	df000715 	stw	fp,28(sp)
 8014a38:	df000704 	addi	fp,sp,28
 8014a3c:	e13ffb15 	stw	r4,-20(fp)
 8014a40:	e17ffc15 	stw	r5,-16(fp)
 8014a44:	e1bffd15 	stw	r6,-12(fp)
 8014a48:	3807883a 	mov	r3,r7
 8014a4c:	e0800217 	ldw	r2,8(fp)
 8014a50:	e0fffe05 	stb	r3,-8(fp)
 8014a54:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 8014a58:	e03ffa15 	stw	zero,-24(fp)
    alt_u32 timeout=size * 10000;
 8014a5c:	0149c404 	movi	r5,10000
 8014a60:	e13ffd17 	ldw	r4,-12(fp)
 8014a64:	8001b580 	call	8001b58 <__mulsi3>
 8014a68:	e0bff915 	stw	r2,-28(fp)
    
    if (size==0)
 8014a6c:	e0bffd17 	ldw	r2,-12(fp)
 8014a70:	1000021e 	bne	r2,zero,8014a7c <alt_avalon_i2c_master_transmit+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
 8014a74:	0005883a 	mov	r2,zero
 8014a78:	00005706 	br	8014bd8 <alt_avalon_i2c_master_transmit+0x1ac>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 8014a7c:	e0bffe03 	ldbu	r2,-8(fp)
 8014a80:	10000a1e 	bne	r2,zero,8014aac <alt_avalon_i2c_master_transmit+0x80>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 8014a84:	e13ffb17 	ldw	r4,-20(fp)
 8014a88:	8013ca80 	call	8013ca8 <alt_avalon_i2c_enable>
 8014a8c:	e0bffa15 	stw	r2,-24(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 8014a90:	e0bffa17 	ldw	r2,-24(fp)
 8014a94:	10000226 	beq	r2,zero,8014aa0 <alt_avalon_i2c_master_transmit+0x74>
      {
        return status;
 8014a98:	e0bffa17 	ldw	r2,-24(fp)
 8014a9c:	00004e06 	br	8014bd8 <alt_avalon_i2c_master_transmit+0x1ac>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 8014aa0:	01400704 	movi	r5,28
 8014aa4:	e13ffb17 	ldw	r4,-20(fp)
 8014aa8:	80152940 	call	8015294 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
 8014aac:	e0bffe03 	ldbu	r2,-8(fp)
 8014ab0:	100d883a 	mov	r6,r2
 8014ab4:	000b883a 	mov	r5,zero
 8014ab8:	e13ffb17 	ldw	r4,-20(fp)
 8014abc:	80143100 	call	8014310 <alt_avalon_i2c_send_address>
 8014ac0:	e0bffa15 	stw	r2,-24(fp)
      
    if (status == ALT_AVALON_I2C_SUCCESS)
 8014ac4:	e0bffa17 	ldw	r2,-24(fp)
 8014ac8:	1000271e 	bne	r2,zero,8014b68 <alt_avalon_i2c_master_transmit+0x13c>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 8014acc:	00000f06 	br	8014b0c <alt_avalon_i2c_master_transmit+0xe0>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 8014ad0:	e0bffc17 	ldw	r2,-16(fp)
 8014ad4:	10800003 	ldbu	r2,0(r2)
 8014ad8:	10803fcc 	andi	r2,r2,255
 8014adc:	000f883a 	mov	r7,zero
 8014ae0:	000d883a 	mov	r6,zero
 8014ae4:	100b883a 	mov	r5,r2
 8014ae8:	e13ffb17 	ldw	r4,-20(fp)
 8014aec:	801422c0 	call	801422c <alt_avalon_i2c_cmd_write>
 8014af0:	e0bffa15 	stw	r2,-24(fp)
            
            ++buffer;
 8014af4:	e0bffc17 	ldw	r2,-16(fp)
 8014af8:	10800044 	addi	r2,r2,1
 8014afc:	e0bffc15 	stw	r2,-16(fp)
            --size;
 8014b00:	e0bffd17 	ldw	r2,-12(fp)
 8014b04:	10bfffc4 	addi	r2,r2,-1
 8014b08:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
      
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 8014b0c:	e0bffd17 	ldw	r2,-12(fp)
 8014b10:	108000b0 	cmpltui	r2,r2,2
 8014b14:	1000021e 	bne	r2,zero,8014b20 <alt_avalon_i2c_master_transmit+0xf4>
 8014b18:	e0bffa17 	ldw	r2,-24(fp)
 8014b1c:	103fec26 	beq	r2,zero,8014ad0 <__alt_data_end+0xfc014ad0>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 8014b20:	e0bffa17 	ldw	r2,-24(fp)
 8014b24:	1000101e 	bne	r2,zero,8014b68 <alt_avalon_i2c_master_transmit+0x13c>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 8014b28:	e0bffc17 	ldw	r2,-16(fp)
 8014b2c:	10800003 	ldbu	r2,0(r2)
 8014b30:	10803fcc 	andi	r2,r2,255
 8014b34:	e0ffff03 	ldbu	r3,-4(fp)
 8014b38:	180f883a 	mov	r7,r3
 8014b3c:	000d883a 	mov	r6,zero
 8014b40:	100b883a 	mov	r5,r2
 8014b44:	e13ffb17 	ldw	r4,-20(fp)
 8014b48:	801422c0 	call	801422c <alt_avalon_i2c_cmd_write>
 8014b4c:	e0bffa15 	stw	r2,-24(fp)

            ++buffer;
 8014b50:	e0bffc17 	ldw	r2,-16(fp)
 8014b54:	10800044 	addi	r2,r2,1
 8014b58:	e0bffc15 	stw	r2,-16(fp)
            --size;
 8014b5c:	e0bffd17 	ldw	r2,-12(fp)
 8014b60:	10bfffc4 	addi	r2,r2,-1
 8014b64:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
 8014b68:	e0bfff03 	ldbu	r2,-4(fp)
 8014b6c:	1000101e 	bne	r2,zero,8014bb0 <alt_avalon_i2c_master_transmit+0x184>
 8014b70:	e0bffa17 	ldw	r2,-24(fp)
 8014b74:	10001726 	beq	r2,zero,8014bd4 <alt_avalon_i2c_master_transmit+0x1a8>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 8014b78:	00000d06 	br	8014bb0 <alt_avalon_i2c_master_transmit+0x184>
        {
            if (timeout<10) alt_busy_sleep(10000);
 8014b7c:	e0bff917 	ldw	r2,-28(fp)
 8014b80:	108002a8 	cmpgeui	r2,r2,10
 8014b84:	1000021e 	bne	r2,zero,8014b90 <alt_avalon_i2c_master_transmit+0x164>
 8014b88:	0109c404 	movi	r4,10000
 8014b8c:	80161cc0 	call	80161cc <alt_busy_sleep>
            if (--timeout == 0)
 8014b90:	e0bff917 	ldw	r2,-28(fp)
 8014b94:	10bfffc4 	addi	r2,r2,-1
 8014b98:	e0bff915 	stw	r2,-28(fp)
 8014b9c:	e0bff917 	ldw	r2,-28(fp)
 8014ba0:	1000031e 	bne	r2,zero,8014bb0 <alt_avalon_i2c_master_transmit+0x184>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 8014ba4:	00bfff84 	movi	r2,-2
 8014ba8:	e0bffa15 	stw	r2,-24(fp)
               break;
 8014bac:	00000306 	br	8014bbc <alt_avalon_i2c_master_transmit+0x190>
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 8014bb0:	e13ffb17 	ldw	r4,-20(fp)
 8014bb4:	80140980 	call	8014098 <alt_avalon_i2c_is_busy>
 8014bb8:	103ff01e 	bne	r2,zero,8014b7c <__alt_data_end+0xfc014b7c>
               break;
            }
        }
     
        /*check for a nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);
 8014bbc:	e0bffa04 	addi	r2,fp,-24
 8014bc0:	100b883a 	mov	r5,r2
 8014bc4:	e13ffb17 	ldw	r4,-20(fp)
 8014bc8:	801446c0 	call	801446c <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 8014bcc:	e13ffb17 	ldw	r4,-20(fp)
 8014bd0:	8013d400 	call	8013d40 <alt_avalon_i2c_disable>
    }


    return status;
 8014bd4:	e0bffa17 	ldw	r2,-24(fp)
}
 8014bd8:	e037883a 	mov	sp,fp
 8014bdc:	dfc00117 	ldw	ra,4(sp)
 8014be0:	df000017 	ldw	fp,0(sp)
 8014be4:	dec00204 	addi	sp,sp,8
 8014be8:	f800283a 	ret

08014bec <alt_avalon_i2c_master_transmit_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
 8014bec:	defff604 	addi	sp,sp,-40
 8014bf0:	dfc00915 	stw	ra,36(sp)
 8014bf4:	df000815 	stw	fp,32(sp)
 8014bf8:	df000804 	addi	fp,sp,32
 8014bfc:	e13ffb15 	stw	r4,-20(fp)
 8014c00:	e17ffc15 	stw	r5,-16(fp)
 8014c04:	e1bffd15 	stw	r6,-12(fp)
 8014c08:	3807883a 	mov	r3,r7
 8014c0c:	e0800217 	ldw	r2,8(fp)
 8014c10:	e0fffe05 	stb	r3,-8(fp)
 8014c14:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 8014c18:	e03ff815 	stw	zero,-32(fp)
    alt_u32 timeout=size*10000;
 8014c1c:	0149c404 	movi	r5,10000
 8014c20:	e13ffd17 	ldw	r4,-12(fp)
 8014c24:	8001b580 	call	8001b58 <__mulsi3>
 8014c28:	e0bff915 	stw	r2,-28(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
 8014c2c:	e0bffb17 	ldw	r2,-20(fp)
 8014c30:	10800717 	ldw	r2,28(r2)
 8014c34:	e0bffa15 	stw	r2,-24(fp)
    
    if (size==0)
 8014c38:	e0bffd17 	ldw	r2,-12(fp)
 8014c3c:	1000021e 	bne	r2,zero,8014c48 <alt_avalon_i2c_master_transmit_using_interrupts+0x5c>
    {
      return ALT_AVALON_I2C_SUCCESS;
 8014c40:	0005883a 	mov	r2,zero
 8014c44:	00006706 	br	8014de4 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
 8014c48:	e0bffb17 	ldw	r2,-20(fp)
 8014c4c:	10c00617 	ldw	r3,24(r2)
 8014c50:	00820074 	movhi	r2,2049
 8014c54:	108e4b04 	addi	r2,r2,14636
 8014c58:	18800226 	beq	r3,r2,8014c64 <alt_avalon_i2c_master_transmit_using_interrupts+0x78>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
 8014c5c:	00bfff44 	movi	r2,-3
 8014c60:	00006006 	br	8014de4 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 8014c64:	e0bffe03 	ldbu	r2,-8(fp)
 8014c68:	10000a1e 	bne	r2,zero,8014c94 <alt_avalon_i2c_master_transmit_using_interrupts+0xa8>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 8014c6c:	e13ffb17 	ldw	r4,-20(fp)
 8014c70:	8013ca80 	call	8013ca8 <alt_avalon_i2c_enable>
 8014c74:	e0bff815 	stw	r2,-32(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 8014c78:	e0bff817 	ldw	r2,-32(fp)
 8014c7c:	10000226 	beq	r2,zero,8014c88 <alt_avalon_i2c_master_transmit_using_interrupts+0x9c>
      {
        return status;
 8014c80:	e0bff817 	ldw	r2,-32(fp)
 8014c84:	00005706 	br	8014de4 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 8014c88:	01400704 	movi	r5,28
 8014c8c:	e13ffb17 	ldw	r4,-20(fp)
 8014c90:	80152940 	call	8015294 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
 8014c94:	e0bffe03 	ldbu	r2,-8(fp)
 8014c98:	100d883a 	mov	r6,r2
 8014c9c:	000b883a 	mov	r5,zero
 8014ca0:	e13ffb17 	ldw	r4,-20(fp)
 8014ca4:	80143100 	call	8014310 <alt_avalon_i2c_send_address>
 8014ca8:	e0bff815 	stw	r2,-32(fp)
        
    if (status == ALT_AVALON_I2C_SUCCESS)
 8014cac:	e0bff817 	ldw	r2,-32(fp)
 8014cb0:	1000271e 	bne	r2,zero,8014d50 <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 8014cb4:	00000f06 	br	8014cf4 <alt_avalon_i2c_master_transmit_using_interrupts+0x108>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 8014cb8:	e0bffc17 	ldw	r2,-16(fp)
 8014cbc:	10800003 	ldbu	r2,0(r2)
 8014cc0:	10803fcc 	andi	r2,r2,255
 8014cc4:	000f883a 	mov	r7,zero
 8014cc8:	000d883a 	mov	r6,zero
 8014ccc:	100b883a 	mov	r5,r2
 8014cd0:	e13ffb17 	ldw	r4,-20(fp)
 8014cd4:	801422c0 	call	801422c <alt_avalon_i2c_cmd_write>
 8014cd8:	e0bff815 	stw	r2,-32(fp)
            
            ++buffer;
 8014cdc:	e0bffc17 	ldw	r2,-16(fp)
 8014ce0:	10800044 	addi	r2,r2,1
 8014ce4:	e0bffc15 	stw	r2,-16(fp)
            --size;
 8014ce8:	e0bffd17 	ldw	r2,-12(fp)
 8014cec:	10bfffc4 	addi	r2,r2,-1
 8014cf0:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
        
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 8014cf4:	e0bffd17 	ldw	r2,-12(fp)
 8014cf8:	108000b0 	cmpltui	r2,r2,2
 8014cfc:	1000021e 	bne	r2,zero,8014d08 <alt_avalon_i2c_master_transmit_using_interrupts+0x11c>
 8014d00:	e0bff817 	ldw	r2,-32(fp)
 8014d04:	103fec26 	beq	r2,zero,8014cb8 <__alt_data_end+0xfc014cb8>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 8014d08:	e0bff817 	ldw	r2,-32(fp)
 8014d0c:	1000101e 	bne	r2,zero,8014d50 <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 8014d10:	e0bffc17 	ldw	r2,-16(fp)
 8014d14:	10800003 	ldbu	r2,0(r2)
 8014d18:	10803fcc 	andi	r2,r2,255
 8014d1c:	e0ffff03 	ldbu	r3,-4(fp)
 8014d20:	180f883a 	mov	r7,r3
 8014d24:	000d883a 	mov	r6,zero
 8014d28:	100b883a 	mov	r5,r2
 8014d2c:	e13ffb17 	ldw	r4,-20(fp)
 8014d30:	801422c0 	call	801422c <alt_avalon_i2c_cmd_write>
 8014d34:	e0bff815 	stw	r2,-32(fp)

            ++buffer;
 8014d38:	e0bffc17 	ldw	r2,-16(fp)
 8014d3c:	10800044 	addi	r2,r2,1
 8014d40:	e0bffc15 	stw	r2,-16(fp)
            --size;
 8014d44:	e0bffd17 	ldw	r2,-12(fp)
 8014d48:	10bfffc4 	addi	r2,r2,-1
 8014d4c:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
 8014d50:	e0bff817 	ldw	r2,-32(fp)
 8014d54:	10001426 	beq	r2,zero,8014da8 <alt_avalon_i2c_master_transmit_using_interrupts+0x1bc>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 8014d58:	00000d06 	br	8014d90 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
        {
            if (timeout<10) alt_busy_sleep(10000);        
 8014d5c:	e0bff917 	ldw	r2,-28(fp)
 8014d60:	108002a8 	cmpgeui	r2,r2,10
 8014d64:	1000021e 	bne	r2,zero,8014d70 <alt_avalon_i2c_master_transmit_using_interrupts+0x184>
 8014d68:	0109c404 	movi	r4,10000
 8014d6c:	80161cc0 	call	80161cc <alt_busy_sleep>
            if (--timeout == 0)
 8014d70:	e0bff917 	ldw	r2,-28(fp)
 8014d74:	10bfffc4 	addi	r2,r2,-1
 8014d78:	e0bff915 	stw	r2,-28(fp)
 8014d7c:	e0bff917 	ldw	r2,-28(fp)
 8014d80:	1000031e 	bne	r2,zero,8014d90 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 8014d84:	00bfff84 	movi	r2,-2
 8014d88:	e0bff815 	stw	r2,-32(fp)
               break;
 8014d8c:	00000306 	br	8014d9c <alt_avalon_i2c_master_transmit_using_interrupts+0x1b0>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 8014d90:	e13ffb17 	ldw	r4,-20(fp)
 8014d94:	80140980 	call	8014098 <alt_avalon_i2c_is_busy>
 8014d98:	103ff01e 	bne	r2,zero,8014d5c <__alt_data_end+0xfc014d5c>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 8014d9c:	e13ffb17 	ldw	r4,-20(fp)
 8014da0:	8013d400 	call	8013d40 <alt_avalon_i2c_disable>
 8014da4:	00000e06 	br	8014de0 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    else
    {
       if (issue_stop)
 8014da8:	e0bfff03 	ldbu	r2,-4(fp)
 8014dac:	10000c26 	beq	r2,zero,8014de0 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 8014db0:	01400704 	movi	r5,28
 8014db4:	e13ffb17 	ldw	r4,-20(fp)
 8014db8:	80152940 	call	8015294 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_tfr_cmd_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_TFR_CMD_FIFO_EMPTY);
 8014dbc:	000b883a 	mov	r5,zero
 8014dc0:	e13ffb17 	ldw	r4,-20(fp)
 8014dc4:	80154dc0 	call	80154dc <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
         /* set the interrupt transaction busy bit */
         irq_data->irq_busy=1;
 8014dc8:	e0bffa17 	ldw	r2,-24(fp)
 8014dcc:	00c00044 	movi	r3,1
 8014dd0:	10c00215 	stw	r3,8(r2)
         /* enable the TX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
 8014dd4:	01400044 	movi	r5,1
 8014dd8:	e13ffb17 	ldw	r4,-20(fp)
 8014ddc:	80153380 	call	8015338 <alt_avalon_i2c_int_enable>
       }
    }
    
    return status;
 8014de0:	e0bff817 	ldw	r2,-32(fp)
}
 8014de4:	e037883a 	mov	sp,fp
 8014de8:	dfc00117 	ldw	ra,4(sp)
 8014dec:	df000017 	ldw	fp,0(sp)
 8014df0:	dec00204 	addi	sp,sp,8
 8014df4:	f800283a 	ret

08014df8 <alt_avalon_i2c_master_receive>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
 8014df8:	defff404 	addi	sp,sp,-48
 8014dfc:	dfc00b15 	stw	ra,44(sp)
 8014e00:	df000a15 	stw	fp,40(sp)
 8014e04:	df000a04 	addi	fp,sp,40
 8014e08:	e13ffb15 	stw	r4,-20(fp)
 8014e0c:	e17ffc15 	stw	r5,-16(fp)
 8014e10:	e1bffd15 	stw	r6,-12(fp)
 8014e14:	3807883a 	mov	r3,r7
 8014e18:	e0800217 	ldw	r2,8(fp)
 8014e1c:	e0fffe05 	stb	r3,-8(fp)
 8014e20:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 8014e24:	e03ff915 	stw	zero,-28(fp)
    alt_u32 timeout;
    alt_u32 bytes_read=0;
 8014e28:	e03ff715 	stw	zero,-36(fp)
    alt_u32 bytes_written=0;
 8014e2c:	e03ff815 	stw	zero,-32(fp)
    alt_u32 temp_bytes_read;
    
    if (size==0)
 8014e30:	e0bffd17 	ldw	r2,-12(fp)
 8014e34:	1000021e 	bne	r2,zero,8014e40 <alt_avalon_i2c_master_receive+0x48>
    {
      return ALT_AVALON_I2C_SUCCESS;
 8014e38:	0005883a 	mov	r2,zero
 8014e3c:	00006d06 	br	8014ff4 <alt_avalon_i2c_master_receive+0x1fc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 8014e40:	e0bffe03 	ldbu	r2,-8(fp)
 8014e44:	10000a1e 	bne	r2,zero,8014e70 <alt_avalon_i2c_master_receive+0x78>
    {
       /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 8014e48:	e13ffb17 	ldw	r4,-20(fp)
 8014e4c:	8013ca80 	call	8013ca8 <alt_avalon_i2c_enable>
 8014e50:	e0bff915 	stw	r2,-28(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 8014e54:	e0bff917 	ldw	r2,-28(fp)
 8014e58:	10000226 	beq	r2,zero,8014e64 <alt_avalon_i2c_master_receive+0x6c>
      {
        return status;
 8014e5c:	e0bff917 	ldw	r2,-28(fp)
 8014e60:	00006406 	br	8014ff4 <alt_avalon_i2c_master_receive+0x1fc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 8014e64:	01400704 	movi	r5,28
 8014e68:	e13ffb17 	ldw	r4,-20(fp)
 8014e6c:	80152940 	call	8015294 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
 8014e70:	e0bffe03 	ldbu	r2,-8(fp)
 8014e74:	100d883a 	mov	r6,r2
 8014e78:	01400044 	movi	r5,1
 8014e7c:	e13ffb17 	ldw	r4,-20(fp)
 8014e80:	80143100 	call	8014310 <alt_avalon_i2c_send_address>
 8014e84:	e0bff915 	stw	r2,-28(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
 8014e88:	e0bff917 	ldw	r2,-28(fp)
 8014e8c:	1000341e 	bne	r2,zero,8014f60 <alt_avalon_i2c_master_receive+0x168>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 8014e90:	00001906 	br	8014ef8 <alt_avalon_i2c_master_receive+0x100>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 8014e94:	000f883a 	mov	r7,zero
 8014e98:	000d883a 	mov	r6,zero
 8014e9c:	000b883a 	mov	r5,zero
 8014ea0:	e13ffb17 	ldw	r4,-20(fp)
 8014ea4:	801422c0 	call	801422c <alt_avalon_i2c_cmd_write>
 8014ea8:	e0bff915 	stw	r2,-28(fp)
            bytes_written++;
 8014eac:	e0bff817 	ldw	r2,-32(fp)
 8014eb0:	10800044 	addi	r2,r2,1
 8014eb4:	e0bff815 	stw	r2,-32(fp)
            if (status == ALT_AVALON_I2C_SUCCESS)
 8014eb8:	e0bff917 	ldw	r2,-28(fp)
 8014ebc:	10000e1e 	bne	r2,zero,8014ef8 <alt_avalon_i2c_master_receive+0x100>
            {
               alt_avalon_i2c_rx_read_available(i2c_dev, buffer,0,&temp_bytes_read);
 8014ec0:	e0bffa04 	addi	r2,fp,-24
 8014ec4:	100f883a 	mov	r7,r2
 8014ec8:	000d883a 	mov	r6,zero
 8014ecc:	e17ffc17 	ldw	r5,-16(fp)
 8014ed0:	e13ffb17 	ldw	r4,-20(fp)
 8014ed4:	80140dc0 	call	80140dc <alt_avalon_i2c_rx_read_available>
               buffer+=temp_bytes_read;
 8014ed8:	e0bffa17 	ldw	r2,-24(fp)
 8014edc:	e0fffc17 	ldw	r3,-16(fp)
 8014ee0:	1885883a 	add	r2,r3,r2
 8014ee4:	e0bffc15 	stw	r2,-16(fp)
               bytes_read+=temp_bytes_read;
 8014ee8:	e0bffa17 	ldw	r2,-24(fp)
 8014eec:	e0fff717 	ldw	r3,-36(fp)
 8014ef0:	1885883a 	add	r2,r3,r2
 8014ef4:	e0bff715 	stw	r2,-36(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 8014ef8:	e0bffd17 	ldw	r2,-12(fp)
 8014efc:	10bfffc4 	addi	r2,r2,-1
 8014f00:	e0fff817 	ldw	r3,-32(fp)
 8014f04:	1880022e 	bgeu	r3,r2,8014f10 <alt_avalon_i2c_master_receive+0x118>
 8014f08:	e0bff917 	ldw	r2,-28(fp)
 8014f0c:	103fe126 	beq	r2,zero,8014e94 <__alt_data_end+0xfc014e94>
               bytes_read+=temp_bytes_read;
            }
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 8014f10:	e0bff917 	ldw	r2,-28(fp)
 8014f14:	1000121e 	bne	r2,zero,8014f60 <alt_avalon_i2c_master_receive+0x168>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 8014f18:	e0bfff03 	ldbu	r2,-4(fp)
 8014f1c:	100f883a 	mov	r7,r2
 8014f20:	000d883a 	mov	r6,zero
 8014f24:	000b883a 	mov	r5,zero
 8014f28:	e13ffb17 	ldw	r4,-20(fp)
 8014f2c:	801422c0 	call	801422c <alt_avalon_i2c_cmd_write>
 8014f30:	e0bff915 	stw	r2,-28(fp)
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
 8014f34:	00000a06 	br	8014f60 <alt_avalon_i2c_master_receive+0x168>
    {
        status=alt_avalon_i2c_rx_read(i2c_dev, buffer);
 8014f38:	e17ffc17 	ldw	r5,-16(fp)
 8014f3c:	e13ffb17 	ldw	r4,-20(fp)
 8014f40:	80141840 	call	8014184 <alt_avalon_i2c_rx_read>
 8014f44:	e0bff915 	stw	r2,-28(fp)
        buffer++;
 8014f48:	e0bffc17 	ldw	r2,-16(fp)
 8014f4c:	10800044 	addi	r2,r2,1
 8014f50:	e0bffc15 	stw	r2,-16(fp)
        bytes_read++;
 8014f54:	e0bff717 	ldw	r2,-36(fp)
 8014f58:	10800044 	addi	r2,r2,1
 8014f5c:	e0bff715 	stw	r2,-36(fp)
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
 8014f60:	e0fff717 	ldw	r3,-36(fp)
 8014f64:	e0bffd17 	ldw	r2,-12(fp)
 8014f68:	1880022e 	bgeu	r3,r2,8014f74 <alt_avalon_i2c_master_receive+0x17c>
 8014f6c:	e0bff917 	ldw	r2,-28(fp)
 8014f70:	103ff126 	beq	r2,zero,8014f38 <__alt_data_end+0xfc014f38>
        buffer++;
        bytes_read++;
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
 8014f74:	e0bfff03 	ldbu	r2,-4(fp)
 8014f78:	1000021e 	bne	r2,zero,8014f84 <alt_avalon_i2c_master_receive+0x18c>
 8014f7c:	e0bff917 	ldw	r2,-28(fp)
 8014f80:	10001b26 	beq	r2,zero,8014ff0 <alt_avalon_i2c_master_receive+0x1f8>
    {
        timeout=10000 * size;
 8014f84:	0149c404 	movi	r5,10000
 8014f88:	e13ffd17 	ldw	r4,-12(fp)
 8014f8c:	8001b580 	call	8001b58 <__mulsi3>
 8014f90:	e0bff615 	stw	r2,-40(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
 8014f94:	00000d06 	br	8014fcc <alt_avalon_i2c_master_receive+0x1d4>
        {
            if (timeout<10) alt_busy_sleep(10000);
 8014f98:	e0bff617 	ldw	r2,-40(fp)
 8014f9c:	108002a8 	cmpgeui	r2,r2,10
 8014fa0:	1000021e 	bne	r2,zero,8014fac <alt_avalon_i2c_master_receive+0x1b4>
 8014fa4:	0109c404 	movi	r4,10000
 8014fa8:	80161cc0 	call	80161cc <alt_busy_sleep>
            if (--timeout == 0)
 8014fac:	e0bff617 	ldw	r2,-40(fp)
 8014fb0:	10bfffc4 	addi	r2,r2,-1
 8014fb4:	e0bff615 	stw	r2,-40(fp)
 8014fb8:	e0bff617 	ldw	r2,-40(fp)
 8014fbc:	1000031e 	bne	r2,zero,8014fcc <alt_avalon_i2c_master_receive+0x1d4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 8014fc0:	00bfff84 	movi	r2,-2
 8014fc4:	e0bff915 	stw	r2,-28(fp)
               break;
 8014fc8:	00000306 	br	8014fd8 <alt_avalon_i2c_master_receive+0x1e0>

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
 8014fcc:	e13ffb17 	ldw	r4,-20(fp)
 8014fd0:	80140980 	call	8014098 <alt_avalon_i2c_is_busy>
 8014fd4:	103ff01e 	bne	r2,zero,8014f98 <__alt_data_end+0xfc014f98>
               break;
            }
        }

        /*check for nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);    
 8014fd8:	e0bff904 	addi	r2,fp,-28
 8014fdc:	100b883a 	mov	r5,r2
 8014fe0:	e13ffb17 	ldw	r4,-20(fp)
 8014fe4:	801446c0 	call	801446c <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 8014fe8:	e13ffb17 	ldw	r4,-20(fp)
 8014fec:	8013d400 	call	8013d40 <alt_avalon_i2c_disable>
    }

    return status;
 8014ff0:	e0bff917 	ldw	r2,-28(fp)
}
 8014ff4:	e037883a 	mov	sp,fp
 8014ff8:	dfc00117 	ldw	ra,4(sp)
 8014ffc:	df000017 	ldw	fp,0(sp)
 8015000:	dec00204 	addi	sp,sp,8
 8015004:	f800283a 	ret

08015008 <alt_avalon_i2c_master_receive_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
 8015008:	defff504 	addi	sp,sp,-44
 801500c:	dfc00a15 	stw	ra,40(sp)
 8015010:	df000915 	stw	fp,36(sp)
 8015014:	df000904 	addi	fp,sp,36
 8015018:	e13ffb15 	stw	r4,-20(fp)
 801501c:	e17ffc15 	stw	r5,-16(fp)
 8015020:	e1bffd15 	stw	r6,-12(fp)
 8015024:	3807883a 	mov	r3,r7
 8015028:	e0800217 	ldw	r2,8(fp)
 801502c:	e0fffe05 	stb	r3,-8(fp)
 8015030:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 8015034:	e03ff715 	stw	zero,-36(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
 8015038:	e0bffb17 	ldw	r2,-20(fp)
 801503c:	10800717 	ldw	r2,28(r2)
 8015040:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 timeout;
    alt_u32 bytes_written=0;
 8015044:	e03ff915 	stw	zero,-28(fp)
    
    if (size==0)
 8015048:	e0bffd17 	ldw	r2,-12(fp)
 801504c:	1000021e 	bne	r2,zero,8015058 <alt_avalon_i2c_master_receive_using_interrupts+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
 8015050:	0005883a 	mov	r2,zero
 8015054:	00006306 	br	80151e4 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
 8015058:	e0bffb17 	ldw	r2,-20(fp)
 801505c:	10c00617 	ldw	r3,24(r2)
 8015060:	00820074 	movhi	r2,2049
 8015064:	108e4b04 	addi	r2,r2,14636
 8015068:	18800226 	beq	r3,r2,8015074 <alt_avalon_i2c_master_receive_using_interrupts+0x6c>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
 801506c:	00bfff44 	movi	r2,-3
 8015070:	00005c06 	br	80151e4 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 8015074:	e0bffe03 	ldbu	r2,-8(fp)
 8015078:	10000a1e 	bne	r2,zero,80150a4 <alt_avalon_i2c_master_receive_using_interrupts+0x9c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 801507c:	e13ffb17 	ldw	r4,-20(fp)
 8015080:	8013ca80 	call	8013ca8 <alt_avalon_i2c_enable>
 8015084:	e0bff715 	stw	r2,-36(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 8015088:	e0bff717 	ldw	r2,-36(fp)
 801508c:	10000226 	beq	r2,zero,8015098 <alt_avalon_i2c_master_receive_using_interrupts+0x90>
      {
        return status;
 8015090:	e0bff717 	ldw	r2,-36(fp)
 8015094:	00005306 	br	80151e4 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 8015098:	01400704 	movi	r5,28
 801509c:	e13ffb17 	ldw	r4,-20(fp)
 80150a0:	80152940 	call	8015294 <alt_avalon_i2c_int_clear>
      
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
 80150a4:	e0bffe03 	ldbu	r2,-8(fp)
 80150a8:	100d883a 	mov	r6,r2
 80150ac:	01400044 	movi	r5,1
 80150b0:	e13ffb17 	ldw	r4,-20(fp)
 80150b4:	80143100 	call	8014310 <alt_avalon_i2c_send_address>
 80150b8:	e0bff715 	stw	r2,-36(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
 80150bc:	e0bff717 	ldw	r2,-36(fp)
 80150c0:	1000191e 	bne	r2,zero,8015128 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 80150c4:	00000906 	br	80150ec <alt_avalon_i2c_master_receive_using_interrupts+0xe4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 80150c8:	000f883a 	mov	r7,zero
 80150cc:	000d883a 	mov	r6,zero
 80150d0:	000b883a 	mov	r5,zero
 80150d4:	e13ffb17 	ldw	r4,-20(fp)
 80150d8:	801422c0 	call	801422c <alt_avalon_i2c_cmd_write>
 80150dc:	e0bff715 	stw	r2,-36(fp)
            bytes_written++;
 80150e0:	e0bff917 	ldw	r2,-28(fp)
 80150e4:	10800044 	addi	r2,r2,1
 80150e8:	e0bff915 	stw	r2,-28(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 80150ec:	e0bffd17 	ldw	r2,-12(fp)
 80150f0:	10bfffc4 	addi	r2,r2,-1
 80150f4:	e0fff917 	ldw	r3,-28(fp)
 80150f8:	1880022e 	bgeu	r3,r2,8015104 <alt_avalon_i2c_master_receive_using_interrupts+0xfc>
 80150fc:	e0bff717 	ldw	r2,-36(fp)
 8015100:	103ff126 	beq	r2,zero,80150c8 <__alt_data_end+0xfc0150c8>
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
            bytes_written++;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 8015104:	e0bff717 	ldw	r2,-36(fp)
 8015108:	1000071e 	bne	r2,zero,8015128 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 801510c:	e0bfff03 	ldbu	r2,-4(fp)
 8015110:	100f883a 	mov	r7,r2
 8015114:	000d883a 	mov	r6,zero
 8015118:	000b883a 	mov	r5,zero
 801511c:	e13ffb17 	ldw	r4,-20(fp)
 8015120:	801422c0 	call	801422c <alt_avalon_i2c_cmd_write>
 8015124:	e0bff715 	stw	r2,-36(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
 8015128:	e0bff717 	ldw	r2,-36(fp)
 801512c:	10001826 	beq	r2,zero,8015190 <alt_avalon_i2c_master_receive_using_interrupts+0x188>
    {
        timeout=10000 * size;
 8015130:	0149c404 	movi	r5,10000
 8015134:	e13ffd17 	ldw	r4,-12(fp)
 8015138:	8001b580 	call	8001b58 <__mulsi3>
 801513c:	e0bff815 	stw	r2,-32(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
 8015140:	00000d06 	br	8015178 <alt_avalon_i2c_master_receive_using_interrupts+0x170>
        {
            if (timeout<10) alt_busy_sleep(10000);
 8015144:	e0bff817 	ldw	r2,-32(fp)
 8015148:	108002a8 	cmpgeui	r2,r2,10
 801514c:	1000021e 	bne	r2,zero,8015158 <alt_avalon_i2c_master_receive_using_interrupts+0x150>
 8015150:	0109c404 	movi	r4,10000
 8015154:	80161cc0 	call	80161cc <alt_busy_sleep>
            if (--timeout == 0)
 8015158:	e0bff817 	ldw	r2,-32(fp)
 801515c:	10bfffc4 	addi	r2,r2,-1
 8015160:	e0bff815 	stw	r2,-32(fp)
 8015164:	e0bff817 	ldw	r2,-32(fp)
 8015168:	1000031e 	bne	r2,zero,8015178 <alt_avalon_i2c_master_receive_using_interrupts+0x170>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 801516c:	00bfff84 	movi	r2,-2
 8015170:	e0bff715 	stw	r2,-36(fp)
               break;
 8015174:	00000306 	br	8015184 <alt_avalon_i2c_master_receive_using_interrupts+0x17c>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
 8015178:	e13ffb17 	ldw	r4,-20(fp)
 801517c:	80140980 	call	8014098 <alt_avalon_i2c_is_busy>
 8015180:	103ff01e 	bne	r2,zero,8015144 <__alt_data_end+0xfc015144>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 8015184:	e13ffb17 	ldw	r4,-20(fp)
 8015188:	8013d400 	call	8013d40 <alt_avalon_i2c_disable>
 801518c:	00001406 	br	80151e0 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    else
    {
       if (issue_stop)
 8015190:	e0bfff03 	ldbu	r2,-4(fp)
 8015194:	10001226 	beq	r2,zero,80151e0 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 8015198:	01400704 	movi	r5,28
 801519c:	e13ffb17 	ldw	r4,-20(fp)
 80151a0:	80152940 	call	8015294 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
 80151a4:	000b883a 	mov	r5,zero
 80151a8:	e13ffb17 	ldw	r4,-20(fp)
 80151ac:	801542c0 	call	801542c <alt_avalon_i2c_rx_fifo_threshold_set>
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
 80151b0:	e0bffa17 	ldw	r2,-24(fp)
 80151b4:	00c00084 	movi	r3,2
 80151b8:	10c00215 	stw	r3,8(r2)
         
         irq_data->buffer = buffer;
 80151bc:	e0bffa17 	ldw	r2,-24(fp)
 80151c0:	e0fffc17 	ldw	r3,-16(fp)
 80151c4:	10c00015 	stw	r3,0(r2)
         irq_data->size = size;
 80151c8:	e0bffa17 	ldw	r2,-24(fp)
 80151cc:	e0fffd17 	ldw	r3,-12(fp)
 80151d0:	10c00115 	stw	r3,4(r2)
         
         /* enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
 80151d4:	01400084 	movi	r5,2
 80151d8:	e13ffb17 	ldw	r4,-20(fp)
 80151dc:	80153380 	call	8015338 <alt_avalon_i2c_int_enable>
       }
    }

    return status;
 80151e0:	e0bff717 	ldw	r2,-36(fp)
}
 80151e4:	e037883a 	mov	sp,fp
 80151e8:	dfc00117 	ldw	ra,4(sp)
 80151ec:	df000017 	ldw	fp,0(sp)
 80151f0:	dec00204 	addi	sp,sp,8
 80151f4:	f800283a 	ret

080151f8 <alt_avalon_i2c_int_status_get>:

/* Returns the current I2C controller interrupt status conditions. */
void alt_avalon_i2c_int_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u32 *status)
{
 80151f8:	defffd04 	addi	sp,sp,-12
 80151fc:	df000215 	stw	fp,8(sp)
 8015200:	df000204 	addi	fp,sp,8
 8015204:	e13ffe15 	stw	r4,-8(fp)
 8015208:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base);
 801520c:	e0bffe17 	ldw	r2,-8(fp)
 8015210:	10800317 	ldw	r2,12(r2)
 8015214:	10800404 	addi	r2,r2,16
 8015218:	10c00037 	ldwio	r3,0(r2)
 801521c:	e0bffe17 	ldw	r2,-8(fp)
 8015220:	10800317 	ldw	r2,12(r2)
 8015224:	10800304 	addi	r2,r2,12
 8015228:	10800037 	ldwio	r2,0(r2)
 801522c:	1884703a 	and	r2,r3,r2
 8015230:	1007883a 	mov	r3,r2
 8015234:	e0bfff17 	ldw	r2,-4(fp)
 8015238:	10c00015 	stw	r3,0(r2)
}
 801523c:	0001883a 	nop
 8015240:	e037883a 	mov	sp,fp
 8015244:	df000017 	ldw	fp,0(sp)
 8015248:	dec00104 	addi	sp,sp,4
 801524c:	f800283a 	ret

08015250 <alt_avalon_i2c_int_raw_status_get>:

/*Returns the I2C controller raw interrupt status conditions irrespective of
 * the interrupt status condition enablement state. */
void alt_avalon_i2c_int_raw_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                           alt_u32 *status)
{
 8015250:	defffd04 	addi	sp,sp,-12
 8015254:	df000215 	stw	fp,8(sp)
 8015258:	df000204 	addi	fp,sp,8
 801525c:	e13ffe15 	stw	r4,-8(fp)
 8015260:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base);
 8015264:	e0bffe17 	ldw	r2,-8(fp)
 8015268:	10800317 	ldw	r2,12(r2)
 801526c:	10800404 	addi	r2,r2,16
 8015270:	10800037 	ldwio	r2,0(r2)
 8015274:	1007883a 	mov	r3,r2
 8015278:	e0bfff17 	ldw	r2,-4(fp)
 801527c:	10c00015 	stw	r3,0(r2)
}
 8015280:	0001883a 	nop
 8015284:	e037883a 	mov	sp,fp
 8015288:	df000017 	ldw	fp,0(sp)
 801528c:	dec00104 	addi	sp,sp,4
 8015290:	f800283a 	ret

08015294 <alt_avalon_i2c_int_clear>:

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
 8015294:	defffd04 	addi	sp,sp,-12
 8015298:	df000215 	stw	fp,8(sp)
 801529c:	df000204 	addi	fp,sp,8
 80152a0:	e13ffe15 	stw	r4,-8(fp)
 80152a4:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
 80152a8:	e0bffe17 	ldw	r2,-8(fp)
 80152ac:	10800317 	ldw	r2,12(r2)
 80152b0:	10800404 	addi	r2,r2,16
 80152b4:	e0ffff17 	ldw	r3,-4(fp)
 80152b8:	10c00035 	stwio	r3,0(r2)
}
 80152bc:	0001883a 	nop
 80152c0:	e037883a 	mov	sp,fp
 80152c4:	df000017 	ldw	fp,0(sp)
 80152c8:	dec00104 	addi	sp,sp,4
 80152cc:	f800283a 	ret

080152d0 <alt_avalon_i2c_int_disable>:

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
 80152d0:	defffb04 	addi	sp,sp,-20
 80152d4:	dfc00415 	stw	ra,16(sp)
 80152d8:	df000315 	stw	fp,12(sp)
 80152dc:	df000304 	addi	fp,sp,12
 80152e0:	e13ffe15 	stw	r4,-8(fp)
 80152e4:	e17fff15 	stw	r5,-4(fp)
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
 80152e8:	e17ffd04 	addi	r5,fp,-12
 80152ec:	e13ffe17 	ldw	r4,-8(fp)
 80152f0:	801539c0 	call	801539c <alt_avalon_i2c_enabled_ints_get>
   enabled_ints &=  (~mask);
 80152f4:	e0bfff17 	ldw	r2,-4(fp)
 80152f8:	0086303a 	nor	r3,zero,r2
 80152fc:	e0bffd17 	ldw	r2,-12(fp)
 8015300:	1884703a 	and	r2,r3,r2
 8015304:	e0bffd15 	stw	r2,-12(fp)
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
 8015308:	e0bffe17 	ldw	r2,-8(fp)
 801530c:	10800317 	ldw	r2,12(r2)
 8015310:	10800304 	addi	r2,r2,12
 8015314:	e0fffd17 	ldw	r3,-12(fp)
 8015318:	18c007cc 	andi	r3,r3,31
 801531c:	10c00035 	stwio	r3,0(r2)
}
 8015320:	0001883a 	nop
 8015324:	e037883a 	mov	sp,fp
 8015328:	dfc00117 	ldw	ra,4(sp)
 801532c:	df000017 	ldw	fp,0(sp)
 8015330:	dec00204 	addi	sp,sp,8
 8015334:	f800283a 	ret

08015338 <alt_avalon_i2c_int_enable>:

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
 8015338:	defffb04 	addi	sp,sp,-20
 801533c:	dfc00415 	stw	ra,16(sp)
 8015340:	df000315 	stw	fp,12(sp)
 8015344:	df000304 	addi	fp,sp,12
 8015348:	e13ffe15 	stw	r4,-8(fp)
 801534c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
 8015350:	e17ffd04 	addi	r5,fp,-12
 8015354:	e13ffe17 	ldw	r4,-8(fp)
 8015358:	801539c0 	call	801539c <alt_avalon_i2c_enabled_ints_get>
    enabled_ints |= mask;
 801535c:	e0fffd17 	ldw	r3,-12(fp)
 8015360:	e0bfff17 	ldw	r2,-4(fp)
 8015364:	1884b03a 	or	r2,r3,r2
 8015368:	e0bffd15 	stw	r2,-12(fp)
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
 801536c:	e0bffe17 	ldw	r2,-8(fp)
 8015370:	10800317 	ldw	r2,12(r2)
 8015374:	10800304 	addi	r2,r2,12
 8015378:	e0fffd17 	ldw	r3,-12(fp)
 801537c:	18c007cc 	andi	r3,r3,31
 8015380:	10c00035 	stwio	r3,0(r2)
}
 8015384:	0001883a 	nop
 8015388:	e037883a 	mov	sp,fp
 801538c:	dfc00117 	ldw	ra,4(sp)
 8015390:	df000017 	ldw	fp,0(sp)
 8015394:	dec00204 	addi	sp,sp,8
 8015398:	f800283a 	ret

0801539c <alt_avalon_i2c_enabled_ints_get>:

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
 801539c:	defffd04 	addi	sp,sp,-12
 80153a0:	df000215 	stw	fp,8(sp)
 80153a4:	df000204 	addi	fp,sp,8
 80153a8:	e13ffe15 	stw	r4,-8(fp)
 80153ac:	e17fff15 	stw	r5,-4(fp)
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
 80153b0:	e0bffe17 	ldw	r2,-8(fp)
 80153b4:	10800317 	ldw	r2,12(r2)
 80153b8:	10800304 	addi	r2,r2,12
 80153bc:	10800037 	ldwio	r2,0(r2)
 80153c0:	10c007cc 	andi	r3,r2,31
 80153c4:	e0bfff17 	ldw	r2,-4(fp)
 80153c8:	10c00015 	stw	r3,0(r2)
}
 80153cc:	0001883a 	nop
 80153d0:	e037883a 	mov	sp,fp
 80153d4:	df000017 	ldw	fp,0(sp)
 80153d8:	dec00104 	addi	sp,sp,4
 80153dc:	f800283a 	ret

080153e0 <alt_avalon_i2c_rx_fifo_threshold_get>:

/*Gets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t *threshold)
{
 80153e0:	defffd04 	addi	sp,sp,-12
 80153e4:	df000215 	stw	fp,8(sp)
 80153e8:	df000204 	addi	fp,sp,8
 80153ec:	e13ffe15 	stw	r4,-8(fp)
 80153f0:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK) >>  ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST;
 80153f4:	e0bffe17 	ldw	r2,-8(fp)
 80153f8:	10800317 	ldw	r2,12(r2)
 80153fc:	10800204 	addi	r2,r2,8
 8015400:	10800037 	ldwio	r2,0(r2)
 8015404:	10800c0c 	andi	r2,r2,48
 8015408:	1005d13a 	srai	r2,r2,4
 801540c:	1007883a 	mov	r3,r2
 8015410:	e0bfff17 	ldw	r2,-4(fp)
 8015414:	10c00015 	stw	r3,0(r2)
}
 8015418:	0001883a 	nop
 801541c:	e037883a 	mov	sp,fp
 8015420:	df000017 	ldw	fp,0(sp)
 8015424:	dec00104 	addi	sp,sp,4
 8015428:	f800283a 	ret

0801542c <alt_avalon_i2c_rx_fifo_threshold_set>:

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
 801542c:	defffd04 	addi	sp,sp,-12
 8015430:	df000215 	stw	fp,8(sp)
 8015434:	df000204 	addi	fp,sp,8
 8015438:	e13ffe15 	stw	r4,-8(fp)
 801543c:	e17fff15 	stw	r5,-4(fp)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
 8015440:	e0bffe17 	ldw	r2,-8(fp)
 8015444:	10800317 	ldw	r2,12(r2)
 8015448:	10800204 	addi	r2,r2,8
 801544c:	e0fffe17 	ldw	r3,-8(fp)
 8015450:	18c00317 	ldw	r3,12(r3)
 8015454:	18c00204 	addi	r3,r3,8
 8015458:	18c00037 	ldwio	r3,0(r3)
 801545c:	1809883a 	mov	r4,r3
 8015460:	00fff3c4 	movi	r3,-49
 8015464:	20c8703a 	and	r4,r4,r3
 8015468:	e0ffff17 	ldw	r3,-4(fp)
 801546c:	1806913a 	slli	r3,r3,4
 8015470:	18c00c0c 	andi	r3,r3,48
 8015474:	20c6b03a 	or	r3,r4,r3
 8015478:	10c00035 	stwio	r3,0(r2)
}
 801547c:	0001883a 	nop
 8015480:	e037883a 	mov	sp,fp
 8015484:	df000017 	ldw	fp,0(sp)
 8015488:	dec00104 	addi	sp,sp,4
 801548c:	f800283a 	ret

08015490 <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:

/*Gets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t *threshold)
{
 8015490:	defffd04 	addi	sp,sp,-12
 8015494:	df000215 	stw	fp,8(sp)
 8015498:	df000204 	addi	fp,sp,8
 801549c:	e13ffe15 	stw	r4,-8(fp)
 80154a0:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK) >> ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST;
 80154a4:	e0bffe17 	ldw	r2,-8(fp)
 80154a8:	10800317 	ldw	r2,12(r2)
 80154ac:	10800204 	addi	r2,r2,8
 80154b0:	10800037 	ldwio	r2,0(r2)
 80154b4:	1080030c 	andi	r2,r2,12
 80154b8:	1005d0ba 	srai	r2,r2,2
 80154bc:	1007883a 	mov	r3,r2
 80154c0:	e0bfff17 	ldw	r2,-4(fp)
 80154c4:	10c00015 	stw	r3,0(r2)
}
 80154c8:	0001883a 	nop
 80154cc:	e037883a 	mov	sp,fp
 80154d0:	df000017 	ldw	fp,0(sp)
 80154d4:	dec00104 	addi	sp,sp,4
 80154d8:	f800283a 	ret

080154dc <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
 80154dc:	defffd04 	addi	sp,sp,-12
 80154e0:	df000215 	stw	fp,8(sp)
 80154e4:	df000204 	addi	fp,sp,8
 80154e8:	e13ffe15 	stw	r4,-8(fp)
 80154ec:	e17fff15 	stw	r5,-4(fp)
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
 80154f0:	e0bffe17 	ldw	r2,-8(fp)
 80154f4:	10800317 	ldw	r2,12(r2)
 80154f8:	10c00204 	addi	r3,r2,8
 80154fc:	e0bffe17 	ldw	r2,-8(fp)
 8015500:	10800317 	ldw	r2,12(r2)
 8015504:	10800204 	addi	r2,r2,8
 8015508:	10800037 	ldwio	r2,0(r2)
 801550c:	1009883a 	mov	r4,r2
 8015510:	00bffcc4 	movi	r2,-13
 8015514:	2088703a 	and	r4,r4,r2
 8015518:	e0bfff17 	ldw	r2,-4(fp)
 801551c:	1085883a 	add	r2,r2,r2
 8015520:	1085883a 	add	r2,r2,r2
 8015524:	1080030c 	andi	r2,r2,12
 8015528:	2084b03a 	or	r2,r4,r2
 801552c:	18800035 	stwio	r2,0(r3)
}
 8015530:	0001883a 	nop
 8015534:	e037883a 	mov	sp,fp
 8015538:	df000017 	ldw	fp,0(sp)
 801553c:	dec00104 	addi	sp,sp,4
 8015540:	f800283a 	ret

08015544 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 8015544:	defffa04 	addi	sp,sp,-24
 8015548:	dfc00515 	stw	ra,20(sp)
 801554c:	df000415 	stw	fp,16(sp)
 8015550:	df000404 	addi	fp,sp,16
 8015554:	e13ffd15 	stw	r4,-12(fp)
 8015558:	e17ffe15 	stw	r5,-8(fp)
 801555c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8015560:	e0bffd17 	ldw	r2,-12(fp)
 8015564:	10800017 	ldw	r2,0(r2)
 8015568:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 801556c:	e0bffc17 	ldw	r2,-16(fp)
 8015570:	10c00a04 	addi	r3,r2,40
 8015574:	e0bffd17 	ldw	r2,-12(fp)
 8015578:	10800217 	ldw	r2,8(r2)
 801557c:	100f883a 	mov	r7,r2
 8015580:	e1bfff17 	ldw	r6,-4(fp)
 8015584:	e17ffe17 	ldw	r5,-8(fp)
 8015588:	1809883a 	mov	r4,r3
 801558c:	8015b6c0 	call	8015b6c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 8015590:	e037883a 	mov	sp,fp
 8015594:	dfc00117 	ldw	ra,4(sp)
 8015598:	df000017 	ldw	fp,0(sp)
 801559c:	dec00204 	addi	sp,sp,8
 80155a0:	f800283a 	ret

080155a4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 80155a4:	defffa04 	addi	sp,sp,-24
 80155a8:	dfc00515 	stw	ra,20(sp)
 80155ac:	df000415 	stw	fp,16(sp)
 80155b0:	df000404 	addi	fp,sp,16
 80155b4:	e13ffd15 	stw	r4,-12(fp)
 80155b8:	e17ffe15 	stw	r5,-8(fp)
 80155bc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 80155c0:	e0bffd17 	ldw	r2,-12(fp)
 80155c4:	10800017 	ldw	r2,0(r2)
 80155c8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 80155cc:	e0bffc17 	ldw	r2,-16(fp)
 80155d0:	10c00a04 	addi	r3,r2,40
 80155d4:	e0bffd17 	ldw	r2,-12(fp)
 80155d8:	10800217 	ldw	r2,8(r2)
 80155dc:	100f883a 	mov	r7,r2
 80155e0:	e1bfff17 	ldw	r6,-4(fp)
 80155e4:	e17ffe17 	ldw	r5,-8(fp)
 80155e8:	1809883a 	mov	r4,r3
 80155ec:	8015d880 	call	8015d88 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 80155f0:	e037883a 	mov	sp,fp
 80155f4:	dfc00117 	ldw	ra,4(sp)
 80155f8:	df000017 	ldw	fp,0(sp)
 80155fc:	dec00204 	addi	sp,sp,8
 8015600:	f800283a 	ret

08015604 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 8015604:	defffc04 	addi	sp,sp,-16
 8015608:	dfc00315 	stw	ra,12(sp)
 801560c:	df000215 	stw	fp,8(sp)
 8015610:	df000204 	addi	fp,sp,8
 8015614:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8015618:	e0bfff17 	ldw	r2,-4(fp)
 801561c:	10800017 	ldw	r2,0(r2)
 8015620:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 8015624:	e0bffe17 	ldw	r2,-8(fp)
 8015628:	10c00a04 	addi	r3,r2,40
 801562c:	e0bfff17 	ldw	r2,-4(fp)
 8015630:	10800217 	ldw	r2,8(r2)
 8015634:	100b883a 	mov	r5,r2
 8015638:	1809883a 	mov	r4,r3
 801563c:	8015a140 	call	8015a14 <altera_avalon_jtag_uart_close>
}
 8015640:	e037883a 	mov	sp,fp
 8015644:	dfc00117 	ldw	ra,4(sp)
 8015648:	df000017 	ldw	fp,0(sp)
 801564c:	dec00204 	addi	sp,sp,8
 8015650:	f800283a 	ret

08015654 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 8015654:	defffa04 	addi	sp,sp,-24
 8015658:	dfc00515 	stw	ra,20(sp)
 801565c:	df000415 	stw	fp,16(sp)
 8015660:	df000404 	addi	fp,sp,16
 8015664:	e13ffd15 	stw	r4,-12(fp)
 8015668:	e17ffe15 	stw	r5,-8(fp)
 801566c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 8015670:	e0bffd17 	ldw	r2,-12(fp)
 8015674:	10800017 	ldw	r2,0(r2)
 8015678:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 801567c:	e0bffc17 	ldw	r2,-16(fp)
 8015680:	10800a04 	addi	r2,r2,40
 8015684:	e1bfff17 	ldw	r6,-4(fp)
 8015688:	e17ffe17 	ldw	r5,-8(fp)
 801568c:	1009883a 	mov	r4,r2
 8015690:	8015a7c0 	call	8015a7c <altera_avalon_jtag_uart_ioctl>
}
 8015694:	e037883a 	mov	sp,fp
 8015698:	dfc00117 	ldw	ra,4(sp)
 801569c:	df000017 	ldw	fp,0(sp)
 80156a0:	dec00204 	addi	sp,sp,8
 80156a4:	f800283a 	ret

080156a8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 80156a8:	defffa04 	addi	sp,sp,-24
 80156ac:	dfc00515 	stw	ra,20(sp)
 80156b0:	df000415 	stw	fp,16(sp)
 80156b4:	df000404 	addi	fp,sp,16
 80156b8:	e13ffd15 	stw	r4,-12(fp)
 80156bc:	e17ffe15 	stw	r5,-8(fp)
 80156c0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 80156c4:	e0bffd17 	ldw	r2,-12(fp)
 80156c8:	00c00044 	movi	r3,1
 80156cc:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 80156d0:	e0bffd17 	ldw	r2,-12(fp)
 80156d4:	10800017 	ldw	r2,0(r2)
 80156d8:	10800104 	addi	r2,r2,4
 80156dc:	1007883a 	mov	r3,r2
 80156e0:	e0bffd17 	ldw	r2,-12(fp)
 80156e4:	10800817 	ldw	r2,32(r2)
 80156e8:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 80156ec:	e0bffe17 	ldw	r2,-8(fp)
 80156f0:	e0ffff17 	ldw	r3,-4(fp)
 80156f4:	d8000015 	stw	zero,0(sp)
 80156f8:	e1fffd17 	ldw	r7,-12(fp)
 80156fc:	01820074 	movhi	r6,2049
 8015700:	3195da04 	addi	r6,r6,22376
 8015704:	180b883a 	mov	r5,r3
 8015708:	1009883a 	mov	r4,r2
 801570c:	80165940 	call	8016594 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 8015710:	e0bffd17 	ldw	r2,-12(fp)
 8015714:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 8015718:	e0bffd17 	ldw	r2,-12(fp)
 801571c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8015720:	d0e80217 	ldw	r3,-24568(gp)
 8015724:	e1fffd17 	ldw	r7,-12(fp)
 8015728:	01820074 	movhi	r6,2049
 801572c:	31965d04 	addi	r6,r6,22900
 8015730:	180b883a 	mov	r5,r3
 8015734:	1009883a 	mov	r4,r2
 8015738:	80160a00 	call	80160a0 <alt_alarm_start>
 801573c:	1000040e 	bge	r2,zero,8015750 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 8015740:	e0fffd17 	ldw	r3,-12(fp)
 8015744:	00a00034 	movhi	r2,32768
 8015748:	10bfffc4 	addi	r2,r2,-1
 801574c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 8015750:	0001883a 	nop
 8015754:	e037883a 	mov	sp,fp
 8015758:	dfc00117 	ldw	ra,4(sp)
 801575c:	df000017 	ldw	fp,0(sp)
 8015760:	dec00204 	addi	sp,sp,8
 8015764:	f800283a 	ret

08015768 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 8015768:	defff804 	addi	sp,sp,-32
 801576c:	df000715 	stw	fp,28(sp)
 8015770:	df000704 	addi	fp,sp,28
 8015774:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 8015778:	e0bfff17 	ldw	r2,-4(fp)
 801577c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 8015780:	e0bffb17 	ldw	r2,-20(fp)
 8015784:	10800017 	ldw	r2,0(r2)
 8015788:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 801578c:	e0bffc17 	ldw	r2,-16(fp)
 8015790:	10800104 	addi	r2,r2,4
 8015794:	10800037 	ldwio	r2,0(r2)
 8015798:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 801579c:	e0bffd17 	ldw	r2,-12(fp)
 80157a0:	1080c00c 	andi	r2,r2,768
 80157a4:	10006d26 	beq	r2,zero,801595c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 80157a8:	e0bffd17 	ldw	r2,-12(fp)
 80157ac:	1080400c 	andi	r2,r2,256
 80157b0:	10003526 	beq	r2,zero,8015888 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 80157b4:	00800074 	movhi	r2,1
 80157b8:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80157bc:	e0bffb17 	ldw	r2,-20(fp)
 80157c0:	10800a17 	ldw	r2,40(r2)
 80157c4:	10800044 	addi	r2,r2,1
 80157c8:	1081ffcc 	andi	r2,r2,2047
 80157cc:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 80157d0:	e0bffb17 	ldw	r2,-20(fp)
 80157d4:	10c00b17 	ldw	r3,44(r2)
 80157d8:	e0bffe17 	ldw	r2,-8(fp)
 80157dc:	18801526 	beq	r3,r2,8015834 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 80157e0:	e0bffc17 	ldw	r2,-16(fp)
 80157e4:	10800037 	ldwio	r2,0(r2)
 80157e8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 80157ec:	e0bff917 	ldw	r2,-28(fp)
 80157f0:	10a0000c 	andi	r2,r2,32768
 80157f4:	10001126 	beq	r2,zero,801583c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 80157f8:	e0bffb17 	ldw	r2,-20(fp)
 80157fc:	10800a17 	ldw	r2,40(r2)
 8015800:	e0fff917 	ldw	r3,-28(fp)
 8015804:	1809883a 	mov	r4,r3
 8015808:	e0fffb17 	ldw	r3,-20(fp)
 801580c:	1885883a 	add	r2,r3,r2
 8015810:	10800e04 	addi	r2,r2,56
 8015814:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8015818:	e0bffb17 	ldw	r2,-20(fp)
 801581c:	10800a17 	ldw	r2,40(r2)
 8015820:	10800044 	addi	r2,r2,1
 8015824:	10c1ffcc 	andi	r3,r2,2047
 8015828:	e0bffb17 	ldw	r2,-20(fp)
 801582c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 8015830:	003fe206 	br	80157bc <__alt_data_end+0xfc0157bc>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 8015834:	0001883a 	nop
 8015838:	00000106 	br	8015840 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 801583c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 8015840:	e0bff917 	ldw	r2,-28(fp)
 8015844:	10bfffec 	andhi	r2,r2,65535
 8015848:	10000f26 	beq	r2,zero,8015888 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 801584c:	e0bffb17 	ldw	r2,-20(fp)
 8015850:	10c00817 	ldw	r3,32(r2)
 8015854:	00bfff84 	movi	r2,-2
 8015858:	1886703a 	and	r3,r3,r2
 801585c:	e0bffb17 	ldw	r2,-20(fp)
 8015860:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 8015864:	e0bffc17 	ldw	r2,-16(fp)
 8015868:	10800104 	addi	r2,r2,4
 801586c:	1007883a 	mov	r3,r2
 8015870:	e0bffb17 	ldw	r2,-20(fp)
 8015874:	10800817 	ldw	r2,32(r2)
 8015878:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 801587c:	e0bffc17 	ldw	r2,-16(fp)
 8015880:	10800104 	addi	r2,r2,4
 8015884:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 8015888:	e0bffd17 	ldw	r2,-12(fp)
 801588c:	1080800c 	andi	r2,r2,512
 8015890:	103fbe26 	beq	r2,zero,801578c <__alt_data_end+0xfc01578c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 8015894:	e0bffd17 	ldw	r2,-12(fp)
 8015898:	1004d43a 	srli	r2,r2,16
 801589c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 80158a0:	00001406 	br	80158f4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 80158a4:	e0bffc17 	ldw	r2,-16(fp)
 80158a8:	e0fffb17 	ldw	r3,-20(fp)
 80158ac:	18c00d17 	ldw	r3,52(r3)
 80158b0:	e13ffb17 	ldw	r4,-20(fp)
 80158b4:	20c7883a 	add	r3,r4,r3
 80158b8:	18c20e04 	addi	r3,r3,2104
 80158bc:	18c00003 	ldbu	r3,0(r3)
 80158c0:	18c03fcc 	andi	r3,r3,255
 80158c4:	18c0201c 	xori	r3,r3,128
 80158c8:	18ffe004 	addi	r3,r3,-128
 80158cc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80158d0:	e0bffb17 	ldw	r2,-20(fp)
 80158d4:	10800d17 	ldw	r2,52(r2)
 80158d8:	10800044 	addi	r2,r2,1
 80158dc:	10c1ffcc 	andi	r3,r2,2047
 80158e0:	e0bffb17 	ldw	r2,-20(fp)
 80158e4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 80158e8:	e0bffa17 	ldw	r2,-24(fp)
 80158ec:	10bfffc4 	addi	r2,r2,-1
 80158f0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 80158f4:	e0bffa17 	ldw	r2,-24(fp)
 80158f8:	10000526 	beq	r2,zero,8015910 <altera_avalon_jtag_uart_irq+0x1a8>
 80158fc:	e0bffb17 	ldw	r2,-20(fp)
 8015900:	10c00d17 	ldw	r3,52(r2)
 8015904:	e0bffb17 	ldw	r2,-20(fp)
 8015908:	10800c17 	ldw	r2,48(r2)
 801590c:	18bfe51e 	bne	r3,r2,80158a4 <__alt_data_end+0xfc0158a4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 8015910:	e0bffa17 	ldw	r2,-24(fp)
 8015914:	103f9d26 	beq	r2,zero,801578c <__alt_data_end+0xfc01578c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8015918:	e0bffb17 	ldw	r2,-20(fp)
 801591c:	10c00817 	ldw	r3,32(r2)
 8015920:	00bfff44 	movi	r2,-3
 8015924:	1886703a 	and	r3,r3,r2
 8015928:	e0bffb17 	ldw	r2,-20(fp)
 801592c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8015930:	e0bffb17 	ldw	r2,-20(fp)
 8015934:	10800017 	ldw	r2,0(r2)
 8015938:	10800104 	addi	r2,r2,4
 801593c:	1007883a 	mov	r3,r2
 8015940:	e0bffb17 	ldw	r2,-20(fp)
 8015944:	10800817 	ldw	r2,32(r2)
 8015948:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 801594c:	e0bffc17 	ldw	r2,-16(fp)
 8015950:	10800104 	addi	r2,r2,4
 8015954:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 8015958:	003f8c06 	br	801578c <__alt_data_end+0xfc01578c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 801595c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 8015960:	0001883a 	nop
 8015964:	e037883a 	mov	sp,fp
 8015968:	df000017 	ldw	fp,0(sp)
 801596c:	dec00104 	addi	sp,sp,4
 8015970:	f800283a 	ret

08015974 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 8015974:	defff804 	addi	sp,sp,-32
 8015978:	df000715 	stw	fp,28(sp)
 801597c:	df000704 	addi	fp,sp,28
 8015980:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 8015984:	e0bffb17 	ldw	r2,-20(fp)
 8015988:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 801598c:	e0bff917 	ldw	r2,-28(fp)
 8015990:	10800017 	ldw	r2,0(r2)
 8015994:	10800104 	addi	r2,r2,4
 8015998:	10800037 	ldwio	r2,0(r2)
 801599c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 80159a0:	e0bffa17 	ldw	r2,-24(fp)
 80159a4:	1081000c 	andi	r2,r2,1024
 80159a8:	10000b26 	beq	r2,zero,80159d8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 80159ac:	e0bff917 	ldw	r2,-28(fp)
 80159b0:	10800017 	ldw	r2,0(r2)
 80159b4:	10800104 	addi	r2,r2,4
 80159b8:	1007883a 	mov	r3,r2
 80159bc:	e0bff917 	ldw	r2,-28(fp)
 80159c0:	10800817 	ldw	r2,32(r2)
 80159c4:	10810014 	ori	r2,r2,1024
 80159c8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 80159cc:	e0bff917 	ldw	r2,-28(fp)
 80159d0:	10000915 	stw	zero,36(r2)
 80159d4:	00000a06 	br	8015a00 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 80159d8:	e0bff917 	ldw	r2,-28(fp)
 80159dc:	10c00917 	ldw	r3,36(r2)
 80159e0:	00a00034 	movhi	r2,32768
 80159e4:	10bfff04 	addi	r2,r2,-4
 80159e8:	10c00536 	bltu	r2,r3,8015a00 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 80159ec:	e0bff917 	ldw	r2,-28(fp)
 80159f0:	10800917 	ldw	r2,36(r2)
 80159f4:	10c00044 	addi	r3,r2,1
 80159f8:	e0bff917 	ldw	r2,-28(fp)
 80159fc:	10c00915 	stw	r3,36(r2)
 8015a00:	d0a80217 	ldw	r2,-24568(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 8015a04:	e037883a 	mov	sp,fp
 8015a08:	df000017 	ldw	fp,0(sp)
 8015a0c:	dec00104 	addi	sp,sp,4
 8015a10:	f800283a 	ret

08015a14 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 8015a14:	defffd04 	addi	sp,sp,-12
 8015a18:	df000215 	stw	fp,8(sp)
 8015a1c:	df000204 	addi	fp,sp,8
 8015a20:	e13ffe15 	stw	r4,-8(fp)
 8015a24:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8015a28:	00000506 	br	8015a40 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 8015a2c:	e0bfff17 	ldw	r2,-4(fp)
 8015a30:	1090000c 	andi	r2,r2,16384
 8015a34:	10000226 	beq	r2,zero,8015a40 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 8015a38:	00bffd44 	movi	r2,-11
 8015a3c:	00000b06 	br	8015a6c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8015a40:	e0bffe17 	ldw	r2,-8(fp)
 8015a44:	10c00d17 	ldw	r3,52(r2)
 8015a48:	e0bffe17 	ldw	r2,-8(fp)
 8015a4c:	10800c17 	ldw	r2,48(r2)
 8015a50:	18800526 	beq	r3,r2,8015a68 <altera_avalon_jtag_uart_close+0x54>
 8015a54:	e0bffe17 	ldw	r2,-8(fp)
 8015a58:	10c00917 	ldw	r3,36(r2)
 8015a5c:	e0bffe17 	ldw	r2,-8(fp)
 8015a60:	10800117 	ldw	r2,4(r2)
 8015a64:	18bff136 	bltu	r3,r2,8015a2c <__alt_data_end+0xfc015a2c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 8015a68:	0005883a 	mov	r2,zero
}
 8015a6c:	e037883a 	mov	sp,fp
 8015a70:	df000017 	ldw	fp,0(sp)
 8015a74:	dec00104 	addi	sp,sp,4
 8015a78:	f800283a 	ret

08015a7c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 8015a7c:	defffa04 	addi	sp,sp,-24
 8015a80:	df000515 	stw	fp,20(sp)
 8015a84:	df000504 	addi	fp,sp,20
 8015a88:	e13ffd15 	stw	r4,-12(fp)
 8015a8c:	e17ffe15 	stw	r5,-8(fp)
 8015a90:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 8015a94:	00bff9c4 	movi	r2,-25
 8015a98:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 8015a9c:	e0bffe17 	ldw	r2,-8(fp)
 8015aa0:	10da8060 	cmpeqi	r3,r2,27137
 8015aa4:	1800031e 	bne	r3,zero,8015ab4 <altera_avalon_jtag_uart_ioctl+0x38>
 8015aa8:	109a80a0 	cmpeqi	r2,r2,27138
 8015aac:	1000181e 	bne	r2,zero,8015b10 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 8015ab0:	00002906 	br	8015b58 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 8015ab4:	e0bffd17 	ldw	r2,-12(fp)
 8015ab8:	10c00117 	ldw	r3,4(r2)
 8015abc:	00a00034 	movhi	r2,32768
 8015ac0:	10bfffc4 	addi	r2,r2,-1
 8015ac4:	18802126 	beq	r3,r2,8015b4c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 8015ac8:	e0bfff17 	ldw	r2,-4(fp)
 8015acc:	10800017 	ldw	r2,0(r2)
 8015ad0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 8015ad4:	e0bffc17 	ldw	r2,-16(fp)
 8015ad8:	10800090 	cmplti	r2,r2,2
 8015adc:	1000061e 	bne	r2,zero,8015af8 <altera_avalon_jtag_uart_ioctl+0x7c>
 8015ae0:	e0fffc17 	ldw	r3,-16(fp)
 8015ae4:	00a00034 	movhi	r2,32768
 8015ae8:	10bfffc4 	addi	r2,r2,-1
 8015aec:	18800226 	beq	r3,r2,8015af8 <altera_avalon_jtag_uart_ioctl+0x7c>
 8015af0:	e0bffc17 	ldw	r2,-16(fp)
 8015af4:	00000206 	br	8015b00 <altera_avalon_jtag_uart_ioctl+0x84>
 8015af8:	00a00034 	movhi	r2,32768
 8015afc:	10bfff84 	addi	r2,r2,-2
 8015b00:	e0fffd17 	ldw	r3,-12(fp)
 8015b04:	18800115 	stw	r2,4(r3)
      rc = 0;
 8015b08:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8015b0c:	00000f06 	br	8015b4c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 8015b10:	e0bffd17 	ldw	r2,-12(fp)
 8015b14:	10c00117 	ldw	r3,4(r2)
 8015b18:	00a00034 	movhi	r2,32768
 8015b1c:	10bfffc4 	addi	r2,r2,-1
 8015b20:	18800c26 	beq	r3,r2,8015b54 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 8015b24:	e0bffd17 	ldw	r2,-12(fp)
 8015b28:	10c00917 	ldw	r3,36(r2)
 8015b2c:	e0bffd17 	ldw	r2,-12(fp)
 8015b30:	10800117 	ldw	r2,4(r2)
 8015b34:	1885803a 	cmpltu	r2,r3,r2
 8015b38:	10c03fcc 	andi	r3,r2,255
 8015b3c:	e0bfff17 	ldw	r2,-4(fp)
 8015b40:	10c00015 	stw	r3,0(r2)
      rc = 0;
 8015b44:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8015b48:	00000206 	br	8015b54 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 8015b4c:	0001883a 	nop
 8015b50:	00000106 	br	8015b58 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 8015b54:	0001883a 	nop

  default:
    break;
  }

  return rc;
 8015b58:	e0bffb17 	ldw	r2,-20(fp)
}
 8015b5c:	e037883a 	mov	sp,fp
 8015b60:	df000017 	ldw	fp,0(sp)
 8015b64:	dec00104 	addi	sp,sp,4
 8015b68:	f800283a 	ret

08015b6c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 8015b6c:	defff304 	addi	sp,sp,-52
 8015b70:	dfc00c15 	stw	ra,48(sp)
 8015b74:	df000b15 	stw	fp,44(sp)
 8015b78:	df000b04 	addi	fp,sp,44
 8015b7c:	e13ffc15 	stw	r4,-16(fp)
 8015b80:	e17ffd15 	stw	r5,-12(fp)
 8015b84:	e1bffe15 	stw	r6,-8(fp)
 8015b88:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 8015b8c:	e0bffd17 	ldw	r2,-12(fp)
 8015b90:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8015b94:	00004706 	br	8015cb4 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 8015b98:	e0bffc17 	ldw	r2,-16(fp)
 8015b9c:	10800a17 	ldw	r2,40(r2)
 8015ba0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 8015ba4:	e0bffc17 	ldw	r2,-16(fp)
 8015ba8:	10800b17 	ldw	r2,44(r2)
 8015bac:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 8015bb0:	e0fff717 	ldw	r3,-36(fp)
 8015bb4:	e0bff817 	ldw	r2,-32(fp)
 8015bb8:	18800536 	bltu	r3,r2,8015bd0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 8015bbc:	e0fff717 	ldw	r3,-36(fp)
 8015bc0:	e0bff817 	ldw	r2,-32(fp)
 8015bc4:	1885c83a 	sub	r2,r3,r2
 8015bc8:	e0bff615 	stw	r2,-40(fp)
 8015bcc:	00000406 	br	8015be0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 8015bd0:	00c20004 	movi	r3,2048
 8015bd4:	e0bff817 	ldw	r2,-32(fp)
 8015bd8:	1885c83a 	sub	r2,r3,r2
 8015bdc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8015be0:	e0bff617 	ldw	r2,-40(fp)
 8015be4:	10001e26 	beq	r2,zero,8015c60 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 8015be8:	e0fffe17 	ldw	r3,-8(fp)
 8015bec:	e0bff617 	ldw	r2,-40(fp)
 8015bf0:	1880022e 	bgeu	r3,r2,8015bfc <altera_avalon_jtag_uart_read+0x90>
        n = space;
 8015bf4:	e0bffe17 	ldw	r2,-8(fp)
 8015bf8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 8015bfc:	e0bffc17 	ldw	r2,-16(fp)
 8015c00:	10c00e04 	addi	r3,r2,56
 8015c04:	e0bff817 	ldw	r2,-32(fp)
 8015c08:	1885883a 	add	r2,r3,r2
 8015c0c:	e1bff617 	ldw	r6,-40(fp)
 8015c10:	100b883a 	mov	r5,r2
 8015c14:	e13ff517 	ldw	r4,-44(fp)
 8015c18:	800a7040 	call	800a704 <memcpy>
      ptr   += n;
 8015c1c:	e0fff517 	ldw	r3,-44(fp)
 8015c20:	e0bff617 	ldw	r2,-40(fp)
 8015c24:	1885883a 	add	r2,r3,r2
 8015c28:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 8015c2c:	e0fffe17 	ldw	r3,-8(fp)
 8015c30:	e0bff617 	ldw	r2,-40(fp)
 8015c34:	1885c83a 	sub	r2,r3,r2
 8015c38:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8015c3c:	e0fff817 	ldw	r3,-32(fp)
 8015c40:	e0bff617 	ldw	r2,-40(fp)
 8015c44:	1885883a 	add	r2,r3,r2
 8015c48:	10c1ffcc 	andi	r3,r2,2047
 8015c4c:	e0bffc17 	ldw	r2,-16(fp)
 8015c50:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 8015c54:	e0bffe17 	ldw	r2,-8(fp)
 8015c58:	00bfcf16 	blt	zero,r2,8015b98 <__alt_data_end+0xfc015b98>
 8015c5c:	00000106 	br	8015c64 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 8015c60:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 8015c64:	e0fff517 	ldw	r3,-44(fp)
 8015c68:	e0bffd17 	ldw	r2,-12(fp)
 8015c6c:	1880141e 	bne	r3,r2,8015cc0 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 8015c70:	e0bfff17 	ldw	r2,-4(fp)
 8015c74:	1090000c 	andi	r2,r2,16384
 8015c78:	1000131e 	bne	r2,zero,8015cc8 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 8015c7c:	0001883a 	nop
 8015c80:	e0bffc17 	ldw	r2,-16(fp)
 8015c84:	10c00a17 	ldw	r3,40(r2)
 8015c88:	e0bff717 	ldw	r2,-36(fp)
 8015c8c:	1880051e 	bne	r3,r2,8015ca4 <altera_avalon_jtag_uart_read+0x138>
 8015c90:	e0bffc17 	ldw	r2,-16(fp)
 8015c94:	10c00917 	ldw	r3,36(r2)
 8015c98:	e0bffc17 	ldw	r2,-16(fp)
 8015c9c:	10800117 	ldw	r2,4(r2)
 8015ca0:	18bff736 	bltu	r3,r2,8015c80 <__alt_data_end+0xfc015c80>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 8015ca4:	e0bffc17 	ldw	r2,-16(fp)
 8015ca8:	10c00a17 	ldw	r3,40(r2)
 8015cac:	e0bff717 	ldw	r2,-36(fp)
 8015cb0:	18800726 	beq	r3,r2,8015cd0 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8015cb4:	e0bffe17 	ldw	r2,-8(fp)
 8015cb8:	00bfb716 	blt	zero,r2,8015b98 <__alt_data_end+0xfc015b98>
 8015cbc:	00000506 	br	8015cd4 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 8015cc0:	0001883a 	nop
 8015cc4:	00000306 	br	8015cd4 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 8015cc8:	0001883a 	nop
 8015ccc:	00000106 	br	8015cd4 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 8015cd0:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 8015cd4:	e0fff517 	ldw	r3,-44(fp)
 8015cd8:	e0bffd17 	ldw	r2,-12(fp)
 8015cdc:	18801826 	beq	r3,r2,8015d40 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8015ce0:	0005303a 	rdctl	r2,status
 8015ce4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8015ce8:	e0fffb17 	ldw	r3,-20(fp)
 8015cec:	00bfff84 	movi	r2,-2
 8015cf0:	1884703a 	and	r2,r3,r2
 8015cf4:	1001703a 	wrctl	status,r2
  
  return context;
 8015cf8:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 8015cfc:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8015d00:	e0bffc17 	ldw	r2,-16(fp)
 8015d04:	10800817 	ldw	r2,32(r2)
 8015d08:	10c00054 	ori	r3,r2,1
 8015d0c:	e0bffc17 	ldw	r2,-16(fp)
 8015d10:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8015d14:	e0bffc17 	ldw	r2,-16(fp)
 8015d18:	10800017 	ldw	r2,0(r2)
 8015d1c:	10800104 	addi	r2,r2,4
 8015d20:	1007883a 	mov	r3,r2
 8015d24:	e0bffc17 	ldw	r2,-16(fp)
 8015d28:	10800817 	ldw	r2,32(r2)
 8015d2c:	18800035 	stwio	r2,0(r3)
 8015d30:	e0bffa17 	ldw	r2,-24(fp)
 8015d34:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8015d38:	e0bff917 	ldw	r2,-28(fp)
 8015d3c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 8015d40:	e0fff517 	ldw	r3,-44(fp)
 8015d44:	e0bffd17 	ldw	r2,-12(fp)
 8015d48:	18800426 	beq	r3,r2,8015d5c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 8015d4c:	e0fff517 	ldw	r3,-44(fp)
 8015d50:	e0bffd17 	ldw	r2,-12(fp)
 8015d54:	1885c83a 	sub	r2,r3,r2
 8015d58:	00000606 	br	8015d74 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 8015d5c:	e0bfff17 	ldw	r2,-4(fp)
 8015d60:	1090000c 	andi	r2,r2,16384
 8015d64:	10000226 	beq	r2,zero,8015d70 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 8015d68:	00bffd44 	movi	r2,-11
 8015d6c:	00000106 	br	8015d74 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 8015d70:	00bffec4 	movi	r2,-5
}
 8015d74:	e037883a 	mov	sp,fp
 8015d78:	dfc00117 	ldw	ra,4(sp)
 8015d7c:	df000017 	ldw	fp,0(sp)
 8015d80:	dec00204 	addi	sp,sp,8
 8015d84:	f800283a 	ret

08015d88 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 8015d88:	defff304 	addi	sp,sp,-52
 8015d8c:	dfc00c15 	stw	ra,48(sp)
 8015d90:	df000b15 	stw	fp,44(sp)
 8015d94:	df000b04 	addi	fp,sp,44
 8015d98:	e13ffc15 	stw	r4,-16(fp)
 8015d9c:	e17ffd15 	stw	r5,-12(fp)
 8015da0:	e1bffe15 	stw	r6,-8(fp)
 8015da4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 8015da8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 8015dac:	e0bffd17 	ldw	r2,-12(fp)
 8015db0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8015db4:	00003706 	br	8015e94 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 8015db8:	e0bffc17 	ldw	r2,-16(fp)
 8015dbc:	10800c17 	ldw	r2,48(r2)
 8015dc0:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 8015dc4:	e0bffc17 	ldw	r2,-16(fp)
 8015dc8:	10800d17 	ldw	r2,52(r2)
 8015dcc:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 8015dd0:	e0fff917 	ldw	r3,-28(fp)
 8015dd4:	e0bff517 	ldw	r2,-44(fp)
 8015dd8:	1880062e 	bgeu	r3,r2,8015df4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 8015ddc:	e0fff517 	ldw	r3,-44(fp)
 8015de0:	e0bff917 	ldw	r2,-28(fp)
 8015de4:	1885c83a 	sub	r2,r3,r2
 8015de8:	10bfffc4 	addi	r2,r2,-1
 8015dec:	e0bff615 	stw	r2,-40(fp)
 8015df0:	00000b06 	br	8015e20 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 8015df4:	e0bff517 	ldw	r2,-44(fp)
 8015df8:	10000526 	beq	r2,zero,8015e10 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 8015dfc:	00c20004 	movi	r3,2048
 8015e00:	e0bff917 	ldw	r2,-28(fp)
 8015e04:	1885c83a 	sub	r2,r3,r2
 8015e08:	e0bff615 	stw	r2,-40(fp)
 8015e0c:	00000406 	br	8015e20 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 8015e10:	00c1ffc4 	movi	r3,2047
 8015e14:	e0bff917 	ldw	r2,-28(fp)
 8015e18:	1885c83a 	sub	r2,r3,r2
 8015e1c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8015e20:	e0bff617 	ldw	r2,-40(fp)
 8015e24:	10001e26 	beq	r2,zero,8015ea0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 8015e28:	e0fffe17 	ldw	r3,-8(fp)
 8015e2c:	e0bff617 	ldw	r2,-40(fp)
 8015e30:	1880022e 	bgeu	r3,r2,8015e3c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 8015e34:	e0bffe17 	ldw	r2,-8(fp)
 8015e38:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 8015e3c:	e0bffc17 	ldw	r2,-16(fp)
 8015e40:	10c20e04 	addi	r3,r2,2104
 8015e44:	e0bff917 	ldw	r2,-28(fp)
 8015e48:	1885883a 	add	r2,r3,r2
 8015e4c:	e1bff617 	ldw	r6,-40(fp)
 8015e50:	e17ffd17 	ldw	r5,-12(fp)
 8015e54:	1009883a 	mov	r4,r2
 8015e58:	800a7040 	call	800a704 <memcpy>
      ptr   += n;
 8015e5c:	e0fffd17 	ldw	r3,-12(fp)
 8015e60:	e0bff617 	ldw	r2,-40(fp)
 8015e64:	1885883a 	add	r2,r3,r2
 8015e68:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 8015e6c:	e0fffe17 	ldw	r3,-8(fp)
 8015e70:	e0bff617 	ldw	r2,-40(fp)
 8015e74:	1885c83a 	sub	r2,r3,r2
 8015e78:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8015e7c:	e0fff917 	ldw	r3,-28(fp)
 8015e80:	e0bff617 	ldw	r2,-40(fp)
 8015e84:	1885883a 	add	r2,r3,r2
 8015e88:	10c1ffcc 	andi	r3,r2,2047
 8015e8c:	e0bffc17 	ldw	r2,-16(fp)
 8015e90:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8015e94:	e0bffe17 	ldw	r2,-8(fp)
 8015e98:	00bfc716 	blt	zero,r2,8015db8 <__alt_data_end+0xfc015db8>
 8015e9c:	00000106 	br	8015ea4 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 8015ea0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8015ea4:	0005303a 	rdctl	r2,status
 8015ea8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8015eac:	e0fffb17 	ldw	r3,-20(fp)
 8015eb0:	00bfff84 	movi	r2,-2
 8015eb4:	1884703a 	and	r2,r3,r2
 8015eb8:	1001703a 	wrctl	status,r2
  
  return context;
 8015ebc:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 8015ec0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8015ec4:	e0bffc17 	ldw	r2,-16(fp)
 8015ec8:	10800817 	ldw	r2,32(r2)
 8015ecc:	10c00094 	ori	r3,r2,2
 8015ed0:	e0bffc17 	ldw	r2,-16(fp)
 8015ed4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8015ed8:	e0bffc17 	ldw	r2,-16(fp)
 8015edc:	10800017 	ldw	r2,0(r2)
 8015ee0:	10800104 	addi	r2,r2,4
 8015ee4:	1007883a 	mov	r3,r2
 8015ee8:	e0bffc17 	ldw	r2,-16(fp)
 8015eec:	10800817 	ldw	r2,32(r2)
 8015ef0:	18800035 	stwio	r2,0(r3)
 8015ef4:	e0bffa17 	ldw	r2,-24(fp)
 8015ef8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8015efc:	e0bff817 	ldw	r2,-32(fp)
 8015f00:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 8015f04:	e0bffe17 	ldw	r2,-8(fp)
 8015f08:	0080100e 	bge	zero,r2,8015f4c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 8015f0c:	e0bfff17 	ldw	r2,-4(fp)
 8015f10:	1090000c 	andi	r2,r2,16384
 8015f14:	1000101e 	bne	r2,zero,8015f58 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 8015f18:	0001883a 	nop
 8015f1c:	e0bffc17 	ldw	r2,-16(fp)
 8015f20:	10c00d17 	ldw	r3,52(r2)
 8015f24:	e0bff517 	ldw	r2,-44(fp)
 8015f28:	1880051e 	bne	r3,r2,8015f40 <altera_avalon_jtag_uart_write+0x1b8>
 8015f2c:	e0bffc17 	ldw	r2,-16(fp)
 8015f30:	10c00917 	ldw	r3,36(r2)
 8015f34:	e0bffc17 	ldw	r2,-16(fp)
 8015f38:	10800117 	ldw	r2,4(r2)
 8015f3c:	18bff736 	bltu	r3,r2,8015f1c <__alt_data_end+0xfc015f1c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 8015f40:	e0bffc17 	ldw	r2,-16(fp)
 8015f44:	10800917 	ldw	r2,36(r2)
 8015f48:	1000051e 	bne	r2,zero,8015f60 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 8015f4c:	e0bffe17 	ldw	r2,-8(fp)
 8015f50:	00bfd016 	blt	zero,r2,8015e94 <__alt_data_end+0xfc015e94>
 8015f54:	00000306 	br	8015f64 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 8015f58:	0001883a 	nop
 8015f5c:	00000106 	br	8015f64 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 8015f60:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 8015f64:	e0fffd17 	ldw	r3,-12(fp)
 8015f68:	e0bff717 	ldw	r2,-36(fp)
 8015f6c:	18800426 	beq	r3,r2,8015f80 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 8015f70:	e0fffd17 	ldw	r3,-12(fp)
 8015f74:	e0bff717 	ldw	r2,-36(fp)
 8015f78:	1885c83a 	sub	r2,r3,r2
 8015f7c:	00000606 	br	8015f98 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 8015f80:	e0bfff17 	ldw	r2,-4(fp)
 8015f84:	1090000c 	andi	r2,r2,16384
 8015f88:	10000226 	beq	r2,zero,8015f94 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 8015f8c:	00bffd44 	movi	r2,-11
 8015f90:	00000106 	br	8015f98 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 8015f94:	00bffec4 	movi	r2,-5
}
 8015f98:	e037883a 	mov	sp,fp
 8015f9c:	dfc00117 	ldw	ra,4(sp)
 8015fa0:	df000017 	ldw	fp,0(sp)
 8015fa4:	dec00204 	addi	sp,sp,8
 8015fa8:	f800283a 	ret

08015fac <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 8015fac:	defffa04 	addi	sp,sp,-24
 8015fb0:	dfc00515 	stw	ra,20(sp)
 8015fb4:	df000415 	stw	fp,16(sp)
 8015fb8:	df000404 	addi	fp,sp,16
 8015fbc:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 8015fc0:	0007883a 	mov	r3,zero
 8015fc4:	e0bfff17 	ldw	r2,-4(fp)
 8015fc8:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 8015fcc:	e0bfff17 	ldw	r2,-4(fp)
 8015fd0:	10800104 	addi	r2,r2,4
 8015fd4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8015fd8:	0005303a 	rdctl	r2,status
 8015fdc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8015fe0:	e0fffd17 	ldw	r3,-12(fp)
 8015fe4:	00bfff84 	movi	r2,-2
 8015fe8:	1884703a 	and	r2,r3,r2
 8015fec:	1001703a 	wrctl	status,r2
  
  return context;
 8015ff0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 8015ff4:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 8015ff8:	8016f1c0 	call	8016f1c <alt_tick>
 8015ffc:	e0bffc17 	ldw	r2,-16(fp)
 8016000:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8016004:	e0bffe17 	ldw	r2,-8(fp)
 8016008:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 801600c:	0001883a 	nop
 8016010:	e037883a 	mov	sp,fp
 8016014:	dfc00117 	ldw	ra,4(sp)
 8016018:	df000017 	ldw	fp,0(sp)
 801601c:	dec00204 	addi	sp,sp,8
 8016020:	f800283a 	ret

08016024 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 8016024:	defff804 	addi	sp,sp,-32
 8016028:	dfc00715 	stw	ra,28(sp)
 801602c:	df000615 	stw	fp,24(sp)
 8016030:	df000604 	addi	fp,sp,24
 8016034:	e13ffc15 	stw	r4,-16(fp)
 8016038:	e17ffd15 	stw	r5,-12(fp)
 801603c:	e1bffe15 	stw	r6,-8(fp)
 8016040:	e1ffff15 	stw	r7,-4(fp)
 8016044:	e0bfff17 	ldw	r2,-4(fp)
 8016048:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 801604c:	d0a80217 	ldw	r2,-24568(gp)
 8016050:	1000021e 	bne	r2,zero,801605c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 8016054:	e0bffb17 	ldw	r2,-20(fp)
 8016058:	d0a80215 	stw	r2,-24568(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 801605c:	e0bffc17 	ldw	r2,-16(fp)
 8016060:	10800104 	addi	r2,r2,4
 8016064:	00c001c4 	movi	r3,7
 8016068:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 801606c:	d8000015 	stw	zero,0(sp)
 8016070:	e1fffc17 	ldw	r7,-16(fp)
 8016074:	01820074 	movhi	r6,2049
 8016078:	3197eb04 	addi	r6,r6,24492
 801607c:	e17ffe17 	ldw	r5,-8(fp)
 8016080:	e13ffd17 	ldw	r4,-12(fp)
 8016084:	80165940 	call	8016594 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 8016088:	0001883a 	nop
 801608c:	e037883a 	mov	sp,fp
 8016090:	dfc00117 	ldw	ra,4(sp)
 8016094:	df000017 	ldw	fp,0(sp)
 8016098:	dec00204 	addi	sp,sp,8
 801609c:	f800283a 	ret

080160a0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 80160a0:	defff504 	addi	sp,sp,-44
 80160a4:	df000a15 	stw	fp,40(sp)
 80160a8:	df000a04 	addi	fp,sp,40
 80160ac:	e13ffc15 	stw	r4,-16(fp)
 80160b0:	e17ffd15 	stw	r5,-12(fp)
 80160b4:	e1bffe15 	stw	r6,-8(fp)
 80160b8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 80160bc:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 80160c0:	d0a80217 	ldw	r2,-24568(gp)
  
  if (alt_ticks_per_second ())
 80160c4:	10003c26 	beq	r2,zero,80161b8 <alt_alarm_start+0x118>
  {
    if (alarm)
 80160c8:	e0bffc17 	ldw	r2,-16(fp)
 80160cc:	10003826 	beq	r2,zero,80161b0 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 80160d0:	e0bffc17 	ldw	r2,-16(fp)
 80160d4:	e0fffe17 	ldw	r3,-8(fp)
 80160d8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 80160dc:	e0bffc17 	ldw	r2,-16(fp)
 80160e0:	e0ffff17 	ldw	r3,-4(fp)
 80160e4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80160e8:	0005303a 	rdctl	r2,status
 80160ec:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80160f0:	e0fff917 	ldw	r3,-28(fp)
 80160f4:	00bfff84 	movi	r2,-2
 80160f8:	1884703a 	and	r2,r3,r2
 80160fc:	1001703a 	wrctl	status,r2
  
  return context;
 8016100:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 8016104:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8016108:	d0a80317 	ldw	r2,-24564(gp)
      
      current_nticks = alt_nticks();
 801610c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 8016110:	e0fffd17 	ldw	r3,-12(fp)
 8016114:	e0bff617 	ldw	r2,-40(fp)
 8016118:	1885883a 	add	r2,r3,r2
 801611c:	10c00044 	addi	r3,r2,1
 8016120:	e0bffc17 	ldw	r2,-16(fp)
 8016124:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 8016128:	e0bffc17 	ldw	r2,-16(fp)
 801612c:	10c00217 	ldw	r3,8(r2)
 8016130:	e0bff617 	ldw	r2,-40(fp)
 8016134:	1880042e 	bgeu	r3,r2,8016148 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 8016138:	e0bffc17 	ldw	r2,-16(fp)
 801613c:	00c00044 	movi	r3,1
 8016140:	10c00405 	stb	r3,16(r2)
 8016144:	00000206 	br	8016150 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 8016148:	e0bffc17 	ldw	r2,-16(fp)
 801614c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 8016150:	e0bffc17 	ldw	r2,-16(fp)
 8016154:	d0e01304 	addi	r3,gp,-32692
 8016158:	e0fffa15 	stw	r3,-24(fp)
 801615c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8016160:	e0bffb17 	ldw	r2,-20(fp)
 8016164:	e0fffa17 	ldw	r3,-24(fp)
 8016168:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 801616c:	e0bffa17 	ldw	r2,-24(fp)
 8016170:	10c00017 	ldw	r3,0(r2)
 8016174:	e0bffb17 	ldw	r2,-20(fp)
 8016178:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 801617c:	e0bffa17 	ldw	r2,-24(fp)
 8016180:	10800017 	ldw	r2,0(r2)
 8016184:	e0fffb17 	ldw	r3,-20(fp)
 8016188:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 801618c:	e0bffa17 	ldw	r2,-24(fp)
 8016190:	e0fffb17 	ldw	r3,-20(fp)
 8016194:	10c00015 	stw	r3,0(r2)
 8016198:	e0bff817 	ldw	r2,-32(fp)
 801619c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80161a0:	e0bff717 	ldw	r2,-36(fp)
 80161a4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 80161a8:	0005883a 	mov	r2,zero
 80161ac:	00000306 	br	80161bc <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 80161b0:	00bffa84 	movi	r2,-22
 80161b4:	00000106 	br	80161bc <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 80161b8:	00bfde84 	movi	r2,-134
  }
}
 80161bc:	e037883a 	mov	sp,fp
 80161c0:	df000017 	ldw	fp,0(sp)
 80161c4:	dec00104 	addi	sp,sp,4
 80161c8:	f800283a 	ret

080161cc <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 80161cc:	defffa04 	addi	sp,sp,-24
 80161d0:	dfc00515 	stw	ra,20(sp)
 80161d4:	df000415 	stw	fp,16(sp)
 80161d8:	df000404 	addi	fp,sp,16
 80161dc:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 80161e0:	00800244 	movi	r2,9
 80161e4:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 80161e8:	014003f4 	movhi	r5,15
 80161ec:	29509004 	addi	r5,r5,16960
 80161f0:	e13ffd17 	ldw	r4,-12(fp)
 80161f4:	8001b580 	call	8001b58 <__mulsi3>
 80161f8:	100b883a 	mov	r5,r2
 80161fc:	0100bef4 	movhi	r4,763
 8016200:	213c2004 	addi	r4,r4,-3968
 8016204:	8001a9c0 	call	8001a9c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 8016208:	100b883a 	mov	r5,r2
 801620c:	01200034 	movhi	r4,32768
 8016210:	213fffc4 	addi	r4,r4,-1
 8016214:	8001a9c0 	call	8001a9c <__udivsi3>
 8016218:	100b883a 	mov	r5,r2
 801621c:	e13fff17 	ldw	r4,-4(fp)
 8016220:	8001a9c0 	call	8001a9c <__udivsi3>
 8016224:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 8016228:	e0bffe17 	ldw	r2,-8(fp)
 801622c:	10002a26 	beq	r2,zero,80162d8 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 8016230:	e03ffc15 	stw	zero,-16(fp)
 8016234:	00001706 	br	8016294 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 8016238:	00a00034 	movhi	r2,32768
 801623c:	10bfffc4 	addi	r2,r2,-1
 8016240:	10bfffc4 	addi	r2,r2,-1
 8016244:	103ffe1e 	bne	r2,zero,8016240 <__alt_data_end+0xfc016240>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 8016248:	014003f4 	movhi	r5,15
 801624c:	29509004 	addi	r5,r5,16960
 8016250:	e13ffd17 	ldw	r4,-12(fp)
 8016254:	8001b580 	call	8001b58 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 8016258:	100b883a 	mov	r5,r2
 801625c:	0100bef4 	movhi	r4,763
 8016260:	213c2004 	addi	r4,r4,-3968
 8016264:	8001a9c0 	call	8001a9c <__udivsi3>
 8016268:	100b883a 	mov	r5,r2
 801626c:	01200034 	movhi	r4,32768
 8016270:	213fffc4 	addi	r4,r4,-1
 8016274:	8001a9c0 	call	8001a9c <__udivsi3>
 8016278:	1007883a 	mov	r3,r2
 801627c:	e0bfff17 	ldw	r2,-4(fp)
 8016280:	10c5c83a 	sub	r2,r2,r3
 8016284:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 8016288:	e0bffc17 	ldw	r2,-16(fp)
 801628c:	10800044 	addi	r2,r2,1
 8016290:	e0bffc15 	stw	r2,-16(fp)
 8016294:	e0fffc17 	ldw	r3,-16(fp)
 8016298:	e0bffe17 	ldw	r2,-8(fp)
 801629c:	18bfe616 	blt	r3,r2,8016238 <__alt_data_end+0xfc016238>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 80162a0:	014003f4 	movhi	r5,15
 80162a4:	29509004 	addi	r5,r5,16960
 80162a8:	e13ffd17 	ldw	r4,-12(fp)
 80162ac:	8001b580 	call	8001b58 <__mulsi3>
 80162b0:	100b883a 	mov	r5,r2
 80162b4:	0100bef4 	movhi	r4,763
 80162b8:	213c2004 	addi	r4,r4,-3968
 80162bc:	8001a9c0 	call	8001a9c <__udivsi3>
 80162c0:	e17fff17 	ldw	r5,-4(fp)
 80162c4:	1009883a 	mov	r4,r2
 80162c8:	8001b580 	call	8001b58 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 80162cc:	10bfffc4 	addi	r2,r2,-1
 80162d0:	103ffe1e 	bne	r2,zero,80162cc <__alt_data_end+0xfc0162cc>
 80162d4:	00000d06 	br	801630c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 80162d8:	014003f4 	movhi	r5,15
 80162dc:	29509004 	addi	r5,r5,16960
 80162e0:	e13ffd17 	ldw	r4,-12(fp)
 80162e4:	8001b580 	call	8001b58 <__mulsi3>
 80162e8:	100b883a 	mov	r5,r2
 80162ec:	0100bef4 	movhi	r4,763
 80162f0:	213c2004 	addi	r4,r4,-3968
 80162f4:	8001a9c0 	call	8001a9c <__udivsi3>
 80162f8:	e17fff17 	ldw	r5,-4(fp)
 80162fc:	1009883a 	mov	r4,r2
 8016300:	8001b580 	call	8001b58 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 8016304:	10bfffc4 	addi	r2,r2,-1
 8016308:	00bffe16 	blt	zero,r2,8016304 <__alt_data_end+0xfc016304>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 801630c:	0005883a 	mov	r2,zero
}
 8016310:	e037883a 	mov	sp,fp
 8016314:	dfc00117 	ldw	ra,4(sp)
 8016318:	df000017 	ldw	fp,0(sp)
 801631c:	dec00204 	addi	sp,sp,8
 8016320:	f800283a 	ret

08016324 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8016324:	deffff04 	addi	sp,sp,-4
 8016328:	df000015 	stw	fp,0(sp)
 801632c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8016330:	0001883a 	nop
 8016334:	e037883a 	mov	sp,fp
 8016338:	df000017 	ldw	fp,0(sp)
 801633c:	dec00104 	addi	sp,sp,4
 8016340:	f800283a 	ret

08016344 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8016344:	defffe04 	addi	sp,sp,-8
 8016348:	dfc00115 	stw	ra,4(sp)
 801634c:	df000015 	stw	fp,0(sp)
 8016350:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8016354:	d0a00e17 	ldw	r2,-32712(gp)
 8016358:	10000326 	beq	r2,zero,8016368 <alt_get_errno+0x24>
 801635c:	d0a00e17 	ldw	r2,-32712(gp)
 8016360:	103ee83a 	callr	r2
 8016364:	00000106 	br	801636c <alt_get_errno+0x28>
 8016368:	d0a7fd04 	addi	r2,gp,-24588
}
 801636c:	e037883a 	mov	sp,fp
 8016370:	dfc00117 	ldw	ra,4(sp)
 8016374:	df000017 	ldw	fp,0(sp)
 8016378:	dec00204 	addi	sp,sp,8
 801637c:	f800283a 	ret

08016380 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 8016380:	defffa04 	addi	sp,sp,-24
 8016384:	dfc00515 	stw	ra,20(sp)
 8016388:	df000415 	stw	fp,16(sp)
 801638c:	df000404 	addi	fp,sp,16
 8016390:	e13ffe15 	stw	r4,-8(fp)
 8016394:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 8016398:	e0bffe17 	ldw	r2,-8(fp)
 801639c:	10000326 	beq	r2,zero,80163ac <alt_dev_llist_insert+0x2c>
 80163a0:	e0bffe17 	ldw	r2,-8(fp)
 80163a4:	10800217 	ldw	r2,8(r2)
 80163a8:	1000061e 	bne	r2,zero,80163c4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 80163ac:	80163440 	call	8016344 <alt_get_errno>
 80163b0:	1007883a 	mov	r3,r2
 80163b4:	00800584 	movi	r2,22
 80163b8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 80163bc:	00bffa84 	movi	r2,-22
 80163c0:	00001306 	br	8016410 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 80163c4:	e0bffe17 	ldw	r2,-8(fp)
 80163c8:	e0ffff17 	ldw	r3,-4(fp)
 80163cc:	e0fffc15 	stw	r3,-16(fp)
 80163d0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 80163d4:	e0bffd17 	ldw	r2,-12(fp)
 80163d8:	e0fffc17 	ldw	r3,-16(fp)
 80163dc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 80163e0:	e0bffc17 	ldw	r2,-16(fp)
 80163e4:	10c00017 	ldw	r3,0(r2)
 80163e8:	e0bffd17 	ldw	r2,-12(fp)
 80163ec:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 80163f0:	e0bffc17 	ldw	r2,-16(fp)
 80163f4:	10800017 	ldw	r2,0(r2)
 80163f8:	e0fffd17 	ldw	r3,-12(fp)
 80163fc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8016400:	e0bffc17 	ldw	r2,-16(fp)
 8016404:	e0fffd17 	ldw	r3,-12(fp)
 8016408:	10c00015 	stw	r3,0(r2)

  return 0;  
 801640c:	0005883a 	mov	r2,zero
}
 8016410:	e037883a 	mov	sp,fp
 8016414:	dfc00117 	ldw	ra,4(sp)
 8016418:	df000017 	ldw	fp,0(sp)
 801641c:	dec00204 	addi	sp,sp,8
 8016420:	f800283a 	ret

08016424 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 8016424:	defffd04 	addi	sp,sp,-12
 8016428:	dfc00215 	stw	ra,8(sp)
 801642c:	df000115 	stw	fp,4(sp)
 8016430:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8016434:	00820074 	movhi	r2,2049
 8016438:	109dea04 	addi	r2,r2,30632
 801643c:	e0bfff15 	stw	r2,-4(fp)
 8016440:	00000606 	br	801645c <_do_ctors+0x38>
        (*ctor) (); 
 8016444:	e0bfff17 	ldw	r2,-4(fp)
 8016448:	10800017 	ldw	r2,0(r2)
 801644c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8016450:	e0bfff17 	ldw	r2,-4(fp)
 8016454:	10bfff04 	addi	r2,r2,-4
 8016458:	e0bfff15 	stw	r2,-4(fp)
 801645c:	e0ffff17 	ldw	r3,-4(fp)
 8016460:	00820074 	movhi	r2,2049
 8016464:	109deb04 	addi	r2,r2,30636
 8016468:	18bff62e 	bgeu	r3,r2,8016444 <__alt_data_end+0xfc016444>
        (*ctor) (); 
}
 801646c:	0001883a 	nop
 8016470:	e037883a 	mov	sp,fp
 8016474:	dfc00117 	ldw	ra,4(sp)
 8016478:	df000017 	ldw	fp,0(sp)
 801647c:	dec00204 	addi	sp,sp,8
 8016480:	f800283a 	ret

08016484 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8016484:	defffd04 	addi	sp,sp,-12
 8016488:	dfc00215 	stw	ra,8(sp)
 801648c:	df000115 	stw	fp,4(sp)
 8016490:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8016494:	00820074 	movhi	r2,2049
 8016498:	109dea04 	addi	r2,r2,30632
 801649c:	e0bfff15 	stw	r2,-4(fp)
 80164a0:	00000606 	br	80164bc <_do_dtors+0x38>
        (*dtor) (); 
 80164a4:	e0bfff17 	ldw	r2,-4(fp)
 80164a8:	10800017 	ldw	r2,0(r2)
 80164ac:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 80164b0:	e0bfff17 	ldw	r2,-4(fp)
 80164b4:	10bfff04 	addi	r2,r2,-4
 80164b8:	e0bfff15 	stw	r2,-4(fp)
 80164bc:	e0ffff17 	ldw	r3,-4(fp)
 80164c0:	00820074 	movhi	r2,2049
 80164c4:	109deb04 	addi	r2,r2,30636
 80164c8:	18bff62e 	bgeu	r3,r2,80164a4 <__alt_data_end+0xfc0164a4>
        (*dtor) (); 
}
 80164cc:	0001883a 	nop
 80164d0:	e037883a 	mov	sp,fp
 80164d4:	dfc00117 	ldw	ra,4(sp)
 80164d8:	df000017 	ldw	fp,0(sp)
 80164dc:	dec00204 	addi	sp,sp,8
 80164e0:	f800283a 	ret

080164e4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 80164e4:	defffa04 	addi	sp,sp,-24
 80164e8:	dfc00515 	stw	ra,20(sp)
 80164ec:	df000415 	stw	fp,16(sp)
 80164f0:	df000404 	addi	fp,sp,16
 80164f4:	e13ffe15 	stw	r4,-8(fp)
 80164f8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 80164fc:	e0bfff17 	ldw	r2,-4(fp)
 8016500:	10800017 	ldw	r2,0(r2)
 8016504:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8016508:	e13ffe17 	ldw	r4,-8(fp)
 801650c:	80029940 	call	8002994 <strlen>
 8016510:	10800044 	addi	r2,r2,1
 8016514:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8016518:	00000d06 	br	8016550 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 801651c:	e0bffc17 	ldw	r2,-16(fp)
 8016520:	10800217 	ldw	r2,8(r2)
 8016524:	e0fffd17 	ldw	r3,-12(fp)
 8016528:	180d883a 	mov	r6,r3
 801652c:	e17ffe17 	ldw	r5,-8(fp)
 8016530:	1009883a 	mov	r4,r2
 8016534:	80172fc0 	call	80172fc <memcmp>
 8016538:	1000021e 	bne	r2,zero,8016544 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 801653c:	e0bffc17 	ldw	r2,-16(fp)
 8016540:	00000706 	br	8016560 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8016544:	e0bffc17 	ldw	r2,-16(fp)
 8016548:	10800017 	ldw	r2,0(r2)
 801654c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8016550:	e0fffc17 	ldw	r3,-16(fp)
 8016554:	e0bfff17 	ldw	r2,-4(fp)
 8016558:	18bff01e 	bne	r3,r2,801651c <__alt_data_end+0xfc01651c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 801655c:	0005883a 	mov	r2,zero
}
 8016560:	e037883a 	mov	sp,fp
 8016564:	dfc00117 	ldw	ra,4(sp)
 8016568:	df000017 	ldw	fp,0(sp)
 801656c:	dec00204 	addi	sp,sp,8
 8016570:	f800283a 	ret

08016574 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 8016574:	deffff04 	addi	sp,sp,-4
 8016578:	df000015 	stw	fp,0(sp)
 801657c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 8016580:	0001883a 	nop
 8016584:	e037883a 	mov	sp,fp
 8016588:	df000017 	ldw	fp,0(sp)
 801658c:	dec00104 	addi	sp,sp,4
 8016590:	f800283a 	ret

08016594 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8016594:	defff904 	addi	sp,sp,-28
 8016598:	dfc00615 	stw	ra,24(sp)
 801659c:	df000515 	stw	fp,20(sp)
 80165a0:	df000504 	addi	fp,sp,20
 80165a4:	e13ffc15 	stw	r4,-16(fp)
 80165a8:	e17ffd15 	stw	r5,-12(fp)
 80165ac:	e1bffe15 	stw	r6,-8(fp)
 80165b0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 80165b4:	e0800217 	ldw	r2,8(fp)
 80165b8:	d8800015 	stw	r2,0(sp)
 80165bc:	e1ffff17 	ldw	r7,-4(fp)
 80165c0:	e1bffe17 	ldw	r6,-8(fp)
 80165c4:	e17ffd17 	ldw	r5,-12(fp)
 80165c8:	e13ffc17 	ldw	r4,-16(fp)
 80165cc:	80167440 	call	8016744 <alt_iic_isr_register>
}  
 80165d0:	e037883a 	mov	sp,fp
 80165d4:	dfc00117 	ldw	ra,4(sp)
 80165d8:	df000017 	ldw	fp,0(sp)
 80165dc:	dec00204 	addi	sp,sp,8
 80165e0:	f800283a 	ret

080165e4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 80165e4:	defff904 	addi	sp,sp,-28
 80165e8:	df000615 	stw	fp,24(sp)
 80165ec:	df000604 	addi	fp,sp,24
 80165f0:	e13ffe15 	stw	r4,-8(fp)
 80165f4:	e17fff15 	stw	r5,-4(fp)
 80165f8:	e0bfff17 	ldw	r2,-4(fp)
 80165fc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8016600:	0005303a 	rdctl	r2,status
 8016604:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8016608:	e0fffb17 	ldw	r3,-20(fp)
 801660c:	00bfff84 	movi	r2,-2
 8016610:	1884703a 	and	r2,r3,r2
 8016614:	1001703a 	wrctl	status,r2
  
  return context;
 8016618:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 801661c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 8016620:	00c00044 	movi	r3,1
 8016624:	e0bffa17 	ldw	r2,-24(fp)
 8016628:	1884983a 	sll	r2,r3,r2
 801662c:	1007883a 	mov	r3,r2
 8016630:	d0a80117 	ldw	r2,-24572(gp)
 8016634:	1884b03a 	or	r2,r3,r2
 8016638:	d0a80115 	stw	r2,-24572(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 801663c:	d0a80117 	ldw	r2,-24572(gp)
 8016640:	100170fa 	wrctl	ienable,r2
 8016644:	e0bffc17 	ldw	r2,-16(fp)
 8016648:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801664c:	e0bffd17 	ldw	r2,-12(fp)
 8016650:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8016654:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 8016658:	0001883a 	nop
}
 801665c:	e037883a 	mov	sp,fp
 8016660:	df000017 	ldw	fp,0(sp)
 8016664:	dec00104 	addi	sp,sp,4
 8016668:	f800283a 	ret

0801666c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 801666c:	defff904 	addi	sp,sp,-28
 8016670:	df000615 	stw	fp,24(sp)
 8016674:	df000604 	addi	fp,sp,24
 8016678:	e13ffe15 	stw	r4,-8(fp)
 801667c:	e17fff15 	stw	r5,-4(fp)
 8016680:	e0bfff17 	ldw	r2,-4(fp)
 8016684:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8016688:	0005303a 	rdctl	r2,status
 801668c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8016690:	e0fffb17 	ldw	r3,-20(fp)
 8016694:	00bfff84 	movi	r2,-2
 8016698:	1884703a 	and	r2,r3,r2
 801669c:	1001703a 	wrctl	status,r2
  
  return context;
 80166a0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 80166a4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 80166a8:	00c00044 	movi	r3,1
 80166ac:	e0bffa17 	ldw	r2,-24(fp)
 80166b0:	1884983a 	sll	r2,r3,r2
 80166b4:	0084303a 	nor	r2,zero,r2
 80166b8:	1007883a 	mov	r3,r2
 80166bc:	d0a80117 	ldw	r2,-24572(gp)
 80166c0:	1884703a 	and	r2,r3,r2
 80166c4:	d0a80115 	stw	r2,-24572(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 80166c8:	d0a80117 	ldw	r2,-24572(gp)
 80166cc:	100170fa 	wrctl	ienable,r2
 80166d0:	e0bffc17 	ldw	r2,-16(fp)
 80166d4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80166d8:	e0bffd17 	ldw	r2,-12(fp)
 80166dc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 80166e0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 80166e4:	0001883a 	nop
}
 80166e8:	e037883a 	mov	sp,fp
 80166ec:	df000017 	ldw	fp,0(sp)
 80166f0:	dec00104 	addi	sp,sp,4
 80166f4:	f800283a 	ret

080166f8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 80166f8:	defffc04 	addi	sp,sp,-16
 80166fc:	df000315 	stw	fp,12(sp)
 8016700:	df000304 	addi	fp,sp,12
 8016704:	e13ffe15 	stw	r4,-8(fp)
 8016708:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 801670c:	000530fa 	rdctl	r2,ienable
 8016710:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 8016714:	00c00044 	movi	r3,1
 8016718:	e0bfff17 	ldw	r2,-4(fp)
 801671c:	1884983a 	sll	r2,r3,r2
 8016720:	1007883a 	mov	r3,r2
 8016724:	e0bffd17 	ldw	r2,-12(fp)
 8016728:	1884703a 	and	r2,r3,r2
 801672c:	1004c03a 	cmpne	r2,r2,zero
 8016730:	10803fcc 	andi	r2,r2,255
}
 8016734:	e037883a 	mov	sp,fp
 8016738:	df000017 	ldw	fp,0(sp)
 801673c:	dec00104 	addi	sp,sp,4
 8016740:	f800283a 	ret

08016744 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8016744:	defff504 	addi	sp,sp,-44
 8016748:	dfc00a15 	stw	ra,40(sp)
 801674c:	df000915 	stw	fp,36(sp)
 8016750:	df000904 	addi	fp,sp,36
 8016754:	e13ffc15 	stw	r4,-16(fp)
 8016758:	e17ffd15 	stw	r5,-12(fp)
 801675c:	e1bffe15 	stw	r6,-8(fp)
 8016760:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 8016764:	00bffa84 	movi	r2,-22
 8016768:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 801676c:	e0bffd17 	ldw	r2,-12(fp)
 8016770:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 8016774:	e0bff817 	ldw	r2,-32(fp)
 8016778:	10800808 	cmpgei	r2,r2,32
 801677c:	1000271e 	bne	r2,zero,801681c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8016780:	0005303a 	rdctl	r2,status
 8016784:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8016788:	e0fffb17 	ldw	r3,-20(fp)
 801678c:	00bfff84 	movi	r2,-2
 8016790:	1884703a 	and	r2,r3,r2
 8016794:	1001703a 	wrctl	status,r2
  
  return context;
 8016798:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 801679c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 80167a0:	008200b4 	movhi	r2,2050
 80167a4:	10af4804 	addi	r2,r2,-17120
 80167a8:	e0fff817 	ldw	r3,-32(fp)
 80167ac:	180690fa 	slli	r3,r3,3
 80167b0:	10c5883a 	add	r2,r2,r3
 80167b4:	e0fffe17 	ldw	r3,-8(fp)
 80167b8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 80167bc:	008200b4 	movhi	r2,2050
 80167c0:	10af4804 	addi	r2,r2,-17120
 80167c4:	e0fff817 	ldw	r3,-32(fp)
 80167c8:	180690fa 	slli	r3,r3,3
 80167cc:	10c5883a 	add	r2,r2,r3
 80167d0:	10800104 	addi	r2,r2,4
 80167d4:	e0ffff17 	ldw	r3,-4(fp)
 80167d8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 80167dc:	e0bffe17 	ldw	r2,-8(fp)
 80167e0:	10000526 	beq	r2,zero,80167f8 <alt_iic_isr_register+0xb4>
 80167e4:	e0bff817 	ldw	r2,-32(fp)
 80167e8:	100b883a 	mov	r5,r2
 80167ec:	e13ffc17 	ldw	r4,-16(fp)
 80167f0:	80165e40 	call	80165e4 <alt_ic_irq_enable>
 80167f4:	00000406 	br	8016808 <alt_iic_isr_register+0xc4>
 80167f8:	e0bff817 	ldw	r2,-32(fp)
 80167fc:	100b883a 	mov	r5,r2
 8016800:	e13ffc17 	ldw	r4,-16(fp)
 8016804:	801666c0 	call	801666c <alt_ic_irq_disable>
 8016808:	e0bff715 	stw	r2,-36(fp)
 801680c:	e0bffa17 	ldw	r2,-24(fp)
 8016810:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8016814:	e0bff917 	ldw	r2,-28(fp)
 8016818:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 801681c:	e0bff717 	ldw	r2,-36(fp)
}
 8016820:	e037883a 	mov	sp,fp
 8016824:	dfc00117 	ldw	ra,4(sp)
 8016828:	df000017 	ldw	fp,0(sp)
 801682c:	dec00204 	addi	sp,sp,8
 8016830:	f800283a 	ret

08016834 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 8016834:	defff804 	addi	sp,sp,-32
 8016838:	dfc00715 	stw	ra,28(sp)
 801683c:	df000615 	stw	fp,24(sp)
 8016840:	dc000515 	stw	r16,20(sp)
 8016844:	df000604 	addi	fp,sp,24
 8016848:	e13ffb15 	stw	r4,-20(fp)
 801684c:	e17ffc15 	stw	r5,-16(fp)
 8016850:	e1bffd15 	stw	r6,-12(fp)
 8016854:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 8016858:	e1bffe17 	ldw	r6,-8(fp)
 801685c:	e17ffd17 	ldw	r5,-12(fp)
 8016860:	e13ffc17 	ldw	r4,-16(fp)
 8016864:	8016abc0 	call	8016abc <open>
 8016868:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 801686c:	e0bffa17 	ldw	r2,-24(fp)
 8016870:	10002216 	blt	r2,zero,80168fc <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 8016874:	040200b4 	movhi	r16,2050
 8016878:	8422b304 	addi	r16,r16,-30004
 801687c:	e0bffa17 	ldw	r2,-24(fp)
 8016880:	01400304 	movi	r5,12
 8016884:	1009883a 	mov	r4,r2
 8016888:	8001b580 	call	8001b58 <__mulsi3>
 801688c:	8085883a 	add	r2,r16,r2
 8016890:	10c00017 	ldw	r3,0(r2)
 8016894:	e0bffb17 	ldw	r2,-20(fp)
 8016898:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 801689c:	040200b4 	movhi	r16,2050
 80168a0:	8422b304 	addi	r16,r16,-30004
 80168a4:	e0bffa17 	ldw	r2,-24(fp)
 80168a8:	01400304 	movi	r5,12
 80168ac:	1009883a 	mov	r4,r2
 80168b0:	8001b580 	call	8001b58 <__mulsi3>
 80168b4:	8085883a 	add	r2,r16,r2
 80168b8:	10800104 	addi	r2,r2,4
 80168bc:	10c00017 	ldw	r3,0(r2)
 80168c0:	e0bffb17 	ldw	r2,-20(fp)
 80168c4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 80168c8:	040200b4 	movhi	r16,2050
 80168cc:	8422b304 	addi	r16,r16,-30004
 80168d0:	e0bffa17 	ldw	r2,-24(fp)
 80168d4:	01400304 	movi	r5,12
 80168d8:	1009883a 	mov	r4,r2
 80168dc:	8001b580 	call	8001b58 <__mulsi3>
 80168e0:	8085883a 	add	r2,r16,r2
 80168e4:	10800204 	addi	r2,r2,8
 80168e8:	10c00017 	ldw	r3,0(r2)
 80168ec:	e0bffb17 	ldw	r2,-20(fp)
 80168f0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 80168f4:	e13ffa17 	ldw	r4,-24(fp)
 80168f8:	80135b00 	call	80135b0 <alt_release_fd>
  }
} 
 80168fc:	0001883a 	nop
 8016900:	e6ffff04 	addi	sp,fp,-4
 8016904:	dfc00217 	ldw	ra,8(sp)
 8016908:	df000117 	ldw	fp,4(sp)
 801690c:	dc000017 	ldw	r16,0(sp)
 8016910:	dec00304 	addi	sp,sp,12
 8016914:	f800283a 	ret

08016918 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 8016918:	defffb04 	addi	sp,sp,-20
 801691c:	dfc00415 	stw	ra,16(sp)
 8016920:	df000315 	stw	fp,12(sp)
 8016924:	df000304 	addi	fp,sp,12
 8016928:	e13ffd15 	stw	r4,-12(fp)
 801692c:	e17ffe15 	stw	r5,-8(fp)
 8016930:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 8016934:	01c07fc4 	movi	r7,511
 8016938:	01800044 	movi	r6,1
 801693c:	e17ffd17 	ldw	r5,-12(fp)
 8016940:	010200b4 	movhi	r4,2050
 8016944:	2122b604 	addi	r4,r4,-29992
 8016948:	80168340 	call	8016834 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 801694c:	01c07fc4 	movi	r7,511
 8016950:	000d883a 	mov	r6,zero
 8016954:	e17ffe17 	ldw	r5,-8(fp)
 8016958:	010200b4 	movhi	r4,2050
 801695c:	2122b304 	addi	r4,r4,-30004
 8016960:	80168340 	call	8016834 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 8016964:	01c07fc4 	movi	r7,511
 8016968:	01800044 	movi	r6,1
 801696c:	e17fff17 	ldw	r5,-4(fp)
 8016970:	010200b4 	movhi	r4,2050
 8016974:	2122b904 	addi	r4,r4,-29980
 8016978:	80168340 	call	8016834 <alt_open_fd>
}  
 801697c:	0001883a 	nop
 8016980:	e037883a 	mov	sp,fp
 8016984:	dfc00117 	ldw	ra,4(sp)
 8016988:	df000017 	ldw	fp,0(sp)
 801698c:	dec00204 	addi	sp,sp,8
 8016990:	f800283a 	ret

08016994 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8016994:	defffe04 	addi	sp,sp,-8
 8016998:	dfc00115 	stw	ra,4(sp)
 801699c:	df000015 	stw	fp,0(sp)
 80169a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80169a4:	d0a00e17 	ldw	r2,-32712(gp)
 80169a8:	10000326 	beq	r2,zero,80169b8 <alt_get_errno+0x24>
 80169ac:	d0a00e17 	ldw	r2,-32712(gp)
 80169b0:	103ee83a 	callr	r2
 80169b4:	00000106 	br	80169bc <alt_get_errno+0x28>
 80169b8:	d0a7fd04 	addi	r2,gp,-24588
}
 80169bc:	e037883a 	mov	sp,fp
 80169c0:	dfc00117 	ldw	ra,4(sp)
 80169c4:	df000017 	ldw	fp,0(sp)
 80169c8:	dec00204 	addi	sp,sp,8
 80169cc:	f800283a 	ret

080169d0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 80169d0:	defffb04 	addi	sp,sp,-20
 80169d4:	dfc00415 	stw	ra,16(sp)
 80169d8:	df000315 	stw	fp,12(sp)
 80169dc:	dc000215 	stw	r16,8(sp)
 80169e0:	df000304 	addi	fp,sp,12
 80169e4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 80169e8:	e0bffe17 	ldw	r2,-8(fp)
 80169ec:	10800217 	ldw	r2,8(r2)
 80169f0:	10d00034 	orhi	r3,r2,16384
 80169f4:	e0bffe17 	ldw	r2,-8(fp)
 80169f8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 80169fc:	e03ffd15 	stw	zero,-12(fp)
 8016a00:	00002306 	br	8016a90 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8016a04:	040200b4 	movhi	r16,2050
 8016a08:	8422b304 	addi	r16,r16,-30004
 8016a0c:	e0bffd17 	ldw	r2,-12(fp)
 8016a10:	01400304 	movi	r5,12
 8016a14:	1009883a 	mov	r4,r2
 8016a18:	8001b580 	call	8001b58 <__mulsi3>
 8016a1c:	8085883a 	add	r2,r16,r2
 8016a20:	10c00017 	ldw	r3,0(r2)
 8016a24:	e0bffe17 	ldw	r2,-8(fp)
 8016a28:	10800017 	ldw	r2,0(r2)
 8016a2c:	1880151e 	bne	r3,r2,8016a84 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8016a30:	040200b4 	movhi	r16,2050
 8016a34:	8422b304 	addi	r16,r16,-30004
 8016a38:	e0bffd17 	ldw	r2,-12(fp)
 8016a3c:	01400304 	movi	r5,12
 8016a40:	1009883a 	mov	r4,r2
 8016a44:	8001b580 	call	8001b58 <__mulsi3>
 8016a48:	8085883a 	add	r2,r16,r2
 8016a4c:	10800204 	addi	r2,r2,8
 8016a50:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8016a54:	10000b0e 	bge	r2,zero,8016a84 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 8016a58:	01400304 	movi	r5,12
 8016a5c:	e13ffd17 	ldw	r4,-12(fp)
 8016a60:	8001b580 	call	8001b58 <__mulsi3>
 8016a64:	1007883a 	mov	r3,r2
 8016a68:	008200b4 	movhi	r2,2050
 8016a6c:	10a2b304 	addi	r2,r2,-30004
 8016a70:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8016a74:	e0bffe17 	ldw	r2,-8(fp)
 8016a78:	18800226 	beq	r3,r2,8016a84 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 8016a7c:	00bffcc4 	movi	r2,-13
 8016a80:	00000806 	br	8016aa4 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8016a84:	e0bffd17 	ldw	r2,-12(fp)
 8016a88:	10800044 	addi	r2,r2,1
 8016a8c:	e0bffd15 	stw	r2,-12(fp)
 8016a90:	d0a00d17 	ldw	r2,-32716(gp)
 8016a94:	1007883a 	mov	r3,r2
 8016a98:	e0bffd17 	ldw	r2,-12(fp)
 8016a9c:	18bfd92e 	bgeu	r3,r2,8016a04 <__alt_data_end+0xfc016a04>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 8016aa0:	0005883a 	mov	r2,zero
}
 8016aa4:	e6ffff04 	addi	sp,fp,-4
 8016aa8:	dfc00217 	ldw	ra,8(sp)
 8016aac:	df000117 	ldw	fp,4(sp)
 8016ab0:	dc000017 	ldw	r16,0(sp)
 8016ab4:	dec00304 	addi	sp,sp,12
 8016ab8:	f800283a 	ret

08016abc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 8016abc:	defff604 	addi	sp,sp,-40
 8016ac0:	dfc00915 	stw	ra,36(sp)
 8016ac4:	df000815 	stw	fp,32(sp)
 8016ac8:	df000804 	addi	fp,sp,32
 8016acc:	e13ffd15 	stw	r4,-12(fp)
 8016ad0:	e17ffe15 	stw	r5,-8(fp)
 8016ad4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 8016ad8:	00bfffc4 	movi	r2,-1
 8016adc:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 8016ae0:	00bffb44 	movi	r2,-19
 8016ae4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 8016ae8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 8016aec:	d1600b04 	addi	r5,gp,-32724
 8016af0:	e13ffd17 	ldw	r4,-12(fp)
 8016af4:	80164e40 	call	80164e4 <alt_find_dev>
 8016af8:	e0bff815 	stw	r2,-32(fp)
 8016afc:	e0bff817 	ldw	r2,-32(fp)
 8016b00:	1000051e 	bne	r2,zero,8016b18 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 8016b04:	e13ffd17 	ldw	r4,-12(fp)
 8016b08:	80170480 	call	8017048 <alt_find_file>
 8016b0c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 8016b10:	00800044 	movi	r2,1
 8016b14:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 8016b18:	e0bff817 	ldw	r2,-32(fp)
 8016b1c:	10002b26 	beq	r2,zero,8016bcc <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 8016b20:	e13ff817 	ldw	r4,-32(fp)
 8016b24:	80171500 	call	8017150 <alt_get_fd>
 8016b28:	e0bff915 	stw	r2,-28(fp)
 8016b2c:	e0bff917 	ldw	r2,-28(fp)
 8016b30:	1000030e 	bge	r2,zero,8016b40 <open+0x84>
    {
      status = index;
 8016b34:	e0bff917 	ldw	r2,-28(fp)
 8016b38:	e0bffa15 	stw	r2,-24(fp)
 8016b3c:	00002506 	br	8016bd4 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 8016b40:	01400304 	movi	r5,12
 8016b44:	e13ff917 	ldw	r4,-28(fp)
 8016b48:	8001b580 	call	8001b58 <__mulsi3>
 8016b4c:	1007883a 	mov	r3,r2
 8016b50:	008200b4 	movhi	r2,2050
 8016b54:	10a2b304 	addi	r2,r2,-30004
 8016b58:	1885883a 	add	r2,r3,r2
 8016b5c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 8016b60:	e0fffe17 	ldw	r3,-8(fp)
 8016b64:	00900034 	movhi	r2,16384
 8016b68:	10bfffc4 	addi	r2,r2,-1
 8016b6c:	1886703a 	and	r3,r3,r2
 8016b70:	e0bffc17 	ldw	r2,-16(fp)
 8016b74:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 8016b78:	e0bffb17 	ldw	r2,-20(fp)
 8016b7c:	1000051e 	bne	r2,zero,8016b94 <open+0xd8>
 8016b80:	e13ffc17 	ldw	r4,-16(fp)
 8016b84:	80169d00 	call	80169d0 <alt_file_locked>
 8016b88:	e0bffa15 	stw	r2,-24(fp)
 8016b8c:	e0bffa17 	ldw	r2,-24(fp)
 8016b90:	10001016 	blt	r2,zero,8016bd4 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8016b94:	e0bff817 	ldw	r2,-32(fp)
 8016b98:	10800317 	ldw	r2,12(r2)
 8016b9c:	10000826 	beq	r2,zero,8016bc0 <open+0x104>
 8016ba0:	e0bff817 	ldw	r2,-32(fp)
 8016ba4:	10800317 	ldw	r2,12(r2)
 8016ba8:	e1ffff17 	ldw	r7,-4(fp)
 8016bac:	e1bffe17 	ldw	r6,-8(fp)
 8016bb0:	e17ffd17 	ldw	r5,-12(fp)
 8016bb4:	e13ffc17 	ldw	r4,-16(fp)
 8016bb8:	103ee83a 	callr	r2
 8016bbc:	00000106 	br	8016bc4 <open+0x108>
 8016bc0:	0005883a 	mov	r2,zero
 8016bc4:	e0bffa15 	stw	r2,-24(fp)
 8016bc8:	00000206 	br	8016bd4 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8016bcc:	00bffb44 	movi	r2,-19
 8016bd0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 8016bd4:	e0bffa17 	ldw	r2,-24(fp)
 8016bd8:	1000090e 	bge	r2,zero,8016c00 <open+0x144>
  {
    alt_release_fd (index);  
 8016bdc:	e13ff917 	ldw	r4,-28(fp)
 8016be0:	80135b00 	call	80135b0 <alt_release_fd>
    ALT_ERRNO = -status;
 8016be4:	80169940 	call	8016994 <alt_get_errno>
 8016be8:	1007883a 	mov	r3,r2
 8016bec:	e0bffa17 	ldw	r2,-24(fp)
 8016bf0:	0085c83a 	sub	r2,zero,r2
 8016bf4:	18800015 	stw	r2,0(r3)
    return -1;
 8016bf8:	00bfffc4 	movi	r2,-1
 8016bfc:	00000106 	br	8016c04 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 8016c00:	e0bff917 	ldw	r2,-28(fp)
}
 8016c04:	e037883a 	mov	sp,fp
 8016c08:	dfc00117 	ldw	ra,4(sp)
 8016c0c:	df000017 	ldw	fp,0(sp)
 8016c10:	dec00204 	addi	sp,sp,8
 8016c14:	f800283a 	ret

08016c18 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
 8016c18:	defff204 	addi	sp,sp,-56
 8016c1c:	dfc00a15 	stw	ra,40(sp)
 8016c20:	df000915 	stw	fp,36(sp)
 8016c24:	df000904 	addi	fp,sp,36
 8016c28:	e13fff15 	stw	r4,-4(fp)
 8016c2c:	e1400215 	stw	r5,8(fp)
 8016c30:	e1800315 	stw	r6,12(fp)
 8016c34:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
 8016c38:	e0800204 	addi	r2,fp,8
 8016c3c:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
 8016c40:	e0bfff17 	ldw	r2,-4(fp)
 8016c44:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
 8016c48:	00006f06 	br	8016e08 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 8016c4c:	e0bff807 	ldb	r2,-32(fp)
 8016c50:	10800960 	cmpeqi	r2,r2,37
 8016c54:	1000041e 	bne	r2,zero,8016c68 <alt_printf+0x50>
        {
            alt_putchar(c);
 8016c58:	e0bff807 	ldb	r2,-32(fp)
 8016c5c:	1009883a 	mov	r4,r2
 8016c60:	8016e440 	call	8016e44 <alt_putchar>
 8016c64:	00006806 	br	8016e08 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
 8016c68:	e0bff717 	ldw	r2,-36(fp)
 8016c6c:	10c00044 	addi	r3,r2,1
 8016c70:	e0fff715 	stw	r3,-36(fp)
 8016c74:	10800003 	ldbu	r2,0(r2)
 8016c78:	e0bff805 	stb	r2,-32(fp)
 8016c7c:	e0bff807 	ldb	r2,-32(fp)
 8016c80:	10006926 	beq	r2,zero,8016e28 <alt_printf+0x210>
            {
                if (c == '%')
 8016c84:	e0bff807 	ldb	r2,-32(fp)
 8016c88:	10800958 	cmpnei	r2,r2,37
 8016c8c:	1000041e 	bne	r2,zero,8016ca0 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
 8016c90:	e0bff807 	ldb	r2,-32(fp)
 8016c94:	1009883a 	mov	r4,r2
 8016c98:	8016e440 	call	8016e44 <alt_putchar>
 8016c9c:	00005a06 	br	8016e08 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
 8016ca0:	e0bff807 	ldb	r2,-32(fp)
 8016ca4:	108018d8 	cmpnei	r2,r2,99
 8016ca8:	1000081e 	bne	r2,zero,8016ccc <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
 8016cac:	e0bffe17 	ldw	r2,-8(fp)
 8016cb0:	10c00104 	addi	r3,r2,4
 8016cb4:	e0fffe15 	stw	r3,-8(fp)
 8016cb8:	10800017 	ldw	r2,0(r2)
 8016cbc:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
 8016cc0:	e13ffd17 	ldw	r4,-12(fp)
 8016cc4:	8016e440 	call	8016e44 <alt_putchar>
 8016cc8:	00004f06 	br	8016e08 <alt_printf+0x1f0>
                }
                else if (c == 'x')
 8016ccc:	e0bff807 	ldb	r2,-32(fp)
 8016cd0:	10801e18 	cmpnei	r2,r2,120
 8016cd4:	1000341e 	bne	r2,zero,8016da8 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
 8016cd8:	e0bffe17 	ldw	r2,-8(fp)
 8016cdc:	10c00104 	addi	r3,r2,4
 8016ce0:	e0fffe15 	stw	r3,-8(fp)
 8016ce4:	10800017 	ldw	r2,0(r2)
 8016ce8:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
 8016cec:	e0bffb17 	ldw	r2,-20(fp)
 8016cf0:	1000031e 	bne	r2,zero,8016d00 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
 8016cf4:	01000c04 	movi	r4,48
 8016cf8:	8016e440 	call	8016e44 <alt_putchar>
                        continue;
 8016cfc:	00004206 	br	8016e08 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
 8016d00:	00800704 	movi	r2,28
 8016d04:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
 8016d08:	00000306 	br	8016d18 <alt_printf+0x100>
                        digit_shift -= 4;
 8016d0c:	e0bff917 	ldw	r2,-28(fp)
 8016d10:	10bfff04 	addi	r2,r2,-4
 8016d14:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
 8016d18:	00c003c4 	movi	r3,15
 8016d1c:	e0bff917 	ldw	r2,-28(fp)
 8016d20:	1884983a 	sll	r2,r3,r2
 8016d24:	1007883a 	mov	r3,r2
 8016d28:	e0bffb17 	ldw	r2,-20(fp)
 8016d2c:	1884703a 	and	r2,r3,r2
 8016d30:	103ff626 	beq	r2,zero,8016d0c <__alt_data_end+0xfc016d0c>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 8016d34:	00001906 	br	8016d9c <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 8016d38:	00c003c4 	movi	r3,15
 8016d3c:	e0bff917 	ldw	r2,-28(fp)
 8016d40:	1884983a 	sll	r2,r3,r2
 8016d44:	1007883a 	mov	r3,r2
 8016d48:	e0bffb17 	ldw	r2,-20(fp)
 8016d4c:	1886703a 	and	r3,r3,r2
 8016d50:	e0bff917 	ldw	r2,-28(fp)
 8016d54:	1884d83a 	srl	r2,r3,r2
 8016d58:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
 8016d5c:	e0bffc17 	ldw	r2,-16(fp)
 8016d60:	108002a8 	cmpgeui	r2,r2,10
 8016d64:	1000041e 	bne	r2,zero,8016d78 <alt_printf+0x160>
                            c = '0' + digit;
 8016d68:	e0bffc17 	ldw	r2,-16(fp)
 8016d6c:	10800c04 	addi	r2,r2,48
 8016d70:	e0bff805 	stb	r2,-32(fp)
 8016d74:	00000306 	br	8016d84 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
 8016d78:	e0bffc17 	ldw	r2,-16(fp)
 8016d7c:	108015c4 	addi	r2,r2,87
 8016d80:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
 8016d84:	e0bff807 	ldb	r2,-32(fp)
 8016d88:	1009883a 	mov	r4,r2
 8016d8c:	8016e440 	call	8016e44 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 8016d90:	e0bff917 	ldw	r2,-28(fp)
 8016d94:	10bfff04 	addi	r2,r2,-4
 8016d98:	e0bff915 	stw	r2,-28(fp)
 8016d9c:	e0bff917 	ldw	r2,-28(fp)
 8016da0:	103fe50e 	bge	r2,zero,8016d38 <__alt_data_end+0xfc016d38>
 8016da4:	00001806 	br	8016e08 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
 8016da8:	e0bff807 	ldb	r2,-32(fp)
 8016dac:	10801cd8 	cmpnei	r2,r2,115
 8016db0:	1000151e 	bne	r2,zero,8016e08 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
 8016db4:	e0bffe17 	ldw	r2,-8(fp)
 8016db8:	10c00104 	addi	r3,r2,4
 8016dbc:	e0fffe15 	stw	r3,-8(fp)
 8016dc0:	10800017 	ldw	r2,0(r2)
 8016dc4:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
 8016dc8:	00000906 	br	8016df0 <alt_printf+0x1d8>
                      alt_putchar(*s++);
 8016dcc:	e0bffa17 	ldw	r2,-24(fp)
 8016dd0:	10c00044 	addi	r3,r2,1
 8016dd4:	e0fffa15 	stw	r3,-24(fp)
 8016dd8:	10800003 	ldbu	r2,0(r2)
 8016ddc:	10803fcc 	andi	r2,r2,255
 8016de0:	1080201c 	xori	r2,r2,128
 8016de4:	10bfe004 	addi	r2,r2,-128
 8016de8:	1009883a 	mov	r4,r2
 8016dec:	8016e440 	call	8016e44 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
 8016df0:	e0bffa17 	ldw	r2,-24(fp)
 8016df4:	10800003 	ldbu	r2,0(r2)
 8016df8:	10803fcc 	andi	r2,r2,255
 8016dfc:	1080201c 	xori	r2,r2,128
 8016e00:	10bfe004 	addi	r2,r2,-128
 8016e04:	103ff11e 	bne	r2,zero,8016dcc <__alt_data_end+0xfc016dcc>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 8016e08:	e0bff717 	ldw	r2,-36(fp)
 8016e0c:	10c00044 	addi	r3,r2,1
 8016e10:	e0fff715 	stw	r3,-36(fp)
 8016e14:	10800003 	ldbu	r2,0(r2)
 8016e18:	e0bff805 	stb	r2,-32(fp)
 8016e1c:	e0bff807 	ldb	r2,-32(fp)
 8016e20:	103f8a1e 	bne	r2,zero,8016c4c <__alt_data_end+0xfc016c4c>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 8016e24:	00000106 	br	8016e2c <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
 8016e28:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 8016e2c:	0001883a 	nop
 8016e30:	e037883a 	mov	sp,fp
 8016e34:	dfc00117 	ldw	ra,4(sp)
 8016e38:	df000017 	ldw	fp,0(sp)
 8016e3c:	dec00504 	addi	sp,sp,20
 8016e40:	f800283a 	ret

08016e44 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 8016e44:	defffd04 	addi	sp,sp,-12
 8016e48:	dfc00215 	stw	ra,8(sp)
 8016e4c:	df000115 	stw	fp,4(sp)
 8016e50:	df000104 	addi	fp,sp,4
 8016e54:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
 8016e58:	d0a00417 	ldw	r2,-32752(gp)
 8016e5c:	10800217 	ldw	r2,8(r2)
 8016e60:	100b883a 	mov	r5,r2
 8016e64:	e13fff17 	ldw	r4,-4(fp)
 8016e68:	80174180 	call	8017418 <putc>
#endif
#endif
}
 8016e6c:	e037883a 	mov	sp,fp
 8016e70:	dfc00117 	ldw	ra,4(sp)
 8016e74:	df000017 	ldw	fp,0(sp)
 8016e78:	dec00204 	addi	sp,sp,8
 8016e7c:	f800283a 	ret

08016e80 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 8016e80:	defffa04 	addi	sp,sp,-24
 8016e84:	df000515 	stw	fp,20(sp)
 8016e88:	df000504 	addi	fp,sp,20
 8016e8c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8016e90:	0005303a 	rdctl	r2,status
 8016e94:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8016e98:	e0fffc17 	ldw	r3,-16(fp)
 8016e9c:	00bfff84 	movi	r2,-2
 8016ea0:	1884703a 	and	r2,r3,r2
 8016ea4:	1001703a 	wrctl	status,r2
  
  return context;
 8016ea8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 8016eac:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 8016eb0:	e0bfff17 	ldw	r2,-4(fp)
 8016eb4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 8016eb8:	e0bffd17 	ldw	r2,-12(fp)
 8016ebc:	10800017 	ldw	r2,0(r2)
 8016ec0:	e0fffd17 	ldw	r3,-12(fp)
 8016ec4:	18c00117 	ldw	r3,4(r3)
 8016ec8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 8016ecc:	e0bffd17 	ldw	r2,-12(fp)
 8016ed0:	10800117 	ldw	r2,4(r2)
 8016ed4:	e0fffd17 	ldw	r3,-12(fp)
 8016ed8:	18c00017 	ldw	r3,0(r3)
 8016edc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 8016ee0:	e0bffd17 	ldw	r2,-12(fp)
 8016ee4:	e0fffd17 	ldw	r3,-12(fp)
 8016ee8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 8016eec:	e0bffd17 	ldw	r2,-12(fp)
 8016ef0:	e0fffd17 	ldw	r3,-12(fp)
 8016ef4:	10c00015 	stw	r3,0(r2)
 8016ef8:	e0bffb17 	ldw	r2,-20(fp)
 8016efc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8016f00:	e0bffe17 	ldw	r2,-8(fp)
 8016f04:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 8016f08:	0001883a 	nop
 8016f0c:	e037883a 	mov	sp,fp
 8016f10:	df000017 	ldw	fp,0(sp)
 8016f14:	dec00104 	addi	sp,sp,4
 8016f18:	f800283a 	ret

08016f1c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8016f1c:	defffb04 	addi	sp,sp,-20
 8016f20:	dfc00415 	stw	ra,16(sp)
 8016f24:	df000315 	stw	fp,12(sp)
 8016f28:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8016f2c:	d0a01317 	ldw	r2,-32692(gp)
 8016f30:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 8016f34:	d0a80317 	ldw	r2,-24564(gp)
 8016f38:	10800044 	addi	r2,r2,1
 8016f3c:	d0a80315 	stw	r2,-24564(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8016f40:	00002e06 	br	8016ffc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 8016f44:	e0bffd17 	ldw	r2,-12(fp)
 8016f48:	10800017 	ldw	r2,0(r2)
 8016f4c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 8016f50:	e0bffd17 	ldw	r2,-12(fp)
 8016f54:	10800403 	ldbu	r2,16(r2)
 8016f58:	10803fcc 	andi	r2,r2,255
 8016f5c:	10000426 	beq	r2,zero,8016f70 <alt_tick+0x54>
 8016f60:	d0a80317 	ldw	r2,-24564(gp)
 8016f64:	1000021e 	bne	r2,zero,8016f70 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 8016f68:	e0bffd17 	ldw	r2,-12(fp)
 8016f6c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 8016f70:	e0bffd17 	ldw	r2,-12(fp)
 8016f74:	10800217 	ldw	r2,8(r2)
 8016f78:	d0e80317 	ldw	r3,-24564(gp)
 8016f7c:	18801d36 	bltu	r3,r2,8016ff4 <alt_tick+0xd8>
 8016f80:	e0bffd17 	ldw	r2,-12(fp)
 8016f84:	10800403 	ldbu	r2,16(r2)
 8016f88:	10803fcc 	andi	r2,r2,255
 8016f8c:	1000191e 	bne	r2,zero,8016ff4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 8016f90:	e0bffd17 	ldw	r2,-12(fp)
 8016f94:	10800317 	ldw	r2,12(r2)
 8016f98:	e0fffd17 	ldw	r3,-12(fp)
 8016f9c:	18c00517 	ldw	r3,20(r3)
 8016fa0:	1809883a 	mov	r4,r3
 8016fa4:	103ee83a 	callr	r2
 8016fa8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 8016fac:	e0bfff17 	ldw	r2,-4(fp)
 8016fb0:	1000031e 	bne	r2,zero,8016fc0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 8016fb4:	e13ffd17 	ldw	r4,-12(fp)
 8016fb8:	8016e800 	call	8016e80 <alt_alarm_stop>
 8016fbc:	00000d06 	br	8016ff4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 8016fc0:	e0bffd17 	ldw	r2,-12(fp)
 8016fc4:	10c00217 	ldw	r3,8(r2)
 8016fc8:	e0bfff17 	ldw	r2,-4(fp)
 8016fcc:	1887883a 	add	r3,r3,r2
 8016fd0:	e0bffd17 	ldw	r2,-12(fp)
 8016fd4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 8016fd8:	e0bffd17 	ldw	r2,-12(fp)
 8016fdc:	10c00217 	ldw	r3,8(r2)
 8016fe0:	d0a80317 	ldw	r2,-24564(gp)
 8016fe4:	1880032e 	bgeu	r3,r2,8016ff4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 8016fe8:	e0bffd17 	ldw	r2,-12(fp)
 8016fec:	00c00044 	movi	r3,1
 8016ff0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 8016ff4:	e0bffe17 	ldw	r2,-8(fp)
 8016ff8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8016ffc:	e0fffd17 	ldw	r3,-12(fp)
 8017000:	d0a01304 	addi	r2,gp,-32692
 8017004:	18bfcf1e 	bne	r3,r2,8016f44 <__alt_data_end+0xfc016f44>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 8017008:	0001883a 	nop
}
 801700c:	0001883a 	nop
 8017010:	e037883a 	mov	sp,fp
 8017014:	dfc00117 	ldw	ra,4(sp)
 8017018:	df000017 	ldw	fp,0(sp)
 801701c:	dec00204 	addi	sp,sp,8
 8017020:	f800283a 	ret

08017024 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 8017024:	deffff04 	addi	sp,sp,-4
 8017028:	df000015 	stw	fp,0(sp)
 801702c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 8017030:	000170fa 	wrctl	ienable,zero
}
 8017034:	0001883a 	nop
 8017038:	e037883a 	mov	sp,fp
 801703c:	df000017 	ldw	fp,0(sp)
 8017040:	dec00104 	addi	sp,sp,4
 8017044:	f800283a 	ret

08017048 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 8017048:	defffb04 	addi	sp,sp,-20
 801704c:	dfc00415 	stw	ra,16(sp)
 8017050:	df000315 	stw	fp,12(sp)
 8017054:	df000304 	addi	fp,sp,12
 8017058:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 801705c:	d0a00917 	ldw	r2,-32732(gp)
 8017060:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8017064:	00003106 	br	801712c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 8017068:	e0bffd17 	ldw	r2,-12(fp)
 801706c:	10800217 	ldw	r2,8(r2)
 8017070:	1009883a 	mov	r4,r2
 8017074:	80029940 	call	8002994 <strlen>
 8017078:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 801707c:	e0bffd17 	ldw	r2,-12(fp)
 8017080:	10c00217 	ldw	r3,8(r2)
 8017084:	e0bffe17 	ldw	r2,-8(fp)
 8017088:	10bfffc4 	addi	r2,r2,-1
 801708c:	1885883a 	add	r2,r3,r2
 8017090:	10800003 	ldbu	r2,0(r2)
 8017094:	10803fcc 	andi	r2,r2,255
 8017098:	1080201c 	xori	r2,r2,128
 801709c:	10bfe004 	addi	r2,r2,-128
 80170a0:	10800bd8 	cmpnei	r2,r2,47
 80170a4:	1000031e 	bne	r2,zero,80170b4 <alt_find_file+0x6c>
    {
      len -= 1;
 80170a8:	e0bffe17 	ldw	r2,-8(fp)
 80170ac:	10bfffc4 	addi	r2,r2,-1
 80170b0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 80170b4:	e0bffe17 	ldw	r2,-8(fp)
 80170b8:	e0ffff17 	ldw	r3,-4(fp)
 80170bc:	1885883a 	add	r2,r3,r2
 80170c0:	10800003 	ldbu	r2,0(r2)
 80170c4:	10803fcc 	andi	r2,r2,255
 80170c8:	1080201c 	xori	r2,r2,128
 80170cc:	10bfe004 	addi	r2,r2,-128
 80170d0:	10800be0 	cmpeqi	r2,r2,47
 80170d4:	1000081e 	bne	r2,zero,80170f8 <alt_find_file+0xb0>
 80170d8:	e0bffe17 	ldw	r2,-8(fp)
 80170dc:	e0ffff17 	ldw	r3,-4(fp)
 80170e0:	1885883a 	add	r2,r3,r2
 80170e4:	10800003 	ldbu	r2,0(r2)
 80170e8:	10803fcc 	andi	r2,r2,255
 80170ec:	1080201c 	xori	r2,r2,128
 80170f0:	10bfe004 	addi	r2,r2,-128
 80170f4:	10000a1e 	bne	r2,zero,8017120 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 80170f8:	e0bffd17 	ldw	r2,-12(fp)
 80170fc:	10800217 	ldw	r2,8(r2)
 8017100:	e0fffe17 	ldw	r3,-8(fp)
 8017104:	180d883a 	mov	r6,r3
 8017108:	e17fff17 	ldw	r5,-4(fp)
 801710c:	1009883a 	mov	r4,r2
 8017110:	80172fc0 	call	80172fc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8017114:	1000021e 	bne	r2,zero,8017120 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 8017118:	e0bffd17 	ldw	r2,-12(fp)
 801711c:	00000706 	br	801713c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 8017120:	e0bffd17 	ldw	r2,-12(fp)
 8017124:	10800017 	ldw	r2,0(r2)
 8017128:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 801712c:	e0fffd17 	ldw	r3,-12(fp)
 8017130:	d0a00904 	addi	r2,gp,-32732
 8017134:	18bfcc1e 	bne	r3,r2,8017068 <__alt_data_end+0xfc017068>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 8017138:	0005883a 	mov	r2,zero
}
 801713c:	e037883a 	mov	sp,fp
 8017140:	dfc00117 	ldw	ra,4(sp)
 8017144:	df000017 	ldw	fp,0(sp)
 8017148:	dec00204 	addi	sp,sp,8
 801714c:	f800283a 	ret

08017150 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8017150:	defffa04 	addi	sp,sp,-24
 8017154:	dfc00515 	stw	ra,20(sp)
 8017158:	df000415 	stw	fp,16(sp)
 801715c:	dc000315 	stw	r16,12(sp)
 8017160:	df000404 	addi	fp,sp,16
 8017164:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 8017168:	00bffa04 	movi	r2,-24
 801716c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8017170:	e03ffc15 	stw	zero,-16(fp)
 8017174:	00001d06 	br	80171ec <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 8017178:	040200b4 	movhi	r16,2050
 801717c:	8422b304 	addi	r16,r16,-30004
 8017180:	e0bffc17 	ldw	r2,-16(fp)
 8017184:	01400304 	movi	r5,12
 8017188:	1009883a 	mov	r4,r2
 801718c:	8001b580 	call	8001b58 <__mulsi3>
 8017190:	8085883a 	add	r2,r16,r2
 8017194:	10800017 	ldw	r2,0(r2)
 8017198:	1000111e 	bne	r2,zero,80171e0 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 801719c:	040200b4 	movhi	r16,2050
 80171a0:	8422b304 	addi	r16,r16,-30004
 80171a4:	e0bffc17 	ldw	r2,-16(fp)
 80171a8:	01400304 	movi	r5,12
 80171ac:	1009883a 	mov	r4,r2
 80171b0:	8001b580 	call	8001b58 <__mulsi3>
 80171b4:	8085883a 	add	r2,r16,r2
 80171b8:	e0fffe17 	ldw	r3,-8(fp)
 80171bc:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 80171c0:	d0e00d17 	ldw	r3,-32716(gp)
 80171c4:	e0bffc17 	ldw	r2,-16(fp)
 80171c8:	1880020e 	bge	r3,r2,80171d4 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 80171cc:	e0bffc17 	ldw	r2,-16(fp)
 80171d0:	d0a00d15 	stw	r2,-32716(gp)
      }
      rc = i;
 80171d4:	e0bffc17 	ldw	r2,-16(fp)
 80171d8:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 80171dc:	00000606 	br	80171f8 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 80171e0:	e0bffc17 	ldw	r2,-16(fp)
 80171e4:	10800044 	addi	r2,r2,1
 80171e8:	e0bffc15 	stw	r2,-16(fp)
 80171ec:	e0bffc17 	ldw	r2,-16(fp)
 80171f0:	10800810 	cmplti	r2,r2,32
 80171f4:	103fe01e 	bne	r2,zero,8017178 <__alt_data_end+0xfc017178>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 80171f8:	e0bffd17 	ldw	r2,-12(fp)
}
 80171fc:	e6ffff04 	addi	sp,fp,-4
 8017200:	dfc00217 	ldw	ra,8(sp)
 8017204:	df000117 	ldw	fp,4(sp)
 8017208:	dc000017 	ldw	r16,0(sp)
 801720c:	dec00304 	addi	sp,sp,12
 8017210:	f800283a 	ret

08017214 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 8017214:	defffe04 	addi	sp,sp,-8
 8017218:	df000115 	stw	fp,4(sp)
 801721c:	df000104 	addi	fp,sp,4
 8017220:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 8017224:	e0bfff17 	ldw	r2,-4(fp)
 8017228:	10bffe84 	addi	r2,r2,-6
 801722c:	10c00428 	cmpgeui	r3,r2,16
 8017230:	18001a1e 	bne	r3,zero,801729c <alt_exception_cause_generated_bad_addr+0x88>
 8017234:	100690ba 	slli	r3,r2,2
 8017238:	00820074 	movhi	r2,2049
 801723c:	109c9304 	addi	r2,r2,29260
 8017240:	1885883a 	add	r2,r3,r2
 8017244:	10800017 	ldw	r2,0(r2)
 8017248:	1000683a 	jmp	r2
 801724c:	0801728c 	andi	zero,at,1482
 8017250:	0801728c 	andi	zero,at,1482
 8017254:	0801729c 	xori	zero,at,1482
 8017258:	0801729c 	xori	zero,at,1482
 801725c:	0801729c 	xori	zero,at,1482
 8017260:	0801728c 	andi	zero,at,1482
 8017264:	08017294 	ori	zero,at,1482
 8017268:	0801729c 	xori	zero,at,1482
 801726c:	0801728c 	andi	zero,at,1482
 8017270:	0801728c 	andi	zero,at,1482
 8017274:	0801729c 	xori	zero,at,1482
 8017278:	0801728c 	andi	zero,at,1482
 801727c:	08017294 	ori	zero,at,1482
 8017280:	0801729c 	xori	zero,at,1482
 8017284:	0801729c 	xori	zero,at,1482
 8017288:	0801728c 	andi	zero,at,1482
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 801728c:	00800044 	movi	r2,1
 8017290:	00000306 	br	80172a0 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 8017294:	0005883a 	mov	r2,zero
 8017298:	00000106 	br	80172a0 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 801729c:	0005883a 	mov	r2,zero
  }
}
 80172a0:	e037883a 	mov	sp,fp
 80172a4:	df000017 	ldw	fp,0(sp)
 80172a8:	dec00104 	addi	sp,sp,4
 80172ac:	f800283a 	ret

080172b0 <atexit>:
 80172b0:	200b883a 	mov	r5,r4
 80172b4:	000f883a 	mov	r7,zero
 80172b8:	000d883a 	mov	r6,zero
 80172bc:	0009883a 	mov	r4,zero
 80172c0:	80174e01 	jmpi	80174e0 <__register_exitproc>

080172c4 <exit>:
 80172c4:	defffe04 	addi	sp,sp,-8
 80172c8:	000b883a 	mov	r5,zero
 80172cc:	dc000015 	stw	r16,0(sp)
 80172d0:	dfc00115 	stw	ra,4(sp)
 80172d4:	2021883a 	mov	r16,r4
 80172d8:	80175f80 	call	80175f8 <__call_exitprocs>
 80172dc:	008200b4 	movhi	r2,2050
 80172e0:	10a73c04 	addi	r2,r2,-25360
 80172e4:	11000017 	ldw	r4,0(r2)
 80172e8:	20800f17 	ldw	r2,60(r4)
 80172ec:	10000126 	beq	r2,zero,80172f4 <exit+0x30>
 80172f0:	103ee83a 	callr	r2
 80172f4:	8009883a 	mov	r4,r16
 80172f8:	80177780 	call	8017778 <_exit>

080172fc <memcmp>:
 80172fc:	01c000c4 	movi	r7,3
 8017300:	3980192e 	bgeu	r7,r6,8017368 <memcmp+0x6c>
 8017304:	2144b03a 	or	r2,r4,r5
 8017308:	11c4703a 	and	r2,r2,r7
 801730c:	10000f26 	beq	r2,zero,801734c <memcmp+0x50>
 8017310:	20800003 	ldbu	r2,0(r4)
 8017314:	28c00003 	ldbu	r3,0(r5)
 8017318:	10c0151e 	bne	r2,r3,8017370 <memcmp+0x74>
 801731c:	31bfff84 	addi	r6,r6,-2
 8017320:	01ffffc4 	movi	r7,-1
 8017324:	00000406 	br	8017338 <memcmp+0x3c>
 8017328:	20800003 	ldbu	r2,0(r4)
 801732c:	28c00003 	ldbu	r3,0(r5)
 8017330:	31bfffc4 	addi	r6,r6,-1
 8017334:	10c00e1e 	bne	r2,r3,8017370 <memcmp+0x74>
 8017338:	21000044 	addi	r4,r4,1
 801733c:	29400044 	addi	r5,r5,1
 8017340:	31fff91e 	bne	r6,r7,8017328 <__alt_data_end+0xfc017328>
 8017344:	0005883a 	mov	r2,zero
 8017348:	f800283a 	ret
 801734c:	20c00017 	ldw	r3,0(r4)
 8017350:	28800017 	ldw	r2,0(r5)
 8017354:	18bfee1e 	bne	r3,r2,8017310 <__alt_data_end+0xfc017310>
 8017358:	31bfff04 	addi	r6,r6,-4
 801735c:	21000104 	addi	r4,r4,4
 8017360:	29400104 	addi	r5,r5,4
 8017364:	39bff936 	bltu	r7,r6,801734c <__alt_data_end+0xfc01734c>
 8017368:	303fe91e 	bne	r6,zero,8017310 <__alt_data_end+0xfc017310>
 801736c:	003ff506 	br	8017344 <__alt_data_end+0xfc017344>
 8017370:	10c5c83a 	sub	r2,r2,r3
 8017374:	f800283a 	ret

08017378 <_putc_r>:
 8017378:	defffc04 	addi	sp,sp,-16
 801737c:	dc000215 	stw	r16,8(sp)
 8017380:	dfc00315 	stw	ra,12(sp)
 8017384:	2021883a 	mov	r16,r4
 8017388:	20000226 	beq	r4,zero,8017394 <_putc_r+0x1c>
 801738c:	20800e17 	ldw	r2,56(r4)
 8017390:	10001b26 	beq	r2,zero,8017400 <_putc_r+0x88>
 8017394:	30800217 	ldw	r2,8(r6)
 8017398:	10bfffc4 	addi	r2,r2,-1
 801739c:	30800215 	stw	r2,8(r6)
 80173a0:	10000a16 	blt	r2,zero,80173cc <_putc_r+0x54>
 80173a4:	30800017 	ldw	r2,0(r6)
 80173a8:	11400005 	stb	r5,0(r2)
 80173ac:	30800017 	ldw	r2,0(r6)
 80173b0:	10c00044 	addi	r3,r2,1
 80173b4:	30c00015 	stw	r3,0(r6)
 80173b8:	10800003 	ldbu	r2,0(r2)
 80173bc:	dfc00317 	ldw	ra,12(sp)
 80173c0:	dc000217 	ldw	r16,8(sp)
 80173c4:	dec00404 	addi	sp,sp,16
 80173c8:	f800283a 	ret
 80173cc:	30c00617 	ldw	r3,24(r6)
 80173d0:	10c00616 	blt	r2,r3,80173ec <_putc_r+0x74>
 80173d4:	30800017 	ldw	r2,0(r6)
 80173d8:	00c00284 	movi	r3,10
 80173dc:	11400005 	stb	r5,0(r2)
 80173e0:	30800017 	ldw	r2,0(r6)
 80173e4:	11400003 	ldbu	r5,0(r2)
 80173e8:	28fff11e 	bne	r5,r3,80173b0 <__alt_data_end+0xfc0173b0>
 80173ec:	8009883a 	mov	r4,r16
 80173f0:	dfc00317 	ldw	ra,12(sp)
 80173f4:	dc000217 	ldw	r16,8(sp)
 80173f8:	dec00404 	addi	sp,sp,16
 80173fc:	800f6401 	jmpi	800f640 <__swbuf_r>
 8017400:	d9400015 	stw	r5,0(sp)
 8017404:	d9800115 	stw	r6,4(sp)
 8017408:	80090a80 	call	80090a8 <__sinit>
 801740c:	d9800117 	ldw	r6,4(sp)
 8017410:	d9400017 	ldw	r5,0(sp)
 8017414:	003fdf06 	br	8017394 <__alt_data_end+0xfc017394>

08017418 <putc>:
 8017418:	008200b4 	movhi	r2,2050
 801741c:	defffc04 	addi	sp,sp,-16
 8017420:	10a73d04 	addi	r2,r2,-25356
 8017424:	dc000115 	stw	r16,4(sp)
 8017428:	14000017 	ldw	r16,0(r2)
 801742c:	dc400215 	stw	r17,8(sp)
 8017430:	dfc00315 	stw	ra,12(sp)
 8017434:	2023883a 	mov	r17,r4
 8017438:	80000226 	beq	r16,zero,8017444 <putc+0x2c>
 801743c:	80800e17 	ldw	r2,56(r16)
 8017440:	10001a26 	beq	r2,zero,80174ac <putc+0x94>
 8017444:	28800217 	ldw	r2,8(r5)
 8017448:	10bfffc4 	addi	r2,r2,-1
 801744c:	28800215 	stw	r2,8(r5)
 8017450:	10000b16 	blt	r2,zero,8017480 <putc+0x68>
 8017454:	28800017 	ldw	r2,0(r5)
 8017458:	14400005 	stb	r17,0(r2)
 801745c:	28800017 	ldw	r2,0(r5)
 8017460:	10c00044 	addi	r3,r2,1
 8017464:	28c00015 	stw	r3,0(r5)
 8017468:	10800003 	ldbu	r2,0(r2)
 801746c:	dfc00317 	ldw	ra,12(sp)
 8017470:	dc400217 	ldw	r17,8(sp)
 8017474:	dc000117 	ldw	r16,4(sp)
 8017478:	dec00404 	addi	sp,sp,16
 801747c:	f800283a 	ret
 8017480:	28c00617 	ldw	r3,24(r5)
 8017484:	10c00e16 	blt	r2,r3,80174c0 <putc+0xa8>
 8017488:	28800017 	ldw	r2,0(r5)
 801748c:	01000284 	movi	r4,10
 8017490:	14400005 	stb	r17,0(r2)
 8017494:	28800017 	ldw	r2,0(r5)
 8017498:	10c00003 	ldbu	r3,0(r2)
 801749c:	193ff01e 	bne	r3,r4,8017460 <__alt_data_end+0xfc017460>
 80174a0:	280d883a 	mov	r6,r5
 80174a4:	180b883a 	mov	r5,r3
 80174a8:	00000706 	br	80174c8 <putc+0xb0>
 80174ac:	8009883a 	mov	r4,r16
 80174b0:	d9400015 	stw	r5,0(sp)
 80174b4:	80090a80 	call	80090a8 <__sinit>
 80174b8:	d9400017 	ldw	r5,0(sp)
 80174bc:	003fe106 	br	8017444 <__alt_data_end+0xfc017444>
 80174c0:	280d883a 	mov	r6,r5
 80174c4:	880b883a 	mov	r5,r17
 80174c8:	8009883a 	mov	r4,r16
 80174cc:	dfc00317 	ldw	ra,12(sp)
 80174d0:	dc400217 	ldw	r17,8(sp)
 80174d4:	dc000117 	ldw	r16,4(sp)
 80174d8:	dec00404 	addi	sp,sp,16
 80174dc:	800f6401 	jmpi	800f640 <__swbuf_r>

080174e0 <__register_exitproc>:
 80174e0:	defffa04 	addi	sp,sp,-24
 80174e4:	dc000315 	stw	r16,12(sp)
 80174e8:	040200b4 	movhi	r16,2050
 80174ec:	84273c04 	addi	r16,r16,-25360
 80174f0:	80c00017 	ldw	r3,0(r16)
 80174f4:	dc400415 	stw	r17,16(sp)
 80174f8:	dfc00515 	stw	ra,20(sp)
 80174fc:	18805217 	ldw	r2,328(r3)
 8017500:	2023883a 	mov	r17,r4
 8017504:	10003726 	beq	r2,zero,80175e4 <__register_exitproc+0x104>
 8017508:	10c00117 	ldw	r3,4(r2)
 801750c:	010007c4 	movi	r4,31
 8017510:	20c00e16 	blt	r4,r3,801754c <__register_exitproc+0x6c>
 8017514:	1a000044 	addi	r8,r3,1
 8017518:	8800221e 	bne	r17,zero,80175a4 <__register_exitproc+0xc4>
 801751c:	18c00084 	addi	r3,r3,2
 8017520:	18c7883a 	add	r3,r3,r3
 8017524:	18c7883a 	add	r3,r3,r3
 8017528:	12000115 	stw	r8,4(r2)
 801752c:	10c7883a 	add	r3,r2,r3
 8017530:	19400015 	stw	r5,0(r3)
 8017534:	0005883a 	mov	r2,zero
 8017538:	dfc00517 	ldw	ra,20(sp)
 801753c:	dc400417 	ldw	r17,16(sp)
 8017540:	dc000317 	ldw	r16,12(sp)
 8017544:	dec00604 	addi	sp,sp,24
 8017548:	f800283a 	ret
 801754c:	00800034 	movhi	r2,0
 8017550:	10800004 	addi	r2,r2,0
 8017554:	10002626 	beq	r2,zero,80175f0 <__register_exitproc+0x110>
 8017558:	01006404 	movi	r4,400
 801755c:	d9400015 	stw	r5,0(sp)
 8017560:	d9800115 	stw	r6,4(sp)
 8017564:	d9c00215 	stw	r7,8(sp)
 8017568:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 801756c:	d9400017 	ldw	r5,0(sp)
 8017570:	d9800117 	ldw	r6,4(sp)
 8017574:	d9c00217 	ldw	r7,8(sp)
 8017578:	10001d26 	beq	r2,zero,80175f0 <__register_exitproc+0x110>
 801757c:	81000017 	ldw	r4,0(r16)
 8017580:	10000115 	stw	zero,4(r2)
 8017584:	02000044 	movi	r8,1
 8017588:	22405217 	ldw	r9,328(r4)
 801758c:	0007883a 	mov	r3,zero
 8017590:	12400015 	stw	r9,0(r2)
 8017594:	20805215 	stw	r2,328(r4)
 8017598:	10006215 	stw	zero,392(r2)
 801759c:	10006315 	stw	zero,396(r2)
 80175a0:	883fde26 	beq	r17,zero,801751c <__alt_data_end+0xfc01751c>
 80175a4:	18c9883a 	add	r4,r3,r3
 80175a8:	2109883a 	add	r4,r4,r4
 80175ac:	1109883a 	add	r4,r2,r4
 80175b0:	21802215 	stw	r6,136(r4)
 80175b4:	01800044 	movi	r6,1
 80175b8:	12406217 	ldw	r9,392(r2)
 80175bc:	30cc983a 	sll	r6,r6,r3
 80175c0:	4992b03a 	or	r9,r9,r6
 80175c4:	12406215 	stw	r9,392(r2)
 80175c8:	21c04215 	stw	r7,264(r4)
 80175cc:	01000084 	movi	r4,2
 80175d0:	893fd21e 	bne	r17,r4,801751c <__alt_data_end+0xfc01751c>
 80175d4:	11006317 	ldw	r4,396(r2)
 80175d8:	218cb03a 	or	r6,r4,r6
 80175dc:	11806315 	stw	r6,396(r2)
 80175e0:	003fce06 	br	801751c <__alt_data_end+0xfc01751c>
 80175e4:	18805304 	addi	r2,r3,332
 80175e8:	18805215 	stw	r2,328(r3)
 80175ec:	003fc606 	br	8017508 <__alt_data_end+0xfc017508>
 80175f0:	00bfffc4 	movi	r2,-1
 80175f4:	003fd006 	br	8017538 <__alt_data_end+0xfc017538>

080175f8 <__call_exitprocs>:
 80175f8:	defff504 	addi	sp,sp,-44
 80175fc:	df000915 	stw	fp,36(sp)
 8017600:	dd400615 	stw	r21,24(sp)
 8017604:	dc800315 	stw	r18,12(sp)
 8017608:	dfc00a15 	stw	ra,40(sp)
 801760c:	ddc00815 	stw	r23,32(sp)
 8017610:	dd800715 	stw	r22,28(sp)
 8017614:	dd000515 	stw	r20,20(sp)
 8017618:	dcc00415 	stw	r19,16(sp)
 801761c:	dc400215 	stw	r17,8(sp)
 8017620:	dc000115 	stw	r16,4(sp)
 8017624:	d9000015 	stw	r4,0(sp)
 8017628:	2839883a 	mov	fp,r5
 801762c:	04800044 	movi	r18,1
 8017630:	057fffc4 	movi	r21,-1
 8017634:	008200b4 	movhi	r2,2050
 8017638:	10a73c04 	addi	r2,r2,-25360
 801763c:	12000017 	ldw	r8,0(r2)
 8017640:	45005217 	ldw	r20,328(r8)
 8017644:	44c05204 	addi	r19,r8,328
 8017648:	a0001c26 	beq	r20,zero,80176bc <__call_exitprocs+0xc4>
 801764c:	a0800117 	ldw	r2,4(r20)
 8017650:	15ffffc4 	addi	r23,r2,-1
 8017654:	b8000d16 	blt	r23,zero,801768c <__call_exitprocs+0x94>
 8017658:	14000044 	addi	r16,r2,1
 801765c:	8421883a 	add	r16,r16,r16
 8017660:	8421883a 	add	r16,r16,r16
 8017664:	84402004 	addi	r17,r16,128
 8017668:	a463883a 	add	r17,r20,r17
 801766c:	a421883a 	add	r16,r20,r16
 8017670:	e0001e26 	beq	fp,zero,80176ec <__call_exitprocs+0xf4>
 8017674:	80804017 	ldw	r2,256(r16)
 8017678:	e0801c26 	beq	fp,r2,80176ec <__call_exitprocs+0xf4>
 801767c:	bdffffc4 	addi	r23,r23,-1
 8017680:	843fff04 	addi	r16,r16,-4
 8017684:	8c7fff04 	addi	r17,r17,-4
 8017688:	bd7ff91e 	bne	r23,r21,8017670 <__alt_data_end+0xfc017670>
 801768c:	00800034 	movhi	r2,0
 8017690:	10800004 	addi	r2,r2,0
 8017694:	10000926 	beq	r2,zero,80176bc <__call_exitprocs+0xc4>
 8017698:	a0800117 	ldw	r2,4(r20)
 801769c:	1000301e 	bne	r2,zero,8017760 <__call_exitprocs+0x168>
 80176a0:	a0800017 	ldw	r2,0(r20)
 80176a4:	10003226 	beq	r2,zero,8017770 <__call_exitprocs+0x178>
 80176a8:	a009883a 	mov	r4,r20
 80176ac:	98800015 	stw	r2,0(r19)
 80176b0:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 80176b4:	9d000017 	ldw	r20,0(r19)
 80176b8:	a03fe41e 	bne	r20,zero,801764c <__alt_data_end+0xfc01764c>
 80176bc:	dfc00a17 	ldw	ra,40(sp)
 80176c0:	df000917 	ldw	fp,36(sp)
 80176c4:	ddc00817 	ldw	r23,32(sp)
 80176c8:	dd800717 	ldw	r22,28(sp)
 80176cc:	dd400617 	ldw	r21,24(sp)
 80176d0:	dd000517 	ldw	r20,20(sp)
 80176d4:	dcc00417 	ldw	r19,16(sp)
 80176d8:	dc800317 	ldw	r18,12(sp)
 80176dc:	dc400217 	ldw	r17,8(sp)
 80176e0:	dc000117 	ldw	r16,4(sp)
 80176e4:	dec00b04 	addi	sp,sp,44
 80176e8:	f800283a 	ret
 80176ec:	a0800117 	ldw	r2,4(r20)
 80176f0:	80c00017 	ldw	r3,0(r16)
 80176f4:	10bfffc4 	addi	r2,r2,-1
 80176f8:	15c01426 	beq	r2,r23,801774c <__call_exitprocs+0x154>
 80176fc:	80000015 	stw	zero,0(r16)
 8017700:	183fde26 	beq	r3,zero,801767c <__alt_data_end+0xfc01767c>
 8017704:	95c8983a 	sll	r4,r18,r23
 8017708:	a0806217 	ldw	r2,392(r20)
 801770c:	a5800117 	ldw	r22,4(r20)
 8017710:	2084703a 	and	r2,r4,r2
 8017714:	10000b26 	beq	r2,zero,8017744 <__call_exitprocs+0x14c>
 8017718:	a0806317 	ldw	r2,396(r20)
 801771c:	2088703a 	and	r4,r4,r2
 8017720:	20000c1e 	bne	r4,zero,8017754 <__call_exitprocs+0x15c>
 8017724:	89400017 	ldw	r5,0(r17)
 8017728:	d9000017 	ldw	r4,0(sp)
 801772c:	183ee83a 	callr	r3
 8017730:	a0800117 	ldw	r2,4(r20)
 8017734:	15bfbf1e 	bne	r2,r22,8017634 <__alt_data_end+0xfc017634>
 8017738:	98800017 	ldw	r2,0(r19)
 801773c:	153fcf26 	beq	r2,r20,801767c <__alt_data_end+0xfc01767c>
 8017740:	003fbc06 	br	8017634 <__alt_data_end+0xfc017634>
 8017744:	183ee83a 	callr	r3
 8017748:	003ff906 	br	8017730 <__alt_data_end+0xfc017730>
 801774c:	a5c00115 	stw	r23,4(r20)
 8017750:	003feb06 	br	8017700 <__alt_data_end+0xfc017700>
 8017754:	89000017 	ldw	r4,0(r17)
 8017758:	183ee83a 	callr	r3
 801775c:	003ff406 	br	8017730 <__alt_data_end+0xfc017730>
 8017760:	a0800017 	ldw	r2,0(r20)
 8017764:	a027883a 	mov	r19,r20
 8017768:	1029883a 	mov	r20,r2
 801776c:	003fb606 	br	8017648 <__alt_data_end+0xfc017648>
 8017770:	0005883a 	mov	r2,zero
 8017774:	003ffb06 	br	8017764 <__alt_data_end+0xfc017764>

08017778 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 8017778:	defffd04 	addi	sp,sp,-12
 801777c:	df000215 	stw	fp,8(sp)
 8017780:	df000204 	addi	fp,sp,8
 8017784:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 8017788:	0001883a 	nop
 801778c:	e0bfff17 	ldw	r2,-4(fp)
 8017790:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 8017794:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8017798:	10000226 	beq	r2,zero,80177a4 <_exit+0x2c>
    ALT_SIM_FAIL();
 801779c:	002af070 	cmpltui	zero,zero,43969
 80177a0:	00000106 	br	80177a8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 80177a4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 80177a8:	003fff06 	br	80177a8 <__alt_data_end+0xfc0177a8>
