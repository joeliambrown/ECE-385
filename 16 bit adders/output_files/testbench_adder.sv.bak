module testbench_adder();

timeunit 10ns;	// Half clock cycle at 50 MHz
			// This is the amount of time represented by #1 
timeprecision 1ns;

logic Clk, Reset_Clear, Run_Accumulate;
logic [9:0] SW,
logic [9:0] LED,
logic [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5;
										 

//logic  [7:0] A, SWADD;
//logic       M, cin;
//logic [7:0] SA;
//logic     SX, cout;

// To store expected results
logic [3:0] ans_1a, ans_2b;
				
// A counter to count the instances where simulation results
// do no match with expected results
integer ErrorCnt = 0;
		
// Instantiating the DUT
// Make sure the module and signal names match with those in your design
multiplier multiplier0(.*);	
//ripple_adder_9 adder0(.*);

// Toggle the clock
// #1 means wait for a delay of 1 timeunit
always begin : CLOCK_GENERATION
#1 Clk = ~Clk;
end

initial begin: CLOCK_INITIALIZATION
    Clk = 0;
end 

//Testing begins here. Everything within initial block happens sequentially.
initial begin: TEST_VECTORS
Reset = 0;
Reset_Load_Clear = 0;
Run = 0;
//A = 0;
//SWADD = 0;
//M = 0;
//cin = 0;
#2 Reset=1;

//(7*59)
	SW = 8'b00000111;

#2 Reset_Load_Clear = 1;
#2 Reset_Load_Clear = 0;
	SW = 8'b00111011;
#6 Reset=0;
#2 Run= 1;
#2 Run=0;


if (ErrorCnt == 0)
	$display("Success!");  // Command line output in ModelSim
else
	$display("%d error(s) detected. Try again!", ErrorCnt);
end


endmodule 